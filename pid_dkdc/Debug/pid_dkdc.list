
pid_dkdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  08010cb0  08010cb0  00020cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801156c  0801156c  00030310  2**0
                  CONTENTS
  4 .ARM          00000008  0801156c  0801156c  0002156c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011574  08011574  00030310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011574  08011574  00021574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801157c  0801157c  0002157c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  08011580  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030310  2**0
                  CONTENTS
 10 .bss          000010f8  20000310  20000310  00030310  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001408  20001408  00030310  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030340  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c637  00000000  00000000  00030383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034b5  00000000  00000000  0004c9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015e8  00000000  00000000  0004fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001136  00000000  00000000  00051458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000240b3  00000000  00000000  0005258e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019fe6  00000000  00000000  00076641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8dcc  00000000  00000000  00090627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007260  00000000  00000000  001693f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00170654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000310 	.word	0x20000310
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010c94 	.word	0x08010c94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000314 	.word	0x20000314
 80001cc:	08010c94 	.word	0x08010c94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	0a5a      	lsrs	r2, r3, #9
 8000f54:	490f      	ldr	r1, [pc, #60]	; (8000f94 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f56:	fba1 1202 	umull	r1, r2, r1, r2
 8000f5a:	09d2      	lsrs	r2, r2, #7
 8000f5c:	490e      	ldr	r1, [pc, #56]	; (8000f98 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000f5e:	fb01 f202 	mul.w	r2, r1, r2
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	0a5b      	lsrs	r3, r3, #9
 8000f6c:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	09db      	lsrs	r3, r3, #7
 8000f74:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	441a      	add	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	00044b83 	.word	0x00044b83
 8000f98:	3b9aca00 	.word	0x3b9aca00

08000f9c <set_last_read_angle_data>:
float         last_gyro_x_angle;  // Store the gyro angles to compare drift
float         last_gyro_y_angle;
float         last_gyro_z_angle;
float         angle_z;

void set_last_read_angle_data(unsigned long time, float x, float y, float z, float x_gyro, float y_gyro, float z_gyro) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	61f8      	str	r0, [r7, #28]
 8000fa4:	ed87 0a06 	vstr	s0, [r7, #24]
 8000fa8:	edc7 0a05 	vstr	s1, [r7, #20]
 8000fac:	ed87 1a04 	vstr	s2, [r7, #16]
 8000fb0:	edc7 1a03 	vstr	s3, [r7, #12]
 8000fb4:	ed87 2a02 	vstr	s4, [r7, #8]
 8000fb8:	edc7 2a01 	vstr	s5, [r7, #4]
  last_read_time = time;
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <set_last_read_angle_data+0x58>)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	6013      	str	r3, [r2, #0]
  last_x_angle = x;
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <set_last_read_angle_data+0x5c>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6013      	str	r3, [r2, #0]
  last_y_angle = y;
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <set_last_read_angle_data+0x60>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	6013      	str	r3, [r2, #0]
  last_z_angle = z;
 8000fce:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <set_last_read_angle_data+0x64>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6013      	str	r3, [r2, #0]
  last_gyro_x_angle = x_gyro;
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <set_last_read_angle_data+0x68>)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6013      	str	r3, [r2, #0]
  last_gyro_y_angle = y_gyro;
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <set_last_read_angle_data+0x6c>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	6013      	str	r3, [r2, #0]
  last_gyro_z_angle = z_gyro;
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	; (800100c <set_last_read_angle_data+0x70>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000348 	.word	0x20000348
 8000ff8:	2000034c 	.word	0x2000034c
 8000ffc:	20000350 	.word	0x20000350
 8001000:	20000354 	.word	0x20000354
 8001004:	20000358 	.word	0x20000358
 8001008:	2000035c 	.word	0x2000035c
 800100c:	20000360 	.word	0x20000360

08001010 <get_last_time>:

unsigned long get_last_time() {return last_read_time;}
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <get_last_time+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000348 	.word	0x20000348

08001028 <get_last_x_angle>:
float get_last_x_angle() {return last_x_angle;}
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <get_last_x_angle+0x18>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	2000034c 	.word	0x2000034c

08001044 <get_last_y_angle>:
float get_last_y_angle() {return last_y_angle;}
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <get_last_y_angle+0x18>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000350 	.word	0x20000350

08001060 <get_last_z_angle>:
float get_last_z_angle() {return last_z_angle;}
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <get_last_z_angle+0x18>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eeb0 0a67 	vmov.f32	s0, s15
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000354 	.word	0x20000354

0800107c <get_last_gyro_x_angle>:
float get_last_gyro_x_angle() {return last_gyro_x_angle;}
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <get_last_gyro_x_angle+0x18>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	20000358 	.word	0x20000358

08001098 <get_last_gyro_y_angle>:
float get_last_gyro_y_angle() {return last_gyro_y_angle;}
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <get_last_gyro_y_angle+0x18>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb0 0a67 	vmov.f32	s0, s15
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	2000035c 	.word	0x2000035c

080010b4 <get_last_gyro_z_angle>:
float get_last_gyro_z_angle() {return last_gyro_z_angle;}
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <get_last_gyro_z_angle+0x18>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	20000360 	.word	0x20000360

080010d0 <get_mpudata_average>:
float    base_y_accel = 0;
float    base_z_accel = 0;

 float gyro_angle_z=0;

 void get_mpudata_average() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

   int read_count = 20;
 80010d6:	2314      	movs	r3, #20
 80010d8:	603b      	str	r3, [r7, #0]
   // Discard the first reading (don't know if this is needed or
   // not, however, it won't hurt.)
   // Read and average the raw values
   for (int i = 0; i < read_count; i++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	e05f      	b.n	80011a0 <get_mpudata_average+0xd0>
     TM_MPU6050_ReadAll(&MPU6050_Sensor);
 80010e0:	485a      	ldr	r0, [pc, #360]	; (800124c <get_mpudata_average+0x17c>)
 80010e2:	f00b ff6b 	bl	800cfbc <TM_MPU6050_ReadAll>
     base_x_gyro += MPU6050_Sensor.Gyroscope_X;
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <get_mpudata_average+0x17c>)
 80010e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f4:	4b56      	ldr	r3, [pc, #344]	; (8001250 <get_mpudata_average+0x180>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	4b54      	ldr	r3, [pc, #336]	; (8001250 <get_mpudata_average+0x180>)
 8001100:	edc3 7a00 	vstr	s15, [r3]
     base_y_gyro += MPU6050_Sensor.Gyroscope_Y;
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <get_mpudata_average+0x17c>)
 8001106:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001112:	4b50      	ldr	r3, [pc, #320]	; (8001254 <get_mpudata_average+0x184>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111c:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <get_mpudata_average+0x184>)
 800111e:	edc3 7a00 	vstr	s15, [r3]
     base_z_gyro += MPU6050_Sensor.Gyroscope_Z;
 8001122:	4b4a      	ldr	r3, [pc, #296]	; (800124c <get_mpudata_average+0x17c>)
 8001124:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <get_mpudata_average+0x188>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <get_mpudata_average+0x188>)
 800113c:	edc3 7a00 	vstr	s15, [r3]
     base_x_accel +=  MPU6050_Sensor.Accelerometer_X;
 8001140:	4b42      	ldr	r3, [pc, #264]	; (800124c <get_mpudata_average+0x17c>)
 8001142:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114e:	4b43      	ldr	r3, [pc, #268]	; (800125c <get_mpudata_average+0x18c>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001158:	4b40      	ldr	r3, [pc, #256]	; (800125c <get_mpudata_average+0x18c>)
 800115a:	edc3 7a00 	vstr	s15, [r3]
     base_y_accel +=  MPU6050_Sensor.Accelerometer_Y;
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <get_mpudata_average+0x17c>)
 8001160:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116c:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <get_mpudata_average+0x190>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <get_mpudata_average+0x190>)
 8001178:	edc3 7a00 	vstr	s15, [r3]
     base_z_accel +=  MPU6050_Sensor.Accelerometer_Z;
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <get_mpudata_average+0x17c>)
 800117e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <get_mpudata_average+0x194>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <get_mpudata_average+0x194>)
 8001196:	edc3 7a00 	vstr	s15, [r3]
   for (int i = 0; i < read_count; i++) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3301      	adds	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	db9b      	blt.n	80010e0 <get_mpudata_average+0x10>
   }

     base_x_gyro /= read_count;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <get_mpudata_average+0x180>)
 80011aa:	edd3 6a00 	vldr	s13, [r3]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <get_mpudata_average+0x180>)
 80011be:	edc3 7a00 	vstr	s15, [r3]
     base_y_gyro /= read_count;
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <get_mpudata_average+0x184>)
 80011c4:	edd3 6a00 	vldr	s13, [r3]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <get_mpudata_average+0x184>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
     base_z_gyro /= read_count;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <get_mpudata_average+0x188>)
 80011de:	edd3 6a00 	vldr	s13, [r3]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <get_mpudata_average+0x188>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
     base_x_accel /= read_count;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <get_mpudata_average+0x18c>)
 80011f8:	edd3 6a00 	vldr	s13, [r3]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <get_mpudata_average+0x18c>)
 800120c:	edc3 7a00 	vstr	s15, [r3]
     base_y_accel /= read_count;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <get_mpudata_average+0x190>)
 8001212:	edd3 6a00 	vldr	s13, [r3]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <get_mpudata_average+0x190>)
 8001226:	edc3 7a00 	vstr	s15, [r3]
     base_z_accel /= read_count;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <get_mpudata_average+0x194>)
 800122c:	edd3 6a00 	vldr	s13, [r3]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <get_mpudata_average+0x194>)
 8001240:	edc3 7a00 	vstr	s15, [r3]
 }
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000032c 	.word	0x2000032c
 8001250:	20000368 	.word	0x20000368
 8001254:	2000036c 	.word	0x2000036c
 8001258:	20000370 	.word	0x20000370
 800125c:	20000374 	.word	0x20000374
 8001260:	20000378 	.word	0x20000378
 8001264:	2000037c 	.word	0x2000037c

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f006 f9fa 	bl	8007664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f858 	bl	8001324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f000 fac8 	bl	8001808 <MX_GPIO_Init>
  MX_DMA_Init();
 8001278:	f000 fa9e 	bl	80017b8 <MX_DMA_Init>
  MX_TIM1_Init();
 800127c:	f000 f8ea 	bl	8001454 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001280:	f000 f940 	bl	8001504 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001284:	f000 f98c 	bl	80015a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001288:	f000 f9ee 	bl	8001668 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 800128c:	f000 fa6a 	bl	8001764 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001290:	f000 f8b2 	bl	80013f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001294:	f000 fa3c 	bl	8001710 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_TIM_Base_Start_IT(&htim2);
 8001298:	481b      	ldr	r0, [pc, #108]	; (8001308 <main+0xa0>)
 800129a:	f008 ff79 	bl	800a190 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800129e:	2104      	movs	r1, #4
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <main+0xa4>)
 80012a2:	f009 f9a3 	bl	800a5ec <HAL_TIM_Encoder_Start>
   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80012a6:	2104      	movs	r1, #4
 80012a8:	4819      	ldr	r0, [pc, #100]	; (8001310 <main+0xa8>)
 80012aa:	f009 f99f 	bl	800a5ec <HAL_TIM_Encoder_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012ae:	2100      	movs	r1, #0
 80012b0:	4818      	ldr	r0, [pc, #96]	; (8001314 <main+0xac>)
 80012b2:	f009 f82d 	bl	800a310 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012b6:	2104      	movs	r1, #4
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <main+0xac>)
 80012ba:	f009 f829 	bl	800a310 <HAL_TIM_PWM_Start>

   setup();
 80012be:	f004 ff83 	bl	80061c8 <setup>
   while(TM_MPU6050_Init(&MPU6050_Sensor, TM_MPU6050_Device_0, TM_MPU6050_Accelerometer_8G, TM_MPU6050_Gyroscope_250s) != TM_MPU6050_Result_Ok)
 80012c2:	bf00      	nop
 80012c4:	2300      	movs	r3, #0
 80012c6:	2202      	movs	r2, #2
 80012c8:	2100      	movs	r1, #0
 80012ca:	4813      	ldr	r0, [pc, #76]	; (8001318 <main+0xb0>)
 80012cc:	f00b fd72 	bl	800cdb4 <TM_MPU6050_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f6      	bne.n	80012c4 <main+0x5c>

           //GYRO_FACTOR = 131.0;
        	 //const float RADIANS_TO_DEGREES = 57.2958; //180/3.14159


        	 get_mpudata_average();
 80012d6:	f7ff fefb 	bl	80010d0 <get_mpudata_average>

        	 set_last_read_angle_data(0, 0, 0, 0, 0, 0, 0);
 80012da:	eddf 2a10 	vldr	s5, [pc, #64]	; 800131c <main+0xb4>
 80012de:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 800131c <main+0xb4>
 80012e2:	eddf 1a0e 	vldr	s3, [pc, #56]	; 800131c <main+0xb4>
 80012e6:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800131c <main+0xb4>
 80012ea:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800131c <main+0xb4>
 80012ee:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800131c <main+0xb4>
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff fe52 	bl	8000f9c <set_last_read_angle_data>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
	  //	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80012f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <main+0xb8>)
 80012fe:	f007 f910 	bl	8008522 <HAL_GPIO_TogglePin>
	  	  loop();
 8001302:	f004 ff89 	bl	8006218 <loop>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001306:	e7f7      	b.n	80012f8 <main+0x90>
 8001308:	2000042c 	.word	0x2000042c
 800130c:	200003e4 	.word	0x200003e4
 8001310:	200004bc 	.word	0x200004bc
 8001314:	20000474 	.word	0x20000474
 8001318:	2000032c 	.word	0x2000032c
 800131c:	00000000 	.word	0x00000000
 8001320:	40020c00 	.word	0x40020c00

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b094      	sub	sp, #80	; 0x50
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	2230      	movs	r2, #48	; 0x30
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f00d fd55 	bl	800ede2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <SystemClock_Config+0xcc>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <SystemClock_Config+0xcc>)
 8001352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
 8001358:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <SystemClock_Config+0xcc>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <SystemClock_Config+0xd0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <SystemClock_Config+0xd0>)
 800136e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <SystemClock_Config+0xd0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001380:	2301      	movs	r3, #1
 8001382:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138a:	2302      	movs	r3, #2
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001394:	2308      	movs	r3, #8
 8001396:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001398:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800139c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800139e:	2304      	movs	r3, #4
 80013a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013a2:	2304      	movs	r3, #4
 80013a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	4618      	mov	r0, r3
 80013ac:	f008 fa08 	bl	80097c0 <HAL_RCC_OscConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013b6:	f001 f8cb 	bl	8002550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ba:	230f      	movs	r3, #15
 80013bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013be:	2302      	movs	r3, #2
 80013c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2102      	movs	r1, #2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f008 fc6a 	bl	8009cb0 <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013e2:	f001 f8b5 	bl	8002550 <Error_Handler>
  }
}
 80013e6:	bf00      	nop
 80013e8:	3750      	adds	r7, #80	; 0x50
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40007000 	.word	0x40007000

080013f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_I2C1_Init+0x50>)
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <MX_I2C1_Init+0x54>)
 8001400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_I2C1_Init+0x50>)
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_I2C1_Init+0x58>)
 8001406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_I2C1_Init+0x50>)
 8001416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_I2C1_Init+0x50>)
 8001436:	f007 f88f 	bl	8008558 <HAL_I2C_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001440:	f001 f886 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000390 	.word	0x20000390
 800144c:	40005400 	.word	0x40005400
 8001450:	00061a80 	.word	0x00061a80

08001454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	; 0x30
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2224      	movs	r2, #36	; 0x24
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f00d fcbd 	bl	800ede2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_TIM1_Init+0xa8>)
 8001472:	4a23      	ldr	r2, [pc, #140]	; (8001500 <MX_TIM1_Init+0xac>)
 8001474:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_TIM1_Init+0xa8>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_TIM1_Init+0xa8>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <MX_TIM1_Init+0xa8>)
 8001484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001488:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_TIM1_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_TIM1_Init+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_TIM1_Init+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800149c:	2303      	movs	r3, #3
 800149e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014a4:	2301      	movs	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014b4:	2301      	movs	r3, #1
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_TIM1_Init+0xa8>)
 80014c8:	f008 ffea 	bl	800a4a0 <HAL_TIM_Encoder_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014d2:	f001 f83d 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_TIM1_Init+0xa8>)
 80014e4:	f009 fece 	bl	800b284 <HAL_TIMEx_MasterConfigSynchronization>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014ee:	f001 f82f 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	3730      	adds	r7, #48	; 0x30
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200003e4 	.word	0x200003e4
 8001500:	40010000 	.word	0x40010000

08001504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <MX_TIM2_Init+0x98>)
 8001522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_TIM2_Init+0x98>)
 800152a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800152e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_TIM2_Init+0x98>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_TIM2_Init+0x98>)
 8001538:	f240 12f3 	movw	r2, #499	; 0x1f3
 800153c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_TIM2_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_TIM2_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800154a:	4814      	ldr	r0, [pc, #80]	; (800159c <MX_TIM2_Init+0x98>)
 800154c:	f008 fdd0 	bl	800a0f0 <HAL_TIM_Base_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001556:	f000 fffb 	bl	8002550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_TIM2_Init+0x98>)
 8001568:	f009 fa80 	bl	800aa6c <HAL_TIM_ConfigClockSource>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001572:	f000 ffed 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_TIM2_Init+0x98>)
 8001584:	f009 fe7e 	bl	800b284 <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800158e:	f000 ffdf 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000042c 	.word	0x2000042c

080015a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	615a      	str	r2, [r3, #20]
 80015c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <MX_TIM3_Init+0xc0>)
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <MX_TIM3_Init+0xc4>)
 80015c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <MX_TIM3_Init+0xc0>)
 80015ca:	2204      	movs	r2, #4
 80015cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <MX_TIM3_Init+0xc0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 839;
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <MX_TIM3_Init+0xc0>)
 80015d6:	f240 3247 	movw	r2, #839	; 0x347
 80015da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_TIM3_Init+0xc0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_TIM3_Init+0xc0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015e8:	481d      	ldr	r0, [pc, #116]	; (8001660 <MX_TIM3_Init+0xc0>)
 80015ea:	f008 fe41 	bl	800a270 <HAL_TIM_PWM_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80015f4:	f000 ffac 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4619      	mov	r1, r3
 8001606:	4816      	ldr	r0, [pc, #88]	; (8001660 <MX_TIM3_Init+0xc0>)
 8001608:	f009 fe3c 	bl	800b284 <HAL_TIMEx_MasterConfigSynchronization>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001612:	f000 ff9d 	bl	8002550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001616:	2360      	movs	r3, #96	; 0x60
 8001618:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <MX_TIM3_Init+0xc0>)
 800162e:	f009 f95b 	bl	800a8e8 <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001638:	f000 ff8a 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2204      	movs	r2, #4
 8001640:	4619      	mov	r1, r3
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_TIM3_Init+0xc0>)
 8001644:	f009 f950 	bl	800a8e8 <HAL_TIM_PWM_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800164e:	f000 ff7f 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <MX_TIM3_Init+0xc0>)
 8001654:	f005 fd8c 	bl	8007170 <HAL_TIM_MspPostInit>

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000474 	.word	0x20000474
 8001664:	40000400 	.word	0x40000400

08001668 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	2224      	movs	r2, #36	; 0x24
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f00d fbb3 	bl	800ede2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <MX_TIM4_Init+0xa0>)
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <MX_TIM4_Init+0xa4>)
 8001688:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_TIM4_Init+0xa0>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <MX_TIM4_Init+0xa0>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_TIM4_Init+0xa0>)
 8001698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800169c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_TIM4_Init+0xa0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_TIM4_Init+0xa0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016aa:	2303      	movs	r3, #3
 80016ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016b2:	2301      	movs	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016c2:	2301      	movs	r3, #1
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4619      	mov	r1, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <MX_TIM4_Init+0xa0>)
 80016d6:	f008 fee3 	bl	800a4a0 <HAL_TIM_Encoder_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80016e0:	f000 ff36 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_TIM4_Init+0xa0>)
 80016f2:	f009 fdc7 	bl	800b284 <HAL_TIMEx_MasterConfigSynchronization>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80016fc:	f000 ff28 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	; 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200004bc 	.word	0x200004bc
 800170c:	40000800 	.word	0x40000800

08001710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_USART2_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001748:	f009 fe2c 	bl	800b3a4 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f000 fefd 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000504 	.word	0x20000504
 8001760:	40004400 	.word	0x40004400

08001764 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <MX_USART6_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 8001770:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001774:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 800179c:	f009 fe02 	bl	800b3a4 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f000 fed3 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000054c 	.word	0x2000054c
 80017b4:	40011400 	.word	0x40011400

080017b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_DMA_Init+0x4c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <MX_DMA_Init+0x4c>)
 80017c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <MX_DMA_Init+0x4c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2039      	movs	r0, #57	; 0x39
 80017e0:	f006 f8b1 	bl	8007946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017e4:	2039      	movs	r0, #57	; 0x39
 80017e6:	f006 f8ca 	bl	800797e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2045      	movs	r0, #69	; 0x45
 80017f0:	f006 f8a9 	bl	8007946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80017f4:	2045      	movs	r0, #69	; 0x45
 80017f6:	f006 f8c2 	bl	800797e <HAL_NVIC_EnableIRQ>

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <MX_GPIO_Init+0x144>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a49      	ldr	r2, [pc, #292]	; (800194c <MX_GPIO_Init+0x144>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <MX_GPIO_Init+0x144>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	4b43      	ldr	r3, [pc, #268]	; (800194c <MX_GPIO_Init+0x144>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a42      	ldr	r2, [pc, #264]	; (800194c <MX_GPIO_Init+0x144>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b40      	ldr	r3, [pc, #256]	; (800194c <MX_GPIO_Init+0x144>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b3c      	ldr	r3, [pc, #240]	; (800194c <MX_GPIO_Init+0x144>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a3b      	ldr	r2, [pc, #236]	; (800194c <MX_GPIO_Init+0x144>)
 8001860:	f043 0310 	orr.w	r3, r3, #16
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <MX_GPIO_Init+0x144>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b35      	ldr	r3, [pc, #212]	; (800194c <MX_GPIO_Init+0x144>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a34      	ldr	r2, [pc, #208]	; (800194c <MX_GPIO_Init+0x144>)
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <MX_GPIO_Init+0x144>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b2e      	ldr	r3, [pc, #184]	; (800194c <MX_GPIO_Init+0x144>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a2d      	ldr	r2, [pc, #180]	; (800194c <MX_GPIO_Init+0x144>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <MX_GPIO_Init+0x144>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b27      	ldr	r3, [pc, #156]	; (800194c <MX_GPIO_Init+0x144>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a26      	ldr	r2, [pc, #152]	; (800194c <MX_GPIO_Init+0x144>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <MX_GPIO_Init+0x144>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018cc:	4820      	ldr	r0, [pc, #128]	; (8001950 <MX_GPIO_Init+0x148>)
 80018ce:	f006 fe0f 	bl	80084f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80018d8:	481e      	ldr	r0, [pc, #120]	; (8001954 <MX_GPIO_Init+0x14c>)
 80018da:	f006 fe09 	bl	80084f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80018e4:	481c      	ldr	r0, [pc, #112]	; (8001958 <MX_GPIO_Init+0x150>)
 80018e6:	f006 fe03 	bl	80084f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_GPIO_Init+0x148>)
 8001904:	f006 fc58 	bl	80081b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001908:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <MX_GPIO_Init+0x14c>)
 8001922:	f006 fc49 	bl	80081b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001926:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <MX_GPIO_Init+0x150>)
 8001940:	f006 fc3a 	bl	80081b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001944:	bf00      	nop
 8001946:	3730      	adds	r7, #48	; 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40020c00 	.word	0x40020c00
 8001954:	40020000 	.word	0x40020000
 8001958:	40020800 	.word	0x40020800

0800195c <PID_Calculate1>:

/* USER CODE BEGIN 4 */

void PID_Calculate1(){
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	af00      	add	r7, sp, #0
			 //delta_enc=Encoder_GetSpeed();




				encoder_cnt1=__HAL_TIM_GET_COUNTER(&htim1);
 8001960:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <PID_Calculate1+0x20c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196e:	4b7f      	ldr	r3, [pc, #508]	; (8001b6c <PID_Calculate1+0x210>)
 8001970:	edc3 7a00 	vstr	s15, [r3]
				delta_enc1=encoder_cnt1-pre_enc1;
 8001974:	4b7d      	ldr	r3, [pc, #500]	; (8001b6c <PID_Calculate1+0x210>)
 8001976:	ed93 7a00 	vldr	s14, [r3]
 800197a:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <PID_Calculate1+0x214>)
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001984:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <PID_Calculate1+0x218>)
 8001986:	edc3 7a00 	vstr	s15, [r3]



					//p=(int32_t)TIM1->CNT;

				if(delta_enc1>32768){
 800198a:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <PID_Calculate1+0x218>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001b78 <PID_Calculate1+0x21c>
 8001994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	dd0a      	ble.n	80019b4 <PID_Calculate1+0x58>
					delta_enc1 -= 65536;
 800199e:	4b75      	ldr	r3, [pc, #468]	; (8001b74 <PID_Calculate1+0x218>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001b7c <PID_Calculate1+0x220>
 80019a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019ac:	4b71      	ldr	r3, [pc, #452]	; (8001b74 <PID_Calculate1+0x218>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]
 80019b2:	e013      	b.n	80019dc <PID_Calculate1+0x80>
				}
				else if(delta_enc1<-32768){
 80019b4:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <PID_Calculate1+0x218>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001b80 <PID_Calculate1+0x224>
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	d509      	bpl.n	80019dc <PID_Calculate1+0x80>
					delta_enc1 += 65536;
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <PID_Calculate1+0x218>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001b7c <PID_Calculate1+0x220>
 80019d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <PID_Calculate1+0x218>)
 80019d8:	edc3 7a00 	vstr	s15, [r3]
				}

				 vL_real=((delta_enc1/PPR1)/Ts)*(2*pi*wheelRadius);
 80019dc:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <PID_Calculate1+0x218>)
 80019de:	edd3 6a00 	vldr	s13, [r3]
 80019e2:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <PID_Calculate1+0x228>)
 80019e4:	ed93 7a00 	vldr	s14, [r3]
 80019e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ec:	eddf 6a66 	vldr	s13, [pc, #408]	; 8001b88 <PID_Calculate1+0x22c>
 80019f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019f4:	eddf 7a65 	vldr	s15, [pc, #404]	; 8001b8c <PID_Calculate1+0x230>
 80019f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019fc:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001b90 <PID_Calculate1+0x234>
 8001a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a08:	4b62      	ldr	r3, [pc, #392]	; (8001b94 <PID_Calculate1+0x238>)
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
				 pre_enc1=encoder_cnt1;
 8001a0e:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <PID_Calculate1+0x210>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a57      	ldr	r2, [pc, #348]	; (8001b70 <PID_Calculate1+0x214>)
 8001a14:	6013      	str	r3, [r2, #0]

				 Error1=vL_set-vL_real;
 8001a16:	4b60      	ldr	r3, [pc, #384]	; (8001b98 <PID_Calculate1+0x23c>)
 8001a18:	ed93 7a00 	vldr	s14, [r3]
 8001a1c:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <PID_Calculate1+0x238>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a26:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <PID_Calculate1+0x240>)
 8001a28:	edc3 7a00 	vstr	s15, [r3]
				 if(Kp1!=0||Ki1!=0||Kd1!=0){
 8001a2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <PID_Calculate1+0x244>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3a:	d110      	bne.n	8001a5e <PID_Calculate1+0x102>
 8001a3c:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <PID_Calculate1+0x248>)
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	d108      	bne.n	8001a5e <PID_Calculate1+0x102>
 8001a4c:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <PID_Calculate1+0x24c>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	f000 8083 	beq.w	8001b64 <PID_Calculate1+0x208>

					 P_part1 =Kp1*(Error1-pre_Error1 );
 8001a5e:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <PID_Calculate1+0x240>)
 8001a60:	ed93 7a00 	vldr	s14, [r3]
 8001a64:	4b51      	ldr	r3, [pc, #324]	; (8001bac <PID_Calculate1+0x250>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <PID_Calculate1+0x244>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a78:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <PID_Calculate1+0x254>)
 8001a7a:	edc3 7a00 	vstr	s15, [r3]
					// P_part2 =Kp2*(Error2-pre1_Error2 );

					 I_part1 = 0.5*Ki1*Ts*(Error1 + pre_Error1);
 8001a7e:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <PID_Calculate1+0x248>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd60 	bl	8000548 <__aeabi_f2d>
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <PID_Calculate1+0x258>)
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4614      	mov	r4, r2
 8001a98:	461d      	mov	r5, r3
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <PID_Calculate1+0x25c>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd53 	bl	8000548 <__aeabi_f2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	f7fe fda5 	bl	80005f8 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <PID_Calculate1+0x240>)
 8001ab8:	ed93 7a00 	vldr	s14, [r3]
 8001abc:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <PID_Calculate1+0x250>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	ee17 0a90 	vmov	r0, s15
 8001aca:	f7fe fd3d 	bl	8000548 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	f7fe fd8f 	bl	80005f8 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff f861 	bl	8000ba8 <__aeabi_d2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a34      	ldr	r2, [pc, #208]	; (8001bbc <PID_Calculate1+0x260>)
 8001aea:	6013      	str	r3, [r2, #0]
					// I_part2 = 0.5*Ki2*Ts*(Error2 + pre1_Error2);

					 D_part1 = Kd1/Ts*( Error1 - 2*pre_Error1+ pre_pre_Error1);
 8001aec:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <PID_Calculate1+0x24c>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001b88 <PID_Calculate1+0x22c>
 8001af6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <PID_Calculate1+0x240>)
 8001afc:	edd3 6a00 	vldr	s13, [r3]
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <PID_Calculate1+0x250>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <PID_Calculate1+0x264>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <PID_Calculate1+0x268>)
 8001b1e:	edc3 7a00 	vstr	s15, [r3]
					 //D_part2 = Kd2/Ts*( Error2 - 2*pre1_Error2+ pre2_Error2);

					 udk1 = pre_pwm_out1 + P_part1 + I_part1 + D_part1 ;
 8001b22:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <PID_Calculate1+0x26c>)
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <PID_Calculate1+0x254>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <PID_Calculate1+0x260>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <PID_Calculate1+0x268>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <PID_Calculate1+0x270>)
 8001b48:	edc3 7a00 	vstr	s15, [r3]
					 //udk2 = pre_pwm_out2 + P_part2 + I_part2 + D_part2 ;

								 //HAL_Delay(0.5);
								 //pwm_out=udk;
								 pre_pre_Error1 = pre_Error1;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <PID_Calculate1+0x250>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <PID_Calculate1+0x264>)
 8001b52:	6013      	str	r3, [r2, #0]
								 //pre2_Error2 = pre1_Error2;

								 pre_Error1 = Error1;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <PID_Calculate1+0x240>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <PID_Calculate1+0x250>)
 8001b5a:	6013      	str	r3, [r2, #0]
								// pre1_Error2 = Error2;

								 pre_pwm_out1 = udk1;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <PID_Calculate1+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <PID_Calculate1+0x26c>)
 8001b62:	6013      	str	r3, [r2, #0]
								// pre_pwm_out2 = udk2;
				 }
		}
 8001b64:	bf00      	nop
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	200003e4 	.word	0x200003e4
 8001b6c:	20000654 	.word	0x20000654
 8001b70:	20000658 	.word	0x20000658
 8001b74:	2000065c 	.word	0x2000065c
 8001b78:	47000000 	.word	0x47000000
 8001b7c:	47800000 	.word	0x47800000
 8001b80:	c7000000 	.word	0xc7000000
 8001b84:	20000004 	.word	0x20000004
 8001b88:	3d4ccccd 	.word	0x3d4ccccd
 8001b8c:	40490fdb 	.word	0x40490fdb
 8001b90:	3d9374bc 	.word	0x3d9374bc
 8001b94:	2000069c 	.word	0x2000069c
 8001b98:	20000698 	.word	0x20000698
 8001b9c:	2000066c 	.word	0x2000066c
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000010 	.word	0x20000010
 8001bac:	20000670 	.word	0x20000670
 8001bb0:	20000678 	.word	0x20000678
 8001bb4:	3fe00000 	.word	0x3fe00000
 8001bb8:	3d4ccccd 	.word	0x3d4ccccd
 8001bbc:	2000067c 	.word	0x2000067c
 8001bc0:	20000674 	.word	0x20000674
 8001bc4:	20000680 	.word	0x20000680
 8001bc8:	20000688 	.word	0x20000688
 8001bcc:	20000684 	.word	0x20000684

08001bd0 <PID_Calculate2>:

void PID_Calculate2(){
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	af00      	add	r7, sp, #0

				encoder_cnt2=__HAL_TIM_GET_COUNTER(&htim4);
 8001bd4:	4b81      	ldr	r3, [pc, #516]	; (8001ddc <PID_Calculate2+0x20c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be2:	4b7f      	ldr	r3, [pc, #508]	; (8001de0 <PID_Calculate2+0x210>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]


				 delta_enc2=encoder_cnt2-pre_enc2;
 8001be8:	4b7d      	ldr	r3, [pc, #500]	; (8001de0 <PID_Calculate2+0x210>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	4b7d      	ldr	r3, [pc, #500]	; (8001de4 <PID_Calculate2+0x214>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf8:	4b7b      	ldr	r3, [pc, #492]	; (8001de8 <PID_Calculate2+0x218>)
 8001bfa:	edc3 7a00 	vstr	s15, [r3]

					//p=(int32_t)TIM1->CNT;



				if(delta_enc2>32768){
 8001bfe:	4b7a      	ldr	r3, [pc, #488]	; (8001de8 <PID_Calculate2+0x218>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001dec <PID_Calculate2+0x21c>
 8001c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	dd0a      	ble.n	8001c28 <PID_Calculate2+0x58>
					delta_enc2 -= 65536;
 8001c12:	4b75      	ldr	r3, [pc, #468]	; (8001de8 <PID_Calculate2+0x218>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001df0 <PID_Calculate2+0x220>
 8001c1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c20:	4b71      	ldr	r3, [pc, #452]	; (8001de8 <PID_Calculate2+0x218>)
 8001c22:	edc3 7a00 	vstr	s15, [r3]
 8001c26:	e013      	b.n	8001c50 <PID_Calculate2+0x80>
				}
				else if(delta_enc2<-32768){
 8001c28:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <PID_Calculate2+0x218>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001df4 <PID_Calculate2+0x224>
 8001c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	d509      	bpl.n	8001c50 <PID_Calculate2+0x80>
					delta_enc2 += 65536;
 8001c3c:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <PID_Calculate2+0x218>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001df0 <PID_Calculate2+0x220>
 8001c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c4a:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <PID_Calculate2+0x218>)
 8001c4c:	edc3 7a00 	vstr	s15, [r3]
				}

				vR_real=((delta_enc2/PPR2)/Ts)*(2*pi*wheelRadius);
 8001c50:	4b65      	ldr	r3, [pc, #404]	; (8001de8 <PID_Calculate2+0x218>)
 8001c52:	edd3 6a00 	vldr	s13, [r3]
 8001c56:	4b68      	ldr	r3, [pc, #416]	; (8001df8 <PID_Calculate2+0x228>)
 8001c58:	ed93 7a00 	vldr	s14, [r3]
 8001c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c60:	eddf 6a66 	vldr	s13, [pc, #408]	; 8001dfc <PID_Calculate2+0x22c>
 8001c64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c68:	eddf 7a65 	vldr	s15, [pc, #404]	; 8001e00 <PID_Calculate2+0x230>
 8001c6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c70:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001e04 <PID_Calculate2+0x234>
 8001c74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7c:	4b62      	ldr	r3, [pc, #392]	; (8001e08 <PID_Calculate2+0x238>)
 8001c7e:	edc3 7a00 	vstr	s15, [r3]
				pre_enc2=encoder_cnt2;
 8001c82:	4b57      	ldr	r3, [pc, #348]	; (8001de0 <PID_Calculate2+0x210>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a57      	ldr	r2, [pc, #348]	; (8001de4 <PID_Calculate2+0x214>)
 8001c88:	6013      	str	r3, [r2, #0]


				Error2=vR_set-vR_real;
 8001c8a:	4b60      	ldr	r3, [pc, #384]	; (8001e0c <PID_Calculate2+0x23c>)
 8001c8c:	ed93 7a00 	vldr	s14, [r3]
 8001c90:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <PID_Calculate2+0x238>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <PID_Calculate2+0x240>)
 8001c9c:	edc3 7a00 	vstr	s15, [r3]

			 if(Kp2!=0||Ki2!=0||Kd2!=0){
 8001ca0:	4b5c      	ldr	r3, [pc, #368]	; (8001e14 <PID_Calculate2+0x244>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	d110      	bne.n	8001cd2 <PID_Calculate2+0x102>
 8001cb0:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <PID_Calculate2+0x248>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	d108      	bne.n	8001cd2 <PID_Calculate2+0x102>
 8001cc0:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <PID_Calculate2+0x24c>)
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	f000 8083 	beq.w	8001dd8 <PID_Calculate2+0x208>


				 P_part2 =Kp2*(Error2-pre_Error2 );
 8001cd2:	4b4f      	ldr	r3, [pc, #316]	; (8001e10 <PID_Calculate2+0x240>)
 8001cd4:	ed93 7a00 	vldr	s14, [r3]
 8001cd8:	4b51      	ldr	r3, [pc, #324]	; (8001e20 <PID_Calculate2+0x250>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <PID_Calculate2+0x244>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <PID_Calculate2+0x254>)
 8001cee:	edc3 7a00 	vstr	s15, [r3]


				 I_part2 = 0.5*Ki2*Ts*(Error2 + pre_Error2);
 8001cf2:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <PID_Calculate2+0x248>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc26 	bl	8000548 <__aeabi_f2d>
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <PID_Calculate2+0x258>)
 8001d02:	f7fe fc79 	bl	80005f8 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <PID_Calculate2+0x25c>)
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc19 	bl	8000548 <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fc6b 	bl	80005f8 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4614      	mov	r4, r2
 8001d28:	461d      	mov	r5, r3
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <PID_Calculate2+0x240>)
 8001d2c:	ed93 7a00 	vldr	s14, [r3]
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <PID_Calculate2+0x250>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3a:	ee17 0a90 	vmov	r0, s15
 8001d3e:	f7fe fc03 	bl	8000548 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4620      	mov	r0, r4
 8001d48:	4629      	mov	r1, r5
 8001d4a:	f7fe fc55 	bl	80005f8 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	f7fe ff27 	bl	8000ba8 <__aeabi_d2f>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4a34      	ldr	r2, [pc, #208]	; (8001e30 <PID_Calculate2+0x260>)
 8001d5e:	6013      	str	r3, [r2, #0]


				 D_part2 = Kd2/Ts*( Error2 - 2*pre_Error2+ pre_pre_Error2);
 8001d60:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <PID_Calculate2+0x24c>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001dfc <PID_Calculate2+0x22c>
 8001d6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <PID_Calculate2+0x240>)
 8001d70:	edd3 6a00 	vldr	s13, [r3]
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <PID_Calculate2+0x250>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <PID_Calculate2+0x264>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <PID_Calculate2+0x268>)
 8001d92:	edc3 7a00 	vstr	s15, [r3]


				 udk2 = pre_pwm_out2 + P_part2 + I_part2 + D_part2 ;
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <PID_Calculate2+0x26c>)
 8001d98:	ed93 7a00 	vldr	s14, [r3]
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <PID_Calculate2+0x254>)
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <PID_Calculate2+0x260>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db0:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <PID_Calculate2+0x268>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <PID_Calculate2+0x270>)
 8001dbc:	edc3 7a00 	vstr	s15, [r3]

				 pre_pre_Error2 = pre_Error2;
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <PID_Calculate2+0x250>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <PID_Calculate2+0x264>)
 8001dc6:	6013      	str	r3, [r2, #0]


				 pre_Error2 = Error2;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <PID_Calculate2+0x240>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <PID_Calculate2+0x250>)
 8001dce:	6013      	str	r3, [r2, #0]


				 pre_pwm_out2 = udk2;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <PID_Calculate2+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <PID_Calculate2+0x26c>)
 8001dd6:	6013      	str	r3, [r2, #0]
			 }

	}
 8001dd8:	bf00      	nop
 8001dda:	bdb0      	pop	{r4, r5, r7, pc}
 8001ddc:	200004bc 	.word	0x200004bc
 8001de0:	2000068c 	.word	0x2000068c
 8001de4:	20000690 	.word	0x20000690
 8001de8:	20000694 	.word	0x20000694
 8001dec:	47000000 	.word	0x47000000
 8001df0:	47800000 	.word	0x47800000
 8001df4:	c7000000 	.word	0xc7000000
 8001df8:	20000014 	.word	0x20000014
 8001dfc:	3d4ccccd 	.word	0x3d4ccccd
 8001e00:	40490fdb 	.word	0x40490fdb
 8001e04:	3d9374bc 	.word	0x3d9374bc
 8001e08:	20000664 	.word	0x20000664
 8001e0c:	20000660 	.word	0x20000660
 8001e10:	200006a4 	.word	0x200006a4
 8001e14:	20000018 	.word	0x20000018
 8001e18:	2000001c 	.word	0x2000001c
 8001e1c:	20000020 	.word	0x20000020
 8001e20:	200006a8 	.word	0x200006a8
 8001e24:	200006b0 	.word	0x200006b0
 8001e28:	3fe00000 	.word	0x3fe00000
 8001e2c:	3d4ccccd 	.word	0x3d4ccccd
 8001e30:	200006b4 	.word	0x200006b4
 8001e34:	200006ac 	.word	0x200006ac
 8001e38:	200006b8 	.word	0x200006b8
 8001e3c:	200006c0 	.word	0x200006c0
 8001e40:	200006bc 	.word	0x200006bc

08001e44 <PWM_Calculate1>:

	void PWM_Calculate1()
		{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
			if(udk1>1000){
 8001e48:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <PWM_Calculate1+0xd8>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001f20 <PWM_Calculate1+0xdc>
 8001e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	dd03      	ble.n	8001e64 <PWM_Calculate1+0x20>
				udk1=50;
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <PWM_Calculate1+0xd8>)
 8001e5e:	4a31      	ldr	r2, [pc, #196]	; (8001f24 <PWM_Calculate1+0xe0>)
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	e00c      	b.n	8001e7e <PWM_Calculate1+0x3a>

			}
			else if (udk1<-1000){
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <PWM_Calculate1+0xd8>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f28 <PWM_Calculate1+0xe4>
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d502      	bpl.n	8001e7e <PWM_Calculate1+0x3a>
				udk1=-50;
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <PWM_Calculate1+0xd8>)
 8001e7a:	4a2c      	ldr	r2, [pc, #176]	; (8001f2c <PWM_Calculate1+0xe8>)
 8001e7c:	601a      	str	r2, [r3, #0]

			}


			if(udk1==0){
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <PWM_Calculate1+0xd8>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	d10c      	bne.n	8001ea8 <PWM_Calculate1+0x64>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e94:	4826      	ldr	r0, [pc, #152]	; (8001f30 <PWM_Calculate1+0xec>)
 8001e96:	f006 fb2b 	bl	80084f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_10, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea0:	4823      	ldr	r0, [pc, #140]	; (8001f30 <PWM_Calculate1+0xec>)
 8001ea2:	f006 fb25 	bl	80084f0 <HAL_GPIO_WritePin>
 8001ea6:	e02c      	b.n	8001f02 <PWM_Calculate1+0xbe>

			}
			else if(udk1>0){
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <PWM_Calculate1+0xd8>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	dd10      	ble.n	8001eda <PWM_Calculate1+0x96>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ebe:	481c      	ldr	r0, [pc, #112]	; (8001f30 <PWM_Calculate1+0xec>)
 8001ec0:	f006 fb16 	bl	80084f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_10, GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eca:	4819      	ldr	r0, [pc, #100]	; (8001f30 <PWM_Calculate1+0xec>)
 8001ecc:	f006 fb10 	bl	80084f0 <HAL_GPIO_WritePin>

				duty_cycle1=udk1;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <PWM_Calculate1+0xd8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <PWM_Calculate1+0xf0>)
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e013      	b.n	8001f02 <PWM_Calculate1+0xbe>


			}

			else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee0:	4813      	ldr	r0, [pc, #76]	; (8001f30 <PWM_Calculate1+0xec>)
 8001ee2:	f006 fb05 	bl	80084f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_10, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eec:	4810      	ldr	r0, [pc, #64]	; (8001f30 <PWM_Calculate1+0xec>)
 8001eee:	f006 faff 	bl	80084f0 <HAL_GPIO_WritePin>

				duty_cycle1=-udk1;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <PWM_Calculate1+0xd8>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	eef1 7a67 	vneg.f32	s15, s15
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <PWM_Calculate1+0xf0>)
 8001efe:	edc3 7a00 	vstr	s15, [r3]
				//duty_cycle2=-udk2;
			}
	//		duty_cycle=(TIM3->ARR + 1)*duty_cycle/100;
	//		TIM3->CCR1 = (uint32_t)duty_cycle;
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,duty_cycle1);
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <PWM_Calculate1+0xf0>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <PWM_Calculate1+0xf4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f10:	ee17 2a90 	vmov	r2, s15
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
	//		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,duty_cycle2);
		}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000684 	.word	0x20000684
 8001f20:	447a0000 	.word	0x447a0000
 8001f24:	42480000 	.word	0x42480000
 8001f28:	c47a0000 	.word	0xc47a0000
 8001f2c:	c2480000 	.word	0xc2480000
 8001f30:	40020000 	.word	0x40020000
 8001f34:	20000668 	.word	0x20000668
 8001f38:	20000474 	.word	0x20000474

08001f3c <PWM_Calculate2>:

	void PWM_Calculate2()
			{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0

				if(udk2>1000){
 8001f40:	4b34      	ldr	r3, [pc, #208]	; (8002014 <PWM_Calculate2+0xd8>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002018 <PWM_Calculate2+0xdc>
 8001f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	dd03      	ble.n	8001f5c <PWM_Calculate2+0x20>

					udk2=50;
 8001f54:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <PWM_Calculate2+0xd8>)
 8001f56:	4a31      	ldr	r2, [pc, #196]	; (800201c <PWM_Calculate2+0xe0>)
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e00c      	b.n	8001f76 <PWM_Calculate2+0x3a>
				}
				else if (udk2<-1000){
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <PWM_Calculate2+0xd8>)
 8001f5e:	edd3 7a00 	vldr	s15, [r3]
 8001f62:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002020 <PWM_Calculate2+0xe4>
 8001f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6e:	d502      	bpl.n	8001f76 <PWM_Calculate2+0x3a>

					udk2=-50;
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <PWM_Calculate2+0xd8>)
 8001f72:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <PWM_Calculate2+0xe8>)
 8001f74:	601a      	str	r2, [r3, #0]
				}


				if(udk2==0){
 8001f76:	4b27      	ldr	r3, [pc, #156]	; (8002014 <PWM_Calculate2+0xd8>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	d10c      	bne.n	8001fa0 <PWM_Calculate2+0x64>

					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f8c:	4826      	ldr	r0, [pc, #152]	; (8002028 <PWM_Calculate2+0xec>)
 8001f8e:	f006 faaf 	bl	80084f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_12, GPIO_PIN_RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4823      	ldr	r0, [pc, #140]	; (8002028 <PWM_Calculate2+0xec>)
 8001f9a:	f006 faa9 	bl	80084f0 <HAL_GPIO_WritePin>
 8001f9e:	e02c      	b.n	8001ffa <PWM_Calculate2+0xbe>
							}
				else if(udk2>0){
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <PWM_Calculate2+0xd8>)
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	dd10      	ble.n	8001fd2 <PWM_Calculate2+0x96>

					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb6:	481c      	ldr	r0, [pc, #112]	; (8002028 <PWM_Calculate2+0xec>)
 8001fb8:	f006 fa9a 	bl	80084f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_12, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc2:	4819      	ldr	r0, [pc, #100]	; (8002028 <PWM_Calculate2+0xec>)
 8001fc4:	f006 fa94 	bl	80084f0 <HAL_GPIO_WritePin>

					duty_cycle2=udk2;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <PWM_Calculate2+0xd8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a17      	ldr	r2, [pc, #92]	; (800202c <PWM_Calculate2+0xf0>)
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e013      	b.n	8001ffa <PWM_Calculate2+0xbe>

						}
				else{

					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd8:	4813      	ldr	r0, [pc, #76]	; (8002028 <PWM_Calculate2+0xec>)
 8001fda:	f006 fa89 	bl	80084f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_12, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe4:	4810      	ldr	r0, [pc, #64]	; (8002028 <PWM_Calculate2+0xec>)
 8001fe6:	f006 fa83 	bl	80084f0 <HAL_GPIO_WritePin>

					duty_cycle2=-udk2;
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <PWM_Calculate2+0xd8>)
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	eef1 7a67 	vneg.f32	s15, s15
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <PWM_Calculate2+0xf0>)
 8001ff6:	edc3 7a00 	vstr	s15, [r3]
				}

				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,duty_cycle2);
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <PWM_Calculate2+0xf0>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <PWM_Calculate2+0xf4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002008:	ee17 2a90 	vmov	r2, s15
 800200c:	639a      	str	r2, [r3, #56]	; 0x38
			}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200006bc 	.word	0x200006bc
 8002018:	447a0000 	.word	0x447a0000
 800201c:	42480000 	.word	0x42480000
 8002020:	c47a0000 	.word	0xc47a0000
 8002024:	c2480000 	.word	0xc2480000
 8002028:	40020800 	.word	0x40020800
 800202c:	200006a0 	.word	0x200006a0
 8002030:	20000474 	.word	0x20000474
 8002034:	00000000 	.word	0x00000000

08002038 <read_imu>:



void read_imu(){
 8002038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800203c:	ed2d 8b02 	vpush	{d8}
 8002040:	b092      	sub	sp, #72	; 0x48
 8002042:	af00      	add	r7, sp, #0

	t_last = HAL_GetTick();
 8002044:	f005 fb74 	bl	8007730 <HAL_GetTick>
 8002048:	4603      	mov	r3, r0
 800204a:	4ae1      	ldr	r2, [pc, #900]	; (80023d0 <read_imu+0x398>)
 800204c:	6013      	str	r3, [r2, #0]
				  		/* Read all data from sensor 1 */
				  	TM_MPU6050_ReadAll(&MPU6050_Sensor);
 800204e:	48e1      	ldr	r0, [pc, #900]	; (80023d4 <read_imu+0x39c>)
 8002050:	f00a ffb4 	bl	800cfbc <TM_MPU6050_ReadAll>
				      //TM_MPU6050_ReadAccelerometer(&MPU6050_Sensor);
				      //TM_MPU6050_ReadGyroscope(&MPU6050_Sensor);
				  		t_now = HAL_GetTick();
 8002054:	f005 fb6c 	bl	8007730 <HAL_GetTick>
 8002058:	4603      	mov	r3, r0
 800205a:	4adf      	ldr	r2, [pc, #892]	; (80023d8 <read_imu+0x3a0>)
 800205c:	6013      	str	r3, [r2, #0]

				  		// Remove offsets and scale gyro data
				          float gyro_x = (MPU6050_Sensor.Gyroscope_X - base_x_gyro)/GYRO_FACTOR;
 800205e:	4bdd      	ldr	r3, [pc, #884]	; (80023d4 <read_imu+0x39c>)
 8002060:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206c:	4bdb      	ldr	r3, [pc, #876]	; (80023dc <read_imu+0x3a4>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002076:	4bda      	ldr	r3, [pc, #872]	; (80023e0 <read_imu+0x3a8>)
 8002078:	ed93 7a00 	vldr	s14, [r3]
 800207c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002080:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				          float gyro_y = (MPU6050_Sensor.Gyroscope_Y - base_y_gyro)/GYRO_FACTOR;
 8002084:	4bd3      	ldr	r3, [pc, #844]	; (80023d4 <read_imu+0x39c>)
 8002086:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002092:	4bd4      	ldr	r3, [pc, #848]	; (80023e4 <read_imu+0x3ac>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee77 6a67 	vsub.f32	s13, s14, s15
 800209c:	4bd0      	ldr	r3, [pc, #832]	; (80023e0 <read_imu+0x3a8>)
 800209e:	ed93 7a00 	vldr	s14, [r3]
 80020a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020a6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				          float gyro_z = (MPU6050_Sensor.Gyroscope_Z - base_z_gyro)/GYRO_FACTOR;
 80020aa:	4bca      	ldr	r3, [pc, #808]	; (80023d4 <read_imu+0x39c>)
 80020ac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b8:	4bcb      	ldr	r3, [pc, #812]	; (80023e8 <read_imu+0x3b0>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020c2:	4bc7      	ldr	r3, [pc, #796]	; (80023e0 <read_imu+0x3a8>)
 80020c4:	ed93 7a00 	vldr	s14, [r3]
 80020c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020cc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			//	  		    float gyro_x = (MPU6050_Sensor.Gyroscope_X)/GYRO_FACTOR;
			//	          float gyro_y = (MPU6050_Sensor.Gyroscope_Y)/GYRO_FACTOR;
			//	          float gyro_z = (MPU6050_Sensor.Gyroscope_Z)/GYRO_FACTOR;

				          float accel_x = MPU6050_Sensor.Accelerometer_X  - base_x_accel;
 80020d0:	4bc0      	ldr	r3, [pc, #768]	; (80023d4 <read_imu+0x39c>)
 80020d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020de:	4bc3      	ldr	r3, [pc, #780]	; (80023ec <read_imu+0x3b4>)
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				          float accel_y = MPU6050_Sensor.Accelerometer_Y  - base_y_accel;
 80020ec:	4bb9      	ldr	r3, [pc, #740]	; (80023d4 <read_imu+0x39c>)
 80020ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020fa:	4bbd      	ldr	r3, [pc, #756]	; (80023f0 <read_imu+0x3b8>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002104:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				          float accel_z = MPU6050_Sensor.Accelerometer_Z  - base_z_accel;
 8002108:	4bb2      	ldr	r3, [pc, #712]	; (80023d4 <read_imu+0x39c>)
 800210a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002116:	4bb7      	ldr	r3, [pc, #732]	; (80023f4 <read_imu+0x3bc>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002120:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

				          float accel_angle_y = atan(-1*accel_x/sqrt(pow(accel_y,2) + pow(accel_z,2)))*RADIANS_TO_DEGREES;
 8002124:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002128:	eef1 7a67 	vneg.f32	s15, s15
 800212c:	ee17 3a90 	vmov	r3, s15
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fa09 	bl	8000548 <__aeabi_f2d>
 8002136:	4604      	mov	r4, r0
 8002138:	460d      	mov	r5, r1
 800213a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800213c:	f7fe fa04 	bl	8000548 <__aeabi_f2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 80023c8 <read_imu+0x390>
 8002148:	ec43 2b10 	vmov	d0, r2, r3
 800214c:	f00a ff9e 	bl	800d08c <pow>
 8002150:	ec59 8b10 	vmov	r8, r9, d0
 8002154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002156:	f7fe f9f7 	bl	8000548 <__aeabi_f2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 80023c8 <read_imu+0x390>
 8002162:	ec43 2b10 	vmov	d0, r2, r3
 8002166:	f00a ff91 	bl	800d08c <pow>
 800216a:	ec53 2b10 	vmov	r2, r3, d0
 800216e:	4640      	mov	r0, r8
 8002170:	4649      	mov	r1, r9
 8002172:	f7fe f88b 	bl	800028c <__adddf3>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	ec43 2b17 	vmov	d7, r2, r3
 800217e:	eeb0 0a47 	vmov.f32	s0, s14
 8002182:	eef0 0a67 	vmov.f32	s1, s15
 8002186:	f00a fff1 	bl	800d16c <sqrt>
 800218a:	ec53 2b10 	vmov	r2, r3, d0
 800218e:	4620      	mov	r0, r4
 8002190:	4629      	mov	r1, r5
 8002192:	f7fe fb5b 	bl	800084c <__aeabi_ddiv>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	ec43 2b17 	vmov	d7, r2, r3
 800219e:	eeb0 0a47 	vmov.f32	s0, s14
 80021a2:	eef0 0a67 	vmov.f32	s1, s15
 80021a6:	f00b f80f 	bl	800d1c8 <atan>
 80021aa:	ec55 4b10 	vmov	r4, r5, d0
 80021ae:	4b92      	ldr	r3, [pc, #584]	; (80023f8 <read_imu+0x3c0>)
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9c9 	bl	8000548 <__aeabi_f2d>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4620      	mov	r0, r4
 80021bc:	4629      	mov	r1, r5
 80021be:	f7fe fa1b 	bl	80005f8 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fced 	bl	8000ba8 <__aeabi_d2f>
 80021ce:	4603      	mov	r3, r0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
				          float accel_angle_x = atan(accel_y/sqrt(pow(accel_x,2) + pow(accel_z,2)))*RADIANS_TO_DEGREES;
 80021d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021d4:	f7fe f9b8 	bl	8000548 <__aeabi_f2d>
 80021d8:	4604      	mov	r4, r0
 80021da:	460d      	mov	r5, r1
 80021dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021de:	f7fe f9b3 	bl	8000548 <__aeabi_f2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	ed9f 1b78 	vldr	d1, [pc, #480]	; 80023c8 <read_imu+0x390>
 80021ea:	ec43 2b10 	vmov	d0, r2, r3
 80021ee:	f00a ff4d 	bl	800d08c <pow>
 80021f2:	ec59 8b10 	vmov	r8, r9, d0
 80021f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f8:	f7fe f9a6 	bl	8000548 <__aeabi_f2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	ed9f 1b71 	vldr	d1, [pc, #452]	; 80023c8 <read_imu+0x390>
 8002204:	ec43 2b10 	vmov	d0, r2, r3
 8002208:	f00a ff40 	bl	800d08c <pow>
 800220c:	ec53 2b10 	vmov	r2, r3, d0
 8002210:	4640      	mov	r0, r8
 8002212:	4649      	mov	r1, r9
 8002214:	f7fe f83a 	bl	800028c <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	ec43 2b17 	vmov	d7, r2, r3
 8002220:	eeb0 0a47 	vmov.f32	s0, s14
 8002224:	eef0 0a67 	vmov.f32	s1, s15
 8002228:	f00a ffa0 	bl	800d16c <sqrt>
 800222c:	ec53 2b10 	vmov	r2, r3, d0
 8002230:	4620      	mov	r0, r4
 8002232:	4629      	mov	r1, r5
 8002234:	f7fe fb0a 	bl	800084c <__aeabi_ddiv>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	ec43 2b17 	vmov	d7, r2, r3
 8002240:	eeb0 0a47 	vmov.f32	s0, s14
 8002244:	eef0 0a67 	vmov.f32	s1, s15
 8002248:	f00a ffbe 	bl	800d1c8 <atan>
 800224c:	ec55 4b10 	vmov	r4, r5, d0
 8002250:	4b69      	ldr	r3, [pc, #420]	; (80023f8 <read_imu+0x3c0>)
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f978 	bl	8000548 <__aeabi_f2d>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4620      	mov	r0, r4
 800225e:	4629      	mov	r1, r5
 8002260:	f7fe f9ca 	bl	80005f8 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fc9c 	bl	8000ba8 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
				          float accel_angle_z = 0;  //Accelerometer doesn't give z-angle
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24

				          // Compute the (filtered) gyro angles
				          dt =(t_now - get_last_time())/1000.0;
 800227a:	4b57      	ldr	r3, [pc, #348]	; (80023d8 <read_imu+0x3a0>)
 800227c:	681c      	ldr	r4, [r3, #0]
 800227e:	f7fe fec7 	bl	8001010 <get_last_time>
 8002282:	4603      	mov	r3, r0
 8002284:	1ae3      	subs	r3, r4, r3
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f93c 	bl	8000504 <__aeabi_ui2d>
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	4b5a      	ldr	r3, [pc, #360]	; (80023fc <read_imu+0x3c4>)
 8002292:	f7fe fadb 	bl	800084c <__aeabi_ddiv>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	f7fe fc83 	bl	8000ba8 <__aeabi_d2f>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a56      	ldr	r2, [pc, #344]	; (8002400 <read_imu+0x3c8>)
 80022a6:	6013      	str	r3, [r2, #0]

				          float gyro_angle_x = gyro_x*dt + get_last_x_angle();
 80022a8:	4b55      	ldr	r3, [pc, #340]	; (8002400 <read_imu+0x3c8>)
 80022aa:	ed93 7a00 	vldr	s14, [r3]
 80022ae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80022b2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80022b6:	f7fe feb7 	bl	8001028 <get_last_x_angle>
 80022ba:	eef0 7a40 	vmov.f32	s15, s0
 80022be:	ee78 7a27 	vadd.f32	s15, s16, s15
 80022c2:	edc7 7a08 	vstr	s15, [r7, #32]
				          float gyro_angle_y = gyro_y*dt + get_last_y_angle();
 80022c6:	4b4e      	ldr	r3, [pc, #312]	; (8002400 <read_imu+0x3c8>)
 80022c8:	ed93 7a00 	vldr	s14, [r3]
 80022cc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80022d0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80022d4:	f7fe feb6 	bl	8001044 <get_last_y_angle>
 80022d8:	eef0 7a40 	vmov.f32	s15, s0
 80022dc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80022e0:	edc7 7a07 	vstr	s15, [r7, #28]

				  				int gz_threshold = 2; // gyro z raw data fluctuation threshold value when gyro doesn't move. It is up to your mpu6050. It is just a personal approach.
 80022e4:	2302      	movs	r3, #2
 80022e6:	61bb      	str	r3, [r7, #24]
				  				if(gyro_z < gz_threshold && gyro_z > -gz_threshold) // When gyro stands ignore the gyro z small fluctuations to prevent z angle irregular increments
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80022f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fe:	d50f      	bpl.n	8002320 <read_imu+0x2e8>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	425b      	negs	r3, r3
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800230c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	dd02      	ble.n	8002320 <read_imu+0x2e8>
				  					 gyro_z = 0;
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	647b      	str	r3, [r7, #68]	; 0x44

				             gyro_angle_z = gyro_z*dt + get_last_z_angle();
 8002320:	4b37      	ldr	r3, [pc, #220]	; (8002400 <read_imu+0x3c8>)
 8002322:	ed93 7a00 	vldr	s14, [r3]
 8002326:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800232a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800232e:	f7fe fe97 	bl	8001060 <get_last_z_angle>
 8002332:	eef0 7a40 	vmov.f32	s15, s0
 8002336:	ee78 7a27 	vadd.f32	s15, s16, s15
 800233a:	4b32      	ldr	r3, [pc, #200]	; (8002404 <read_imu+0x3cc>)
 800233c:	edc3 7a00 	vstr	s15, [r3]

				          // Compute the drifting gyro angles
				          float unfiltered_gyro_angle_x = gyro_x*dt + get_last_gyro_x_angle();
 8002340:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <read_imu+0x3c8>)
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800234a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800234e:	f7fe fe95 	bl	800107c <get_last_gyro_x_angle>
 8002352:	eef0 7a40 	vmov.f32	s15, s0
 8002356:	ee78 7a27 	vadd.f32	s15, s16, s15
 800235a:	edc7 7a05 	vstr	s15, [r7, #20]
				          float unfiltered_gyro_angle_y = gyro_y*dt + get_last_gyro_y_angle();
 800235e:	4b28      	ldr	r3, [pc, #160]	; (8002400 <read_imu+0x3c8>)
 8002360:	ed93 7a00 	vldr	s14, [r3]
 8002364:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002368:	ee27 8a27 	vmul.f32	s16, s14, s15
 800236c:	f7fe fe94 	bl	8001098 <get_last_gyro_y_angle>
 8002370:	eef0 7a40 	vmov.f32	s15, s0
 8002374:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002378:	edc7 7a04 	vstr	s15, [r7, #16]
				          float unfiltered_gyro_angle_z = gyro_z*dt + get_last_gyro_z_angle();
 800237c:	4b20      	ldr	r3, [pc, #128]	; (8002400 <read_imu+0x3c8>)
 800237e:	ed93 7a00 	vldr	s14, [r3]
 8002382:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002386:	ee27 8a27 	vmul.f32	s16, s14, s15
 800238a:	f7fe fe93 	bl	80010b4 <get_last_gyro_z_angle>
 800238e:	eef0 7a40 	vmov.f32	s15, s0
 8002392:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002396:	edc7 7a03 	vstr	s15, [r7, #12]

				          // Apply the complementary filter to figure out the change in angle - choice of alpha is
				          /* estimated now.  Alpha depends on the sampling rate... */
				          const float alpha = 0.96;
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <read_imu+0x3d0>)
 800239c:	60bb      	str	r3, [r7, #8]
				          float angle_x = alpha*gyro_angle_x + (1.0 - alpha)*accel_angle_x;
 800239e:	ed97 7a02 	vldr	s14, [r7, #8]
 80023a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023aa:	ee17 0a90 	vmov	r0, s15
 80023ae:	f7fe f8cb 	bl	8000548 <__aeabi_f2d>
 80023b2:	4604      	mov	r4, r0
 80023b4:	460d      	mov	r5, r1
 80023b6:	68b8      	ldr	r0, [r7, #8]
 80023b8:	f7fe f8c6 	bl	8000548 <__aeabi_f2d>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	e024      	b.n	800240c <read_imu+0x3d4>
 80023c2:	bf00      	nop
 80023c4:	f3af 8000 	nop.w
 80023c8:	00000000 	.word	0x00000000
 80023cc:	40000000 	.word	0x40000000
 80023d0:	20000388 	.word	0x20000388
 80023d4:	2000032c 	.word	0x2000032c
 80023d8:	20000384 	.word	0x20000384
 80023dc:	20000368 	.word	0x20000368
 80023e0:	20000000 	.word	0x20000000
 80023e4:	2000036c 	.word	0x2000036c
 80023e8:	20000370 	.word	0x20000370
 80023ec:	20000374 	.word	0x20000374
 80023f0:	20000378 	.word	0x20000378
 80023f4:	2000037c 	.word	0x2000037c
 80023f8:	42652ee0 	.word	0x42652ee0
 80023fc:	408f4000 	.word	0x408f4000
 8002400:	2000038c 	.word	0x2000038c
 8002404:	20000380 	.word	0x20000380
 8002408:	3f75c28f 	.word	0x3f75c28f
 800240c:	f04f 0000 	mov.w	r0, #0
 8002410:	4936      	ldr	r1, [pc, #216]	; (80024ec <read_imu+0x4b4>)
 8002412:	f7fd ff39 	bl	8000288 <__aeabi_dsub>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4690      	mov	r8, r2
 800241c:	4699      	mov	r9, r3
 800241e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002420:	f7fe f892 	bl	8000548 <__aeabi_f2d>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4640      	mov	r0, r8
 800242a:	4649      	mov	r1, r9
 800242c:	f7fe f8e4 	bl	80005f8 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4620      	mov	r0, r4
 8002436:	4629      	mov	r1, r5
 8002438:	f7fd ff28 	bl	800028c <__adddf3>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe fbb0 	bl	8000ba8 <__aeabi_d2f>
 8002448:	4603      	mov	r3, r0
 800244a:	607b      	str	r3, [r7, #4]
				          float angle_y = alpha*gyro_angle_y + (1.0 - alpha)*accel_angle_y;
 800244c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002450:	edd7 7a07 	vldr	s15, [r7, #28]
 8002454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002458:	ee17 0a90 	vmov	r0, s15
 800245c:	f7fe f874 	bl	8000548 <__aeabi_f2d>
 8002460:	4604      	mov	r4, r0
 8002462:	460d      	mov	r5, r1
 8002464:	68b8      	ldr	r0, [r7, #8]
 8002466:	f7fe f86f 	bl	8000548 <__aeabi_f2d>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	491e      	ldr	r1, [pc, #120]	; (80024ec <read_imu+0x4b4>)
 8002474:	f7fd ff08 	bl	8000288 <__aeabi_dsub>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4690      	mov	r8, r2
 800247e:	4699      	mov	r9, r3
 8002480:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002482:	f7fe f861 	bl	8000548 <__aeabi_f2d>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4640      	mov	r0, r8
 800248c:	4649      	mov	r1, r9
 800248e:	f7fe f8b3 	bl	80005f8 <__aeabi_dmul>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4620      	mov	r0, r4
 8002498:	4629      	mov	r1, r5
 800249a:	f7fd fef7 	bl	800028c <__adddf3>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f7fe fb7f 	bl	8000ba8 <__aeabi_d2f>
 80024aa:	4603      	mov	r3, r0
 80024ac:	603b      	str	r3, [r7, #0]
				          angle_z = gyro_angle_z;  //Accelerometer doesn't give z-angle
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <read_imu+0x4b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <read_imu+0x4bc>)
 80024b4:	6013      	str	r3, [r2, #0]

				  		    /* Update the saved data with the latest values */
				          set_last_read_angle_data(t_now, angle_x, angle_y, angle_z, unfiltered_gyro_angle_x, unfiltered_gyro_angle_y, unfiltered_gyro_angle_z);
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <read_imu+0x4c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <read_imu+0x4bc>)
 80024bc:	edd2 7a00 	vldr	s15, [r2]
 80024c0:	edd7 2a03 	vldr	s5, [r7, #12]
 80024c4:	ed97 2a04 	vldr	s4, [r7, #16]
 80024c8:	edd7 1a05 	vldr	s3, [r7, #20]
 80024cc:	eeb0 1a67 	vmov.f32	s2, s15
 80024d0:	edd7 0a00 	vldr	s1, [r7]
 80024d4:	ed97 0a01 	vldr	s0, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fd5f 	bl	8000f9c <set_last_read_angle_data>



}
 80024de:	bf00      	nop
 80024e0:	3748      	adds	r7, #72	; 0x48
 80024e2:	46bd      	mov	sp, r7
 80024e4:	ecbd 8b02 	vpop	{d8}
 80024e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024ec:	3ff00000 	.word	0x3ff00000
 80024f0:	20000380 	.word	0x20000380
 80024f4:	20000364 	.word	0x20000364
 80024f8:	20000384 	.word	0x20000384

080024fc <HAL_TIM_PeriodElapsedCallback>:
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
		if(htim->Instance==htim2.Instance){
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d112      	bne.n	8002536 <HAL_TIM_PeriodElapsedCallback+0x3a>
			  //setSpeed= vel_data_rx.v;
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002514:	480b      	ldr	r0, [pc, #44]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002516:	f006 f804 	bl	8008522 <HAL_GPIO_TogglePin>

//			vR_set=vel_data_rx.v + vel_data_rx.w*wheelBase/2;//dong hoc nguoc
//			vL_set=vel_data_rx.v - vel_data_rx.w*wheelBase/2;

			PID_Calculate1();
 800251a:	f7ff fa1f 	bl	800195c <PID_Calculate1>
			PWM_Calculate1();
 800251e:	f7ff fc91 	bl	8001e44 <PWM_Calculate1>
			PID_Calculate2();
 8002522:	f7ff fb55 	bl	8001bd0 <PID_Calculate2>
			PWM_Calculate2();
 8002526:	f7ff fd09 	bl	8001f3c <PWM_Calculate2>

//			vel_data_tx.v=(vR_real+vL_real)/2;  //dong hoc nguoc
//			vel_data_tx.w=(vR_real-vL_real)/wheelBase;
			read_imu();
 800252a:	f7ff fd85 	bl	8002038 <read_imu>
			imu_data_tx.z=angle_z;
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a06      	ldr	r2, [pc, #24]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002534:	6093      	str	r3, [r2, #8]



			}

	}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000042c 	.word	0x2000042c
 8002544:	40020c00 	.word	0x40020c00
 8002548:	20000364 	.word	0x20000364
 800254c:	200006d8 	.word	0x200006d8

08002550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002554:	b672      	cpsid	i
}
 8002556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002558:	e7fe      	b.n	8002558 <Error_Handler+0x8>

0800255a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <_ZN3ros3MsgC1Ev+0x1c>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	08011158 	.word	0x08011158

0800259c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
      data()
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ffe8 	bl	800257c <_ZN3ros3MsgC1Ev>
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffcf 	bl	800255a <_ZN3ros4TimeC1Ev>
    {
    }
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	08011140 	.word	0x08011140

080025cc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	b2ca      	uxtb	r2, r1
 80025e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0a19      	lsrs	r1, r3, #8
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3301      	adds	r3, #1
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	b2ca      	uxtb	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	0c19      	lsrs	r1, r3, #16
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3302      	adds	r3, #2
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	4413      	add	r3, r2
 8002608:	b2ca      	uxtb	r2, r1
 800260a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	0e19      	lsrs	r1, r3, #24
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3303      	adds	r3, #3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	b2ca      	uxtb	r2, r1
 800261c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3304      	adds	r3, #4
 8002622:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6899      	ldr	r1, [r3, #8]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	4413      	add	r3, r2
 800262e:	b2ca      	uxtb	r2, r1
 8002630:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0a19      	lsrs	r1, r3, #8
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3301      	adds	r3, #1
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4413      	add	r3, r2
 8002640:	b2ca      	uxtb	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	0c19      	lsrs	r1, r3, #16
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3302      	adds	r3, #2
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	4413      	add	r3, r2
 8002652:	b2ca      	uxtb	r2, r1
 8002654:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	0e19      	lsrs	r1, r3, #24
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3303      	adds	r3, #3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	4413      	add	r3, r2
 8002664:	b2ca      	uxtb	r2, r1
 8002666:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3304      	adds	r3, #4
 800266c:	60fb      	str	r3, [r7, #12]
      return offset;
 800266e:	68fb      	ldr	r3, [r7, #12]
    }
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4413      	add	r3, r2
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3301      	adds	r3, #1
 80026a0:	6839      	ldr	r1, [r7, #0]
 80026a2:	440b      	add	r3, r1
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3302      	adds	r3, #2
 80026b6:	6839      	ldr	r1, [r7, #0]
 80026b8:	440b      	add	r3, r1
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3303      	adds	r3, #3
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	440b      	add	r3, r1
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	061b      	lsls	r3, r3, #24
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3304      	adds	r3, #4
 80026de:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3301      	adds	r3, #1
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	440b      	add	r3, r1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3302      	adds	r3, #2
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	440b      	add	r3, r1
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3303      	adds	r3, #3
 8002722:	6839      	ldr	r1, [r7, #0]
 8002724:	440b      	add	r3, r1
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3304      	adds	r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
     return offset;
 8002736:	68fb      	ldr	r3, [r7, #12]
    }
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	08010cb0 	.word	0x08010cb0

08002760 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	08010cc0 	.word	0x08010cc0

0800277c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fef8 	bl	800257c <_ZN3ros3MsgC1Ev>
 800278c:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800279c:	609a      	str	r2, [r3, #8]
      message_type(""),
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80027a2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80027a8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
    {
    }
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	08011128 	.word	0x08011128
 80027c0:	08010ce4 	.word	0x08010ce4

080027c4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	8899      	ldrh	r1, [r3, #4]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	b2ca      	uxtb	r2, r1
 80027de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	889b      	ldrh	r3, [r3, #4]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	b299      	uxth	r1, r3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	3301      	adds	r3, #1
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	b2ca      	uxtb	r2, r1
 80027f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	3302      	adds	r3, #2
 80027f8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fd36 	bl	8000270 <strlen>
 8002804:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	4413      	add	r3, r2
 800280c:	69b9      	ldr	r1, [r7, #24]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 fd3a 	bl	8006288 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	3304      	adds	r3, #4
 8002818:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	18d0      	adds	r0, r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4619      	mov	r1, r3
 8002828:	f00c fb5b 	bl	800eee2 <memcpy>
      offset += length_topic_name;
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4413      	add	r3, r2
 8002832:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fd19 	bl	8000270 <strlen>
 800283e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	4413      	add	r3, r2
 8002846:	6979      	ldr	r1, [r7, #20]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fd1d 	bl	8006288 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	18d0      	adds	r0, r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4619      	mov	r1, r3
 8002862:	f00c fb3e 	bl	800eee2 <memcpy>
      offset += length_message_type;
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	4413      	add	r3, r2
 800286c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fcfc 	bl	8000270 <strlen>
 8002878:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	4413      	add	r3, r2
 8002880:	6939      	ldr	r1, [r7, #16]
 8002882:	4618      	mov	r0, r3
 8002884:	f003 fd00 	bl	8006288 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	3304      	adds	r3, #4
 800288c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	18d0      	adds	r0, r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4619      	mov	r1, r3
 800289c:	f00c fb21 	bl	800eee2 <memcpy>
      offset += length_md5sum;
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80028ae:	68f9      	ldr	r1, [r7, #12]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	b2ca      	uxtb	r2, r1
 80028b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	0a19      	lsrs	r1, r3, #8
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	b2ca      	uxtb	r2, r1
 80028c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0c19      	lsrs	r1, r3, #16
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3302      	adds	r3, #2
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	4413      	add	r3, r2
 80028d6:	b2ca      	uxtb	r2, r1
 80028d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	0e19      	lsrs	r1, r3, #24
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3303      	adds	r3, #3
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	b2ca      	uxtb	r2, r1
 80028e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	61fb      	str	r3, [r7, #28]
      return offset;
 80028f0:	69fb      	ldr	r3, [r7, #28]
    }
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b08a      	sub	sp, #40	; 0x28
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4413      	add	r3, r2
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b29a      	uxth	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	889b      	ldrh	r3, [r3, #4]
 800291a:	b21a      	sxth	r2, r3
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	3301      	adds	r3, #1
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	440b      	add	r3, r1
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	b21b      	sxth	r3, r3
 800292a:	4313      	orrs	r3, r2
 800292c:	b21b      	sxth	r3, r3
 800292e:	b29a      	uxth	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	3302      	adds	r3, #2
 8002938:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	441a      	add	r2, r3
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f003 fcbd 	bl	80062c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	3304      	adds	r3, #4
 8002950:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	e00b      	b.n	8002970 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	441a      	add	r2, r3
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	3b01      	subs	r3, #1
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	440b      	add	r3, r1
 8002966:	7812      	ldrb	r2, [r2, #0]
 8002968:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	3301      	adds	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	4413      	add	r3, r2
 8002976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002978:	429a      	cmp	r2, r3
 800297a:	d3ed      	bcc.n	8002958 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	4413      	add	r3, r2
 8002982:	3b01      	subs	r3, #1
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	4413      	add	r3, r2
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	3b01      	subs	r3, #1
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	441a      	add	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4413      	add	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	441a      	add	r2, r3
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fc8a 	bl	80062c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	3304      	adds	r3, #4
 80029b6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	e00b      	b.n	80029d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	441a      	add	r2, r3
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	6839      	ldr	r1, [r7, #0]
 80029ca:	440b      	add	r3, r1
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	3301      	adds	r3, #1
 80029d4:	623b      	str	r3, [r7, #32]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3ed      	bcc.n	80029be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	3b01      	subs	r3, #1
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	441a      	add	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	441a      	add	r2, r3
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 fc57 	bl	80062c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	e00b      	b.n	8002a3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	441a      	add	r2, r3
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	6839      	ldr	r1, [r7, #0]
 8002a30:	440b      	add	r3, r1
 8002a32:	7812      	ldrb	r2, [r2, #0]
 8002a34:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d3ed      	bcc.n	8002a24 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4413      	add	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	440a      	add	r2, r1
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	3301      	adds	r3, #1
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	440b      	add	r3, r1
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	3302      	adds	r3, #2
 8002a96:	6839      	ldr	r1, [r7, #0]
 8002a98:	440b      	add	r3, r1
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	3303      	adds	r3, #3
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	440b      	add	r3, r1
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	061b      	lsls	r3, r3, #24
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	3304      	adds	r3, #4
 8002abe:	61bb      	str	r3, [r7, #24]
     return offset;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
    }
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3728      	adds	r7, #40	; 0x28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	08010ce8 	.word	0x08010ce8

08002ae8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	08010d04 	.word	0x08010d04

08002b04 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fd34 	bl	800257c <_ZN3ros3MsgC1Ev>
 8002b14:	4a06      	ldr	r2, [pc, #24]	; (8002b30 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
      level(0),
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	711a      	strb	r2, [r3, #4]
      msg("")
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002b24:	609a      	str	r2, [r3, #8]
    {
    }
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	08011110 	.word	0x08011110
 8002b34:	08010ce4 	.word	0x08010ce4

08002b38 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	7912      	ldrb	r2, [r2, #4]
 8002b50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3301      	adds	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fb87 	bl	8000270 <strlen>
 8002b62:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 fb8b 	bl	8006288 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3304      	adds	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	18d0      	adds	r0, r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	4619      	mov	r1, r3
 8002b86:	f00c f9ac 	bl	800eee2 <memcpy>
      offset += length_msg;
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4413      	add	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b92:	68fb      	ldr	r3, [r7, #12]
    }
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	441a      	add	r2, r3
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 fb7c 	bl	80062c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e00b      	b.n	8002bf2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	441a      	add	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6839      	ldr	r1, [r7, #0]
 8002be6:	440b      	add	r3, r1
 8002be8:	7812      	ldrb	r2, [r2, #0]
 8002bea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3ed      	bcc.n	8002bda <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	3b01      	subs	r3, #1
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	441a      	add	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
     return offset;
 8002c22:	693b      	ldr	r3, [r7, #16]
    }
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	08010d28 	.word	0x08010d28

08002c48 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	08010d3c 	.word	0x08010d3c

08002c64 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fc84 	bl	800257c <_ZN3ros3MsgC1Ev>
 8002c74:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	080110f8 	.word	0x080110f8

08002cc0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	b2ca      	uxtb	r2, r1
 8002cda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0a19      	lsrs	r1, r3, #8
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	b2ca      	uxtb	r2, r1
 8002cec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	0c19      	lsrs	r1, r3, #16
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	b2ca      	uxtb	r2, r1
 8002cfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0e19      	lsrs	r1, r3, #24
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	3303      	adds	r3, #3
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b2ca      	uxtb	r2, r1
 8002d10:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	3304      	adds	r3, #4
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	e02a      	b.n	8002d74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002d2c:	6939      	ldr	r1, [r7, #16]
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	b2ca      	uxtb	r2, r1
 8002d36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	0a19      	lsrs	r1, r3, #8
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	3301      	adds	r3, #1
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	b2ca      	uxtb	r2, r1
 8002d46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	0c19      	lsrs	r1, r3, #16
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	3302      	adds	r3, #2
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	b2ca      	uxtb	r2, r1
 8002d56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	0e19      	lsrs	r1, r3, #24
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	3303      	adds	r3, #3
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	b2ca      	uxtb	r2, r1
 8002d66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	3301      	adds	r3, #1
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d3cf      	bcc.n	8002d1e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6919      	ldr	r1, [r3, #16]
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	b2ca      	uxtb	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	0a19      	lsrs	r1, r3, #8
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	3301      	adds	r3, #1
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	4413      	add	r3, r2
 8002d9a:	b2ca      	uxtb	r2, r1
 8002d9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	0c19      	lsrs	r1, r3, #16
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	3302      	adds	r3, #2
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	b2ca      	uxtb	r2, r1
 8002dae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	0e19      	lsrs	r1, r3, #24
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	3303      	adds	r3, #3
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b2ca      	uxtb	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	e02a      	b.n	8002e24 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	b2ca      	uxtb	r2, r1
 8002de6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	0a19      	lsrs	r1, r3, #8
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	3301      	adds	r3, #1
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	b2ca      	uxtb	r2, r1
 8002df6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	0c19      	lsrs	r1, r3, #16
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	3302      	adds	r3, #2
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	b2ca      	uxtb	r2, r1
 8002e06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	0e19      	lsrs	r1, r3, #24
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	3303      	adds	r3, #3
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	b2ca      	uxtb	r2, r1
 8002e16:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3301      	adds	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d3cf      	bcc.n	8002dce <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69d9      	ldr	r1, [r3, #28]
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	b2ca      	uxtb	r2, r1
 8002e3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	0a19      	lsrs	r1, r3, #8
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	3301      	adds	r3, #1
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b2ca      	uxtb	r2, r1
 8002e4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	0c19      	lsrs	r1, r3, #16
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	3302      	adds	r3, #2
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	b2ca      	uxtb	r2, r1
 8002e5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	0e19      	lsrs	r1, r3, #24
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	3303      	adds	r3, #3
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	b2ca      	uxtb	r2, r1
 8002e70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	3304      	adds	r3, #4
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	e027      	b.n	8002ece <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd f9f0 	bl	8000270 <strlen>
 8002e90:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	6979      	ldr	r1, [r7, #20]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 f9f4 	bl	8006288 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	18d0      	adds	r0, r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f00c f811 	bl	800eee2 <memcpy>
      offset += length_stringsi;
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d3d2      	bcc.n	8002e7e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002eda:	4618      	mov	r0, r3
 8002edc:	3728      	adds	r7, #40	; 0x28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b08e      	sub	sp, #56	; 0x38
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efc:	3301      	adds	r3, #1
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	4413      	add	r3, r2
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	6a3a      	ldr	r2, [r7, #32]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0e:	3302      	adds	r3, #2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f20:	3303      	adds	r3, #3
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	6a3a      	ldr	r2, [r7, #32]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f32:	3304      	adds	r3, #4
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	6a3a      	ldr	r2, [r7, #32]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d90a      	bls.n	8002f56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f00b f9a6 	bl	800e29c <realloc>
 8002f50:	4602      	mov	r2, r0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f60:	e035      	b.n	8002fce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f6a:	6839      	ldr	r1, [r7, #0]
 8002f6c:	440a      	add	r2, r1
 8002f6e:	7812      	ldrb	r2, [r2, #0]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f78:	3301      	adds	r3, #1
 8002f7a:	6839      	ldr	r1, [r7, #0]
 8002f7c:	440b      	add	r3, r1
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	6839      	ldr	r1, [r7, #0]
 8002f8e:	440b      	add	r3, r1
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9c:	3303      	adds	r3, #3
 8002f9e:	6839      	ldr	r1, [r7, #0]
 8002fa0:	440b      	add	r3, r1
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	3301      	adds	r3, #1
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3c4      	bcc.n	8002f62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4413      	add	r3, r2
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	4413      	add	r3, r2
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	4313      	orrs	r3, r2
 8003004:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	3303      	adds	r3, #3
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	4413      	add	r3, r2
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	4313      	orrs	r3, r2
 8003016:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	3304      	adds	r3, #4
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	429a      	cmp	r2, r3
 8003026:	d90a      	bls.n	800303e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f00b f932 	bl	800e29c <realloc>
 8003038:	4602      	mov	r2, r0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003044:	2300      	movs	r3, #0
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003048:	e035      	b.n	80030b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003052:	6839      	ldr	r1, [r7, #0]
 8003054:	440a      	add	r2, r1
 8003056:	7812      	ldrb	r2, [r2, #0]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	3301      	adds	r3, #1
 8003062:	6839      	ldr	r1, [r7, #0]
 8003064:	440b      	add	r3, r1
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	3302      	adds	r3, #2
 8003074:	6839      	ldr	r1, [r7, #0]
 8003076:	440b      	add	r3, r1
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003084:	3303      	adds	r3, #3
 8003086:	6839      	ldr	r1, [r7, #0]
 8003088:	440b      	add	r3, r1
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	3304      	adds	r3, #4
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	3214      	adds	r2, #20
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	3301      	adds	r3, #1
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030bc:	429a      	cmp	r2, r3
 80030be:	d3c4      	bcc.n	800304a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80030ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030cc:	3301      	adds	r3, #1
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4413      	add	r3, r2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	3302      	adds	r3, #2
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	041b      	lsls	r3, r3, #16
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	3303      	adds	r3, #3
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	3304      	adds	r3, #4
 8003104:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	429a      	cmp	r2, r3
 800310e:	d90a      	bls.n	8003126 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f00b f8be 	bl	800e29c <realloc>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003130:	e03e      	b.n	80031b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	441a      	add	r2, r3
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f003 f8c1 	bl	80062c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003146:	3304      	adds	r3, #4
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
 800314e:	e00b      	b.n	8003168 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	441a      	add	r2, r3
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	3b01      	subs	r3, #1
 800315a:	6839      	ldr	r1, [r7, #0]
 800315c:	440b      	add	r3, r1
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	3301      	adds	r3, #1
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
 8003168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4413      	add	r3, r2
 800316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003170:	429a      	cmp	r2, r3
 8003172:	d3ed      	bcc.n	8003150 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	3b01      	subs	r3, #1
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4413      	add	r3, r2
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003186:	3b01      	subs	r3, #1
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	441a      	add	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	3220      	adds	r2, #32
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	3301      	adds	r3, #1
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d3bb      	bcc.n	8003132 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80031ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80031bc:	4618      	mov	r0, r3
 80031be:	3738      	adds	r7, #56	; 0x38
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	08010fa4 	.word	0x08010fa4

080031e0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	08010d60 	.word	0x08010d60

080031fc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	611a      	str	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68d8      	ldr	r0, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6891      	ldr	r1, [r2, #8]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	4798      	blx	r3
 8003248:	4603      	mov	r3, r0
  };
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
  }
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
      huart(&huart6), rind(0), twind(0), tfind(0){
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <_ZN13STM32HardwareC1Ev+0x34>)
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	2000054c 	.word	0x2000054c

080032c8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f804 	bl	80032de <_ZN13STM32Hardware10reset_rbufEv>
    }
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f2:	4619      	mov	r1, r3
 80032f4:	f008 f916 	bl	800b524 <HAL_UART_Receive_DMA>
    }
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_ZN13STM32Hardware4readEv>:

    int read(){
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003308:	f04f 33ff 	mov.w	r3, #4294967295
 800330c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ffa8 	bl	800326a <_ZN13STM32Hardware10getRdmaIndEv>
 800331a:	4603      	mov	r3, r0
 800331c:	429c      	cmp	r4, r3
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d012      	beq.n	8003350 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003330:	1c59      	adds	r1, r3, #1
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	791b      	ldrb	r3, [r3, #4]
 800333e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8003350:	68fb      	ldr	r3, [r7, #12]
    }
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	bd90      	pop	{r4, r7, pc}
	...

0800335c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b20      	cmp	r3, #32
 8003370:	d108      	bne.n	8003384 <_ZN13STM32Hardware5flushEv+0x28>
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <_ZN13STM32Hardware5flushEv+0xe4>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	f083 0301 	eor.w	r3, r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <_ZN13STM32Hardware5flushEv+0x28>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <_ZN13STM32Hardware5flushEv+0x2a>
 8003384:	2300      	movs	r3, #0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d055      	beq.n	8003436 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 800338a:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <_ZN13STM32Hardware5flushEv+0xe4>)
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800339c:	429a      	cmp	r2, r3
 800339e:	d047      	beq.n	8003430 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d217      	bcs.n	80033e4 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80033d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	89fa      	ldrh	r2, [r7, #14]
 80033dc:	4619      	mov	r1, r3
 80033de:	f008 f831 	bl	800b444 <HAL_UART_Transmit_DMA>
 80033e2:	e01f      	b.n	8003424 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80033f0:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80033fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	89fa      	ldrh	r2, [r7, #14]
 8003406:	4619      	mov	r1, r3
 8003408:	f008 f81c 	bl	800b444 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind); //lỗi ở đây, sửa &(tbuf) thành tbuf
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800341c:	b29b      	uxth	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	f008 f810 	bl	800b444 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <_ZN13STM32Hardware5flushEv+0xe4>)
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
      }
    }
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200006d4 	.word	0x200006d4

08003444 <_ZN13STM32Hardware5writeEPKhi>:

    void write(const uint8_t* data, int length){  //lỗi ở đây, sửa uint8_t* thành const uint8_t
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
      int n = length;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345a:	bfa8      	it	ge
 800345c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8003460:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003468:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	4293      	cmp	r3, r2
 8003470:	bf28      	it	cs
 8003472:	4613      	movcs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800347c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	4618      	mov	r0, r3
 800348a:	f00b fd2a 	bl	800eee2 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4413      	add	r3, r2
 8003498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d00b      	beq.n	80034c2 <_ZN13STM32Hardware5writeEPKhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	18d1      	adds	r1, r2, r3
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	f00b fd10 	bl	800eee2 <memcpy>
      }

      flush();
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff ff4a 	bl	800335c <_ZN13STM32Hardware5flushEv>
    }
 80034c8:	bf00      	nop
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	f004 f92a 	bl	8007730 <HAL_GetTick>
 80034dc:	4603      	mov	r3, r0
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
      data(0)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff f842 	bl	800257c <_ZN3ros3MsgC1Ev>
 80034f8:	4a05      	ldr	r2, [pc, #20]	; (8003510 <_ZN8std_msgs5Int32C1Ev+0x28>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	605a      	str	r2, [r3, #4]
    {
    }
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	080110b4 	.word	0x080110b4

08003514 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	b2ca      	uxtb	r2, r1
 8003532:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	0a19      	lsrs	r1, r3, #8
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3301      	adds	r3, #1
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	4413      	add	r3, r2
 8003540:	b2ca      	uxtb	r2, r1
 8003542:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	0c19      	lsrs	r1, r3, #16
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3302      	adds	r3, #2
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	4413      	add	r3, r2
 8003550:	b2ca      	uxtb	r2, r1
 8003552:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	0e19      	lsrs	r1, r3, #24
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3303      	adds	r3, #3
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	4413      	add	r3, r2
 8003560:	b2ca      	uxtb	r2, r1
 8003562:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3304      	adds	r3, #4
 8003568:	60fb      	str	r3, [r7, #12]
      return offset;
 800356a:	68fb      	ldr	r3, [r7, #12]
    }
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	6839      	ldr	r1, [r7, #0]
 8003590:	440a      	add	r2, r1
 8003592:	7812      	ldrb	r2, [r2, #0]
 8003594:	4313      	orrs	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3301      	adds	r3, #1
 800359e:	6839      	ldr	r1, [r7, #0]
 80035a0:	440b      	add	r3, r1
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3302      	adds	r3, #2
 80035b0:	6839      	ldr	r1, [r7, #0]
 80035b2:	440b      	add	r3, r1
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	041b      	lsls	r3, r3, #16
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3303      	adds	r3, #3
 80035c2:	6839      	ldr	r1, [r7, #0]
 80035c4:	440b      	add	r3, r1
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3304      	adds	r3, #4
 80035d8:	60fb      	str	r3, [r7, #12]
     return offset;
 80035da:	68fb      	ldr	r3, [r7, #12]
    }
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <_ZN8std_msgs5Int327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int32"; };
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 80035f2:	4618      	mov	r0, r3
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	08010d84 	.word	0x08010d84

08003604 <_ZN8std_msgs5Int326getMD5Ev>:
    virtual const char * getMD5() override { return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	08010d94 	.word	0x08010d94

08003620 <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
    {
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe ffa6 	bl	800257c <_ZN3ros3MsgC1Ev>
 8003630:	4a03      	ldr	r2, [pc, #12]	; (8003640 <_ZN8std_msgs5EmptyC1Ev+0x20>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
    }
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	0801109c 	.word	0x0801109c

08003644 <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
      return offset;
 8003652:	68fb      	ldr	r3, [r7, #12]
    }
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
     return offset;
 800366e:	68fb      	ldr	r3, [r7, #12]
    }
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <_ZN8std_msgs5Empty7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Empty"; };
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	08010db8 	.word	0x08010db8

08003698 <_ZN8std_msgs5Empty6getMD5Ev>:
    virtual const char * getMD5() override { return "d41d8cd98f00b204e9800998ecf8427e"; };
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	08010dc8 	.word	0x08010dc8

080036b4 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
      data("")
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe ff5c 	bl	800257c <_ZN3ros3MsgC1Ev>
 80036c4:	4a05      	ldr	r2, [pc, #20]	; (80036dc <_ZN8std_msgs6StringC1Ev+0x28>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80036ce:	605a      	str	r2, [r3, #4]
    {
    }
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	08011084 	.word	0x08011084
 80036e0:	08010ce4 	.word	0x08010ce4

080036e4 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc fdba 	bl	8000270 <strlen>
 80036fc:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	4413      	add	r3, r2
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	4618      	mov	r0, r3
 8003708:	f002 fdbe 	bl	8006288 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3304      	adds	r3, #4
 8003710:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	18d0      	adds	r0, r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	4619      	mov	r1, r3
 8003720:	f00b fbdf 	bl	800eee2 <memcpy>
      offset += length_data;
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4413      	add	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
      return offset;
 800372c:	68fb      	ldr	r3, [r7, #12]
    }
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	441a      	add	r2, r3
 800374a:	f107 030c 	add.w	r3, r7, #12
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f002 fdb8 	bl	80062c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	3304      	adds	r3, #4
 800375a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	e00b      	b.n	800377a <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	441a      	add	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3b01      	subs	r3, #1
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	440b      	add	r3, r1
 8003770:	7812      	ldrb	r2, [r2, #0]
 8003772:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3301      	adds	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	429a      	cmp	r2, r3
 8003784:	d3ed      	bcc.n	8003762 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	3b01      	subs	r3, #1
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	4413      	add	r3, r2
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	3b01      	subs	r3, #1
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
     return offset;
 80037aa:	693b      	ldr	r3, [r7, #16]
    }
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <_ZN8std_msgs6String7getTypeEv+0x18>)
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	08010dec 	.word	0x08010dec

080037d0 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	08010dfc 	.word	0x08010dfc

080037ec <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fec0 	bl	800257c <_ZN3ros3MsgC1Ev>
 80037fc:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	601a      	str	r2, [r3, #0]
      x(0),
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	0801106c 	.word	0x0801106c

0800383c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800383c:	b480      	push	{r7}
 800383e:	b08b      	sub	sp, #44	; 0x2c
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003850:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800385a:	6838      	ldr	r0, [r7, #0]
 800385c:	4401      	add	r1, r0
 800385e:	b2d3      	uxtb	r3, r2
 8003860:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003862:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	0a02      	lsrs	r2, r0, #8
 8003870:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003874:	0a0b      	lsrs	r3, r1, #8
 8003876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003878:	3101      	adds	r1, #1
 800387a:	6838      	ldr	r0, [r7, #0]
 800387c:	4401      	add	r1, r0
 800387e:	b2d3      	uxtb	r3, r2
 8003880:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003882:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	0c02      	lsrs	r2, r0, #16
 8003890:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003894:	0c0b      	lsrs	r3, r1, #16
 8003896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003898:	3102      	adds	r1, #2
 800389a:	6838      	ldr	r0, [r7, #0]
 800389c:	4401      	add	r1, r0
 800389e:	b2d3      	uxtb	r3, r2
 80038a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80038a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	0e02      	lsrs	r2, r0, #24
 80038b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038b4:	0e0b      	lsrs	r3, r1, #24
 80038b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b8:	3103      	adds	r1, #3
 80038ba:	6838      	ldr	r0, [r7, #0]
 80038bc:	4401      	add	r1, r0
 80038be:	b2d3      	uxtb	r3, r2
 80038c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80038c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	000a      	movs	r2, r1
 80038d0:	2300      	movs	r3, #0
 80038d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d4:	3104      	adds	r1, #4
 80038d6:	6838      	ldr	r0, [r7, #0]
 80038d8:	4401      	add	r1, r0
 80038da:	b2d3      	uxtb	r3, r2
 80038dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80038de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	0a0a      	lsrs	r2, r1, #8
 80038ec:	2300      	movs	r3, #0
 80038ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f0:	3105      	adds	r1, #5
 80038f2:	6838      	ldr	r0, [r7, #0]
 80038f4:	4401      	add	r1, r0
 80038f6:	b2d3      	uxtb	r3, r2
 80038f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80038fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	0c0a      	lsrs	r2, r1, #16
 8003908:	2300      	movs	r3, #0
 800390a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800390c:	3106      	adds	r1, #6
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	4401      	add	r1, r0
 8003912:	b2d3      	uxtb	r3, r2
 8003914:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003916:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	0e0a      	lsrs	r2, r1, #24
 8003924:	2300      	movs	r3, #0
 8003926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003928:	3107      	adds	r1, #7
 800392a:	6838      	ldr	r0, [r7, #0]
 800392c:	4401      	add	r1, r0
 800392e:	b2d3      	uxtb	r3, r2
 8003930:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	3308      	adds	r3, #8
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800393e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003942:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003948:	6838      	ldr	r0, [r7, #0]
 800394a:	4401      	add	r1, r0
 800394c:	b2d3      	uxtb	r3, r2
 800394e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003950:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	0a02      	lsrs	r2, r0, #8
 800395e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003962:	0a0b      	lsrs	r3, r1, #8
 8003964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003966:	3101      	adds	r1, #1
 8003968:	6838      	ldr	r0, [r7, #0]
 800396a:	4401      	add	r1, r0
 800396c:	b2d3      	uxtb	r3, r2
 800396e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003970:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	0c02      	lsrs	r2, r0, #16
 800397e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003982:	0c0b      	lsrs	r3, r1, #16
 8003984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003986:	3102      	adds	r1, #2
 8003988:	6838      	ldr	r0, [r7, #0]
 800398a:	4401      	add	r1, r0
 800398c:	b2d3      	uxtb	r3, r2
 800398e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003990:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	0e02      	lsrs	r2, r0, #24
 800399e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039a2:	0e0b      	lsrs	r3, r1, #24
 80039a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039a6:	3103      	adds	r1, #3
 80039a8:	6838      	ldr	r0, [r7, #0]
 80039aa:	4401      	add	r1, r0
 80039ac:	b2d3      	uxtb	r3, r2
 80039ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80039b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	000a      	movs	r2, r1
 80039be:	2300      	movs	r3, #0
 80039c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c2:	3104      	adds	r1, #4
 80039c4:	6838      	ldr	r0, [r7, #0]
 80039c6:	4401      	add	r1, r0
 80039c8:	b2d3      	uxtb	r3, r2
 80039ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80039cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	0a0a      	lsrs	r2, r1, #8
 80039da:	2300      	movs	r3, #0
 80039dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039de:	3105      	adds	r1, #5
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	4401      	add	r1, r0
 80039e4:	b2d3      	uxtb	r3, r2
 80039e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80039e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	0c0a      	lsrs	r2, r1, #16
 80039f6:	2300      	movs	r3, #0
 80039f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039fa:	3106      	adds	r1, #6
 80039fc:	6838      	ldr	r0, [r7, #0]
 80039fe:	4401      	add	r1, r0
 8003a00:	b2d3      	uxtb	r3, r2
 8003a02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003a04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	0e0a      	lsrs	r2, r1, #24
 8003a12:	2300      	movs	r3, #0
 8003a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a16:	3107      	adds	r1, #7
 8003a18:	6838      	ldr	r0, [r7, #0]
 8003a1a:	4401      	add	r1, r0
 8003a1c:	b2d3      	uxtb	r3, r2
 8003a1e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	3308      	adds	r3, #8
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a36:	6838      	ldr	r0, [r7, #0]
 8003a38:	4401      	add	r1, r0
 8003a3a:	b2d3      	uxtb	r3, r2
 8003a3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003a3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	0a02      	lsrs	r2, r0, #8
 8003a4c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003a50:	0a0b      	lsrs	r3, r1, #8
 8003a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a54:	3101      	adds	r1, #1
 8003a56:	6838      	ldr	r0, [r7, #0]
 8003a58:	4401      	add	r1, r0
 8003a5a:	b2d3      	uxtb	r3, r2
 8003a5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	0c02      	lsrs	r2, r0, #16
 8003a6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a70:	0c0b      	lsrs	r3, r1, #16
 8003a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a74:	3102      	adds	r1, #2
 8003a76:	6838      	ldr	r0, [r7, #0]
 8003a78:	4401      	add	r1, r0
 8003a7a:	b2d3      	uxtb	r3, r2
 8003a7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003a7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	0e02      	lsrs	r2, r0, #24
 8003a8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a90:	0e0b      	lsrs	r3, r1, #24
 8003a92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a94:	3103      	adds	r1, #3
 8003a96:	6838      	ldr	r0, [r7, #0]
 8003a98:	4401      	add	r1, r0
 8003a9a:	b2d3      	uxtb	r3, r2
 8003a9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003a9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	000a      	movs	r2, r1
 8003aac:	2300      	movs	r3, #0
 8003aae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ab0:	3104      	adds	r1, #4
 8003ab2:	6838      	ldr	r0, [r7, #0]
 8003ab4:	4401      	add	r1, r0
 8003ab6:	b2d3      	uxtb	r3, r2
 8003ab8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	0a0a      	lsrs	r2, r1, #8
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003acc:	3105      	adds	r1, #5
 8003ace:	6838      	ldr	r0, [r7, #0]
 8003ad0:	4401      	add	r1, r0
 8003ad2:	b2d3      	uxtb	r3, r2
 8003ad4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	0c0a      	lsrs	r2, r1, #16
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ae8:	3106      	adds	r1, #6
 8003aea:	6838      	ldr	r0, [r7, #0]
 8003aec:	4401      	add	r1, r0
 8003aee:	b2d3      	uxtb	r3, r2
 8003af0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	0e0a      	lsrs	r2, r1, #24
 8003b00:	2300      	movs	r3, #0
 8003b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b04:	3107      	adds	r1, #7
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	4401      	add	r1, r0
 8003b0a:	b2d3      	uxtb	r3, r2
 8003b0c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	3308      	adds	r3, #8
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b16:	4618      	mov	r0, r3
 8003b18:	372c      	adds	r7, #44	; 0x2c
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003b22:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b26:	b0eb      	sub	sp, #428	; 0x1ac
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8003b2e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b44:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b48:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003b4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b50:	4413      	add	r3, r2
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2200      	movs	r2, #0
 8003b58:	461c      	mov	r4, r3
 8003b5a:	4615      	mov	r5, r2
 8003b5c:	ea40 0804 	orr.w	r8, r0, r4
 8003b60:	ea41 0905 	orr.w	r9, r1, r5
 8003b64:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b68:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b76:	4413      	add	r3, r2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	469a      	mov	sl, r3
 8003b80:	4693      	mov	fp, r2
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003b8e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003b92:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003b96:	ea40 0402 	orr.w	r4, r0, r2
 8003b9a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003ba4:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003ba8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003bb0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bb4:	1c9a      	adds	r2, r3, #2
 8003bb6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bba:	4413      	add	r3, r2
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003bc6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003bd6:	464c      	mov	r4, r9
 8003bd8:	0423      	lsls	r3, r4, #16
 8003bda:	4644      	mov	r4, r8
 8003bdc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003be0:	4644      	mov	r4, r8
 8003be2:	0422      	lsls	r2, r4, #16
 8003be4:	ea40 0402 	orr.w	r4, r0, r2
 8003be8:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003bec:	430b      	orrs	r3, r1
 8003bee:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003bf2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003bf6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003bfa:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003bfe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c02:	1cda      	adds	r2, r3, #3
 8003c04:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c08:	4413      	add	r3, r2
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003c14:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003c18:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003c1c:	4623      	mov	r3, r4
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003c24:	4623      	mov	r3, r4
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003c2c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003c30:	4623      	mov	r3, r4
 8003c32:	4303      	orrs	r3, r0
 8003c34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003c38:	462b      	mov	r3, r5
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c40:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003c44:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c48:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003c4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c50:	1d1a      	adds	r2, r3, #4
 8003c52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c56:	4413      	add	r3, r2
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003c62:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003c72:	0023      	movs	r3, r4
 8003c74:	2200      	movs	r2, #0
 8003c76:	ea40 0402 	orr.w	r4, r0, r2
 8003c7a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003c84:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003c88:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c8c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003c90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c94:	1d5a      	adds	r2, r3, #5
 8003c96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c9a:	4413      	add	r3, r2
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003ca6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003cb6:	0223      	lsls	r3, r4, #8
 8003cb8:	2200      	movs	r2, #0
 8003cba:	ea40 0402 	orr.w	r4, r0, r2
 8003cbe:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003cc8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003ccc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003cd0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003cd4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cd8:	1d9a      	adds	r2, r3, #6
 8003cda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cde:	4413      	add	r3, r2
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003cea:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003cfa:	0423      	lsls	r3, r4, #16
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	ea40 0402 	orr.w	r4, r0, r2
 8003d02:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003d06:	430b      	orrs	r3, r1
 8003d08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d0c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003d10:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d14:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003d18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d1c:	1dda      	adds	r2, r3, #7
 8003d1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d22:	4413      	add	r3, r2
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003d2e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003d3e:	0623      	lsls	r3, r4, #24
 8003d40:	2200      	movs	r2, #0
 8003d42:	ea40 0402 	orr.w	r4, r0, r2
 8003d46:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003d50:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003d54:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003d58:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003d5c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003d60:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003d64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d68:	3308      	adds	r3, #8
 8003d6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d7a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d7e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003d82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d86:	4413      	add	r3, r2
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003d92:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003d96:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	4303      	orrs	r3, r0
 8003d9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003da2:	462b      	mov	r3, r5
 8003da4:	430b      	orrs	r3, r1
 8003da6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003daa:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003dae:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003db2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003db6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dc0:	4413      	add	r3, r2
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dcc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003ddc:	464c      	mov	r4, r9
 8003dde:	0223      	lsls	r3, r4, #8
 8003de0:	4644      	mov	r4, r8
 8003de2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003de6:	4644      	mov	r4, r8
 8003de8:	0222      	lsls	r2, r4, #8
 8003dea:	ea40 0402 	orr.w	r4, r0, r2
 8003dee:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003df2:	430b      	orrs	r3, r1
 8003df4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003df8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003dfc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e00:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003e04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e08:	1c9a      	adds	r2, r3, #2
 8003e0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003e2a:	464c      	mov	r4, r9
 8003e2c:	0423      	lsls	r3, r4, #16
 8003e2e:	4644      	mov	r4, r8
 8003e30:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003e34:	4644      	mov	r4, r8
 8003e36:	0422      	lsls	r2, r4, #16
 8003e38:	ea40 0402 	orr.w	r4, r0, r2
 8003e3c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003e40:	430b      	orrs	r3, r1
 8003e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e46:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003e4a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e4e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003e52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e56:	1cda      	adds	r2, r3, #3
 8003e58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e5c:	4413      	add	r3, r2
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e68:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e6c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003e70:	4623      	mov	r3, r4
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e78:	4623      	mov	r3, r4
 8003e7a:	061b      	lsls	r3, r3, #24
 8003e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e80:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003e84:	4623      	mov	r3, r4
 8003e86:	4303      	orrs	r3, r0
 8003e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e94:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003e98:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003e9c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ea0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003eaa:	4413      	add	r3, r2
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eb6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003ec6:	0023      	movs	r3, r4
 8003ec8:	2200      	movs	r2, #0
 8003eca:	ea40 0402 	orr.w	r4, r0, r2
 8003ece:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ed8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003edc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ee0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ee4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ee8:	1d5a      	adds	r2, r3, #5
 8003eea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003eee:	4413      	add	r3, r2
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003efa:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003f0a:	0223      	lsls	r3, r4, #8
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	ea40 0402 	orr.w	r4, r0, r2
 8003f12:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003f16:	430b      	orrs	r3, r1
 8003f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f1c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003f20:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003f24:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003f28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f2c:	1d9a      	adds	r2, r3, #6
 8003f2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f32:	4413      	add	r3, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003f4e:	0423      	lsls	r3, r4, #16
 8003f50:	2200      	movs	r2, #0
 8003f52:	ea40 0402 	orr.w	r4, r0, r2
 8003f56:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f60:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003f64:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003f68:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003f6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f70:	1dda      	adds	r2, r3, #7
 8003f72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f76:	4413      	add	r3, r2
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003f92:	0623      	lsls	r3, r4, #24
 8003f94:	2200      	movs	r2, #0
 8003f96:	ea40 0402 	orr.w	r4, r0, r2
 8003f9a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003fa4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003fa8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003fac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003fb0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003fb4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003fb8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003fce:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003fd2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003fd6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fe6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003fea:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003fee:	4623      	mov	r3, r4
 8003ff0:	4303      	orrs	r3, r0
 8003ff2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ffa:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003ffe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004002:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004006:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004010:	4413      	add	r3, r2
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2200      	movs	r2, #0
 8004018:	673b      	str	r3, [r7, #112]	; 0x70
 800401a:	677a      	str	r2, [r7, #116]	; 0x74
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004028:	464c      	mov	r4, r9
 800402a:	0223      	lsls	r3, r4, #8
 800402c:	4644      	mov	r4, r8
 800402e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004032:	4644      	mov	r4, r8
 8004034:	0222      	lsls	r2, r4, #8
 8004036:	ea40 0402 	orr.w	r4, r0, r2
 800403a:	66bc      	str	r4, [r7, #104]	; 0x68
 800403c:	430b      	orrs	r3, r1
 800403e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004040:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004044:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004048:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800404c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004050:	1c9a      	adds	r2, r3, #2
 8004052:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004056:	4413      	add	r3, r2
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2200      	movs	r2, #0
 800405e:	663b      	str	r3, [r7, #96]	; 0x60
 8004060:	667a      	str	r2, [r7, #100]	; 0x64
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800406e:	464c      	mov	r4, r9
 8004070:	0423      	lsls	r3, r4, #16
 8004072:	4644      	mov	r4, r8
 8004074:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004078:	4644      	mov	r4, r8
 800407a:	0422      	lsls	r2, r4, #16
 800407c:	ea40 0402 	orr.w	r4, r0, r2
 8004080:	65bc      	str	r4, [r7, #88]	; 0x58
 8004082:	430b      	orrs	r3, r1
 8004084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004086:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800408a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800408e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004092:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004096:	1cda      	adds	r2, r3, #3
 8004098:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800409c:	4413      	add	r3, r2
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2200      	movs	r2, #0
 80040a4:	653b      	str	r3, [r7, #80]	; 0x50
 80040a6:	657a      	str	r2, [r7, #84]	; 0x54
 80040a8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80040ac:	4623      	mov	r3, r4
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b2:	4623      	mov	r3, r4
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80040bc:	4623      	mov	r3, r4
 80040be:	4303      	orrs	r3, r0
 80040c0:	643b      	str	r3, [r7, #64]	; 0x40
 80040c2:	462b      	mov	r3, r5
 80040c4:	430b      	orrs	r3, r1
 80040c6:	647b      	str	r3, [r7, #68]	; 0x44
 80040c8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80040cc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80040d0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80040d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80040d8:	1d1a      	adds	r2, r3, #4
 80040da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80040de:	4413      	add	r3, r2
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2200      	movs	r2, #0
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80040f4:	0023      	movs	r3, r4
 80040f6:	2200      	movs	r2, #0
 80040f8:	ea40 0402 	orr.w	r4, r0, r2
 80040fc:	633c      	str	r4, [r7, #48]	; 0x30
 80040fe:	430b      	orrs	r3, r1
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
 8004102:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004106:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800410a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800410e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004112:	1d5a      	adds	r2, r3, #5
 8004114:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004118:	4413      	add	r3, r2
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2200      	movs	r2, #0
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
 8004122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800412e:	0223      	lsls	r3, r4, #8
 8004130:	2200      	movs	r2, #0
 8004132:	ea40 0402 	orr.w	r4, r0, r2
 8004136:	623c      	str	r4, [r7, #32]
 8004138:	430b      	orrs	r3, r1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004140:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004144:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004148:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800414c:	3306      	adds	r3, #6
 800414e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8004152:	4413      	add	r3, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2200      	movs	r2, #0
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	61fa      	str	r2, [r7, #28]
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	69bc      	ldr	r4, [r7, #24]
 8004168:	0423      	lsls	r3, r4, #16
 800416a:	2200      	movs	r2, #0
 800416c:	ea40 0402 	orr.w	r4, r0, r2
 8004170:	613c      	str	r4, [r7, #16]
 8004172:	430b      	orrs	r3, r1
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800417a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800417e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004182:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004186:	3307      	adds	r3, #7
 8004188:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800418c:	4413      	add	r3, r2
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2200      	movs	r2, #0
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	60fa      	str	r2, [r7, #12]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	68bc      	ldr	r4, [r7, #8]
 80041a2:	0623      	lsls	r3, r4, #24
 80041a4:	2200      	movs	r2, #0
 80041a6:	ea40 0402 	orr.w	r4, r0, r2
 80041aa:	603c      	str	r4, [r7, #0]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80041b4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80041b8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80041bc:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80041c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80041c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80041c8:	3308      	adds	r3, #8
 80041ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80041ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80041d2:	4618      	mov	r0, r3
 80041d4:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80041d8:	46bd      	mov	sp, r7
 80041da:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80041de:	4770      	bx	lr

080041e0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	08010e20 	.word	0x08010e20

080041fc <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	08010e38 	.word	0x08010e38

08004218 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe f9aa 	bl	800257c <_ZN3ros3MsgC1Ev>
 8004228:	4a08      	ldr	r2, [pc, #32]	; (800424c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
      linear(),
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3308      	adds	r3, #8
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fada 	bl	80037ec <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3328      	adds	r3, #40	; 0x28
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fad5 	bl	80037ec <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	08011054 	.word	0x08011054

08004250 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f103 0008 	add.w	r0, r3, #8
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	4413      	add	r3, r2
 800426a:	4619      	mov	r1, r3
 800426c:	f7ff fae6 	bl	800383c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	4413      	add	r3, r2
 8004284:	4619      	mov	r1, r3
 8004286:	f7ff fad9 	bl	800383c <_ZNK13geometry_msgs7Vector39serializeEPh>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
      return offset;
 8004292:	68fb      	ldr	r3, [r7, #12]
    }
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f103 0008 	add.w	r0, r3, #8
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	4413      	add	r3, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	f7ff fc33 	bl	8003b22 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	4413      	add	r3, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	f7ff fc26 	bl	8003b22 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80042d6:	4602      	mov	r2, r0
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
     return offset;
 80042de:	68fb      	ldr	r3, [r7, #12]
    }
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	08010e5c 	.word	0x08010e5c

08004304 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	4b03      	ldr	r3, [pc, #12]	; (800431c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	08010e70 	.word	0x08010e70

08004320 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe f926 	bl	800257c <_ZN3ros3MsgC1Ev>
 8004330:	4a09      	ldr	r2, [pc, #36]	; (8004358 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	601a      	str	r2, [r3, #0]
      seq(0),
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
      stamp(),
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3308      	adds	r3, #8
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe f90a 	bl	800255a <_ZN3ros4TimeC1Ev>
      frame_id("")
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a04      	ldr	r2, [pc, #16]	; (800435c <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800434a:	611a      	str	r2, [r3, #16]
    {
    }
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	0801103c 	.word	0x0801103c
 800435c:	08010ce4 	.word	0x08010ce4

08004360 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6859      	ldr	r1, [r3, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	4413      	add	r3, r2
 8004378:	b2ca      	uxtb	r2, r1
 800437a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	0a19      	lsrs	r1, r3, #8
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3301      	adds	r3, #1
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	4413      	add	r3, r2
 800438a:	b2ca      	uxtb	r2, r1
 800438c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	0c19      	lsrs	r1, r3, #16
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3302      	adds	r3, #2
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	4413      	add	r3, r2
 800439c:	b2ca      	uxtb	r2, r1
 800439e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0e19      	lsrs	r1, r3, #24
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3303      	adds	r3, #3
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	4413      	add	r3, r2
 80043ae:	b2ca      	uxtb	r2, r1
 80043b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3304      	adds	r3, #4
 80043b6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6899      	ldr	r1, [r3, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	4413      	add	r3, r2
 80043c2:	b2ca      	uxtb	r2, r1
 80043c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	0a19      	lsrs	r1, r3, #8
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3301      	adds	r3, #1
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	4413      	add	r3, r2
 80043d4:	b2ca      	uxtb	r2, r1
 80043d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	0c19      	lsrs	r1, r3, #16
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3302      	adds	r3, #2
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	4413      	add	r3, r2
 80043e6:	b2ca      	uxtb	r2, r1
 80043e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0e19      	lsrs	r1, r3, #24
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3303      	adds	r3, #3
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	4413      	add	r3, r2
 80043f8:	b2ca      	uxtb	r2, r1
 80043fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3304      	adds	r3, #4
 8004400:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68d9      	ldr	r1, [r3, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	4413      	add	r3, r2
 800440c:	b2ca      	uxtb	r2, r1
 800440e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0a19      	lsrs	r1, r3, #8
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3301      	adds	r3, #1
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	4413      	add	r3, r2
 800441e:	b2ca      	uxtb	r2, r1
 8004420:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	0c19      	lsrs	r1, r3, #16
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3302      	adds	r3, #2
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	4413      	add	r3, r2
 8004430:	b2ca      	uxtb	r2, r1
 8004432:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	0e19      	lsrs	r1, r3, #24
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3303      	adds	r3, #3
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	4413      	add	r3, r2
 8004442:	b2ca      	uxtb	r2, r1
 8004444:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3304      	adds	r3, #4
 800444a:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	4618      	mov	r0, r3
 8004452:	f7fb ff0d 	bl	8000270 <strlen>
 8004456:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	4413      	add	r3, r2
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	4618      	mov	r0, r3
 8004462:	f001 ff11 	bl	8006288 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3304      	adds	r3, #4
 800446a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	18d0      	adds	r0, r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	4619      	mov	r1, r3
 800447a:	f00a fd32 	bl	800eee2 <memcpy>
      offset += length_frame_id;
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4413      	add	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
      return offset;
 8004486:	68fb      	ldr	r3, [r7, #12]
    }
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3301      	adds	r3, #1
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	440b      	add	r3, r1
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	3302      	adds	r3, #2
 80044ca:	6839      	ldr	r1, [r7, #0]
 80044cc:	440b      	add	r3, r1
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	3303      	adds	r3, #3
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	440b      	add	r3, r1
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	061b      	lsls	r3, r3, #24
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	3304      	adds	r3, #4
 80044f2:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4413      	add	r3, r2
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	3301      	adds	r3, #1
 800450a:	6839      	ldr	r1, [r7, #0]
 800450c:	440b      	add	r3, r1
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	3302      	adds	r3, #2
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	440b      	add	r3, r1
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	041b      	lsls	r3, r3, #16
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3303      	adds	r3, #3
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	440b      	add	r3, r1
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	3304      	adds	r3, #4
 8004548:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	4413      	add	r3, r2
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	3301      	adds	r3, #1
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	440b      	add	r3, r1
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3302      	adds	r3, #2
 8004576:	6839      	ldr	r1, [r7, #0]
 8004578:	440b      	add	r3, r1
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	3303      	adds	r3, #3
 800458c:	6839      	ldr	r1, [r7, #0]
 800458e:	440b      	add	r3, r1
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	061b      	lsls	r3, r3, #24
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3304      	adds	r3, #4
 800459e:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	441a      	add	r2, r3
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f001 fe8a 	bl	80062c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3304      	adds	r3, #4
 80045b6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e00b      	b.n	80045d6 <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	441a      	add	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	6839      	ldr	r1, [r7, #0]
 80045ca:	440b      	add	r3, r1
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3301      	adds	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3ed      	bcc.n	80045be <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	3b01      	subs	r3, #1
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	4413      	add	r3, r2
 80045ee:	2200      	movs	r2, #0
 80045f0:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	441a      	add	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
     return offset;
 8004606:	693b      	ldr	r3, [r7, #16]
    }
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	08010e94 	.word	0x08010e94

0800462c <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	08010ea4 	.word	0x08010ea4

08004648 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fd ff92 	bl	800257c <_ZN3ros3MsgC1Ev>
 8004658:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
      x(0),
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	08011024 	.word	0x08011024

080046a4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80046a4:	b480      	push	{r7}
 80046a6:	b08d      	sub	sp, #52	; 0x34
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80046b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80046bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046c2:	6838      	ldr	r0, [r7, #0]
 80046c4:	4401      	add	r1, r0
 80046c6:	b2d3      	uxtb	r3, r2
 80046c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80046ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	0a02      	lsrs	r2, r0, #8
 80046d8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80046dc:	0a0b      	lsrs	r3, r1, #8
 80046de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e0:	3101      	adds	r1, #1
 80046e2:	6838      	ldr	r0, [r7, #0]
 80046e4:	4401      	add	r1, r0
 80046e6:	b2d3      	uxtb	r3, r2
 80046e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80046ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	0c02      	lsrs	r2, r0, #16
 80046f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80046fc:	0c0b      	lsrs	r3, r1, #16
 80046fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004700:	3102      	adds	r1, #2
 8004702:	6838      	ldr	r0, [r7, #0]
 8004704:	4401      	add	r1, r0
 8004706:	b2d3      	uxtb	r3, r2
 8004708:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800470a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	0e02      	lsrs	r2, r0, #24
 8004718:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800471c:	0e0b      	lsrs	r3, r1, #24
 800471e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004720:	3103      	adds	r1, #3
 8004722:	6838      	ldr	r0, [r7, #0]
 8004724:	4401      	add	r1, r0
 8004726:	b2d3      	uxtb	r3, r2
 8004728:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800472a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	000a      	movs	r2, r1
 8004738:	2300      	movs	r3, #0
 800473a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800473c:	3104      	adds	r1, #4
 800473e:	6838      	ldr	r0, [r7, #0]
 8004740:	4401      	add	r1, r0
 8004742:	b2d3      	uxtb	r3, r2
 8004744:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004746:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	0a0a      	lsrs	r2, r1, #8
 8004754:	2300      	movs	r3, #0
 8004756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004758:	3105      	adds	r1, #5
 800475a:	6838      	ldr	r0, [r7, #0]
 800475c:	4401      	add	r1, r0
 800475e:	b2d3      	uxtb	r3, r2
 8004760:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004762:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	0c0a      	lsrs	r2, r1, #16
 8004770:	2300      	movs	r3, #0
 8004772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004774:	3106      	adds	r1, #6
 8004776:	6838      	ldr	r0, [r7, #0]
 8004778:	4401      	add	r1, r0
 800477a:	b2d3      	uxtb	r3, r2
 800477c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800477e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	0e0a      	lsrs	r2, r1, #24
 800478c:	2300      	movs	r3, #0
 800478e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004790:	3107      	adds	r1, #7
 8004792:	6838      	ldr	r0, [r7, #0]
 8004794:	4401      	add	r1, r0
 8004796:	b2d3      	uxtb	r3, r2
 8004798:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	3308      	adds	r3, #8
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80047a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80047aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b0:	6838      	ldr	r0, [r7, #0]
 80047b2:	4401      	add	r1, r0
 80047b4:	b2d3      	uxtb	r3, r2
 80047b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80047b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	0a02      	lsrs	r2, r0, #8
 80047c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80047ca:	0a0b      	lsrs	r3, r1, #8
 80047cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ce:	3101      	adds	r1, #1
 80047d0:	6838      	ldr	r0, [r7, #0]
 80047d2:	4401      	add	r1, r0
 80047d4:	b2d3      	uxtb	r3, r2
 80047d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80047d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	0c02      	lsrs	r2, r0, #16
 80047e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80047ea:	0c0b      	lsrs	r3, r1, #16
 80047ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ee:	3102      	adds	r1, #2
 80047f0:	6838      	ldr	r0, [r7, #0]
 80047f2:	4401      	add	r1, r0
 80047f4:	b2d3      	uxtb	r3, r2
 80047f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80047f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	0e02      	lsrs	r2, r0, #24
 8004806:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800480a:	0e0b      	lsrs	r3, r1, #24
 800480c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800480e:	3103      	adds	r1, #3
 8004810:	6838      	ldr	r0, [r7, #0]
 8004812:	4401      	add	r1, r0
 8004814:	b2d3      	uxtb	r3, r2
 8004816:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004818:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	000a      	movs	r2, r1
 8004826:	2300      	movs	r3, #0
 8004828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800482a:	3104      	adds	r1, #4
 800482c:	6838      	ldr	r0, [r7, #0]
 800482e:	4401      	add	r1, r0
 8004830:	b2d3      	uxtb	r3, r2
 8004832:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004834:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	0a0a      	lsrs	r2, r1, #8
 8004842:	2300      	movs	r3, #0
 8004844:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004846:	3105      	adds	r1, #5
 8004848:	6838      	ldr	r0, [r7, #0]
 800484a:	4401      	add	r1, r0
 800484c:	b2d3      	uxtb	r3, r2
 800484e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004850:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	0c0a      	lsrs	r2, r1, #16
 800485e:	2300      	movs	r3, #0
 8004860:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004862:	3106      	adds	r1, #6
 8004864:	6838      	ldr	r0, [r7, #0]
 8004866:	4401      	add	r1, r0
 8004868:	b2d3      	uxtb	r3, r2
 800486a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800486c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	0e0a      	lsrs	r2, r1, #24
 800487a:	2300      	movs	r3, #0
 800487c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800487e:	3107      	adds	r1, #7
 8004880:	6838      	ldr	r0, [r7, #0]
 8004882:	4401      	add	r1, r0
 8004884:	b2d3      	uxtb	r3, r2
 8004886:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8004888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488a:	3308      	adds	r3, #8
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004894:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004898:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800489c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800489e:	6838      	ldr	r0, [r7, #0]
 80048a0:	4401      	add	r1, r0
 80048a2:	b2d3      	uxtb	r3, r2
 80048a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80048a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	0a02      	lsrs	r2, r0, #8
 80048b4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80048b8:	0a0b      	lsrs	r3, r1, #8
 80048ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048bc:	3101      	adds	r1, #1
 80048be:	6838      	ldr	r0, [r7, #0]
 80048c0:	4401      	add	r1, r0
 80048c2:	b2d3      	uxtb	r3, r2
 80048c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80048c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	0c02      	lsrs	r2, r0, #16
 80048d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80048d8:	0c0b      	lsrs	r3, r1, #16
 80048da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048dc:	3102      	adds	r1, #2
 80048de:	6838      	ldr	r0, [r7, #0]
 80048e0:	4401      	add	r1, r0
 80048e2:	b2d3      	uxtb	r3, r2
 80048e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80048e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	0e02      	lsrs	r2, r0, #24
 80048f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80048f8:	0e0b      	lsrs	r3, r1, #24
 80048fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048fc:	3103      	adds	r1, #3
 80048fe:	6838      	ldr	r0, [r7, #0]
 8004900:	4401      	add	r1, r0
 8004902:	b2d3      	uxtb	r3, r2
 8004904:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004906:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	000a      	movs	r2, r1
 8004914:	2300      	movs	r3, #0
 8004916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004918:	3104      	adds	r1, #4
 800491a:	6838      	ldr	r0, [r7, #0]
 800491c:	4401      	add	r1, r0
 800491e:	b2d3      	uxtb	r3, r2
 8004920:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004922:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	0a0a      	lsrs	r2, r1, #8
 8004930:	2300      	movs	r3, #0
 8004932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004934:	3105      	adds	r1, #5
 8004936:	6838      	ldr	r0, [r7, #0]
 8004938:	4401      	add	r1, r0
 800493a:	b2d3      	uxtb	r3, r2
 800493c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800493e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	0c0a      	lsrs	r2, r1, #16
 800494c:	2300      	movs	r3, #0
 800494e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004950:	3106      	adds	r1, #6
 8004952:	6838      	ldr	r0, [r7, #0]
 8004954:	4401      	add	r1, r0
 8004956:	b2d3      	uxtb	r3, r2
 8004958:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800495a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	0e0a      	lsrs	r2, r1, #24
 8004968:	2300      	movs	r3, #0
 800496a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800496c:	3107      	adds	r1, #7
 800496e:	6838      	ldr	r0, [r7, #0]
 8004970:	4401      	add	r1, r0
 8004972:	b2d3      	uxtb	r3, r2
 8004974:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	3308      	adds	r3, #8
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004982:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8004986:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800498a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800498c:	6838      	ldr	r0, [r7, #0]
 800498e:	4401      	add	r1, r0
 8004990:	b2d3      	uxtb	r3, r2
 8004992:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8004994:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	0a02      	lsrs	r2, r0, #8
 80049a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80049a6:	0a0b      	lsrs	r3, r1, #8
 80049a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049aa:	3101      	adds	r1, #1
 80049ac:	6838      	ldr	r0, [r7, #0]
 80049ae:	4401      	add	r1, r0
 80049b0:	b2d3      	uxtb	r3, r2
 80049b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 80049b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	0c02      	lsrs	r2, r0, #16
 80049c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80049c6:	0c0b      	lsrs	r3, r1, #16
 80049c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049ca:	3102      	adds	r1, #2
 80049cc:	6838      	ldr	r0, [r7, #0]
 80049ce:	4401      	add	r1, r0
 80049d0:	b2d3      	uxtb	r3, r2
 80049d2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 80049d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	0e02      	lsrs	r2, r0, #24
 80049e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80049e6:	0e0b      	lsrs	r3, r1, #24
 80049e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049ea:	3103      	adds	r1, #3
 80049ec:	6838      	ldr	r0, [r7, #0]
 80049ee:	4401      	add	r1, r0
 80049f0:	b2d3      	uxtb	r3, r2
 80049f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 80049f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	000a      	movs	r2, r1
 8004a02:	2300      	movs	r3, #0
 8004a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a06:	3104      	adds	r1, #4
 8004a08:	6838      	ldr	r0, [r7, #0]
 8004a0a:	4401      	add	r1, r0
 8004a0c:	b2d3      	uxtb	r3, r2
 8004a0e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8004a10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	0a0a      	lsrs	r2, r1, #8
 8004a1e:	2300      	movs	r3, #0
 8004a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a22:	3105      	adds	r1, #5
 8004a24:	6838      	ldr	r0, [r7, #0]
 8004a26:	4401      	add	r1, r0
 8004a28:	b2d3      	uxtb	r3, r2
 8004a2a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004a2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	0c0a      	lsrs	r2, r1, #16
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a3e:	3106      	adds	r1, #6
 8004a40:	6838      	ldr	r0, [r7, #0]
 8004a42:	4401      	add	r1, r0
 8004a44:	b2d3      	uxtb	r3, r2
 8004a46:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8004a48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	0e0a      	lsrs	r2, r1, #24
 8004a56:	2300      	movs	r3, #0
 8004a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a5a:	3107      	adds	r1, #7
 8004a5c:	6838      	ldr	r0, [r7, #0]
 8004a5e:	4401      	add	r1, r0
 8004a60:	b2d3      	uxtb	r3, r2
 8004a62:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	3308      	adds	r3, #8
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8004a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3734      	adds	r7, #52	; 0x34
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004a78:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004a7c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 8004a86:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    {
      int offset = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004a9c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004aa0:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004aa4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004aa8:	4413      	add	r3, r2
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2200      	movs	r2, #0
 8004ab0:	461c      	mov	r4, r3
 8004ab2:	4615      	mov	r5, r2
 8004ab4:	ea40 0804 	orr.w	r8, r0, r4
 8004ab8:	ea41 0905 	orr.w	r9, r1, r5
 8004abc:	e9c7 898a 	strd	r8, r9, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004ac0:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004ac4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004ace:	4413      	add	r3, r2
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	469a      	mov	sl, r3
 8004ad8:	4693      	mov	fp, r2
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004ae6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004aea:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004aee:	ea40 0402 	orr.w	r4, r0, r2
 8004af2:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8004af6:	430b      	orrs	r3, r1
 8004af8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8004afc:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8004b00:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004b04:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004b08:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004b0c:	1c9a      	adds	r2, r3, #2
 8004b0e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004b12:	4413      	add	r3, r2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8004b1e:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8004b2e:	464c      	mov	r4, r9
 8004b30:	0423      	lsls	r3, r4, #16
 8004b32:	4644      	mov	r4, r8
 8004b34:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004b38:	4644      	mov	r4, r8
 8004b3a:	0422      	lsls	r2, r4, #16
 8004b3c:	ea40 0402 	orr.w	r4, r0, r2
 8004b40:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8004b44:	430b      	orrs	r3, r1
 8004b46:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8004b4a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8004b4e:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004b52:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004b56:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004b5a:	1cda      	adds	r2, r3, #3
 8004b5c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004b60:	4413      	add	r3, r2
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004b6c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8004b70:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8004b74:	4623      	mov	r3, r4
 8004b76:	0a1b      	lsrs	r3, r3, #8
 8004b78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	061b      	lsls	r3, r3, #24
 8004b80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004b84:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8004b88:	4623      	mov	r3, r4
 8004b8a:	4303      	orrs	r3, r0
 8004b8c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004b90:	462b      	mov	r3, r5
 8004b92:	430b      	orrs	r3, r1
 8004b94:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004b98:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004b9c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004ba0:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004ba4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004ba8:	1d1a      	adds	r2, r3, #4
 8004baa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004bae:	4413      	add	r3, r2
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004bba:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 8004bca:	0023      	movs	r3, r4
 8004bcc:	2200      	movs	r2, #0
 8004bce:	ea40 0402 	orr.w	r4, r0, r2
 8004bd2:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8004bdc:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8004be0:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004be4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004be8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004bec:	1d5a      	adds	r2, r3, #5
 8004bee:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004bf2:	4413      	add	r3, r2
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004bfe:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 8004c0e:	0223      	lsls	r3, r4, #8
 8004c10:	2200      	movs	r2, #0
 8004c12:	ea40 0402 	orr.w	r4, r0, r2
 8004c16:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004c20:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8004c24:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004c28:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004c2c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004c30:	1d9a      	adds	r2, r3, #6
 8004c32:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004c36:	4413      	add	r3, r2
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004c42:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 8004c52:	0423      	lsls	r3, r4, #16
 8004c54:	2200      	movs	r2, #0
 8004c56:	ea40 0402 	orr.w	r4, r0, r2
 8004c5a:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8004c64:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8004c68:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004c6c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004c70:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004c74:	1dda      	adds	r2, r3, #7
 8004c76:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004c7a:	4413      	add	r3, r2
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c86:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 8004c96:	0623      	lsls	r3, r4, #24
 8004c98:	2200      	movs	r2, #0
 8004c9a:	ea40 0402 	orr.w	r4, r0, r2
 8004c9e:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004ca8:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8004cac:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      this->x = u_x.real;
 8004cb0:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004cb4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004cb8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8004cbc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004cd2:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004cd6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004cda:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004cde:	4413      	add	r3, r2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004cea:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004cee:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	4303      	orrs	r3, r0
 8004cf6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004d02:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8004d06:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004d0a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004d0e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004d18:	4413      	add	r3, r2
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d24:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8004d34:	464c      	mov	r4, r9
 8004d36:	0223      	lsls	r3, r4, #8
 8004d38:	4644      	mov	r4, r8
 8004d3a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d3e:	4644      	mov	r4, r8
 8004d40:	0222      	lsls	r2, r4, #8
 8004d42:	ea40 0402 	orr.w	r4, r0, r2
 8004d46:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004d50:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004d54:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004d58:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004d5c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004d60:	1c9a      	adds	r2, r3, #2
 8004d62:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004d66:	4413      	add	r3, r2
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004d72:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8004d82:	464c      	mov	r4, r9
 8004d84:	0423      	lsls	r3, r4, #16
 8004d86:	4644      	mov	r4, r8
 8004d88:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004d8c:	4644      	mov	r4, r8
 8004d8e:	0422      	lsls	r2, r4, #16
 8004d90:	ea40 0402 	orr.w	r4, r0, r2
 8004d94:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004d9e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8004da2:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004da6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004daa:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004dae:	1cda      	adds	r2, r3, #3
 8004db0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004db4:	4413      	add	r3, r2
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004dc0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004dc4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004dc8:	4623      	mov	r3, r4
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004dd0:	4623      	mov	r3, r4
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004dd8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8004ddc:	4623      	mov	r3, r4
 8004dde:	4303      	orrs	r3, r0
 8004de0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004de4:	462b      	mov	r3, r5
 8004de6:	430b      	orrs	r3, r1
 8004de8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004dec:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8004df0:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004df4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004df8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004dfc:	1d1a      	adds	r2, r3, #4
 8004dfe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004e02:	4413      	add	r3, r2
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004e0e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8004e1e:	0023      	movs	r3, r4
 8004e20:	2200      	movs	r2, #0
 8004e22:	ea40 0402 	orr.w	r4, r0, r2
 8004e26:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004e30:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004e34:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004e38:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004e3c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004e40:	1d5a      	adds	r2, r3, #5
 8004e42:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004e46:	4413      	add	r3, r2
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004e52:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8004e62:	0223      	lsls	r3, r4, #8
 8004e64:	2200      	movs	r2, #0
 8004e66:	ea40 0402 	orr.w	r4, r0, r2
 8004e6a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004e74:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8004e78:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004e7c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004e80:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004e84:	1d9a      	adds	r2, r3, #6
 8004e86:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004e8a:	4413      	add	r3, r2
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e96:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8004ea6:	0423      	lsls	r3, r4, #16
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	ea40 0402 	orr.w	r4, r0, r2
 8004eae:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004eb8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8004ebc:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004ec0:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004ec4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004ec8:	1dda      	adds	r2, r3, #7
 8004eca:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004ece:	4413      	add	r3, r2
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004eda:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8004eea:	0623      	lsls	r3, r4, #24
 8004eec:	2200      	movs	r2, #0
 8004eee:	ea40 0402 	orr.w	r4, r0, r2
 8004ef2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004efc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8004f00:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      this->y = u_y.real;
 8004f04:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004f08:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004f0c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004f10:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004f14:	3308      	adds	r3, #8
 8004f16:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004f26:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004f2a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004f2e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f32:	4413      	add	r3, r2
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004f3e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004f42:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004f46:	4623      	mov	r3, r4
 8004f48:	4303      	orrs	r3, r0
 8004f4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f4e:	462b      	mov	r3, r5
 8004f50:	430b      	orrs	r3, r1
 8004f52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f56:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8004f5a:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004f5e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004f62:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f6c:	4413      	add	r3, r2
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f78:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8004f88:	464c      	mov	r4, r9
 8004f8a:	0223      	lsls	r3, r4, #8
 8004f8c:	4644      	mov	r4, r8
 8004f8e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f92:	4644      	mov	r4, r8
 8004f94:	0222      	lsls	r2, r4, #8
 8004f96:	ea40 0402 	orr.w	r4, r0, r2
 8004f9a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fa4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8004fa8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004fac:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004fb0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004fb4:	1c9a      	adds	r2, r3, #2
 8004fb6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004fba:	4413      	add	r3, r2
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004fd6:	464c      	mov	r4, r9
 8004fd8:	0423      	lsls	r3, r4, #16
 8004fda:	4644      	mov	r4, r8
 8004fdc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004fe0:	4644      	mov	r4, r8
 8004fe2:	0422      	lsls	r2, r4, #16
 8004fe4:	ea40 0402 	orr.w	r4, r0, r2
 8004fe8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8004fec:	430b      	orrs	r3, r1
 8004fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ff2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8004ff6:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004ffa:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004ffe:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005002:	1cda      	adds	r2, r3, #3
 8005004:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005008:	4413      	add	r3, r2
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2200      	movs	r2, #0
 8005010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005014:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005018:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800501c:	4623      	mov	r3, r4
 800501e:	0a1b      	lsrs	r3, r3, #8
 8005020:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005024:	4623      	mov	r3, r4
 8005026:	061b      	lsls	r3, r3, #24
 8005028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800502c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005030:	4623      	mov	r3, r4
 8005032:	4303      	orrs	r3, r0
 8005034:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005038:	462b      	mov	r3, r5
 800503a:	430b      	orrs	r3, r1
 800503c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005040:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005044:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005048:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800504c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005050:	1d1a      	adds	r2, r3, #4
 8005052:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005056:	4413      	add	r3, r2
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2200      	movs	r2, #0
 800505e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005062:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8005072:	0023      	movs	r3, r4
 8005074:	2200      	movs	r2, #0
 8005076:	ea40 0402 	orr.w	r4, r0, r2
 800507a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800507e:	430b      	orrs	r3, r1
 8005080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005084:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005088:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800508c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005090:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005094:	1d5a      	adds	r2, r3, #5
 8005096:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800509a:	4413      	add	r3, r2
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050a6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80050b6:	0223      	lsls	r3, r4, #8
 80050b8:	2200      	movs	r2, #0
 80050ba:	ea40 0402 	orr.w	r4, r0, r2
 80050be:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80050c2:	430b      	orrs	r3, r1
 80050c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050c8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80050cc:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80050d0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80050d4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80050d8:	1d9a      	adds	r2, r3, #6
 80050da:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80050de:	4413      	add	r3, r2
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80050fa:	0423      	lsls	r3, r4, #16
 80050fc:	2200      	movs	r2, #0
 80050fe:	ea40 0402 	orr.w	r4, r0, r2
 8005102:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005106:	430b      	orrs	r3, r1
 8005108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800510c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005110:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005114:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8005118:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800511c:	1dda      	adds	r2, r3, #7
 800511e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005122:	4413      	add	r3, r2
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2200      	movs	r2, #0
 800512a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800512e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800513e:	0623      	lsls	r3, r4, #24
 8005140:	2200      	movs	r2, #0
 8005142:	ea40 0402 	orr.w	r4, r0, r2
 8005146:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800514a:	430b      	orrs	r3, r1
 800514c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005150:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005154:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      this->z = u_z.real;
 8005158:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800515c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005160:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8005164:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005168:	3308      	adds	r3, #8
 800516a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800517a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800517e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8005182:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005186:	4413      	add	r3, r2
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2200      	movs	r2, #0
 800518e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005192:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005196:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800519a:	4623      	mov	r3, r4
 800519c:	4303      	orrs	r3, r0
 800519e:	67bb      	str	r3, [r7, #120]	; 0x78
 80051a0:	462b      	mov	r3, r5
 80051a2:	430b      	orrs	r3, r1
 80051a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051a6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80051aa:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80051ae:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80051b2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80051bc:	4413      	add	r3, r2
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2200      	movs	r2, #0
 80051c4:	673b      	str	r3, [r7, #112]	; 0x70
 80051c6:	677a      	str	r2, [r7, #116]	; 0x74
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051d4:	464c      	mov	r4, r9
 80051d6:	0223      	lsls	r3, r4, #8
 80051d8:	4644      	mov	r4, r8
 80051da:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051de:	4644      	mov	r4, r8
 80051e0:	0222      	lsls	r2, r4, #8
 80051e2:	ea40 0402 	orr.w	r4, r0, r2
 80051e6:	66bc      	str	r4, [r7, #104]	; 0x68
 80051e8:	430b      	orrs	r3, r1
 80051ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051ec:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80051f0:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80051f4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80051f8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80051fc:	1c9a      	adds	r2, r3, #2
 80051fe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005202:	4413      	add	r3, r2
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2200      	movs	r2, #0
 800520a:	663b      	str	r3, [r7, #96]	; 0x60
 800520c:	667a      	str	r2, [r7, #100]	; 0x64
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800521a:	464c      	mov	r4, r9
 800521c:	0423      	lsls	r3, r4, #16
 800521e:	4644      	mov	r4, r8
 8005220:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005224:	4644      	mov	r4, r8
 8005226:	0422      	lsls	r2, r4, #16
 8005228:	ea40 0402 	orr.w	r4, r0, r2
 800522c:	65bc      	str	r4, [r7, #88]	; 0x58
 800522e:	430b      	orrs	r3, r1
 8005230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005232:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005236:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800523a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800523e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005242:	1cda      	adds	r2, r3, #3
 8005244:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005248:	4413      	add	r3, r2
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2200      	movs	r2, #0
 8005250:	653b      	str	r3, [r7, #80]	; 0x50
 8005252:	657a      	str	r2, [r7, #84]	; 0x54
 8005254:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005258:	4623      	mov	r3, r4
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800525e:	4623      	mov	r3, r4
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	64bb      	str	r3, [r7, #72]	; 0x48
 8005264:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005268:	4623      	mov	r3, r4
 800526a:	4303      	orrs	r3, r0
 800526c:	643b      	str	r3, [r7, #64]	; 0x40
 800526e:	462b      	mov	r3, r5
 8005270:	430b      	orrs	r3, r1
 8005272:	647b      	str	r3, [r7, #68]	; 0x44
 8005274:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005278:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800527c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005280:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005284:	1d1a      	adds	r2, r3, #4
 8005286:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800528a:	4413      	add	r3, r2
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2200      	movs	r2, #0
 8005292:	63bb      	str	r3, [r7, #56]	; 0x38
 8005294:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80052a0:	0023      	movs	r3, r4
 80052a2:	2200      	movs	r2, #0
 80052a4:	ea40 0402 	orr.w	r4, r0, r2
 80052a8:	633c      	str	r4, [r7, #48]	; 0x30
 80052aa:	430b      	orrs	r3, r1
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
 80052ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80052b2:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80052b6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80052ba:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80052be:	1d5a      	adds	r2, r3, #5
 80052c0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80052c4:	4413      	add	r3, r2
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2200      	movs	r2, #0
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80052da:	0223      	lsls	r3, r4, #8
 80052dc:	2200      	movs	r2, #0
 80052de:	ea40 0402 	orr.w	r4, r0, r2
 80052e2:	623c      	str	r4, [r7, #32]
 80052e4:	430b      	orrs	r3, r1
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
 80052e8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80052ec:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80052f0:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80052f4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80052f8:	3306      	adds	r3, #6
 80052fa:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80052fe:	4413      	add	r3, r2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2200      	movs	r2, #0
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	61fa      	str	r2, [r7, #28]
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	69bc      	ldr	r4, [r7, #24]
 8005314:	0423      	lsls	r3, r4, #16
 8005316:	2200      	movs	r2, #0
 8005318:	ea40 0402 	orr.w	r4, r0, r2
 800531c:	613c      	str	r4, [r7, #16]
 800531e:	430b      	orrs	r3, r1
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005326:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800532a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800532e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005332:	3307      	adds	r3, #7
 8005334:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8005338:	4413      	add	r3, r2
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2200      	movs	r2, #0
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	60fa      	str	r2, [r7, #12]
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	68bc      	ldr	r4, [r7, #8]
 800534e:	0623      	lsls	r3, r4, #24
 8005350:	2200      	movs	r2, #0
 8005352:	ea40 0402 	orr.w	r4, r0, r2
 8005356:	603c      	str	r4, [r7, #0]
 8005358:	430b      	orrs	r3, r1
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005360:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      this->w = u_w.real;
 8005364:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8005368:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 800536c:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8005370:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005374:	3308      	adds	r3, #8
 8005376:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
     return offset;
 800537a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
    }
 800537e:	4618      	mov	r0, r3
 8005380:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8005384:	46bd      	mov	sp, r7
 8005386:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800538a:	4770      	bx	lr

0800538c <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	08010ec8 	.word	0x08010ec8

080053a8 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	08010ee4 	.word	0x08010ee4

080053c4 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fd f8d4 	bl	800257c <_ZN3ros3MsgC1Ev>
 80053d4:	4a24      	ldr	r2, [pc, #144]	; (8005468 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	601a      	str	r2, [r3, #0]
      header(),
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3304      	adds	r3, #4
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fe ff9e 	bl	8004320 <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3318      	adds	r3, #24
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff f92d 	bl	8004648 <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80053f4:	2308      	movs	r3, #8
 80053f6:	e007      	b.n	8005408 <_ZN11sensor_msgs3ImuC1Ev+0x44>
 80053f8:	f04f 0000 	mov.w	r0, #0
 80053fc:	f04f 0100 	mov.w	r1, #0
 8005400:	e9c2 0100 	strd	r0, r1, [r2]
 8005404:	3208      	adds	r2, #8
 8005406:	3b01      	subs	r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	daf5      	bge.n	80053f8 <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3388      	adds	r3, #136	; 0x88
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe f9eb 	bl	80037ec <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 800541c:	2308      	movs	r3, #8
 800541e:	e007      	b.n	8005430 <_ZN11sensor_msgs3ImuC1Ev+0x6c>
 8005420:	f04f 0000 	mov.w	r0, #0
 8005424:	f04f 0100 	mov.w	r1, #0
 8005428:	e9c2 0100 	strd	r0, r1, [r2]
 800542c:	3208      	adds	r2, #8
 800542e:	3b01      	subs	r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	daf5      	bge.n	8005420 <_ZN11sensor_msgs3ImuC1Ev+0x5c>
      linear_acceleration(),
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	33f0      	adds	r3, #240	; 0xf0
 8005438:	4618      	mov	r0, r3
 800543a:	f7fe f9d7 	bl	80037ec <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8005444:	2308      	movs	r3, #8
 8005446:	e007      	b.n	8005458 <_ZN11sensor_msgs3ImuC1Ev+0x94>
 8005448:	f04f 0000 	mov.w	r0, #0
 800544c:	f04f 0100 	mov.w	r1, #0
 8005450:	e9c2 0100 	strd	r0, r1, [r2]
 8005454:	3208      	adds	r2, #8
 8005456:	3b01      	subs	r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	daf5      	bge.n	8005448 <_ZN11sensor_msgs3ImuC1Ev+0x84>
    {
    }
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	0801100c 	.word	0x0801100c

0800546c <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800546c:	b580      	push	{r7, lr}
 800546e:	b08c      	sub	sp, #48	; 0x30
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	1d18      	adds	r0, r3, #4
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	4413      	add	r3, r2
 8005484:	4619      	mov	r1, r3
 8005486:	f7fe ff6b 	bl	8004360 <_ZNK8std_msgs6Header9serializeEPh>
 800548a:	4602      	mov	r2, r0
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	4413      	add	r3, r2
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f103 0018 	add.w	r0, r3, #24
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	4413      	add	r3, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	f7ff f900 	bl	80046a4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	4413      	add	r3, r2
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80054ac:	2300      	movs	r3, #0
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b0:	e07d      	b.n	80055ae <_ZNK11sensor_msgs3Imu9serializeEPh+0x142>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	3308      	adds	r3, #8
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4413      	add	r3, r2
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 80054c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054ca:	6838      	ldr	r0, [r7, #0]
 80054cc:	4401      	add	r1, r0
 80054ce:	b2d3      	uxtb	r3, r2
 80054d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 80054d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	0a02      	lsrs	r2, r0, #8
 80054e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80054e4:	0a0b      	lsrs	r3, r1, #8
 80054e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054e8:	3101      	adds	r1, #1
 80054ea:	6838      	ldr	r0, [r7, #0]
 80054ec:	4401      	add	r1, r0
 80054ee:	b2d3      	uxtb	r3, r2
 80054f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 80054f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	0c02      	lsrs	r2, r0, #16
 8005500:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005504:	0c0b      	lsrs	r3, r1, #16
 8005506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005508:	3102      	adds	r1, #2
 800550a:	6838      	ldr	r0, [r7, #0]
 800550c:	4401      	add	r1, r0
 800550e:	b2d3      	uxtb	r3, r2
 8005510:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 8005512:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	0e02      	lsrs	r2, r0, #24
 8005520:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005524:	0e0b      	lsrs	r3, r1, #24
 8005526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005528:	3103      	adds	r1, #3
 800552a:	6838      	ldr	r0, [r7, #0]
 800552c:	4401      	add	r1, r0
 800552e:	b2d3      	uxtb	r3, r2
 8005530:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 8005532:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	000a      	movs	r2, r1
 8005540:	2300      	movs	r3, #0
 8005542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005544:	3104      	adds	r1, #4
 8005546:	6838      	ldr	r0, [r7, #0]
 8005548:	4401      	add	r1, r0
 800554a:	b2d3      	uxtb	r3, r2
 800554c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 800554e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	0a0a      	lsrs	r2, r1, #8
 800555c:	2300      	movs	r3, #0
 800555e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005560:	3105      	adds	r1, #5
 8005562:	6838      	ldr	r0, [r7, #0]
 8005564:	4401      	add	r1, r0
 8005566:	b2d3      	uxtb	r3, r2
 8005568:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 800556a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	0c0a      	lsrs	r2, r1, #16
 8005578:	2300      	movs	r3, #0
 800557a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800557c:	3106      	adds	r1, #6
 800557e:	6838      	ldr	r0, [r7, #0]
 8005580:	4401      	add	r1, r0
 8005582:	b2d3      	uxtb	r3, r2
 8005584:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 8005586:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	0e0a      	lsrs	r2, r1, #24
 8005594:	2300      	movs	r3, #0
 8005596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005598:	3107      	adds	r1, #7
 800559a:	6838      	ldr	r0, [r7, #0]
 800559c:	4401      	add	r1, r0
 800559e:	b2d3      	uxtb	r3, r2
 80055a0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	3308      	adds	r3, #8
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	3301      	adds	r3, #1
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	f67f af7e 	bls.w	80054b2 <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f103 0088 	add.w	r0, r3, #136	; 0x88
 80055bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	4413      	add	r3, r2
 80055c2:	4619      	mov	r1, r3
 80055c4:	f7fe f93a 	bl	800383c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	4413      	add	r3, r2
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80055d0:	2300      	movs	r3, #0
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
 80055d4:	e07d      	b.n	80056d2 <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	3315      	adds	r3, #21
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4413      	add	r3, r2
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 80055e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ee:	6838      	ldr	r0, [r7, #0]
 80055f0:	4401      	add	r1, r0
 80055f2:	b2d3      	uxtb	r3, r2
 80055f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 80055f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	0a02      	lsrs	r2, r0, #8
 8005604:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005608:	0a0b      	lsrs	r3, r1, #8
 800560a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800560c:	3101      	adds	r1, #1
 800560e:	6838      	ldr	r0, [r7, #0]
 8005610:	4401      	add	r1, r0
 8005612:	b2d3      	uxtb	r3, r2
 8005614:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8005616:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	0c02      	lsrs	r2, r0, #16
 8005624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005628:	0c0b      	lsrs	r3, r1, #16
 800562a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800562c:	3102      	adds	r1, #2
 800562e:	6838      	ldr	r0, [r7, #0]
 8005630:	4401      	add	r1, r0
 8005632:	b2d3      	uxtb	r3, r2
 8005634:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8005636:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	0e02      	lsrs	r2, r0, #24
 8005644:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005648:	0e0b      	lsrs	r3, r1, #24
 800564a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800564c:	3103      	adds	r1, #3
 800564e:	6838      	ldr	r0, [r7, #0]
 8005650:	4401      	add	r1, r0
 8005652:	b2d3      	uxtb	r3, r2
 8005654:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 8005656:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	000a      	movs	r2, r1
 8005664:	2300      	movs	r3, #0
 8005666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005668:	3104      	adds	r1, #4
 800566a:	6838      	ldr	r0, [r7, #0]
 800566c:	4401      	add	r1, r0
 800566e:	b2d3      	uxtb	r3, r2
 8005670:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8005672:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	0a0a      	lsrs	r2, r1, #8
 8005680:	2300      	movs	r3, #0
 8005682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005684:	3105      	adds	r1, #5
 8005686:	6838      	ldr	r0, [r7, #0]
 8005688:	4401      	add	r1, r0
 800568a:	b2d3      	uxtb	r3, r2
 800568c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 800568e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	0c0a      	lsrs	r2, r1, #16
 800569c:	2300      	movs	r3, #0
 800569e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056a0:	3106      	adds	r1, #6
 80056a2:	6838      	ldr	r0, [r7, #0]
 80056a4:	4401      	add	r1, r0
 80056a6:	b2d3      	uxtb	r3, r2
 80056a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 80056aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	0e0a      	lsrs	r2, r1, #24
 80056b8:	2300      	movs	r3, #0
 80056ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056bc:	3107      	adds	r1, #7
 80056be:	6838      	ldr	r0, [r7, #0]
 80056c0:	4401      	add	r1, r0
 80056c2:	b2d3      	uxtb	r3, r2
 80056c4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	3308      	adds	r3, #8
 80056ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	3301      	adds	r3, #1
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	f67f af7e 	bls.w	80055d6 <_ZNK11sensor_msgs3Imu9serializeEPh+0x16a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 80056e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4413      	add	r3, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	f7fe f8a8 	bl	800383c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	4413      	add	r3, r2
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80056f4:	2300      	movs	r3, #0
 80056f6:	623b      	str	r3, [r7, #32]
 80056f8:	e07d      	b.n	80057f6 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38a>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	3322      	adds	r3, #34	; 0x22
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4413      	add	r3, r2
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 800570c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005710:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005712:	6838      	ldr	r0, [r7, #0]
 8005714:	4401      	add	r1, r0
 8005716:	b2d3      	uxtb	r3, r2
 8005718:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 800571a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	0a02      	lsrs	r2, r0, #8
 8005728:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800572c:	0a0b      	lsrs	r3, r1, #8
 800572e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005730:	3101      	adds	r1, #1
 8005732:	6838      	ldr	r0, [r7, #0]
 8005734:	4401      	add	r1, r0
 8005736:	b2d3      	uxtb	r3, r2
 8005738:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 800573a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	0c02      	lsrs	r2, r0, #16
 8005748:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800574c:	0c0b      	lsrs	r3, r1, #16
 800574e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005750:	3102      	adds	r1, #2
 8005752:	6838      	ldr	r0, [r7, #0]
 8005754:	4401      	add	r1, r0
 8005756:	b2d3      	uxtb	r3, r2
 8005758:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 800575a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	0e02      	lsrs	r2, r0, #24
 8005768:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800576c:	0e0b      	lsrs	r3, r1, #24
 800576e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005770:	3103      	adds	r1, #3
 8005772:	6838      	ldr	r0, [r7, #0]
 8005774:	4401      	add	r1, r0
 8005776:	b2d3      	uxtb	r3, r2
 8005778:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 800577a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	000a      	movs	r2, r1
 8005788:	2300      	movs	r3, #0
 800578a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800578c:	3104      	adds	r1, #4
 800578e:	6838      	ldr	r0, [r7, #0]
 8005790:	4401      	add	r1, r0
 8005792:	b2d3      	uxtb	r3, r2
 8005794:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 8005796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	0a0a      	lsrs	r2, r1, #8
 80057a4:	2300      	movs	r3, #0
 80057a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057a8:	3105      	adds	r1, #5
 80057aa:	6838      	ldr	r0, [r7, #0]
 80057ac:	4401      	add	r1, r0
 80057ae:	b2d3      	uxtb	r3, r2
 80057b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 80057b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	0c0a      	lsrs	r2, r1, #16
 80057c0:	2300      	movs	r3, #0
 80057c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c4:	3106      	adds	r1, #6
 80057c6:	6838      	ldr	r0, [r7, #0]
 80057c8:	4401      	add	r1, r0
 80057ca:	b2d3      	uxtb	r3, r2
 80057cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 80057ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	0e0a      	lsrs	r2, r1, #24
 80057dc:	2300      	movs	r3, #0
 80057de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e0:	3107      	adds	r1, #7
 80057e2:	6838      	ldr	r0, [r7, #0]
 80057e4:	4401      	add	r1, r0
 80057e6:	b2d3      	uxtb	r3, r2
 80057e8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80057ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ec:	3308      	adds	r3, #8
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	3301      	adds	r3, #1
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	f67f af7e 	bls.w	80056fa <_ZNK11sensor_msgs3Imu9serializeEPh+0x28e>
      }
      return offset;
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005800:	4618      	mov	r0, r3
 8005802:	3730      	adds	r7, #48	; 0x30
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580c:	b0ed      	sub	sp, #436	; 0x1b4
 800580e:	af00      	add	r7, sp, #0
 8005810:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8005814:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      offset += this->header.deserialize(inbuffer + offset);
 800581e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005822:	1d18      	adds	r0, r3, #4
 8005824:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005828:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800582c:	4413      	add	r3, r2
 800582e:	4619      	mov	r1, r3
 8005830:	f7fe fe2e 	bl	8004490 <_ZN8std_msgs6Header11deserializeEPh>
 8005834:	4602      	mov	r2, r0
 8005836:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800583a:	4413      	add	r3, r2
 800583c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      offset += this->orientation.deserialize(inbuffer + offset);
 8005840:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005844:	f103 0018 	add.w	r0, r3, #24
 8005848:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800584c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005850:	4413      	add	r3, r2
 8005852:	4619      	mov	r1, r3
 8005854:	f7ff f910 	bl	8004a78 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8005858:	4602      	mov	r2, r0
 800585a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800585e:	4413      	add	r3, r2
 8005860:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005864:	2300      	movs	r3, #0
 8005866:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800586a:	e123      	b.n	8005ab4 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2ac>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005878:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800587c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005880:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005884:	4413      	add	r3, r2
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2200      	movs	r2, #0
 800588c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005890:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005894:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8005898:	4303      	orrs	r3, r0
 800589a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800589e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80058a2:	430b      	orrs	r3, r1
 80058a4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80058a8:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80058ac:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80058b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80058b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80058be:	4413      	add	r3, r2
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2200      	movs	r2, #0
 80058c6:	469a      	mov	sl, r3
 80058c8:	4693      	mov	fp, r2
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80058d6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80058da:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80058de:	ea40 0602 	orr.w	r6, r0, r2
 80058e2:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 80058e6:	430b      	orrs	r3, r1
 80058e8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80058ec:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80058f0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80058f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80058f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80058fc:	1c9a      	adds	r2, r3, #2
 80058fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005902:	4413      	add	r3, r2
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2200      	movs	r2, #0
 800590a:	4698      	mov	r8, r3
 800590c:	4691      	mov	r9, r2
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800591a:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800591e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8005922:	ea40 0602 	orr.w	r6, r0, r2
 8005926:	f8c7 6158 	str.w	r6, [r7, #344]	; 0x158
 800592a:	430b      	orrs	r3, r1
 800592c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005930:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8005934:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005938:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800593c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005940:	1cda      	adds	r2, r3, #3
 8005942:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005946:	4413      	add	r3, r2
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2200      	movs	r2, #0
 800594e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005952:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8005956:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800595a:	0a1d      	lsrs	r5, r3, #8
 800595c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8005960:	061c      	lsls	r4, r3, #24
 8005962:	ea40 0304 	orr.w	r3, r0, r4
 8005966:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800596a:	ea41 0305 	orr.w	r3, r1, r5
 800596e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005972:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8005976:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800597a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800597e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005982:	1d1a      	adds	r2, r3, #4
 8005984:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005988:	4413      	add	r3, r2
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2200      	movs	r2, #0
 8005990:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005994:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 80059a4:	0033      	movs	r3, r6
 80059a6:	2200      	movs	r2, #0
 80059a8:	ea40 0602 	orr.w	r6, r0, r2
 80059ac:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 80059b0:	430b      	orrs	r3, r1
 80059b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80059b6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80059ba:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80059be:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80059c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80059c6:	1d5a      	adds	r2, r3, #5
 80059c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80059cc:	4413      	add	r3, r2
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80059d8:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	f8d7 6138 	ldr.w	r6, [r7, #312]	; 0x138
 80059e8:	0233      	lsls	r3, r6, #8
 80059ea:	2200      	movs	r2, #0
 80059ec:	ea40 0602 	orr.w	r6, r0, r2
 80059f0:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 80059f4:	430b      	orrs	r3, r1
 80059f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80059fa:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80059fe:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005a02:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005a06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005a0a:	1d9a      	adds	r2, r3, #6
 8005a0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005a10:	4413      	add	r3, r2
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a1c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	f8d7 6128 	ldr.w	r6, [r7, #296]	; 0x128
 8005a2c:	0433      	lsls	r3, r6, #16
 8005a2e:	2200      	movs	r2, #0
 8005a30:	ea40 0602 	orr.w	r6, r0, r2
 8005a34:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a3e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8005a42:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005a46:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005a4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005a4e:	1dda      	adds	r2, r3, #7
 8005a50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005a54:	4413      	add	r3, r2
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a60:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	f8d7 6118 	ldr.w	r6, [r7, #280]	; 0x118
 8005a70:	0633      	lsls	r3, r6, #24
 8005a72:	2200      	movs	r2, #0
 8005a74:	ea40 0602 	orr.w	r6, r0, r2
 8005a78:	f8c7 6110 	str.w	r6, [r7, #272]	; 0x110
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a82:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005a86:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8005a8a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005a8e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8005a92:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005a96:	3308      	adds	r3, #8
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8005aa0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005aaa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005ab4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	f67f aed7 	bls.w	800586c <_ZN11sensor_msgs3Imu11deserializeEPh+0x64>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8005abe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005ac2:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8005ac6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005aca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005ace:	4413      	add	r3, r2
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	f7fe f826 	bl	8003b22 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005adc:	4413      	add	r3, r2
 8005ade:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005ae8:	e133      	b.n	8005d52 <_ZN11sensor_msgs3Imu11deserializeEPh+0x54a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005af6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005afa:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005afe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005b02:	4413      	add	r3, r2
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b0e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005b12:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005b16:	4623      	mov	r3, r4
 8005b18:	4303      	orrs	r3, r0
 8005b1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b1e:	462b      	mov	r3, r5
 8005b20:	430b      	orrs	r3, r1
 8005b22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b26:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8005b2a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005b2e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005b32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005b3c:	4413      	add	r3, r2
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b48:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	; 0xf8
 8005b58:	4634      	mov	r4, r6
 8005b5a:	0223      	lsls	r3, r4, #8
 8005b5c:	462c      	mov	r4, r5
 8005b5e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b62:	462c      	mov	r4, r5
 8005b64:	0222      	lsls	r2, r4, #8
 8005b66:	ea40 0402 	orr.w	r4, r0, r2
 8005b6a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b74:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8005b78:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005b7c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005b80:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005b84:	1c9a      	adds	r2, r3, #2
 8005b86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005b8a:	4413      	add	r3, r2
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	; 0xe8
 8005ba6:	4634      	mov	r4, r6
 8005ba8:	0423      	lsls	r3, r4, #16
 8005baa:	462c      	mov	r4, r5
 8005bac:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005bb0:	462c      	mov	r4, r5
 8005bb2:	0422      	lsls	r2, r4, #16
 8005bb4:	ea40 0402 	orr.w	r4, r0, r2
 8005bb8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bc2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8005bc6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005bca:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005bce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005bd2:	1cda      	adds	r2, r3, #3
 8005bd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005bd8:	4413      	add	r3, r2
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005be4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005be8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8005bec:	4623      	mov	r3, r4
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	061b      	lsls	r3, r3, #24
 8005bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bfc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005c00:	4623      	mov	r3, r4
 8005c02:	4303      	orrs	r3, r0
 8005c04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c08:	462b      	mov	r3, r5
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c10:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005c14:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005c18:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005c1c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005c20:	1d1a      	adds	r2, r3, #4
 8005c22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c26:	4413      	add	r3, r2
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c32:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8005c42:	0023      	movs	r3, r4
 8005c44:	2200      	movs	r2, #0
 8005c46:	ea40 0402 	orr.w	r4, r0, r2
 8005c4a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c54:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005c58:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005c5c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005c60:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005c64:	1d5a      	adds	r2, r3, #5
 8005c66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c6a:	4413      	add	r3, r2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c76:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8005c86:	0223      	lsls	r3, r4, #8
 8005c88:	2200      	movs	r2, #0
 8005c8a:	ea40 0402 	orr.w	r4, r0, r2
 8005c8e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005c92:	430b      	orrs	r3, r1
 8005c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c98:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005c9c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005ca0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005ca4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005ca8:	1d9a      	adds	r2, r3, #6
 8005caa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005cae:	4413      	add	r3, r2
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005cca:	0423      	lsls	r3, r4, #16
 8005ccc:	2200      	movs	r2, #0
 8005cce:	ea40 0402 	orr.w	r4, r0, r2
 8005cd2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005cd6:	430b      	orrs	r3, r1
 8005cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cdc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005ce0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005ce4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005ce8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005cec:	1dda      	adds	r2, r3, #7
 8005cee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005cf2:	4413      	add	r3, r2
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8005d0e:	0623      	lsls	r3, r4, #24
 8005d10:	2200      	movs	r2, #0
 8005d12:	ea40 0402 	orr.w	r4, r0, r2
 8005d16:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d20:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005d24:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8005d28:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005d2c:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8005d30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d34:	3315      	adds	r3, #21
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	4413      	add	r3, r2
 8005d3a:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8005d3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005d42:	3308      	adds	r3, #8
 8005d44:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005d48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005d52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	f67f aec7 	bls.w	8005aea <_ZN11sensor_msgs3Imu11deserializeEPh+0x2e2>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8005d5c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005d60:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8005d64:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005d68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d6c:	4413      	add	r3, r2
 8005d6e:	4619      	mov	r1, r3
 8005d70:	f7fd fed7 	bl	8003b22 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005d74:	4602      	mov	r2, r0
 8005d76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005d86:	e10f      	b.n	8005fa8 <_ZN11sensor_msgs3Imu11deserializeEPh+0x7a0>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005d94:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005d98:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005d9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005da0:	4413      	add	r3, r2
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005db0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8005db4:	4623      	mov	r3, r4
 8005db6:	4303      	orrs	r3, r0
 8005db8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dba:	462b      	mov	r3, r5
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dc0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005dc4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005dc8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005dcc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005dd6:	4413      	add	r3, r2
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2200      	movs	r2, #0
 8005dde:	673b      	str	r3, [r7, #112]	; 0x70
 8005de0:	677a      	str	r2, [r7, #116]	; 0x74
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	; 0x70
 8005dee:	4634      	mov	r4, r6
 8005df0:	0223      	lsls	r3, r4, #8
 8005df2:	462c      	mov	r4, r5
 8005df4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005df8:	462c      	mov	r4, r5
 8005dfa:	0222      	lsls	r2, r4, #8
 8005dfc:	ea40 0402 	orr.w	r4, r0, r2
 8005e00:	66bc      	str	r4, [r7, #104]	; 0x68
 8005e02:	430b      	orrs	r3, r1
 8005e04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e06:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005e0a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005e0e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005e12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005e16:	1c9a      	adds	r2, r3, #2
 8005e18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005e1c:	4413      	add	r3, r2
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2200      	movs	r2, #0
 8005e24:	663b      	str	r3, [r7, #96]	; 0x60
 8005e26:	667a      	str	r2, [r7, #100]	; 0x64
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	; 0x60
 8005e34:	4634      	mov	r4, r6
 8005e36:	0423      	lsls	r3, r4, #16
 8005e38:	462c      	mov	r4, r5
 8005e3a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005e3e:	462c      	mov	r4, r5
 8005e40:	0422      	lsls	r2, r4, #16
 8005e42:	ea40 0402 	orr.w	r4, r0, r2
 8005e46:	65bc      	str	r4, [r7, #88]	; 0x58
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e4c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005e50:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005e54:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005e58:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005e5c:	1cda      	adds	r2, r3, #3
 8005e5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005e62:	4413      	add	r3, r2
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2200      	movs	r2, #0
 8005e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e6c:	657a      	str	r2, [r7, #84]	; 0x54
 8005e6e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005e72:	4623      	mov	r3, r4
 8005e74:	0a1b      	lsrs	r3, r3, #8
 8005e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e78:	4623      	mov	r3, r4
 8005e7a:	061b      	lsls	r3, r3, #24
 8005e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e7e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005e82:	4623      	mov	r3, r4
 8005e84:	4303      	orrs	r3, r0
 8005e86:	643b      	str	r3, [r7, #64]	; 0x40
 8005e88:	462b      	mov	r3, r5
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e8e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005e92:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005e96:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005e9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005e9e:	1d1a      	adds	r2, r3, #4
 8005ea0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005ea4:	4413      	add	r3, r2
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2200      	movs	r2, #0
 8005eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eae:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8005eba:	0023      	movs	r3, r4
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	ea40 0402 	orr.w	r4, r0, r2
 8005ec2:	633c      	str	r4, [r7, #48]	; 0x30
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005ecc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005ed0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005ed4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005ed8:	1d5a      	adds	r2, r3, #5
 8005eda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005ede:	4413      	add	r3, r2
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005ef4:	0223      	lsls	r3, r4, #8
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	ea40 0402 	orr.w	r4, r0, r2
 8005efc:	623c      	str	r4, [r7, #32]
 8005efe:	430b      	orrs	r3, r1
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
 8005f02:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005f06:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005f0a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005f0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005f12:	1d9a      	adds	r2, r3, #6
 8005f14:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005f18:	4413      	add	r3, r2
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2200      	movs	r2, #0
 8005f20:	61bb      	str	r3, [r7, #24]
 8005f22:	61fa      	str	r2, [r7, #28]
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	69bc      	ldr	r4, [r7, #24]
 8005f2e:	0423      	lsls	r3, r4, #16
 8005f30:	2200      	movs	r2, #0
 8005f32:	ea40 0402 	orr.w	r4, r0, r2
 8005f36:	613c      	str	r4, [r7, #16]
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005f40:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005f44:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005f48:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005f4c:	1dda      	adds	r2, r3, #7
 8005f4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005f52:	4413      	add	r3, r2
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2200      	movs	r2, #0
 8005f5a:	60bb      	str	r3, [r7, #8]
 8005f5c:	60fa      	str	r2, [r7, #12]
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	68bc      	ldr	r4, [r7, #8]
 8005f68:	0623      	lsls	r3, r4, #24
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	ea40 0402 	orr.w	r4, r0, r2
 8005f70:	603c      	str	r4, [r7, #0]
 8005f72:	430b      	orrs	r3, r1
 8005f74:	607b      	str	r3, [r7, #4]
 8005f76:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005f7a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8005f7e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005f82:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8005f86:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005f8a:	3322      	adds	r3, #34	; 0x22
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	4413      	add	r3, r2
 8005f90:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8005f94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005f98:	3308      	adds	r3, #8
 8005f9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005f9e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005fa8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	f67f aeeb 	bls.w	8005d88 <_ZN11sensor_msgs3Imu11deserializeEPh+0x580>
      }
     return offset;
 8005fb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
    }
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005fc4 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	08010f08 	.word	0x08010f08

08005fe0 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	08010f18 	.word	0x08010f18

08005ffc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	4a04      	ldr	r2, [pc, #16]	; (8006018 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	080110e4 	.word	0x080110e4

0800601c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff ffe8 	bl	8005ffc <_ZN3ros15NodeHandleBase_C1Ev>
 800602c:	4a36      	ldr	r2, [pc, #216]	; (8006108 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3304      	adds	r3, #4
 8006036:	4618      	mov	r0, r3
 8006038:	f7fd f92a 	bl	8003290 <_ZN13STM32HardwareC1Ev>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f008 feba 	bl	800ede2 <memset>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8006074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f008 feb1 	bl	800ede2 <memset>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006086:	2264      	movs	r2, #100	; 0x64
 8006088:	2100      	movs	r1, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f008 fea9 	bl	800ede2 <memset>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8006096:	2264      	movs	r2, #100	; 0x64
 8006098:	2100      	movs	r1, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f008 fea1 	bl	800ede2 <memset>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fc fdb4 	bl	8002c64 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	08010ff8 	.word	0x08010ff8

0800610c <_Z6led_cbRKN8std_msgs5EmptyE>:

ros::Publisher imu_pub("imu", &imu);
char hello[]="Hello World";

//subscriber
void led_cb(const std_msgs::Empty &msg ){
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8006114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006118:	4803      	ldr	r0, [pc, #12]	; (8006128 <_Z6led_cbRKN8std_msgs5EmptyE+0x1c>)
 800611a:	f002 fa02 	bl	8008522 <HAL_GPIO_TogglePin>
}
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40020c00 	.word	0x40020c00

0800612c <_Z23subscriber_cmd_callbackRKN13geometry_msgs5TwistE>:
//void velocityCallback(const std_msgs::Float32& set_msg) {
//  rx_vel = set_msg.data;
//}
//void subscriber_cmd_callback(const geometry_msgs::Twist& data);
void subscriber_cmd_callback(const geometry_msgs::Twist& data){
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	vel_data_rx.v=data.linear.x;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	f7fa fd33 	bl	8000ba8 <__aeabi_d2f>
 8006142:	4603      	mov	r3, r0
 8006144:	4a07      	ldr	r2, [pc, #28]	; (8006164 <_Z23subscriber_cmd_callbackRKN13geometry_msgs5TwistE+0x38>)
 8006146:	6013      	str	r3, [r2, #0]
	vel_data_rx.w=data.angular.z;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800614e:	4610      	mov	r0, r2
 8006150:	4619      	mov	r1, r3
 8006152:	f7fa fd29 	bl	8000ba8 <__aeabi_d2f>
 8006156:	4603      	mov	r3, r0
 8006158:	4a02      	ldr	r2, [pc, #8]	; (8006164 <_Z23subscriber_cmd_callbackRKN13geometry_msgs5TwistE+0x38>)
 800615a:	6053      	str	r3, [r2, #4]
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	200006c4 	.word	0x200006c4

08006168 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist>vel_sub("cmd_vel",&subscriber_cmd_callback);
ros::Subscriber<std_msgs::Empty>led_sub("toggle_led",&led_cb);
//ros::Subscriber<std_msgs::Float32>vel_sub("/set_velocity",&velocityCallback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART6){
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a06      	ldr	r2, [pc, #24]	; (8006190 <HAL_UART_TxCpltCallback+0x28>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d106      	bne.n	8006188 <HAL_UART_TxCpltCallback+0x20>
		nh.getHardware()->flush();
 800617a:	4806      	ldr	r0, [pc, #24]	; (8006194 <HAL_UART_TxCpltCallback+0x2c>)
 800617c:	f000 f922 	bl	80063c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8006180:	4603      	mov	r3, r0
 8006182:	4618      	mov	r0, r3
 8006184:	f7fd f8ea 	bl	800335c <_ZN13STM32Hardware5flushEv>
	}
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40011400 	.word	0x40011400
 8006194:	200006e4 	.word	0x200006e4

08006198 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART6){
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a06      	ldr	r2, [pc, #24]	; (80061c0 <HAL_UART_RxCpltCallback+0x28>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d106      	bne.n	80061b8 <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 80061aa:	4806      	ldr	r0, [pc, #24]	; (80061c4 <HAL_UART_RxCpltCallback+0x2c>)
 80061ac:	f000 f90a 	bl	80063c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80061b0:	4603      	mov	r3, r0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fd f893 	bl	80032de <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 80061b8:	bf00      	nop
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40011400 	.word	0x40011400
 80061c4:	200006e4 	.word	0x200006e4

080061c8 <setup>:

void setup()
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
	nh.initNode();
 80061cc:	480c      	ldr	r0, [pc, #48]	; (8006200 <setup+0x38>)
 80061ce:	f000 f905 	bl	80063dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.advertise(chatter);
 80061d2:	490c      	ldr	r1, [pc, #48]	; (8006204 <setup+0x3c>)
 80061d4:	480a      	ldr	r0, [pc, #40]	; (8006200 <setup+0x38>)
 80061d6:	f000 f91e 	bl	8006416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(led_sub);
 80061da:	490b      	ldr	r1, [pc, #44]	; (8006208 <setup+0x40>)
 80061dc:	4808      	ldr	r0, [pc, #32]	; (8006200 <setup+0x38>)
 80061de:	f000 f94a 	bl	8006476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(vel_sub);
 80061e2:	490a      	ldr	r1, [pc, #40]	; (800620c <setup+0x44>)
 80061e4:	4806      	ldr	r0, [pc, #24]	; (8006200 <setup+0x38>)
 80061e6:	f000 f946 	bl	8006476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.advertise(vel_pub);
 80061ea:	4909      	ldr	r1, [pc, #36]	; (8006210 <setup+0x48>)
 80061ec:	4804      	ldr	r0, [pc, #16]	; (8006200 <setup+0x38>)
 80061ee:	f000 f912 	bl	8006416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(imu_pub);
 80061f2:	4908      	ldr	r1, [pc, #32]	; (8006214 <setup+0x4c>)
 80061f4:	4802      	ldr	r0, [pc, #8]	; (8006200 <setup+0x38>)
 80061f6:	f000 f90e 	bl	8006416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

}
 80061fa:	bf00      	nop
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200006e4 	.word	0x200006e4
 8006204:	200011e4 	.word	0x200011e4
 8006208:	20001280 	.word	0x20001280
 800620c:	20001220 	.word	0x20001220
 8006210:	200011f8 	.word	0x200011f8
 8006214:	2000120c 	.word	0x2000120c

08006218 <loop>:
void loop()
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
	//publish message

	str_msg.data=hello;
 800621c:	4b13      	ldr	r3, [pc, #76]	; (800626c <loop+0x54>)
 800621e:	4a14      	ldr	r2, [pc, #80]	; (8006270 <loop+0x58>)
 8006220:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 8006222:	4912      	ldr	r1, [pc, #72]	; (800626c <loop+0x54>)
 8006224:	4813      	ldr	r0, [pc, #76]	; (8006274 <loop+0x5c>)
 8006226:	f7fd f800 	bl	800322a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	//tx_vel1=realSpeed1;
	//vel_msg.data=tx_vel1;
	//vel_pub.publish(&vel_msg);

	vel_msg.linear.x=vel_data_tx.v;
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <loop+0x60>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fa f98a 	bl	8000548 <__aeabi_f2d>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4910      	ldr	r1, [pc, #64]	; (800627c <loop+0x64>)
 800623a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	vel_msg.angular.z=vel_data_tx.w;
 800623e:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <loop+0x60>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	4618      	mov	r0, r3
 8006244:	f7fa f980 	bl	8000548 <__aeabi_f2d>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	490b      	ldr	r1, [pc, #44]	; (800627c <loop+0x64>)
 800624e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	vel_pub.publish(&vel_msg);
 8006252:	490a      	ldr	r1, [pc, #40]	; (800627c <loop+0x64>)
 8006254:	480a      	ldr	r0, [pc, #40]	; (8006280 <loop+0x68>)
 8006256:	f7fc ffe8 	bl	800322a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
//
//		nowTick=pastTick;
//
//		num_test++;
//	}
	nh.spinOnce();
 800625a:	480a      	ldr	r0, [pc, #40]	; (8006284 <loop+0x6c>)
 800625c:	f000 f936 	bl	80064cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(1000);
 8006260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006264:	f001 fa70 	bl	8007748 <HAL_Delay>
}
 8006268:	bf00      	nop
 800626a:	bd80      	pop	{r7, pc}
 800626c:	20001028 	.word	0x20001028
 8006270:	20000024 	.word	0x20000024
 8006274:	200011e4 	.word	0x200011e4
 8006278:	200006cc 	.word	0x200006cc
 800627c:	20001188 	.word	0x20001188
 8006280:	200011f8 	.word	0x200011f8
 8006284:	200006e4 	.word	0x200006e4

08006288 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e00c      	b.n	80062b2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	fa22 f103 	lsr.w	r1, r2, r3
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	b2ca      	uxtb	r2, r1
 80062aa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d9ef      	bls.n	8006298 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e010      	b.n	80062fe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	440a      	add	r2, r1
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	4611      	mov	r1, r2
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	00d2      	lsls	r2, r2, #3
 80062ee:	fa01 f202 	lsl.w	r2, r1, r2
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3301      	adds	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b03      	cmp	r3, #3
 8006302:	d9eb      	bls.n	80062dc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
	...

08006314 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	4a04      	ldr	r2, [pc, #16]	; (8006330 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	080110cc 	.word	0x080110cc

08006334 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff ffe5 	bl	8006314 <_ZN3ros11Subscriber_C1Ev>
 800634a:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3310      	adds	r3, #16
 8006354:	4618      	mov	r0, r3
 8006356:	f7fd ff5f 	bl	8004218 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	609a      	str	r2, [r3, #8]
  };
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	08010fe0 	.word	0x08010fe0

0800637c <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff ffc1 	bl	8006314 <_ZN3ros11Subscriber_C1Ev>
 8006392:	4a0b      	ldr	r2, [pc, #44]	; (80063c0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	330c      	adds	r3, #12
 800639c:	4618      	mov	r0, r3
 800639e:	f7fd f93f 	bl	8003620 <_ZN8std_msgs5EmptyC1Ev>
    cb_(cb),
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	611a      	str	r2, [r3, #16]
    endpoint_(endpoint)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	615a      	str	r2, [r3, #20]
    topic_ = topic_name;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	609a      	str	r2, [r3, #8]
  };
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	08010fc8 	.word	0x08010fc8

080063c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
  }
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fc ff6d 	bl	80032c8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e01d      	b.n	8006462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d111      	bne.n	800645c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	60da      	str	r2, [r3, #12]
        return true;
 8006458:	2301      	movs	r3, #1
 800645a:	e006      	b.n	800646a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b18      	cmp	r3, #24
 8006466:	ddde      	ble.n	8006426 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8006468:	2300      	movs	r3, #0
  }
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e018      	b.n	80064b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800648e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10d      	bne.n	80064b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	605a      	str	r2, [r3, #4]
        return true;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e006      	b.n	80064c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b18      	cmp	r3, #24
 80064bc:	dde3      	ble.n	8006486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80064be:	2300      	movs	r3, #0
  }
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fc fff9 	bl	80034d0 <_ZN13STM32Hardware4timeEv>
 80064de:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d903      	bls.n	80064fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	429a      	cmp	r2, r3
 800650e:	d903      	bls.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800651e:	2b00      	cmp	r3, #0
 8006520:	d014      	beq.n	800654c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3304      	adds	r3, #4
 8006526:	4618      	mov	r0, r3
 8006528:	f7fc ffd2 	bl	80034d0 <_ZN13STM32Hardware4timeEv>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad2      	subs	r2, r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8006538:	429a      	cmp	r2, r3
 800653a:	bf8c      	ite	hi
 800653c:	2301      	movhi	r3, #1
 800653e:	2300      	movls	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8006546:	f06f 0301 	mvn.w	r3, #1
 800654a:	e194      	b.n	8006876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3304      	adds	r3, #4
 8006550:	4618      	mov	r0, r3
 8006552:	f7fc fed5 	bl	8003300 <_ZN13STM32Hardware4readEv>
 8006556:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f2c0 8174 	blt.w	8006848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	441a      	add	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006576:	2b07      	cmp	r3, #7
 8006578:	d11e      	bne.n	80065b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	b2d1      	uxtb	r1, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	4413      	add	r3, r2
 8006590:	460a      	mov	r2, r1
 8006592:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800659c:	1e5a      	subs	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1b4      	bne.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2208      	movs	r2, #8
 80065b2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80065b6:	e7af      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d128      	bne.n	8006614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2bff      	cmp	r3, #255	; 0xff
 80065c6:	d10d      	bne.n	80065e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f103 0214 	add.w	r2, r3, #20
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80065e2:	e799      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fc ff71 	bl	80034d0 <_ZN13STM32Hardware4timeEv>
 80065ee:	4602      	mov	r2, r0
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f8:	4293      	cmp	r3, r2
 80065fa:	bf8c      	ite	hi
 80065fc:	2301      	movhi	r3, #1
 80065fe:	2300      	movls	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d088      	beq.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800660e:	f06f 0301 	mvn.w	r3, #1
 8006612:	e130      	b.n	8006876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800661a:	2b01      	cmp	r3, #1
 800661c:	d118      	bne.n	8006650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2bfe      	cmp	r3, #254	; 0xfe
 8006622:	d107      	bne.n	8006634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006632:	e771      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8006642:	2b00      	cmp	r3, #0
 8006644:	f47f af68 	bne.w	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f918 	bl	800687e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800664e:	e763      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006656:	2b02      	cmp	r3, #2
 8006658:	d113      	bne.n	8006682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8006680:	e74a      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006688:	2b03      	cmp	r3, #3
 800668a:	d110      	bne.n	80066ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	441a      	add	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80066ac:	e734      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d116      	bne.n	80066e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80066be:	425a      	negs	r2, r3
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	bf58      	it	pl
 80066c6:	4253      	negpl	r3, r2
 80066c8:	2bff      	cmp	r3, #255	; 0xff
 80066ca:	d107      	bne.n	80066dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80066da:	e71d      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80066e4:	e718      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80066ec:	2b05      	cmp	r3, #5
 80066ee:	d10f      	bne.n	8006710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800670e:	e703      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006716:	2b06      	cmp	r3, #6
 8006718:	d117      	bne.n	800674a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2207      	movs	r2, #7
 8006730:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800673a:	2b00      	cmp	r3, #0
 800673c:	f47f aeec 	bne.w	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2208      	movs	r2, #8
 8006744:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006748:	e6e6      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006750:	2b08      	cmp	r3, #8
 8006752:	f47f aee1 	bne.w	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8006764:	425a      	negs	r2, r3
 8006766:	b2db      	uxtb	r3, r3
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	bf58      	it	pl
 800676c:	4253      	negpl	r3, r2
 800676e:	2bff      	cmp	r3, #255	; 0xff
 8006770:	f47f aed2 	bne.w	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800677a:	2b00      	cmp	r3, #0
 800677c:	d110      	bne.n	80067a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f87d 	bl	800687e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f898 	bl	80068ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800679a:	f04f 33ff 	mov.w	r3, #4294967295
 800679e:	e06a      	b.n	8006876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80067a6:	2b0a      	cmp	r3, #10
 80067a8:	d107      	bne.n	80067ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f960 	bl	8006a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80067b8:	e6ae      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80067c0:	2b06      	cmp	r3, #6
 80067c2:	d10e      	bne.n	80067e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f7fc fb85 	bl	8002ee2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80067e0:	e69a      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80067e8:	2b0b      	cmp	r3, #11
 80067ea:	d104      	bne.n	80067f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80067f4:	e690      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80067fc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680a:	2b00      	cmp	r3, #0
 800680c:	f43f ae84 	beq.w	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006816:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006820:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800682a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8006842:	4611      	mov	r1, r2
 8006844:	4798      	blx	r3
    while (true)
 8006846:	e667      	b.n	8006518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8006848:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00f      	beq.n	8006874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006862:	4293      	cmp	r3, r2
 8006864:	d906      	bls.n	8006874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f809 	bl	800687e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8006874:	2300      	movs	r3, #0
  }
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800687e:	b580      	push	{r7, lr}
 8006880:	b086      	sub	sp, #24
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8006886:	f107 030c 	add.w	r3, r7, #12
 800688a:	4618      	mov	r0, r3
 800688c:	f7fb fe86 	bl	800259c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f107 020c 	add.w	r2, r7, #12
 800689a:	210a      	movs	r1, #10
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	4798      	blx	r3
    rt_time = hardware_.time();
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fc fe13 	bl	80034d0 <_ZN13STM32Hardware4timeEv>
 80068aa:	4602      	mov	r2, r0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80068b2:	bf00      	nop
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80068ba:	b590      	push	{r4, r7, lr}
 80068bc:	b08b      	sub	sp, #44	; 0x2c
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80068c2:	f107 030c 	add.w	r3, r7, #12
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fb ff58 	bl	800277c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80068cc:	2300      	movs	r3, #0
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
 80068d0:	e062      	b.n	8006998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d056      	beq.n	8006992 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	6859      	ldr	r1, [r3, #4]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4608      	mov	r0, r1
 8006932:	4798      	blx	r3
 8006934:	4603      	mov	r3, r0
 8006936:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	6859      	ldr	r1, [r3, #4]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	330c      	adds	r3, #12
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4608      	mov	r0, r1
 8006960:	4798      	blx	r3
 8006962:	4603      	mov	r3, r0
 8006964:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8006966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800696a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681c      	ldr	r4, [r3, #0]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4618      	mov	r0, r3
 8006982:	f7fc fc66 	bl	8003252 <_ZN3ros9Publisher15getEndpointTypeEv>
 8006986:	4601      	mov	r1, r0
 8006988:	f107 030c 	add.w	r3, r7, #12
 800698c:	461a      	mov	r2, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	3301      	adds	r3, #1
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	2b18      	cmp	r3, #24
 800699c:	dd99      	ble.n	80068d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800699e:	2300      	movs	r3, #0
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
 80069a2:	e05e      	b.n	8006a62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80069ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d053      	beq.n	8006a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80069bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80069ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069da:	f202 2222 	addw	r2, r2, #546	; 0x222
 80069de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80069ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3308      	adds	r3, #8
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4608      	mov	r0, r1
 80069f6:	4798      	blx	r3
 80069f8:	4603      	mov	r3, r0
 80069fa:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a00:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a0c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4608      	mov	r0, r1
 8006a1c:	4798      	blx	r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8006a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a26:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681c      	ldr	r4, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a32:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006a36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a3e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	4798      	blx	r3
 8006a50:	4601      	mov	r1, r0
 8006a52:	f107 030c 	add.w	r3, r7, #12
 8006a56:	461a      	mov	r2, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	3301      	adds	r3, #1
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	2b18      	cmp	r3, #24
 8006a66:	dd9d      	ble.n	80069a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8006a70:	bf00      	nop
 8006a72:	372c      	adds	r7, #44	; 0x2c
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd90      	pop	{r4, r7, pc}

08006a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8006a82:	f107 0308 	add.w	r3, r7, #8
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fb fd88 	bl	800259c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fc fd1d 	bl	80034d0 <_ZN13STM32Hardware4timeEv>
 8006a96:	4602      	mov	r2, r0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8006aa2:	f107 0308 	add.w	r3, r7, #8
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fb fde7 	bl	800267c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	4915      	ldr	r1, [pc, #84]	; (8006b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8006ab4:	fba1 1303 	umull	r1, r3, r1, r3
 8006ab8:	099b      	lsrs	r3, r3, #6
 8006aba:	4413      	add	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8006abe:	6939      	ldr	r1, [r7, #16]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8006ac4:	fba3 0302 	umull	r0, r3, r3, r2
 8006ac8:	099b      	lsrs	r3, r3, #6
 8006aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ace:	fb00 f303 	mul.w	r3, r0, r3
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	4a0d      	ldr	r2, [pc, #52]	; (8006b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8006ad6:	fb02 f303 	mul.w	r3, r2, r3
 8006ada:	440b      	add	r3, r1
 8006adc:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8006ade:	f107 0308 	add.w	r3, r7, #8
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8a6 	bl	8006c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fc fced 	bl	80034d0 <_ZN13STM32Hardware4timeEv>
 8006af6:	4602      	mov	r2, r0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8006afe:	bf00      	nop
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	10624dd3 	.word	0x10624dd3
 8006b0c:	000f4240 	.word	0x000f4240

08006b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b63      	cmp	r3, #99	; 0x63
 8006b20:	dd09      	ble.n	8006b36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8006b28:	f083 0301 	eor.w	r3, r3, #1
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e079      	b.n	8006c2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8006b42:	3207      	adds	r2, #7
 8006b44:	4611      	mov	r1, r2
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
 8006b4a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	22ff      	movs	r2, #255	; 0xff
 8006b50:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	22fe      	movs	r2, #254	; 0xfe
 8006b58:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	0a1b      	lsrs	r3, r3, #8
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8006b82:	4413      	add	r3, r2
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	43db      	mvns	r3, r3
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	b21b      	sxth	r3, r3
 8006b9e:	121b      	asrs	r3, r3, #8
 8006ba0:	b21b      	sxth	r3, r3
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8006bae:	2305      	movs	r3, #5
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	e00c      	b.n	8006bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	3306      	adds	r3, #6
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	dded      	ble.n	8006bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	3307      	adds	r3, #7
 8006bdc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	425a      	negs	r2, r3
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	bf58      	it	pl
 8006be8:	4253      	negpl	r3, r2
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	1c59      	adds	r1, r3, #1
 8006bf0:	6179      	str	r1, [r7, #20]
 8006bf2:	43d2      	mvns	r2, r2
 8006bf4:	b2d1      	uxtb	r1, r2
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	460a      	mov	r2, r1
 8006bfc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c06:	dc0a      	bgt.n	8006c1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	1d18      	adds	r0, r3, #4
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4619      	mov	r1, r3
 8006c16:	f7fc fc15 	bl	8003444 <_ZN13STM32Hardware5writeEPKhi>
      return l;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	e005      	b.n	8006c2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8006c1e:	4905      	ldr	r1, [pc, #20]	; (8006c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 f849 	bl	8006cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8006c26:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	08010f3c 	.word	0x08010f3c

08006c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3304      	adds	r3, #4
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fc fc42 	bl	80034d0 <_ZN13STM32Hardware4timeEv>
 8006c4c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4915      	ldr	r1, [pc, #84]	; (8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8006c56:	fba1 1303 	umull	r1, r3, r1, r3
 8006c5a:	099b      	lsrs	r3, r3, #6
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	1e5a      	subs	r2, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6859      	ldr	r1, [r3, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8006c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8006c72:	099b      	lsrs	r3, r3, #6
 8006c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c78:	fb00 f303 	mul.w	r3, r0, r3
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	4a0c      	ldr	r2, [pc, #48]	; (8006cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8006c80:	fb02 f303 	mul.w	r3, r2, r3
 8006c84:	1aca      	subs	r2, r1, r3
 8006c86:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8006c88:	4413      	add	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	f7fa f950 	bl	8000f44 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	10624dd3 	.word	0x10624dd3
 8006cb0:	000f4240 	.word	0x000f4240
 8006cb4:	3b9aca00 	.word	0x3b9aca00

08006cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	2103      	movs	r1, #3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f804 	bl	8006cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8006ce2:	f107 0314 	add.w	r3, r7, #20
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fb ff0c 	bl	8002b04 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f107 0214 	add.w	r2, r7, #20
 8006cfe:	2107      	movs	r1, #7
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	4798      	blx	r3
  }
 8006d04:	bf00      	nop
 8006d06:	3720      	adds	r7, #32
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <_Z41__static_initialization_and_destruction_0ii>:
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d137      	bne.n	8006d8c <_Z41__static_initialization_and_destruction_0ii+0x80>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d132      	bne.n	8006d8c <_Z41__static_initialization_and_destruction_0ii+0x80>
ros::NodeHandle nh;
 8006d26:	481b      	ldr	r0, [pc, #108]	; (8006d94 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006d28:	f7ff f978 	bl	800601c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int32 num_msg;
 8006d2c:	481a      	ldr	r0, [pc, #104]	; (8006d98 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006d2e:	f7fc fbdb 	bl	80034e8 <_ZN8std_msgs5Int32C1Ev>
std_msgs::String str_msg;
 8006d32:	481a      	ldr	r0, [pc, #104]	; (8006d9c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006d34:	f7fc fcbe 	bl	80036b4 <_ZN8std_msgs6StringC1Ev>
sensor_msgs::Imu imu;
 8006d38:	4819      	ldr	r0, [pc, #100]	; (8006da0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006d3a:	f7fe fb43 	bl	80053c4 <_ZN11sensor_msgs3ImuC1Ev>
geometry_msgs::Twist vel_msg;
 8006d3e:	4819      	ldr	r0, [pc, #100]	; (8006da4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006d40:	f7fd fa6a 	bl	8004218 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher num_pub("num", &num_msg);
 8006d44:	2300      	movs	r3, #0
 8006d46:	4a14      	ldr	r2, [pc, #80]	; (8006d98 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006d48:	4917      	ldr	r1, [pc, #92]	; (8006da8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006d4a:	4818      	ldr	r0, [pc, #96]	; (8006dac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006d4c:	f7fc fa56 	bl	80031fc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher chatter("chatter",&str_msg);
 8006d50:	2300      	movs	r3, #0
 8006d52:	4a12      	ldr	r2, [pc, #72]	; (8006d9c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006d54:	4916      	ldr	r1, [pc, #88]	; (8006db0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006d56:	4817      	ldr	r0, [pc, #92]	; (8006db4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006d58:	f7fc fa50 	bl	80031fc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher vel_pub("vel_pub",&vel_msg);
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4a11      	ldr	r2, [pc, #68]	; (8006da4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006d60:	4915      	ldr	r1, [pc, #84]	; (8006db8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8006d62:	4816      	ldr	r0, [pc, #88]	; (8006dbc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8006d64:	f7fc fa4a 	bl	80031fc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher imu_pub("imu", &imu);
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4a0d      	ldr	r2, [pc, #52]	; (8006da0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006d6c:	4914      	ldr	r1, [pc, #80]	; (8006dc0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8006d6e:	4815      	ldr	r0, [pc, #84]	; (8006dc4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8006d70:	f7fc fa44 	bl	80031fc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist>vel_sub("cmd_vel",&subscriber_cmd_callback);
 8006d74:	2301      	movs	r3, #1
 8006d76:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8006d78:	4914      	ldr	r1, [pc, #80]	; (8006dcc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8006d7a:	4815      	ldr	r0, [pc, #84]	; (8006dd0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8006d7c:	f7ff fada 	bl	8006334 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Empty>led_sub("toggle_led",&led_cb);
 8006d80:	2301      	movs	r3, #1
 8006d82:	4a14      	ldr	r2, [pc, #80]	; (8006dd4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8006d84:	4914      	ldr	r1, [pc, #80]	; (8006dd8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8006d86:	4815      	ldr	r0, [pc, #84]	; (8006ddc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8006d88:	f7ff faf8 	bl	800637c <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200006e4 	.word	0x200006e4
 8006d98:	20001020 	.word	0x20001020
 8006d9c:	20001028 	.word	0x20001028
 8006da0:	20001030 	.word	0x20001030
 8006da4:	20001188 	.word	0x20001188
 8006da8:	08010f78 	.word	0x08010f78
 8006dac:	200011d0 	.word	0x200011d0
 8006db0:	08010f7c 	.word	0x08010f7c
 8006db4:	200011e4 	.word	0x200011e4
 8006db8:	08010f84 	.word	0x08010f84
 8006dbc:	200011f8 	.word	0x200011f8
 8006dc0:	08010f8c 	.word	0x08010f8c
 8006dc4:	2000120c 	.word	0x2000120c
 8006dc8:	0800612d 	.word	0x0800612d
 8006dcc:	08010f90 	.word	0x08010f90
 8006dd0:	20001220 	.word	0x20001220
 8006dd4:	0800610d 	.word	0x0800610d
 8006dd8:	08010f98 	.word	0x08010f98
 8006ddc:	20001280 	.word	0x20001280

08006de0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	330c      	adds	r3, #12
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fc fc35 	bl	8003660 <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	320c      	adds	r2, #12
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4798      	blx	r3
  }
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695b      	ldr	r3, [r3, #20]
  }
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fc fc24 	bl	800367c <_ZN8std_msgs5Empty7getTypeEv>
 8006e34:	4603      	mov	r3, r0
  }
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fc fc24 	bl	8003698 <_ZN8std_msgs5Empty6getMD5Ev>
 8006e50:	4603      	mov	r3, r0
  }
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b082      	sub	sp, #8
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3310      	adds	r3, #16
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fd fa16 	bl	800429c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	3210      	adds	r2, #16
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4798      	blx	r3
  }
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3310      	adds	r3, #16
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fd fa1d 	bl	80042e8 <_ZN13geometry_msgs5Twist7getTypeEv>
 8006eae:	4603      	mov	r3, r0
  }
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3310      	adds	r3, #16
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fd fa1d 	bl	8004304 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8006eca:	4603      	mov	r3, r0
  }
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
    return configured_;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <_GLOBAL__sub_I_imu_data_tx>:
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	f7ff ff08 	bl	8006d0c <_Z41__static_initialization_and_destruction_0ii>
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f06:	2300      	movs	r3, #0
 8006f08:	607b      	str	r3, [r7, #4]
 8006f0a:	4b10      	ldr	r3, [pc, #64]	; (8006f4c <HAL_MspInit+0x4c>)
 8006f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0e:	4a0f      	ldr	r2, [pc, #60]	; (8006f4c <HAL_MspInit+0x4c>)
 8006f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f14:	6453      	str	r3, [r2, #68]	; 0x44
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <HAL_MspInit+0x4c>)
 8006f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f1e:	607b      	str	r3, [r7, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f22:	2300      	movs	r3, #0
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <HAL_MspInit+0x4c>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <HAL_MspInit+0x4c>)
 8006f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f30:	6413      	str	r3, [r2, #64]	; 0x40
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <HAL_MspInit+0x4c>)
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40023800 	.word	0x40023800

08006f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	; 0x28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f58:	f107 0314 	add.w	r3, r7, #20
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	605a      	str	r2, [r3, #4]
 8006f62:	609a      	str	r2, [r3, #8]
 8006f64:	60da      	str	r2, [r3, #12]
 8006f66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <HAL_I2C_MspInit+0x84>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d12b      	bne.n	8006fca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f72:	2300      	movs	r3, #0
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <HAL_I2C_MspInit+0x88>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	4a17      	ldr	r2, [pc, #92]	; (8006fd8 <HAL_I2C_MspInit+0x88>)
 8006f7c:	f043 0302 	orr.w	r3, r3, #2
 8006f80:	6313      	str	r3, [r2, #48]	; 0x30
 8006f82:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <HAL_I2C_MspInit+0x88>)
 8006f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f8e:	23c0      	movs	r3, #192	; 0xc0
 8006f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f92:	2312      	movs	r3, #18
 8006f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f96:	2301      	movs	r3, #1
 8006f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006f9e:	2304      	movs	r3, #4
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fa2:	f107 0314 	add.w	r3, r7, #20
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	480c      	ldr	r0, [pc, #48]	; (8006fdc <HAL_I2C_MspInit+0x8c>)
 8006faa:	f001 f905 	bl	80081b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <HAL_I2C_MspInit+0x88>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	4a08      	ldr	r2, [pc, #32]	; (8006fd8 <HAL_I2C_MspInit+0x88>)
 8006fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006fbe:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <HAL_I2C_MspInit+0x88>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006fca:	bf00      	nop
 8006fcc:	3728      	adds	r7, #40	; 0x28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40005400 	.word	0x40005400
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	40020400 	.word	0x40020400

08006fe0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08c      	sub	sp, #48	; 0x30
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fe8:	f107 031c 	add.w	r3, r7, #28
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	609a      	str	r2, [r3, #8]
 8006ff4:	60da      	str	r2, [r3, #12]
 8006ff6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a33      	ldr	r2, [pc, #204]	; (80070cc <HAL_TIM_Encoder_MspInit+0xec>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d12d      	bne.n	800705e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007002:	2300      	movs	r3, #0
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	4b32      	ldr	r3, [pc, #200]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	4a31      	ldr	r2, [pc, #196]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	6453      	str	r3, [r2, #68]	; 0x44
 8007012:	4b2f      	ldr	r3, [pc, #188]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	4b2b      	ldr	r3, [pc, #172]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007026:	4a2a      	ldr	r2, [pc, #168]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007028:	f043 0310 	orr.w	r3, r3, #16
 800702c:	6313      	str	r3, [r2, #48]	; 0x30
 800702e:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	f003 0310 	and.w	r3, r3, #16
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800703a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800703e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007040:	2302      	movs	r3, #2
 8007042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007044:	2300      	movs	r3, #0
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007048:	2300      	movs	r3, #0
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800704c:	2301      	movs	r3, #1
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007050:	f107 031c 	add.w	r3, r7, #28
 8007054:	4619      	mov	r1, r3
 8007056:	481f      	ldr	r0, [pc, #124]	; (80070d4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8007058:	f001 f8ae 	bl	80081b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800705c:	e031      	b.n	80070c2 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1d      	ldr	r2, [pc, #116]	; (80070d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d12c      	bne.n	80070c2 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007068:	2300      	movs	r3, #0
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	4b18      	ldr	r3, [pc, #96]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	4a17      	ldr	r2, [pc, #92]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007072:	f043 0304 	orr.w	r3, r3, #4
 8007076:	6413      	str	r3, [r2, #64]	; 0x40
 8007078:	4b15      	ldr	r3, [pc, #84]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708c:	4a10      	ldr	r2, [pc, #64]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800708e:	f043 0308 	orr.w	r3, r3, #8
 8007092:	6313      	str	r3, [r2, #48]	; 0x30
 8007094:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80070a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80070a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a6:	2302      	movs	r3, #2
 80070a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ae:	2300      	movs	r3, #0
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80070b2:	2302      	movs	r3, #2
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070b6:	f107 031c 	add.w	r3, r7, #28
 80070ba:	4619      	mov	r1, r3
 80070bc:	4807      	ldr	r0, [pc, #28]	; (80070dc <HAL_TIM_Encoder_MspInit+0xfc>)
 80070be:	f001 f87b 	bl	80081b8 <HAL_GPIO_Init>
}
 80070c2:	bf00      	nop
 80070c4:	3730      	adds	r7, #48	; 0x30
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40023800 	.word	0x40023800
 80070d4:	40021000 	.word	0x40021000
 80070d8:	40000800 	.word	0x40000800
 80070dc:	40020c00 	.word	0x40020c00

080070e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f0:	d115      	bne.n	800711e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <HAL_TIM_Base_MspInit+0x48>)
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	4a0b      	ldr	r2, [pc, #44]	; (8007128 <HAL_TIM_Base_MspInit+0x48>)
 80070fc:	f043 0301 	orr.w	r3, r3, #1
 8007100:	6413      	str	r3, [r2, #64]	; 0x40
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <HAL_TIM_Base_MspInit+0x48>)
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800710e:	2200      	movs	r2, #0
 8007110:	2101      	movs	r1, #1
 8007112:	201c      	movs	r0, #28
 8007114:	f000 fc17 	bl	8007946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007118:	201c      	movs	r0, #28
 800711a:	f000 fc30 	bl	800797e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40023800 	.word	0x40023800

0800712c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a0b      	ldr	r2, [pc, #44]	; (8007168 <HAL_TIM_PWM_MspInit+0x3c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d10d      	bne.n	800715a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	4b0a      	ldr	r3, [pc, #40]	; (800716c <HAL_TIM_PWM_MspInit+0x40>)
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	4a09      	ldr	r2, [pc, #36]	; (800716c <HAL_TIM_PWM_MspInit+0x40>)
 8007148:	f043 0302 	orr.w	r3, r3, #2
 800714c:	6413      	str	r3, [r2, #64]	; 0x40
 800714e:	4b07      	ldr	r3, [pc, #28]	; (800716c <HAL_TIM_PWM_MspInit+0x40>)
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800715a:	bf00      	nop
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40000400 	.word	0x40000400
 800716c:	40023800 	.word	0x40023800

08007170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	605a      	str	r2, [r3, #4]
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	60da      	str	r2, [r3, #12]
 8007186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a12      	ldr	r2, [pc, #72]	; (80071d8 <HAL_TIM_MspPostInit+0x68>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d11d      	bne.n	80071ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007192:	2300      	movs	r3, #0
 8007194:	60bb      	str	r3, [r7, #8]
 8007196:	4b11      	ldr	r3, [pc, #68]	; (80071dc <HAL_TIM_MspPostInit+0x6c>)
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	4a10      	ldr	r2, [pc, #64]	; (80071dc <HAL_TIM_MspPostInit+0x6c>)
 800719c:	f043 0301 	orr.w	r3, r3, #1
 80071a0:	6313      	str	r3, [r2, #48]	; 0x30
 80071a2:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <HAL_TIM_MspPostInit+0x6c>)
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	60bb      	str	r3, [r7, #8]
 80071ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80071ae:	23c0      	movs	r3, #192	; 0xc0
 80071b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b2:	2302      	movs	r3, #2
 80071b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071ba:	2300      	movs	r3, #0
 80071bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80071be:	2302      	movs	r3, #2
 80071c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071c2:	f107 030c 	add.w	r3, r7, #12
 80071c6:	4619      	mov	r1, r3
 80071c8:	4805      	ldr	r0, [pc, #20]	; (80071e0 <HAL_TIM_MspPostInit+0x70>)
 80071ca:	f000 fff5 	bl	80081b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80071ce:	bf00      	nop
 80071d0:	3720      	adds	r7, #32
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40023800 	.word	0x40023800
 80071e0:	40020000 	.word	0x40020000

080071e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08c      	sub	sp, #48	; 0x30
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071ec:	f107 031c 	add.w	r3, r7, #28
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	605a      	str	r2, [r3, #4]
 80071f6:	609a      	str	r2, [r3, #8]
 80071f8:	60da      	str	r2, [r3, #12]
 80071fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a65      	ldr	r2, [pc, #404]	; (8007398 <HAL_UART_MspInit+0x1b4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d12c      	bne.n	8007260 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007206:	2300      	movs	r3, #0
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	4b64      	ldr	r3, [pc, #400]	; (800739c <HAL_UART_MspInit+0x1b8>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	4a63      	ldr	r2, [pc, #396]	; (800739c <HAL_UART_MspInit+0x1b8>)
 8007210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007214:	6413      	str	r3, [r2, #64]	; 0x40
 8007216:	4b61      	ldr	r3, [pc, #388]	; (800739c <HAL_UART_MspInit+0x1b8>)
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	4b5d      	ldr	r3, [pc, #372]	; (800739c <HAL_UART_MspInit+0x1b8>)
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	4a5c      	ldr	r2, [pc, #368]	; (800739c <HAL_UART_MspInit+0x1b8>)
 800722c:	f043 0301 	orr.w	r3, r3, #1
 8007230:	6313      	str	r3, [r2, #48]	; 0x30
 8007232:	4b5a      	ldr	r3, [pc, #360]	; (800739c <HAL_UART_MspInit+0x1b8>)
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800723e:	230c      	movs	r3, #12
 8007240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007242:	2302      	movs	r3, #2
 8007244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007246:	2300      	movs	r3, #0
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800724a:	2303      	movs	r3, #3
 800724c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800724e:	2307      	movs	r3, #7
 8007250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007252:	f107 031c 	add.w	r3, r7, #28
 8007256:	4619      	mov	r1, r3
 8007258:	4851      	ldr	r0, [pc, #324]	; (80073a0 <HAL_UART_MspInit+0x1bc>)
 800725a:	f000 ffad 	bl	80081b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800725e:	e096      	b.n	800738e <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a4f      	ldr	r2, [pc, #316]	; (80073a4 <HAL_UART_MspInit+0x1c0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	f040 8091 	bne.w	800738e <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	4b4a      	ldr	r3, [pc, #296]	; (800739c <HAL_UART_MspInit+0x1b8>)
 8007272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007274:	4a49      	ldr	r2, [pc, #292]	; (800739c <HAL_UART_MspInit+0x1b8>)
 8007276:	f043 0320 	orr.w	r3, r3, #32
 800727a:	6453      	str	r3, [r2, #68]	; 0x44
 800727c:	4b47      	ldr	r3, [pc, #284]	; (800739c <HAL_UART_MspInit+0x1b8>)
 800727e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	4b43      	ldr	r3, [pc, #268]	; (800739c <HAL_UART_MspInit+0x1b8>)
 800728e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007290:	4a42      	ldr	r2, [pc, #264]	; (800739c <HAL_UART_MspInit+0x1b8>)
 8007292:	f043 0304 	orr.w	r3, r3, #4
 8007296:	6313      	str	r3, [r2, #48]	; 0x30
 8007298:	4b40      	ldr	r3, [pc, #256]	; (800739c <HAL_UART_MspInit+0x1b8>)
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80072a4:	23c0      	movs	r3, #192	; 0xc0
 80072a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072a8:	2302      	movs	r3, #2
 80072aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ac:	2300      	movs	r3, #0
 80072ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072b0:	2303      	movs	r3, #3
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80072b4:	2308      	movs	r3, #8
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072b8:	f107 031c 	add.w	r3, r7, #28
 80072bc:	4619      	mov	r1, r3
 80072be:	483a      	ldr	r0, [pc, #232]	; (80073a8 <HAL_UART_MspInit+0x1c4>)
 80072c0:	f000 ff7a 	bl	80081b8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80072c4:	4b39      	ldr	r3, [pc, #228]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 80072c6:	4a3a      	ldr	r2, [pc, #232]	; (80073b0 <HAL_UART_MspInit+0x1cc>)
 80072c8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80072ca:	4b38      	ldr	r3, [pc, #224]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 80072cc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80072d0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072d2:	4b36      	ldr	r3, [pc, #216]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072d8:	4b34      	ldr	r3, [pc, #208]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 80072da:	2200      	movs	r2, #0
 80072dc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80072de:	4b33      	ldr	r3, [pc, #204]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 80072e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072e4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072e6:	4b31      	ldr	r3, [pc, #196]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072ec:	4b2f      	ldr	r3, [pc, #188]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80072f2:	4b2e      	ldr	r3, [pc, #184]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 80072f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072f8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80072fa:	4b2c      	ldr	r3, [pc, #176]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007300:	4b2a      	ldr	r3, [pc, #168]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 8007302:	2200      	movs	r2, #0
 8007304:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007306:	4829      	ldr	r0, [pc, #164]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 8007308:	f000 fb54 	bl	80079b4 <HAL_DMA_Init>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8007312:	f7fb f91d 	bl	8002550 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a24      	ldr	r2, [pc, #144]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 800731a:	63da      	str	r2, [r3, #60]	; 0x3c
 800731c:	4a23      	ldr	r2, [pc, #140]	; (80073ac <HAL_UART_MspInit+0x1c8>)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007322:	4b24      	ldr	r3, [pc, #144]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 8007324:	4a24      	ldr	r2, [pc, #144]	; (80073b8 <HAL_UART_MspInit+0x1d4>)
 8007326:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8007328:	4b22      	ldr	r3, [pc, #136]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 800732a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800732e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007330:	4b20      	ldr	r3, [pc, #128]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 8007332:	2240      	movs	r2, #64	; 0x40
 8007334:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007336:	4b1f      	ldr	r3, [pc, #124]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 8007338:	2200      	movs	r2, #0
 800733a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800733c:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 800733e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007342:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007344:	4b1b      	ldr	r3, [pc, #108]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 8007346:	2200      	movs	r2, #0
 8007348:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800734a:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 800734c:	2200      	movs	r2, #0
 800734e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8007350:	4b18      	ldr	r3, [pc, #96]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 8007352:	2200      	movs	r2, #0
 8007354:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007356:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 8007358:	2200      	movs	r2, #0
 800735a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800735c:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 800735e:	2200      	movs	r2, #0
 8007360:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8007362:	4814      	ldr	r0, [pc, #80]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 8007364:	f000 fb26 	bl	80079b4 <HAL_DMA_Init>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 800736e:	f7fb f8ef 	bl	8002550 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a0f      	ldr	r2, [pc, #60]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 8007376:	639a      	str	r2, [r3, #56]	; 0x38
 8007378:	4a0e      	ldr	r2, [pc, #56]	; (80073b4 <HAL_UART_MspInit+0x1d0>)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800737e:	2200      	movs	r2, #0
 8007380:	2100      	movs	r1, #0
 8007382:	2047      	movs	r0, #71	; 0x47
 8007384:	f000 fadf 	bl	8007946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007388:	2047      	movs	r0, #71	; 0x47
 800738a:	f000 faf8 	bl	800797e <HAL_NVIC_EnableIRQ>
}
 800738e:	bf00      	nop
 8007390:	3730      	adds	r7, #48	; 0x30
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40004400 	.word	0x40004400
 800739c:	40023800 	.word	0x40023800
 80073a0:	40020000 	.word	0x40020000
 80073a4:	40011400 	.word	0x40011400
 80073a8:	40020800 	.word	0x40020800
 80073ac:	20000594 	.word	0x20000594
 80073b0:	40026428 	.word	0x40026428
 80073b4:	200005f4 	.word	0x200005f4
 80073b8:	400264a0 	.word	0x400264a0

080073bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80073c0:	e7fe      	b.n	80073c0 <NMI_Handler+0x4>

080073c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073c2:	b480      	push	{r7}
 80073c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073c6:	e7fe      	b.n	80073c6 <HardFault_Handler+0x4>

080073c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073cc:	e7fe      	b.n	80073cc <MemManage_Handler+0x4>

080073ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073ce:	b480      	push	{r7}
 80073d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073d2:	e7fe      	b.n	80073d2 <BusFault_Handler+0x4>

080073d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073d8:	e7fe      	b.n	80073d8 <UsageFault_Handler+0x4>

080073da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073da:	b480      	push	{r7}
 80073dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073de:	bf00      	nop
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073ec:	bf00      	nop
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80073f6:	b480      	push	{r7}
 80073f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80073fa:	bf00      	nop
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007408:	f000 f97e 	bl	8007708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800740c:	bf00      	nop
 800740e:	bd80      	pop	{r7, pc}

08007410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007414:	4802      	ldr	r0, [pc, #8]	; (8007420 <TIM2_IRQHandler+0x10>)
 8007416:	f003 f977 	bl	800a708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	2000042c 	.word	0x2000042c

08007424 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007428:	4802      	ldr	r0, [pc, #8]	; (8007434 <DMA2_Stream1_IRQHandler+0x10>)
 800742a:	f000 fc5b 	bl	8007ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800742e:	bf00      	nop
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000594 	.word	0x20000594

08007438 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800743c:	4802      	ldr	r0, [pc, #8]	; (8007448 <DMA2_Stream6_IRQHandler+0x10>)
 800743e:	f000 fc51 	bl	8007ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007442:	bf00      	nop
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	200005f4 	.word	0x200005f4

0800744c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007450:	4802      	ldr	r0, [pc, #8]	; (800745c <USART6_IRQHandler+0x10>)
 8007452:	f004 f88d 	bl	800b570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8007456:	bf00      	nop
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	2000054c 	.word	0x2000054c

08007460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  return 1;
 8007464:	2301      	movs	r3, #1
}
 8007466:	4618      	mov	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <_kill>:

int _kill(int pid, int sig)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800747a:	f007 fd05 	bl	800ee88 <__errno>
 800747e:	4603      	mov	r3, r0
 8007480:	2216      	movs	r2, #22
 8007482:	601a      	str	r2, [r3, #0]
  return -1;
 8007484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <_exit>:

void _exit (int status)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007498:	f04f 31ff 	mov.w	r1, #4294967295
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff ffe7 	bl	8007470 <_kill>
  while (1) {}    /* Make sure we hang here */
 80074a2:	e7fe      	b.n	80074a2 <_exit+0x12>

080074a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e00a      	b.n	80074cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80074b6:	f3af 8000 	nop.w
 80074ba:	4601      	mov	r1, r0
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	60ba      	str	r2, [r7, #8]
 80074c2:	b2ca      	uxtb	r2, r1
 80074c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	3301      	adds	r3, #1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	dbf0      	blt.n	80074b6 <_read+0x12>
  }

  return len;
 80074d4:	687b      	ldr	r3, [r7, #4]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	e009      	b.n	8007504 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	60ba      	str	r2, [r7, #8]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	3301      	adds	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	429a      	cmp	r2, r3
 800750a:	dbf1      	blt.n	80074f0 <_write+0x12>
  }
  return len;
 800750c:	687b      	ldr	r3, [r7, #4]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <_close>:

int _close(int file)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800751e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007522:	4618      	mov	r0, r3
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800753e:	605a      	str	r2, [r3, #4]
  return 0;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <_isatty>:

int _isatty(int file)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007556:	2301      	movs	r3, #1
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007588:	4a14      	ldr	r2, [pc, #80]	; (80075dc <_sbrk+0x5c>)
 800758a:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <_sbrk+0x60>)
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007594:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <_sbrk+0x64>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d102      	bne.n	80075a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800759c:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <_sbrk+0x64>)
 800759e:	4a12      	ldr	r2, [pc, #72]	; (80075e8 <_sbrk+0x68>)
 80075a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075a2:	4b10      	ldr	r3, [pc, #64]	; (80075e4 <_sbrk+0x64>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4413      	add	r3, r2
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d207      	bcs.n	80075c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075b0:	f007 fc6a 	bl	800ee88 <__errno>
 80075b4:	4603      	mov	r3, r0
 80075b6:	220c      	movs	r2, #12
 80075b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295
 80075be:	e009      	b.n	80075d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075c0:	4b08      	ldr	r3, [pc, #32]	; (80075e4 <_sbrk+0x64>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <_sbrk+0x64>)
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	4a05      	ldr	r2, [pc, #20]	; (80075e4 <_sbrk+0x64>)
 80075d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80075d2:	68fb      	ldr	r3, [r7, #12]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20020000 	.word	0x20020000
 80075e0:	00000400 	.word	0x00000400
 80075e4:	20001298 	.word	0x20001298
 80075e8:	20001408 	.word	0x20001408

080075ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80075f0:	4b06      	ldr	r3, [pc, #24]	; (800760c <SystemInit+0x20>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f6:	4a05      	ldr	r2, [pc, #20]	; (800760c <SystemInit+0x20>)
 80075f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007600:	bf00      	nop
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	e000ed00 	.word	0xe000ed00

08007610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007648 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007614:	f7ff ffea 	bl	80075ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007618:	480c      	ldr	r0, [pc, #48]	; (800764c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800761a:	490d      	ldr	r1, [pc, #52]	; (8007650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800761c:	4a0d      	ldr	r2, [pc, #52]	; (8007654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800761e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007620:	e002      	b.n	8007628 <LoopCopyDataInit>

08007622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007626:	3304      	adds	r3, #4

08007628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800762a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800762c:	d3f9      	bcc.n	8007622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800762e:	4a0a      	ldr	r2, [pc, #40]	; (8007658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007630:	4c0a      	ldr	r4, [pc, #40]	; (800765c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007634:	e001      	b.n	800763a <LoopFillZerobss>

08007636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007638:	3204      	adds	r2, #4

0800763a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800763a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800763c:	d3fb      	bcc.n	8007636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800763e:	f007 fc29 	bl	800ee94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007642:	f7f9 fe11 	bl	8001268 <main>
  bx  lr    
 8007646:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800764c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007650:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8007654:	08011580 	.word	0x08011580
  ldr r2, =_sbss
 8007658:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 800765c:	20001408 	.word	0x20001408

08007660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007660:	e7fe      	b.n	8007660 <ADC_IRQHandler>
	...

08007664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007668:	4b0e      	ldr	r3, [pc, #56]	; (80076a4 <HAL_Init+0x40>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a0d      	ldr	r2, [pc, #52]	; (80076a4 <HAL_Init+0x40>)
 800766e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007674:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <HAL_Init+0x40>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a0a      	ldr	r2, [pc, #40]	; (80076a4 <HAL_Init+0x40>)
 800767a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800767e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007680:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <HAL_Init+0x40>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <HAL_Init+0x40>)
 8007686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800768a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800768c:	2003      	movs	r0, #3
 800768e:	f000 f94f 	bl	8007930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007692:	200f      	movs	r0, #15
 8007694:	f000 f808 	bl	80076a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007698:	f7ff fc32 	bl	8006f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40023c00 	.word	0x40023c00

080076a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <HAL_InitTick+0x54>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	4b12      	ldr	r3, [pc, #72]	; (8007700 <HAL_InitTick+0x58>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	4619      	mov	r1, r3
 80076ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076be:	fbb3 f3f1 	udiv	r3, r3, r1
 80076c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 f967 	bl	800799a <HAL_SYSTICK_Config>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e00e      	b.n	80076f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b0f      	cmp	r3, #15
 80076da:	d80a      	bhi.n	80076f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80076dc:	2200      	movs	r2, #0
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	f000 f92f 	bl	8007946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80076e8:	4a06      	ldr	r2, [pc, #24]	; (8007704 <HAL_InitTick+0x5c>)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e000      	b.n	80076f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000030 	.word	0x20000030
 8007700:	20000038 	.word	0x20000038
 8007704:	20000034 	.word	0x20000034

08007708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <HAL_IncTick+0x20>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	4b06      	ldr	r3, [pc, #24]	; (800772c <HAL_IncTick+0x24>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4413      	add	r3, r2
 8007718:	4a04      	ldr	r2, [pc, #16]	; (800772c <HAL_IncTick+0x24>)
 800771a:	6013      	str	r3, [r2, #0]
}
 800771c:	bf00      	nop
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20000038 	.word	0x20000038
 800772c:	2000129c 	.word	0x2000129c

08007730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
  return uwTick;
 8007734:	4b03      	ldr	r3, [pc, #12]	; (8007744 <HAL_GetTick+0x14>)
 8007736:	681b      	ldr	r3, [r3, #0]
}
 8007738:	4618      	mov	r0, r3
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	2000129c 	.word	0x2000129c

08007748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007750:	f7ff ffee 	bl	8007730 <HAL_GetTick>
 8007754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d005      	beq.n	800776e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007762:	4b0a      	ldr	r3, [pc, #40]	; (800778c <HAL_Delay+0x44>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800776e:	bf00      	nop
 8007770:	f7ff ffde 	bl	8007730 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	429a      	cmp	r2, r3
 800777e:	d8f7      	bhi.n	8007770 <HAL_Delay+0x28>
  {
  }
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000038 	.word	0x20000038

08007790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077a0:	4b0c      	ldr	r3, [pc, #48]	; (80077d4 <__NVIC_SetPriorityGrouping+0x44>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80077ac:	4013      	ands	r3, r2
 80077ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80077bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077c2:	4a04      	ldr	r2, [pc, #16]	; (80077d4 <__NVIC_SetPriorityGrouping+0x44>)
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	60d3      	str	r3, [r2, #12]
}
 80077c8:	bf00      	nop
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	e000ed00 	.word	0xe000ed00

080077d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077dc:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <__NVIC_GetPriorityGrouping+0x18>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	0a1b      	lsrs	r3, r3, #8
 80077e2:	f003 0307 	and.w	r3, r3, #7
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007802:	2b00      	cmp	r3, #0
 8007804:	db0b      	blt.n	800781e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	f003 021f 	and.w	r2, r3, #31
 800780c:	4907      	ldr	r1, [pc, #28]	; (800782c <__NVIC_EnableIRQ+0x38>)
 800780e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	2001      	movs	r0, #1
 8007816:	fa00 f202 	lsl.w	r2, r0, r2
 800781a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	e000e100 	.word	0xe000e100

08007830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	6039      	str	r1, [r7, #0]
 800783a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800783c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007840:	2b00      	cmp	r3, #0
 8007842:	db0a      	blt.n	800785a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	b2da      	uxtb	r2, r3
 8007848:	490c      	ldr	r1, [pc, #48]	; (800787c <__NVIC_SetPriority+0x4c>)
 800784a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800784e:	0112      	lsls	r2, r2, #4
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	440b      	add	r3, r1
 8007854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007858:	e00a      	b.n	8007870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	b2da      	uxtb	r2, r3
 800785e:	4908      	ldr	r1, [pc, #32]	; (8007880 <__NVIC_SetPriority+0x50>)
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	3b04      	subs	r3, #4
 8007868:	0112      	lsls	r2, r2, #4
 800786a:	b2d2      	uxtb	r2, r2
 800786c:	440b      	add	r3, r1
 800786e:	761a      	strb	r2, [r3, #24]
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	e000e100 	.word	0xe000e100
 8007880:	e000ed00 	.word	0xe000ed00

08007884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007884:	b480      	push	{r7}
 8007886:	b089      	sub	sp, #36	; 0x24
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	f1c3 0307 	rsb	r3, r3, #7
 800789e:	2b04      	cmp	r3, #4
 80078a0:	bf28      	it	cs
 80078a2:	2304      	movcs	r3, #4
 80078a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	3304      	adds	r3, #4
 80078aa:	2b06      	cmp	r3, #6
 80078ac:	d902      	bls.n	80078b4 <NVIC_EncodePriority+0x30>
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	3b03      	subs	r3, #3
 80078b2:	e000      	b.n	80078b6 <NVIC_EncodePriority+0x32>
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078b8:	f04f 32ff 	mov.w	r2, #4294967295
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	43da      	mvns	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	401a      	ands	r2, r3
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078cc:	f04f 31ff 	mov.w	r1, #4294967295
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	fa01 f303 	lsl.w	r3, r1, r3
 80078d6:	43d9      	mvns	r1, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078dc:	4313      	orrs	r3, r2
         );
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3724      	adds	r7, #36	; 0x24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
	...

080078ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078fc:	d301      	bcc.n	8007902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80078fe:	2301      	movs	r3, #1
 8007900:	e00f      	b.n	8007922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007902:	4a0a      	ldr	r2, [pc, #40]	; (800792c <SysTick_Config+0x40>)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3b01      	subs	r3, #1
 8007908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800790a:	210f      	movs	r1, #15
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	f7ff ff8e 	bl	8007830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <SysTick_Config+0x40>)
 8007916:	2200      	movs	r2, #0
 8007918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800791a:	4b04      	ldr	r3, [pc, #16]	; (800792c <SysTick_Config+0x40>)
 800791c:	2207      	movs	r2, #7
 800791e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	e000e010 	.word	0xe000e010

08007930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff ff29 	bl	8007790 <__NVIC_SetPriorityGrouping>
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007946:	b580      	push	{r7, lr}
 8007948:	b086      	sub	sp, #24
 800794a:	af00      	add	r7, sp, #0
 800794c:	4603      	mov	r3, r0
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007958:	f7ff ff3e 	bl	80077d8 <__NVIC_GetPriorityGrouping>
 800795c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	6978      	ldr	r0, [r7, #20]
 8007964:	f7ff ff8e 	bl	8007884 <NVIC_EncodePriority>
 8007968:	4602      	mov	r2, r0
 800796a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f7ff ff5d 	bl	8007830 <__NVIC_SetPriority>
}
 8007976:	bf00      	nop
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	4603      	mov	r3, r0
 8007986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff ff31 	bl	80077f4 <__NVIC_EnableIRQ>
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff ffa2 	bl	80078ec <SysTick_Config>
 80079a8:	4603      	mov	r3, r0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80079c0:	f7ff feb6 	bl	8007730 <HAL_GetTick>
 80079c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e099      	b.n	8007b04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0201 	bic.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80079f0:	e00f      	b.n	8007a12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80079f2:	f7ff fe9d 	bl	8007730 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b05      	cmp	r3, #5
 80079fe:	d908      	bls.n	8007a12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2203      	movs	r2, #3
 8007a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e078      	b.n	8007b04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e8      	bne.n	80079f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	4b38      	ldr	r3, [pc, #224]	; (8007b0c <HAL_DMA_Init+0x158>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d107      	bne.n	8007a7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	4313      	orrs	r3, r2
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f023 0307 	bic.w	r3, r3, #7
 8007a92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d117      	bne.n	8007ad6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00e      	beq.n	8007ad6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fb01 	bl	80080c0 <DMA_CheckFifoParam>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d008      	beq.n	8007ad6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2240      	movs	r2, #64	; 0x40
 8007ac8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e016      	b.n	8007b04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fab8 	bl	8008054 <DMA_CalcBaseAndBitshift>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aec:	223f      	movs	r2, #63	; 0x3f
 8007aee:	409a      	lsls	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	f010803f 	.word	0xf010803f

08007b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_DMA_Start_IT+0x26>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e040      	b.n	8007bb8 <HAL_DMA_Start_IT+0xa8>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d12f      	bne.n	8007baa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fa4a 	bl	8007ff8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b68:	223f      	movs	r2, #63	; 0x3f
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0216 	orr.w	r2, r2, #22
 8007b7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f042 0208 	orr.w	r2, r2, #8
 8007b96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	e005      	b.n	8007bb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007bce:	f7ff fdaf 	bl	8007730 <HAL_GetTick>
 8007bd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d008      	beq.n	8007bf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2280      	movs	r2, #128	; 0x80
 8007be4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e052      	b.n	8007c98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0216 	bic.w	r2, r2, #22
 8007c00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	695a      	ldr	r2, [r3, #20]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d103      	bne.n	8007c22 <HAL_DMA_Abort+0x62>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d007      	beq.n	8007c32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0208 	bic.w	r2, r2, #8
 8007c30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 0201 	bic.w	r2, r2, #1
 8007c40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c42:	e013      	b.n	8007c6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c44:	f7ff fd74 	bl	8007730 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b05      	cmp	r3, #5
 8007c50:	d90c      	bls.n	8007c6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2220      	movs	r2, #32
 8007c56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2203      	movs	r2, #3
 8007c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e015      	b.n	8007c98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e4      	bne.n	8007c44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7e:	223f      	movs	r2, #63	; 0x3f
 8007c80:	409a      	lsls	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d004      	beq.n	8007cbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2280      	movs	r2, #128	; 0x80
 8007cb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e00c      	b.n	8007cd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2205      	movs	r2, #5
 8007cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0201 	bic.w	r2, r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007cf0:	4b8e      	ldr	r3, [pc, #568]	; (8007f2c <HAL_DMA_IRQHandler+0x248>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a8e      	ldr	r2, [pc, #568]	; (8007f30 <HAL_DMA_IRQHandler+0x24c>)
 8007cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfa:	0a9b      	lsrs	r3, r3, #10
 8007cfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d0e:	2208      	movs	r2, #8
 8007d10:	409a      	lsls	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4013      	ands	r3, r2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d01a      	beq.n	8007d50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d013      	beq.n	8007d50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0204 	bic.w	r2, r2, #4
 8007d36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	409a      	lsls	r2, r3
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d48:	f043 0201 	orr.w	r2, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d54:	2201      	movs	r2, #1
 8007d56:	409a      	lsls	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d012      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d72:	2201      	movs	r2, #1
 8007d74:	409a      	lsls	r2, r3
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7e:	f043 0202 	orr.w	r2, r3, #2
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8a:	2204      	movs	r2, #4
 8007d8c:	409a      	lsls	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4013      	ands	r3, r2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d012      	beq.n	8007dbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da8:	2204      	movs	r2, #4
 8007daa:	409a      	lsls	r2, r3
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db4:	f043 0204 	orr.w	r2, r3, #4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc0:	2210      	movs	r2, #16
 8007dc2:	409a      	lsls	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d043      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0308 	and.w	r3, r3, #8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d03c      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dde:	2210      	movs	r2, #16
 8007de0:	409a      	lsls	r2, r3
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d018      	beq.n	8007e26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d108      	bne.n	8007e14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d024      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3
 8007e12:	e01f      	b.n	8007e54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01b      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
 8007e24:	e016      	b.n	8007e54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d107      	bne.n	8007e44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0208 	bic.w	r2, r2, #8
 8007e42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e58:	2220      	movs	r2, #32
 8007e5a:	409a      	lsls	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 808f 	beq.w	8007f84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8087 	beq.w	8007f84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	409a      	lsls	r2, r3
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	d136      	bne.n	8007efc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0216 	bic.w	r2, r2, #22
 8007e9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	695a      	ldr	r2, [r3, #20]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007eac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d103      	bne.n	8007ebe <HAL_DMA_IRQHandler+0x1da>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0208 	bic.w	r2, r2, #8
 8007ecc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed2:	223f      	movs	r2, #63	; 0x3f
 8007ed4:	409a      	lsls	r2, r3
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d07e      	beq.n	8007ff0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
        }
        return;
 8007efa:	e079      	b.n	8007ff0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01d      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10d      	bne.n	8007f34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d031      	beq.n	8007f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	4798      	blx	r3
 8007f28:	e02c      	b.n	8007f84 <HAL_DMA_IRQHandler+0x2a0>
 8007f2a:	bf00      	nop
 8007f2c:	20000030 	.word	0x20000030
 8007f30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d023      	beq.n	8007f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	4798      	blx	r3
 8007f44:	e01e      	b.n	8007f84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10f      	bne.n	8007f74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0210 	bic.w	r2, r2, #16
 8007f62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d032      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d022      	beq.n	8007fde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2205      	movs	r2, #5
 8007f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0201 	bic.w	r2, r2, #1
 8007fae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	60bb      	str	r3, [r7, #8]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d307      	bcc.n	8007fcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1f2      	bne.n	8007fb0 <HAL_DMA_IRQHandler+0x2cc>
 8007fca:	e000      	b.n	8007fce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007fcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	e000      	b.n	8007ff2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007ff0:	bf00      	nop
    }
  }
}
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008014:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	2b40      	cmp	r3, #64	; 0x40
 8008024:	d108      	bne.n	8008038 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008036:	e007      	b.n	8008048 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]
}
 8008048:	bf00      	nop
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	b2db      	uxtb	r3, r3
 8008062:	3b10      	subs	r3, #16
 8008064:	4a14      	ldr	r2, [pc, #80]	; (80080b8 <DMA_CalcBaseAndBitshift+0x64>)
 8008066:	fba2 2303 	umull	r2, r3, r2, r3
 800806a:	091b      	lsrs	r3, r3, #4
 800806c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800806e:	4a13      	ldr	r2, [pc, #76]	; (80080bc <DMA_CalcBaseAndBitshift+0x68>)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4413      	add	r3, r2
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b03      	cmp	r3, #3
 8008080:	d909      	bls.n	8008096 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800808a:	f023 0303 	bic.w	r3, r3, #3
 800808e:	1d1a      	adds	r2, r3, #4
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	659a      	str	r2, [r3, #88]	; 0x58
 8008094:	e007      	b.n	80080a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800809e:	f023 0303 	bic.w	r3, r3, #3
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	aaaaaaab 	.word	0xaaaaaaab
 80080bc:	08011180 	.word	0x08011180

080080c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d11f      	bne.n	800811a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d856      	bhi.n	800818e <DMA_CheckFifoParam+0xce>
 80080e0:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <DMA_CheckFifoParam+0x28>)
 80080e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e6:	bf00      	nop
 80080e8:	080080f9 	.word	0x080080f9
 80080ec:	0800810b 	.word	0x0800810b
 80080f0:	080080f9 	.word	0x080080f9
 80080f4:	0800818f 	.word	0x0800818f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d046      	beq.n	8008192 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008108:	e043      	b.n	8008192 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008112:	d140      	bne.n	8008196 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008118:	e03d      	b.n	8008196 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008122:	d121      	bne.n	8008168 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b03      	cmp	r3, #3
 8008128:	d837      	bhi.n	800819a <DMA_CheckFifoParam+0xda>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <DMA_CheckFifoParam+0x70>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	08008141 	.word	0x08008141
 8008134:	08008147 	.word	0x08008147
 8008138:	08008141 	.word	0x08008141
 800813c:	08008159 	.word	0x08008159
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	73fb      	strb	r3, [r7, #15]
      break;
 8008144:	e030      	b.n	80081a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d025      	beq.n	800819e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008156:	e022      	b.n	800819e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008160:	d11f      	bne.n	80081a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008166:	e01c      	b.n	80081a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2b02      	cmp	r3, #2
 800816c:	d903      	bls.n	8008176 <DMA_CheckFifoParam+0xb6>
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b03      	cmp	r3, #3
 8008172:	d003      	beq.n	800817c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008174:	e018      	b.n	80081a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	73fb      	strb	r3, [r7, #15]
      break;
 800817a:	e015      	b.n	80081a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00e      	beq.n	80081a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
      break;
 800818c:	e00b      	b.n	80081a6 <DMA_CheckFifoParam+0xe6>
      break;
 800818e:	bf00      	nop
 8008190:	e00a      	b.n	80081a8 <DMA_CheckFifoParam+0xe8>
      break;
 8008192:	bf00      	nop
 8008194:	e008      	b.n	80081a8 <DMA_CheckFifoParam+0xe8>
      break;
 8008196:	bf00      	nop
 8008198:	e006      	b.n	80081a8 <DMA_CheckFifoParam+0xe8>
      break;
 800819a:	bf00      	nop
 800819c:	e004      	b.n	80081a8 <DMA_CheckFifoParam+0xe8>
      break;
 800819e:	bf00      	nop
 80081a0:	e002      	b.n	80081a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80081a2:	bf00      	nop
 80081a4:	e000      	b.n	80081a8 <DMA_CheckFifoParam+0xe8>
      break;
 80081a6:	bf00      	nop
    }
  } 
  
  return status; 
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop

080081b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b089      	sub	sp, #36	; 0x24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80081ce:	2300      	movs	r3, #0
 80081d0:	61fb      	str	r3, [r7, #28]
 80081d2:	e16b      	b.n	80084ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80081d4:	2201      	movs	r2, #1
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	fa02 f303 	lsl.w	r3, r2, r3
 80081dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4013      	ands	r3, r2
 80081e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	f040 815a 	bne.w	80084a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d005      	beq.n	800820a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008206:	2b02      	cmp	r3, #2
 8008208:	d130      	bne.n	800826c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	2203      	movs	r2, #3
 8008216:	fa02 f303 	lsl.w	r3, r2, r3
 800821a:	43db      	mvns	r3, r3
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	4013      	ands	r3, r2
 8008220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	4313      	orrs	r3, r2
 8008232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008240:	2201      	movs	r2, #1
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	fa02 f303 	lsl.w	r3, r2, r3
 8008248:	43db      	mvns	r3, r3
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	4013      	ands	r3, r2
 800824e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	091b      	lsrs	r3, r3, #4
 8008256:	f003 0201 	and.w	r2, r3, #1
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	4313      	orrs	r3, r2
 8008264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f003 0303 	and.w	r3, r3, #3
 8008274:	2b03      	cmp	r3, #3
 8008276:	d017      	beq.n	80082a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	2203      	movs	r2, #3
 8008284:	fa02 f303 	lsl.w	r3, r2, r3
 8008288:	43db      	mvns	r3, r3
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	4013      	ands	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	689a      	ldr	r2, [r3, #8]
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	fa02 f303 	lsl.w	r3, r2, r3
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	4313      	orrs	r3, r2
 80082a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f003 0303 	and.w	r3, r3, #3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d123      	bne.n	80082fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	08da      	lsrs	r2, r3, #3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3208      	adds	r2, #8
 80082bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	220f      	movs	r2, #15
 80082cc:	fa02 f303 	lsl.w	r3, r2, r3
 80082d0:	43db      	mvns	r3, r3
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	4013      	ands	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	fa02 f303 	lsl.w	r3, r2, r3
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	08da      	lsrs	r2, r3, #3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3208      	adds	r2, #8
 80082f6:	69b9      	ldr	r1, [r7, #24]
 80082f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	2203      	movs	r2, #3
 8008308:	fa02 f303 	lsl.w	r3, r2, r3
 800830c:	43db      	mvns	r3, r3
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	4013      	ands	r3, r2
 8008312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f003 0203 	and.w	r2, r3, #3
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	fa02 f303 	lsl.w	r3, r2, r3
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	4313      	orrs	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 80b4 	beq.w	80084a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	4b60      	ldr	r3, [pc, #384]	; (80084c4 <HAL_GPIO_Init+0x30c>)
 8008344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008346:	4a5f      	ldr	r2, [pc, #380]	; (80084c4 <HAL_GPIO_Init+0x30c>)
 8008348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800834c:	6453      	str	r3, [r2, #68]	; 0x44
 800834e:	4b5d      	ldr	r3, [pc, #372]	; (80084c4 <HAL_GPIO_Init+0x30c>)
 8008350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800835a:	4a5b      	ldr	r2, [pc, #364]	; (80084c8 <HAL_GPIO_Init+0x310>)
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	089b      	lsrs	r3, r3, #2
 8008360:	3302      	adds	r3, #2
 8008362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	220f      	movs	r2, #15
 8008372:	fa02 f303 	lsl.w	r3, r2, r3
 8008376:	43db      	mvns	r3, r3
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	4013      	ands	r3, r2
 800837c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a52      	ldr	r2, [pc, #328]	; (80084cc <HAL_GPIO_Init+0x314>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d02b      	beq.n	80083de <HAL_GPIO_Init+0x226>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a51      	ldr	r2, [pc, #324]	; (80084d0 <HAL_GPIO_Init+0x318>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d025      	beq.n	80083da <HAL_GPIO_Init+0x222>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a50      	ldr	r2, [pc, #320]	; (80084d4 <HAL_GPIO_Init+0x31c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01f      	beq.n	80083d6 <HAL_GPIO_Init+0x21e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a4f      	ldr	r2, [pc, #316]	; (80084d8 <HAL_GPIO_Init+0x320>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d019      	beq.n	80083d2 <HAL_GPIO_Init+0x21a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a4e      	ldr	r2, [pc, #312]	; (80084dc <HAL_GPIO_Init+0x324>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d013      	beq.n	80083ce <HAL_GPIO_Init+0x216>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a4d      	ldr	r2, [pc, #308]	; (80084e0 <HAL_GPIO_Init+0x328>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d00d      	beq.n	80083ca <HAL_GPIO_Init+0x212>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a4c      	ldr	r2, [pc, #304]	; (80084e4 <HAL_GPIO_Init+0x32c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d007      	beq.n	80083c6 <HAL_GPIO_Init+0x20e>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a4b      	ldr	r2, [pc, #300]	; (80084e8 <HAL_GPIO_Init+0x330>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d101      	bne.n	80083c2 <HAL_GPIO_Init+0x20a>
 80083be:	2307      	movs	r3, #7
 80083c0:	e00e      	b.n	80083e0 <HAL_GPIO_Init+0x228>
 80083c2:	2308      	movs	r3, #8
 80083c4:	e00c      	b.n	80083e0 <HAL_GPIO_Init+0x228>
 80083c6:	2306      	movs	r3, #6
 80083c8:	e00a      	b.n	80083e0 <HAL_GPIO_Init+0x228>
 80083ca:	2305      	movs	r3, #5
 80083cc:	e008      	b.n	80083e0 <HAL_GPIO_Init+0x228>
 80083ce:	2304      	movs	r3, #4
 80083d0:	e006      	b.n	80083e0 <HAL_GPIO_Init+0x228>
 80083d2:	2303      	movs	r3, #3
 80083d4:	e004      	b.n	80083e0 <HAL_GPIO_Init+0x228>
 80083d6:	2302      	movs	r3, #2
 80083d8:	e002      	b.n	80083e0 <HAL_GPIO_Init+0x228>
 80083da:	2301      	movs	r3, #1
 80083dc:	e000      	b.n	80083e0 <HAL_GPIO_Init+0x228>
 80083de:	2300      	movs	r3, #0
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	f002 0203 	and.w	r2, r2, #3
 80083e6:	0092      	lsls	r2, r2, #2
 80083e8:	4093      	lsls	r3, r2
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083f0:	4935      	ldr	r1, [pc, #212]	; (80084c8 <HAL_GPIO_Init+0x310>)
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	089b      	lsrs	r3, r3, #2
 80083f6:	3302      	adds	r3, #2
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80083fe:	4b3b      	ldr	r3, [pc, #236]	; (80084ec <HAL_GPIO_Init+0x334>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	43db      	mvns	r3, r3
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	4013      	ands	r3, r2
 800840c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	4313      	orrs	r3, r2
 8008420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008422:	4a32      	ldr	r2, [pc, #200]	; (80084ec <HAL_GPIO_Init+0x334>)
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008428:	4b30      	ldr	r3, [pc, #192]	; (80084ec <HAL_GPIO_Init+0x334>)
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	43db      	mvns	r3, r3
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	4013      	ands	r3, r2
 8008436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	4313      	orrs	r3, r2
 800844a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800844c:	4a27      	ldr	r2, [pc, #156]	; (80084ec <HAL_GPIO_Init+0x334>)
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008452:	4b26      	ldr	r3, [pc, #152]	; (80084ec <HAL_GPIO_Init+0x334>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	43db      	mvns	r3, r3
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	4013      	ands	r3, r2
 8008460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	4313      	orrs	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008476:	4a1d      	ldr	r2, [pc, #116]	; (80084ec <HAL_GPIO_Init+0x334>)
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800847c:	4b1b      	ldr	r3, [pc, #108]	; (80084ec <HAL_GPIO_Init+0x334>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	43db      	mvns	r3, r3
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	4013      	ands	r3, r2
 800848a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80084a0:	4a12      	ldr	r2, [pc, #72]	; (80084ec <HAL_GPIO_Init+0x334>)
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	3301      	adds	r3, #1
 80084aa:	61fb      	str	r3, [r7, #28]
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	2b0f      	cmp	r3, #15
 80084b0:	f67f ae90 	bls.w	80081d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
 80084b8:	3724      	adds	r7, #36	; 0x24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	40023800 	.word	0x40023800
 80084c8:	40013800 	.word	0x40013800
 80084cc:	40020000 	.word	0x40020000
 80084d0:	40020400 	.word	0x40020400
 80084d4:	40020800 	.word	0x40020800
 80084d8:	40020c00 	.word	0x40020c00
 80084dc:	40021000 	.word	0x40021000
 80084e0:	40021400 	.word	0x40021400
 80084e4:	40021800 	.word	0x40021800
 80084e8:	40021c00 	.word	0x40021c00
 80084ec:	40013c00 	.word	0x40013c00

080084f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	807b      	strh	r3, [r7, #2]
 80084fc:	4613      	mov	r3, r2
 80084fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008500:	787b      	ldrb	r3, [r7, #1]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008506:	887a      	ldrh	r2, [r7, #2]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800850c:	e003      	b.n	8008516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800850e:	887b      	ldrh	r3, [r7, #2]
 8008510:	041a      	lsls	r2, r3, #16
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	619a      	str	r2, [r3, #24]
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	460b      	mov	r3, r1
 800852c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008534:	887a      	ldrh	r2, [r7, #2]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4013      	ands	r3, r2
 800853a:	041a      	lsls	r2, r3, #16
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	43d9      	mvns	r1, r3
 8008540:	887b      	ldrh	r3, [r7, #2]
 8008542:	400b      	ands	r3, r1
 8008544:	431a      	orrs	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	619a      	str	r2, [r3, #24]
}
 800854a:	bf00      	nop
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
	...

08008558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e12b      	b.n	80087c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7fe fce6 	bl	8006f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2224      	movs	r2, #36	; 0x24
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0201 	bic.w	r2, r2, #1
 800859a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80085bc:	f001 fd70 	bl	800a0a0 <HAL_RCC_GetPCLK1Freq>
 80085c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	4a81      	ldr	r2, [pc, #516]	; (80087cc <HAL_I2C_Init+0x274>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d807      	bhi.n	80085dc <HAL_I2C_Init+0x84>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4a80      	ldr	r2, [pc, #512]	; (80087d0 <HAL_I2C_Init+0x278>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	bf94      	ite	ls
 80085d4:	2301      	movls	r3, #1
 80085d6:	2300      	movhi	r3, #0
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	e006      	b.n	80085ea <HAL_I2C_Init+0x92>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4a7d      	ldr	r2, [pc, #500]	; (80087d4 <HAL_I2C_Init+0x27c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	bf94      	ite	ls
 80085e4:	2301      	movls	r3, #1
 80085e6:	2300      	movhi	r3, #0
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e0e7      	b.n	80087c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4a78      	ldr	r2, [pc, #480]	; (80087d8 <HAL_I2C_Init+0x280>)
 80085f6:	fba2 2303 	umull	r2, r3, r2, r3
 80085fa:	0c9b      	lsrs	r3, r3, #18
 80085fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	430a      	orrs	r2, r1
 8008610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	4a6a      	ldr	r2, [pc, #424]	; (80087cc <HAL_I2C_Init+0x274>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d802      	bhi.n	800862c <HAL_I2C_Init+0xd4>
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	3301      	adds	r3, #1
 800862a:	e009      	b.n	8008640 <HAL_I2C_Init+0xe8>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008632:	fb02 f303 	mul.w	r3, r2, r3
 8008636:	4a69      	ldr	r2, [pc, #420]	; (80087dc <HAL_I2C_Init+0x284>)
 8008638:	fba2 2303 	umull	r2, r3, r2, r3
 800863c:	099b      	lsrs	r3, r3, #6
 800863e:	3301      	adds	r3, #1
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	6812      	ldr	r2, [r2, #0]
 8008644:	430b      	orrs	r3, r1
 8008646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	495c      	ldr	r1, [pc, #368]	; (80087cc <HAL_I2C_Init+0x274>)
 800865c:	428b      	cmp	r3, r1
 800865e:	d819      	bhi.n	8008694 <HAL_I2C_Init+0x13c>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	1e59      	subs	r1, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	fbb1 f3f3 	udiv	r3, r1, r3
 800866e:	1c59      	adds	r1, r3, #1
 8008670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008674:	400b      	ands	r3, r1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <HAL_I2C_Init+0x138>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	1e59      	subs	r1, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	fbb1 f3f3 	udiv	r3, r1, r3
 8008688:	3301      	adds	r3, #1
 800868a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800868e:	e051      	b.n	8008734 <HAL_I2C_Init+0x1dc>
 8008690:	2304      	movs	r3, #4
 8008692:	e04f      	b.n	8008734 <HAL_I2C_Init+0x1dc>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d111      	bne.n	80086c0 <HAL_I2C_Init+0x168>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	1e58      	subs	r0, r3, #1
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6859      	ldr	r1, [r3, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	440b      	add	r3, r1
 80086aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80086ae:	3301      	adds	r3, #1
 80086b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bf0c      	ite	eq
 80086b8:	2301      	moveq	r3, #1
 80086ba:	2300      	movne	r3, #0
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	e012      	b.n	80086e6 <HAL_I2C_Init+0x18e>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	1e58      	subs	r0, r3, #1
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6859      	ldr	r1, [r3, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	0099      	lsls	r1, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80086d6:	3301      	adds	r3, #1
 80086d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <HAL_I2C_Init+0x196>
 80086ea:	2301      	movs	r3, #1
 80086ec:	e022      	b.n	8008734 <HAL_I2C_Init+0x1dc>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10e      	bne.n	8008714 <HAL_I2C_Init+0x1bc>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	1e58      	subs	r0, r3, #1
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6859      	ldr	r1, [r3, #4]
 80086fe:	460b      	mov	r3, r1
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	440b      	add	r3, r1
 8008704:	fbb0 f3f3 	udiv	r3, r0, r3
 8008708:	3301      	adds	r3, #1
 800870a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800870e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008712:	e00f      	b.n	8008734 <HAL_I2C_Init+0x1dc>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	1e58      	subs	r0, r3, #1
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6859      	ldr	r1, [r3, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	440b      	add	r3, r1
 8008722:	0099      	lsls	r1, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	fbb0 f3f3 	udiv	r3, r0, r3
 800872a:	3301      	adds	r3, #1
 800872c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	6809      	ldr	r1, [r1, #0]
 8008738:	4313      	orrs	r3, r2
 800873a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69da      	ldr	r2, [r3, #28]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	6911      	ldr	r1, [r2, #16]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	68d2      	ldr	r2, [r2, #12]
 800876e:	4311      	orrs	r1, r2
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	430b      	orrs	r3, r1
 8008776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695a      	ldr	r2, [r3, #20]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	430a      	orrs	r2, r1
 8008792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0201 	orr.w	r2, r2, #1
 80087a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	000186a0 	.word	0x000186a0
 80087d0:	001e847f 	.word	0x001e847f
 80087d4:	003d08ff 	.word	0x003d08ff
 80087d8:	431bde83 	.word	0x431bde83
 80087dc:	10624dd3 	.word	0x10624dd3

080087e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b088      	sub	sp, #32
 80087e4:	af02      	add	r7, sp, #8
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	607a      	str	r2, [r7, #4]
 80087ea:	461a      	mov	r2, r3
 80087ec:	460b      	mov	r3, r1
 80087ee:	817b      	strh	r3, [r7, #10]
 80087f0:	4613      	mov	r3, r2
 80087f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80087f4:	f7fe ff9c 	bl	8007730 <HAL_GetTick>
 80087f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b20      	cmp	r3, #32
 8008804:	f040 80e0 	bne.w	80089c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	2319      	movs	r3, #25
 800880e:	2201      	movs	r2, #1
 8008810:	4970      	ldr	r1, [pc, #448]	; (80089d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f000 fd9e 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800881e:	2302      	movs	r3, #2
 8008820:	e0d3      	b.n	80089ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_I2C_Master_Transmit+0x50>
 800882c:	2302      	movs	r3, #2
 800882e:	e0cc      	b.n	80089ca <HAL_I2C_Master_Transmit+0x1ea>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b01      	cmp	r3, #1
 8008844:	d007      	beq.n	8008856 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0201 	orr.w	r2, r2, #1
 8008854:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008864:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2221      	movs	r2, #33	; 0x21
 800886a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2210      	movs	r2, #16
 8008872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	893a      	ldrh	r2, [r7, #8]
 8008886:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4a50      	ldr	r2, [pc, #320]	; (80089d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8008896:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008898:	8979      	ldrh	r1, [r7, #10]
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	6a3a      	ldr	r2, [r7, #32]
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 fc08 	bl	80090b4 <I2C_MasterRequestWrite>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e08d      	b.n	80089ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088ae:	2300      	movs	r3, #0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	613b      	str	r3, [r7, #16]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80088c4:	e066      	b.n	8008994 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	6a39      	ldr	r1, [r7, #32]
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 fe5c 	bl	8009588 <I2C_WaitOnTXEFlagUntilTimeout>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00d      	beq.n	80088f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d107      	bne.n	80088ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e06b      	b.n	80089ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	781a      	ldrb	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890c:	b29b      	uxth	r3, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	b29a      	uxth	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	f003 0304 	and.w	r3, r3, #4
 800892c:	2b04      	cmp	r3, #4
 800892e:	d11b      	bne.n	8008968 <HAL_I2C_Master_Transmit+0x188>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008934:	2b00      	cmp	r3, #0
 8008936:	d017      	beq.n	8008968 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	781a      	ldrb	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008952:	b29b      	uxth	r3, r3
 8008954:	3b01      	subs	r3, #1
 8008956:	b29a      	uxth	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008960:	3b01      	subs	r3, #1
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	6a39      	ldr	r1, [r7, #32]
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 fe53 	bl	8009618 <I2C_WaitOnBTFFlagUntilTimeout>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00d      	beq.n	8008994 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897c:	2b04      	cmp	r3, #4
 800897e:	d107      	bne.n	8008990 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800898e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e01a      	b.n	80089ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008998:	2b00      	cmp	r3, #0
 800899a:	d194      	bne.n	80088c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	e000      	b.n	80089ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80089c8:	2302      	movs	r3, #2
  }
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	00100002 	.word	0x00100002
 80089d8:	ffff0000 	.word	0xffff0000

080089dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08c      	sub	sp, #48	; 0x30
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	607a      	str	r2, [r7, #4]
 80089e6:	461a      	mov	r2, r3
 80089e8:	460b      	mov	r3, r1
 80089ea:	817b      	strh	r3, [r7, #10]
 80089ec:	4613      	mov	r3, r2
 80089ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80089f0:	f7fe fe9e 	bl	8007730 <HAL_GetTick>
 80089f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b20      	cmp	r3, #32
 8008a00:	f040 8217 	bne.w	8008e32 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	2319      	movs	r3, #25
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	497c      	ldr	r1, [pc, #496]	; (8008c00 <HAL_I2C_Master_Receive+0x224>)
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f000 fca0 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	e20a      	b.n	8008e34 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_I2C_Master_Receive+0x50>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	e203      	b.n	8008e34 <HAL_I2C_Master_Receive+0x458>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d007      	beq.n	8008a52 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0201 	orr.w	r2, r2, #1
 8008a50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2222      	movs	r2, #34	; 0x22
 8008a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2210      	movs	r2, #16
 8008a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	893a      	ldrh	r2, [r7, #8]
 8008a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4a5c      	ldr	r2, [pc, #368]	; (8008c04 <HAL_I2C_Master_Receive+0x228>)
 8008a92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008a94:	8979      	ldrh	r1, [r7, #10]
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 fb8c 	bl	80091b8 <I2C_MasterRequestRead>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e1c4      	b.n	8008e34 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d113      	bne.n	8008ada <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	623b      	str	r3, [r7, #32]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	623b      	str	r3, [r7, #32]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	623b      	str	r3, [r7, #32]
 8008ac6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	e198      	b.n	8008e0c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d11b      	bne.n	8008b1a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008af0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008af2:	2300      	movs	r3, #0
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	61fb      	str	r3, [r7, #28]
 8008b06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	e178      	b.n	8008e0c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d11b      	bne.n	8008b5a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b42:	2300      	movs	r3, #0
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	e158      	b.n	8008e0c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008b80:	e144      	b.n	8008e0c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	f200 80f1 	bhi.w	8008d6e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d123      	bne.n	8008bdc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fd85 	bl	80096a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e145      	b.n	8008e34 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	691a      	ldr	r2, [r3, #16]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	b2d2      	uxtb	r2, r2
 8008bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bba:	1c5a      	adds	r2, r3, #1
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bda:	e117      	b.n	8008e0c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d14e      	bne.n	8008c82 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	2200      	movs	r2, #0
 8008bec:	4906      	ldr	r1, [pc, #24]	; (8008c08 <HAL_I2C_Master_Receive+0x22c>)
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 fbb0 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d008      	beq.n	8008c0c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e11a      	b.n	8008e34 <HAL_I2C_Master_Receive+0x458>
 8008bfe:	bf00      	nop
 8008c00:	00100002 	.word	0x00100002
 8008c04:	ffff0000 	.word	0xffff0000
 8008c08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	691a      	ldr	r2, [r3, #16]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	691a      	ldr	r2, [r3, #16]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c80:	e0c4      	b.n	8008e0c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	2200      	movs	r2, #0
 8008c8a:	496c      	ldr	r1, [pc, #432]	; (8008e3c <HAL_I2C_Master_Receive+0x460>)
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fb61 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d001      	beq.n	8008c9c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0cb      	b.n	8008e34 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	691a      	ldr	r2, [r3, #16]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4955      	ldr	r1, [pc, #340]	; (8008e3c <HAL_I2C_Master_Receive+0x460>)
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 fb33 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e09d      	b.n	8008e34 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	691a      	ldr	r2, [r3, #16]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	3b01      	subs	r3, #1
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	691a      	ldr	r2, [r3, #16]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	b2d2      	uxtb	r2, r2
 8008d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	3b01      	subs	r3, #1
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d6c:	e04e      	b.n	8008e0c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 fc98 	bl	80096a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e058      	b.n	8008e34 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	691a      	ldr	r2, [r3, #16]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	b2d2      	uxtb	r2, r2
 8008d8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	3b01      	subs	r3, #1
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d124      	bne.n	8008e0c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d107      	bne.n	8008dda <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dd8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	691a      	ldr	r2, [r3, #16]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	b2d2      	uxtb	r2, r2
 8008de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df6:	3b01      	subs	r3, #1
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f47f aeb6 	bne.w	8008b82 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e000      	b.n	8008e34 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008e32:	2302      	movs	r3, #2
  }
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3728      	adds	r7, #40	; 0x28
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	00010004 	.word	0x00010004

08008e40 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08a      	sub	sp, #40	; 0x28
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	607a      	str	r2, [r7, #4]
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008e50:	f7fe fc6e 	bl	8007730 <HAL_GetTick>
 8008e54:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b20      	cmp	r3, #32
 8008e64:	f040 8111 	bne.w	800908a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	2319      	movs	r3, #25
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4988      	ldr	r1, [pc, #544]	; (8009094 <HAL_I2C_IsDeviceReady+0x254>)
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 fa6e 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008e7e:	2302      	movs	r3, #2
 8008e80:	e104      	b.n	800908c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d101      	bne.n	8008e90 <HAL_I2C_IsDeviceReady+0x50>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e0fd      	b.n	800908c <HAL_I2C_IsDeviceReady+0x24c>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d007      	beq.n	8008eb6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f042 0201 	orr.w	r2, r2, #1
 8008eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ec4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2224      	movs	r2, #36	; 0x24
 8008eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	4a70      	ldr	r2, [pc, #448]	; (8009098 <HAL_I2C_IsDeviceReady+0x258>)
 8008ed8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ee8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 fa2c 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00d      	beq.n	8008f1e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f10:	d103      	bne.n	8008f1a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f18:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e0b6      	b.n	800908c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f1e:	897b      	ldrh	r3, [r7, #10]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	461a      	mov	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f2c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008f2e:	f7fe fbff 	bl	8007730 <HAL_GetTick>
 8008f32:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	bf0c      	ite	eq
 8008f42:	2301      	moveq	r3, #1
 8008f44:	2300      	movne	r3, #0
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f58:	bf0c      	ite	eq
 8008f5a:	2301      	moveq	r3, #1
 8008f5c:	2300      	movne	r3, #0
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008f62:	e025      	b.n	8008fb0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f64:	f7fe fbe4 	bl	8007730 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d302      	bcc.n	8008f7a <HAL_I2C_IsDeviceReady+0x13a>
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d103      	bne.n	8008f82 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	22a0      	movs	r2, #160	; 0xa0
 8008f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	bf0c      	ite	eq
 8008f90:	2301      	moveq	r3, #1
 8008f92:	2300      	movne	r3, #0
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa6:	bf0c      	ite	eq
 8008fa8:	2301      	moveq	r3, #1
 8008faa:	2300      	movne	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2ba0      	cmp	r3, #160	; 0xa0
 8008fba:	d005      	beq.n	8008fc8 <HAL_I2C_IsDeviceReady+0x188>
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d102      	bne.n	8008fc8 <HAL_I2C_IsDeviceReady+0x188>
 8008fc2:	7dbb      	ldrb	r3, [r7, #22]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0cd      	beq.n	8008f64 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d129      	bne.n	8009032 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fee:	2300      	movs	r3, #0
 8008ff0:	613b      	str	r3, [r7, #16]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	613b      	str	r3, [r7, #16]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	613b      	str	r3, [r7, #16]
 8009002:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	2319      	movs	r3, #25
 800900a:	2201      	movs	r2, #1
 800900c:	4921      	ldr	r1, [pc, #132]	; (8009094 <HAL_I2C_IsDeviceReady+0x254>)
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 f9a0 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e036      	b.n	800908c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2220      	movs	r2, #32
 8009022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	e02c      	b.n	800908c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009040:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800904a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	2319      	movs	r3, #25
 8009052:	2201      	movs	r2, #1
 8009054:	490f      	ldr	r1, [pc, #60]	; (8009094 <HAL_I2C_IsDeviceReady+0x254>)
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f97c 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e012      	b.n	800908c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	3301      	adds	r3, #1
 800906a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	429a      	cmp	r2, r3
 8009072:	f4ff af32 	bcc.w	8008eda <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2220      	movs	r2, #32
 800907a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800908a:	2302      	movs	r3, #2
  }
}
 800908c:	4618      	mov	r0, r3
 800908e:	3720      	adds	r7, #32
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	00100002 	.word	0x00100002
 8009098:	ffff0000 	.word	0xffff0000

0800909c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af02      	add	r7, sp, #8
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	607a      	str	r2, [r7, #4]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	460b      	mov	r3, r1
 80090c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	d006      	beq.n	80090de <I2C_MasterRequestWrite+0x2a>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d003      	beq.n	80090de <I2C_MasterRequestWrite+0x2a>
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090dc:	d108      	bne.n	80090f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	e00b      	b.n	8009108 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f4:	2b12      	cmp	r3, #18
 80090f6:	d107      	bne.n	8009108 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009106:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f91d 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00d      	beq.n	800913c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800912e:	d103      	bne.n	8009138 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e035      	b.n	80091a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009144:	d108      	bne.n	8009158 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009146:	897b      	ldrh	r3, [r7, #10]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	461a      	mov	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009154:	611a      	str	r2, [r3, #16]
 8009156:	e01b      	b.n	8009190 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009158:	897b      	ldrh	r3, [r7, #10]
 800915a:	11db      	asrs	r3, r3, #7
 800915c:	b2db      	uxtb	r3, r3
 800915e:	f003 0306 	and.w	r3, r3, #6
 8009162:	b2db      	uxtb	r3, r3
 8009164:	f063 030f 	orn	r3, r3, #15
 8009168:	b2da      	uxtb	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	490e      	ldr	r1, [pc, #56]	; (80091b0 <I2C_MasterRequestWrite+0xfc>)
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 f966 	bl	8009448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e010      	b.n	80091a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009186:	897b      	ldrh	r3, [r7, #10]
 8009188:	b2da      	uxtb	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	4907      	ldr	r1, [pc, #28]	; (80091b4 <I2C_MasterRequestWrite+0x100>)
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f956 	bl	8009448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e000      	b.n	80091a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	00010008 	.word	0x00010008
 80091b4:	00010002 	.word	0x00010002

080091b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af02      	add	r7, sp, #8
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	607a      	str	r2, [r7, #4]
 80091c2:	603b      	str	r3, [r7, #0]
 80091c4:	460b      	mov	r3, r1
 80091c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b08      	cmp	r3, #8
 80091e2:	d006      	beq.n	80091f2 <I2C_MasterRequestRead+0x3a>
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d003      	beq.n	80091f2 <I2C_MasterRequestRead+0x3a>
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80091f0:	d108      	bne.n	8009204 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	e00b      	b.n	800921c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009208:	2b11      	cmp	r3, #17
 800920a:	d107      	bne.n	800921c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800921a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f000 f893 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00d      	beq.n	8009250 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009242:	d103      	bne.n	800924c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800924a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e079      	b.n	8009344 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009258:	d108      	bne.n	800926c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800925a:	897b      	ldrh	r3, [r7, #10]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f043 0301 	orr.w	r3, r3, #1
 8009262:	b2da      	uxtb	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	611a      	str	r2, [r3, #16]
 800926a:	e05f      	b.n	800932c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800926c:	897b      	ldrh	r3, [r7, #10]
 800926e:	11db      	asrs	r3, r3, #7
 8009270:	b2db      	uxtb	r3, r3
 8009272:	f003 0306 	and.w	r3, r3, #6
 8009276:	b2db      	uxtb	r3, r3
 8009278:	f063 030f 	orn	r3, r3, #15
 800927c:	b2da      	uxtb	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	4930      	ldr	r1, [pc, #192]	; (800934c <I2C_MasterRequestRead+0x194>)
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f000 f8dc 	bl	8009448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e054      	b.n	8009344 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800929a:	897b      	ldrh	r3, [r7, #10]
 800929c:	b2da      	uxtb	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	4929      	ldr	r1, [pc, #164]	; (8009350 <I2C_MasterRequestRead+0x198>)
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 f8cc 	bl	8009448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e044      	b.n	8009344 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092ba:	2300      	movs	r3, #0
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 f831 	bl	8009354 <I2C_WaitOnFlagUntilTimeout>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00d      	beq.n	8009314 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009306:	d103      	bne.n	8009310 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800930e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e017      	b.n	8009344 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009314:	897b      	ldrh	r3, [r7, #10]
 8009316:	11db      	asrs	r3, r3, #7
 8009318:	b2db      	uxtb	r3, r3
 800931a:	f003 0306 	and.w	r3, r3, #6
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f063 030e 	orn	r3, r3, #14
 8009324:	b2da      	uxtb	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	4907      	ldr	r1, [pc, #28]	; (8009350 <I2C_MasterRequestRead+0x198>)
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 f888 	bl	8009448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e000      	b.n	8009344 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	00010008 	.word	0x00010008
 8009350:	00010002 	.word	0x00010002

08009354 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	603b      	str	r3, [r7, #0]
 8009360:	4613      	mov	r3, r2
 8009362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009364:	e048      	b.n	80093f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936c:	d044      	beq.n	80093f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800936e:	f7fe f9df 	bl	8007730 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d302      	bcc.n	8009384 <I2C_WaitOnFlagUntilTimeout+0x30>
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d139      	bne.n	80093f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	0c1b      	lsrs	r3, r3, #16
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b01      	cmp	r3, #1
 800938c:	d10d      	bne.n	80093aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	43da      	mvns	r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	4013      	ands	r3, r2
 800939a:	b29b      	uxth	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	bf0c      	ite	eq
 80093a0:	2301      	moveq	r3, #1
 80093a2:	2300      	movne	r3, #0
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	e00c      	b.n	80093c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	43da      	mvns	r2, r3
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	4013      	ands	r3, r2
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	bf0c      	ite	eq
 80093bc:	2301      	moveq	r3, #1
 80093be:	2300      	movne	r3, #0
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	461a      	mov	r2, r3
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d116      	bne.n	80093f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e4:	f043 0220 	orr.w	r2, r3, #32
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e023      	b.n	8009440 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	0c1b      	lsrs	r3, r3, #16
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d10d      	bne.n	800941e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	43da      	mvns	r2, r3
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	4013      	ands	r3, r2
 800940e:	b29b      	uxth	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	bf0c      	ite	eq
 8009414:	2301      	moveq	r3, #1
 8009416:	2300      	movne	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	461a      	mov	r2, r3
 800941c:	e00c      	b.n	8009438 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	43da      	mvns	r2, r3
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	4013      	ands	r3, r2
 800942a:	b29b      	uxth	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	bf0c      	ite	eq
 8009430:	2301      	moveq	r3, #1
 8009432:	2300      	movne	r3, #0
 8009434:	b2db      	uxtb	r3, r3
 8009436:	461a      	mov	r2, r3
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	429a      	cmp	r2, r3
 800943c:	d093      	beq.n	8009366 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009456:	e071      	b.n	800953c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009466:	d123      	bne.n	80094b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009476:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009480:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2220      	movs	r2, #32
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949c:	f043 0204 	orr.w	r2, r3, #4
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e067      	b.n	8009580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b6:	d041      	beq.n	800953c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b8:	f7fe f93a 	bl	8007730 <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d302      	bcc.n	80094ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d136      	bne.n	800953c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	0c1b      	lsrs	r3, r3, #16
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d10c      	bne.n	80094f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	43da      	mvns	r2, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4013      	ands	r3, r2
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bf14      	ite	ne
 80094ea:	2301      	movne	r3, #1
 80094ec:	2300      	moveq	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	e00b      	b.n	800950a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	43da      	mvns	r2, r3
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	4013      	ands	r3, r2
 80094fe:	b29b      	uxth	r3, r3
 8009500:	2b00      	cmp	r3, #0
 8009502:	bf14      	ite	ne
 8009504:	2301      	movne	r3, #1
 8009506:	2300      	moveq	r3, #0
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d016      	beq.n	800953c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2220      	movs	r2, #32
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	f043 0220 	orr.w	r2, r3, #32
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e021      	b.n	8009580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	0c1b      	lsrs	r3, r3, #16
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b01      	cmp	r3, #1
 8009544:	d10c      	bne.n	8009560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	43da      	mvns	r2, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	4013      	ands	r3, r2
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	bf14      	ite	ne
 8009558:	2301      	movne	r3, #1
 800955a:	2300      	moveq	r3, #0
 800955c:	b2db      	uxtb	r3, r3
 800955e:	e00b      	b.n	8009578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	43da      	mvns	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	4013      	ands	r3, r2
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	bf14      	ite	ne
 8009572:	2301      	movne	r3, #1
 8009574:	2300      	moveq	r3, #0
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	f47f af6d 	bne.w	8009458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009594:	e034      	b.n	8009600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 f8e3 	bl	8009762 <I2C_IsAcknowledgeFailed>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e034      	b.n	8009610 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ac:	d028      	beq.n	8009600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095ae:	f7fe f8bf 	bl	8007730 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d302      	bcc.n	80095c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d11d      	bne.n	8009600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ce:	2b80      	cmp	r3, #128	; 0x80
 80095d0:	d016      	beq.n	8009600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2220      	movs	r2, #32
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ec:	f043 0220 	orr.w	r2, r3, #32
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e007      	b.n	8009610 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960a:	2b80      	cmp	r3, #128	; 0x80
 800960c:	d1c3      	bne.n	8009596 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009624:	e034      	b.n	8009690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 f89b 	bl	8009762 <I2C_IsAcknowledgeFailed>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e034      	b.n	80096a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963c:	d028      	beq.n	8009690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800963e:	f7fe f877 	bl	8007730 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	429a      	cmp	r2, r3
 800964c:	d302      	bcc.n	8009654 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d11d      	bne.n	8009690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	f003 0304 	and.w	r3, r3, #4
 800965e:	2b04      	cmp	r3, #4
 8009660:	d016      	beq.n	8009690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2220      	movs	r2, #32
 800966c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967c:	f043 0220 	orr.w	r2, r3, #32
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e007      	b.n	80096a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	f003 0304 	and.w	r3, r3, #4
 800969a:	2b04      	cmp	r3, #4
 800969c:	d1c3      	bne.n	8009626 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096b4:	e049      	b.n	800974a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	f003 0310 	and.w	r3, r3, #16
 80096c0:	2b10      	cmp	r3, #16
 80096c2:	d119      	bne.n	80096f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f06f 0210 	mvn.w	r2, #16
 80096cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2220      	movs	r2, #32
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e030      	b.n	800975a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096f8:	f7fe f81a 	bl	8007730 <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	429a      	cmp	r2, r3
 8009706:	d302      	bcc.n	800970e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d11d      	bne.n	800974a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009718:	2b40      	cmp	r3, #64	; 0x40
 800971a:	d016      	beq.n	800974a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2220      	movs	r2, #32
 8009726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009736:	f043 0220 	orr.w	r2, r3, #32
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e007      	b.n	800975a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009754:	2b40      	cmp	r3, #64	; 0x40
 8009756:	d1ae      	bne.n	80096b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009778:	d11b      	bne.n	80097b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009782:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2220      	movs	r2, #32
 800978e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	f043 0204 	orr.w	r2, r3, #4
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e000      	b.n	80097b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e267      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d075      	beq.n	80098ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80097de:	4b88      	ldr	r3, [pc, #544]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f003 030c 	and.w	r3, r3, #12
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d00c      	beq.n	8009804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097ea:	4b85      	ldr	r3, [pc, #532]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80097f2:	2b08      	cmp	r3, #8
 80097f4:	d112      	bne.n	800981c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097f6:	4b82      	ldr	r3, [pc, #520]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009802:	d10b      	bne.n	800981c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009804:	4b7e      	ldr	r3, [pc, #504]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d05b      	beq.n	80098c8 <HAL_RCC_OscConfig+0x108>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d157      	bne.n	80098c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e242      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009824:	d106      	bne.n	8009834 <HAL_RCC_OscConfig+0x74>
 8009826:	4b76      	ldr	r3, [pc, #472]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a75      	ldr	r2, [pc, #468]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 800982c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009830:	6013      	str	r3, [r2, #0]
 8009832:	e01d      	b.n	8009870 <HAL_RCC_OscConfig+0xb0>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800983c:	d10c      	bne.n	8009858 <HAL_RCC_OscConfig+0x98>
 800983e:	4b70      	ldr	r3, [pc, #448]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a6f      	ldr	r2, [pc, #444]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	4b6d      	ldr	r3, [pc, #436]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a6c      	ldr	r2, [pc, #432]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009854:	6013      	str	r3, [r2, #0]
 8009856:	e00b      	b.n	8009870 <HAL_RCC_OscConfig+0xb0>
 8009858:	4b69      	ldr	r3, [pc, #420]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a68      	ldr	r2, [pc, #416]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 800985e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	4b66      	ldr	r3, [pc, #408]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a65      	ldr	r2, [pc, #404]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 800986a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800986e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d013      	beq.n	80098a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009878:	f7fd ff5a 	bl	8007730 <HAL_GetTick>
 800987c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800987e:	e008      	b.n	8009892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009880:	f7fd ff56 	bl	8007730 <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	2b64      	cmp	r3, #100	; 0x64
 800988c:	d901      	bls.n	8009892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e207      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009892:	4b5b      	ldr	r3, [pc, #364]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0f0      	beq.n	8009880 <HAL_RCC_OscConfig+0xc0>
 800989e:	e014      	b.n	80098ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098a0:	f7fd ff46 	bl	8007730 <HAL_GetTick>
 80098a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098a6:	e008      	b.n	80098ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098a8:	f7fd ff42 	bl	8007730 <HAL_GetTick>
 80098ac:	4602      	mov	r2, r0
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	2b64      	cmp	r3, #100	; 0x64
 80098b4:	d901      	bls.n	80098ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e1f3      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098ba:	4b51      	ldr	r3, [pc, #324]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1f0      	bne.n	80098a8 <HAL_RCC_OscConfig+0xe8>
 80098c6:	e000      	b.n	80098ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d063      	beq.n	800999e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098d6:	4b4a      	ldr	r3, [pc, #296]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 030c 	and.w	r3, r3, #12
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00b      	beq.n	80098fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098e2:	4b47      	ldr	r3, [pc, #284]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098ea:	2b08      	cmp	r3, #8
 80098ec:	d11c      	bne.n	8009928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098ee:	4b44      	ldr	r3, [pc, #272]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d116      	bne.n	8009928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098fa:	4b41      	ldr	r3, [pc, #260]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0302 	and.w	r3, r3, #2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <HAL_RCC_OscConfig+0x152>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d001      	beq.n	8009912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e1c7      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009912:	4b3b      	ldr	r3, [pc, #236]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	4937      	ldr	r1, [pc, #220]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009922:	4313      	orrs	r3, r2
 8009924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009926:	e03a      	b.n	800999e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d020      	beq.n	8009972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009930:	4b34      	ldr	r3, [pc, #208]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009932:	2201      	movs	r2, #1
 8009934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009936:	f7fd fefb 	bl	8007730 <HAL_GetTick>
 800993a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800993c:	e008      	b.n	8009950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800993e:	f7fd fef7 	bl	8007730 <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	2b02      	cmp	r3, #2
 800994a:	d901      	bls.n	8009950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	e1a8      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009950:	4b2b      	ldr	r3, [pc, #172]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0302 	and.w	r3, r3, #2
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0f0      	beq.n	800993e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800995c:	4b28      	ldr	r3, [pc, #160]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	00db      	lsls	r3, r3, #3
 800996a:	4925      	ldr	r1, [pc, #148]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 800996c:	4313      	orrs	r3, r2
 800996e:	600b      	str	r3, [r1, #0]
 8009970:	e015      	b.n	800999e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009972:	4b24      	ldr	r3, [pc, #144]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009978:	f7fd feda 	bl	8007730 <HAL_GetTick>
 800997c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800997e:	e008      	b.n	8009992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009980:	f7fd fed6 	bl	8007730 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	2b02      	cmp	r3, #2
 800998c:	d901      	bls.n	8009992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e187      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009992:	4b1b      	ldr	r3, [pc, #108]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1f0      	bne.n	8009980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 0308 	and.w	r3, r3, #8
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d036      	beq.n	8009a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d016      	beq.n	80099e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099b2:	4b15      	ldr	r3, [pc, #84]	; (8009a08 <HAL_RCC_OscConfig+0x248>)
 80099b4:	2201      	movs	r2, #1
 80099b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099b8:	f7fd feba 	bl	8007730 <HAL_GetTick>
 80099bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099be:	e008      	b.n	80099d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099c0:	f7fd feb6 	bl	8007730 <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d901      	bls.n	80099d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e167      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099d2:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <HAL_RCC_OscConfig+0x240>)
 80099d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0f0      	beq.n	80099c0 <HAL_RCC_OscConfig+0x200>
 80099de:	e01b      	b.n	8009a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099e0:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <HAL_RCC_OscConfig+0x248>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099e6:	f7fd fea3 	bl	8007730 <HAL_GetTick>
 80099ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099ec:	e00e      	b.n	8009a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099ee:	f7fd fe9f 	bl	8007730 <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d907      	bls.n	8009a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e150      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
 8009a00:	40023800 	.word	0x40023800
 8009a04:	42470000 	.word	0x42470000
 8009a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a0c:	4b88      	ldr	r3, [pc, #544]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a10:	f003 0302 	and.w	r3, r3, #2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1ea      	bne.n	80099ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f000 8097 	beq.w	8009b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a26:	2300      	movs	r3, #0
 8009a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a2a:	4b81      	ldr	r3, [pc, #516]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10f      	bne.n	8009a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a36:	2300      	movs	r3, #0
 8009a38:	60bb      	str	r3, [r7, #8]
 8009a3a:	4b7d      	ldr	r3, [pc, #500]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3e:	4a7c      	ldr	r2, [pc, #496]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a44:	6413      	str	r3, [r2, #64]	; 0x40
 8009a46:	4b7a      	ldr	r3, [pc, #488]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a4e:	60bb      	str	r3, [r7, #8]
 8009a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a52:	2301      	movs	r3, #1
 8009a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a56:	4b77      	ldr	r3, [pc, #476]	; (8009c34 <HAL_RCC_OscConfig+0x474>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d118      	bne.n	8009a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a62:	4b74      	ldr	r3, [pc, #464]	; (8009c34 <HAL_RCC_OscConfig+0x474>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a73      	ldr	r2, [pc, #460]	; (8009c34 <HAL_RCC_OscConfig+0x474>)
 8009a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a6e:	f7fd fe5f 	bl	8007730 <HAL_GetTick>
 8009a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a74:	e008      	b.n	8009a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a76:	f7fd fe5b 	bl	8007730 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d901      	bls.n	8009a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e10c      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a88:	4b6a      	ldr	r3, [pc, #424]	; (8009c34 <HAL_RCC_OscConfig+0x474>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d0f0      	beq.n	8009a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d106      	bne.n	8009aaa <HAL_RCC_OscConfig+0x2ea>
 8009a9c:	4b64      	ldr	r3, [pc, #400]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa0:	4a63      	ldr	r2, [pc, #396]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009aa2:	f043 0301 	orr.w	r3, r3, #1
 8009aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8009aa8:	e01c      	b.n	8009ae4 <HAL_RCC_OscConfig+0x324>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2b05      	cmp	r3, #5
 8009ab0:	d10c      	bne.n	8009acc <HAL_RCC_OscConfig+0x30c>
 8009ab2:	4b5f      	ldr	r3, [pc, #380]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab6:	4a5e      	ldr	r2, [pc, #376]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009ab8:	f043 0304 	orr.w	r3, r3, #4
 8009abc:	6713      	str	r3, [r2, #112]	; 0x70
 8009abe:	4b5c      	ldr	r3, [pc, #368]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac2:	4a5b      	ldr	r2, [pc, #364]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009ac4:	f043 0301 	orr.w	r3, r3, #1
 8009ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8009aca:	e00b      	b.n	8009ae4 <HAL_RCC_OscConfig+0x324>
 8009acc:	4b58      	ldr	r3, [pc, #352]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad0:	4a57      	ldr	r2, [pc, #348]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009ad2:	f023 0301 	bic.w	r3, r3, #1
 8009ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ad8:	4b55      	ldr	r3, [pc, #340]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009adc:	4a54      	ldr	r2, [pc, #336]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009ade:	f023 0304 	bic.w	r3, r3, #4
 8009ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d015      	beq.n	8009b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aec:	f7fd fe20 	bl	8007730 <HAL_GetTick>
 8009af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009af2:	e00a      	b.n	8009b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009af4:	f7fd fe1c 	bl	8007730 <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d901      	bls.n	8009b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e0cb      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b0a:	4b49      	ldr	r3, [pc, #292]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0ee      	beq.n	8009af4 <HAL_RCC_OscConfig+0x334>
 8009b16:	e014      	b.n	8009b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b18:	f7fd fe0a 	bl	8007730 <HAL_GetTick>
 8009b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b1e:	e00a      	b.n	8009b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b20:	f7fd fe06 	bl	8007730 <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d901      	bls.n	8009b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e0b5      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b36:	4b3e      	ldr	r3, [pc, #248]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3a:	f003 0302 	and.w	r3, r3, #2
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1ee      	bne.n	8009b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d105      	bne.n	8009b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b48:	4b39      	ldr	r3, [pc, #228]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4c:	4a38      	ldr	r2, [pc, #224]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 80a1 	beq.w	8009ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b5e:	4b34      	ldr	r3, [pc, #208]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f003 030c 	and.w	r3, r3, #12
 8009b66:	2b08      	cmp	r3, #8
 8009b68:	d05c      	beq.n	8009c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d141      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b72:	4b31      	ldr	r3, [pc, #196]	; (8009c38 <HAL_RCC_OscConfig+0x478>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b78:	f7fd fdda 	bl	8007730 <HAL_GetTick>
 8009b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b80:	f7fd fdd6 	bl	8007730 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e087      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b92:	4b27      	ldr	r3, [pc, #156]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1f0      	bne.n	8009b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	69da      	ldr	r2, [r3, #28]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	019b      	lsls	r3, r3, #6
 8009bae:	431a      	orrs	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb4:	085b      	lsrs	r3, r3, #1
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	041b      	lsls	r3, r3, #16
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	061b      	lsls	r3, r3, #24
 8009bc2:	491b      	ldr	r1, [pc, #108]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bc8:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <HAL_RCC_OscConfig+0x478>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bce:	f7fd fdaf 	bl	8007730 <HAL_GetTick>
 8009bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bd4:	e008      	b.n	8009be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bd6:	f7fd fdab 	bl	8007730 <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d901      	bls.n	8009be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e05c      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009be8:	4b11      	ldr	r3, [pc, #68]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d0f0      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x416>
 8009bf4:	e054      	b.n	8009ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bf6:	4b10      	ldr	r3, [pc, #64]	; (8009c38 <HAL_RCC_OscConfig+0x478>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bfc:	f7fd fd98 	bl	8007730 <HAL_GetTick>
 8009c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c02:	e008      	b.n	8009c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c04:	f7fd fd94 	bl	8007730 <HAL_GetTick>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d901      	bls.n	8009c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e045      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c16:	4b06      	ldr	r3, [pc, #24]	; (8009c30 <HAL_RCC_OscConfig+0x470>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1f0      	bne.n	8009c04 <HAL_RCC_OscConfig+0x444>
 8009c22:	e03d      	b.n	8009ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d107      	bne.n	8009c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e038      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
 8009c30:	40023800 	.word	0x40023800
 8009c34:	40007000 	.word	0x40007000
 8009c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009c3c:	4b1b      	ldr	r3, [pc, #108]	; (8009cac <HAL_RCC_OscConfig+0x4ec>)
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d028      	beq.n	8009c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d121      	bne.n	8009c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d11a      	bne.n	8009c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d111      	bne.n	8009c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c82:	085b      	lsrs	r3, r3, #1
 8009c84:	3b01      	subs	r3, #1
 8009c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d107      	bne.n	8009c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d001      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e000      	b.n	8009ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3718      	adds	r7, #24
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	40023800 	.word	0x40023800

08009cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e0cc      	b.n	8009e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cc4:	4b68      	ldr	r3, [pc, #416]	; (8009e68 <HAL_RCC_ClockConfig+0x1b8>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0307 	and.w	r3, r3, #7
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d90c      	bls.n	8009cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cd2:	4b65      	ldr	r3, [pc, #404]	; (8009e68 <HAL_RCC_ClockConfig+0x1b8>)
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	b2d2      	uxtb	r2, r2
 8009cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cda:	4b63      	ldr	r3, [pc, #396]	; (8009e68 <HAL_RCC_ClockConfig+0x1b8>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d001      	beq.n	8009cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e0b8      	b.n	8009e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0302 	and.w	r3, r3, #2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d020      	beq.n	8009d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d005      	beq.n	8009d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d04:	4b59      	ldr	r3, [pc, #356]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	4a58      	ldr	r2, [pc, #352]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0308 	and.w	r3, r3, #8
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d1c:	4b53      	ldr	r3, [pc, #332]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	4a52      	ldr	r2, [pc, #328]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d28:	4b50      	ldr	r3, [pc, #320]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	494d      	ldr	r1, [pc, #308]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d044      	beq.n	8009dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d107      	bne.n	8009d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d4e:	4b47      	ldr	r3, [pc, #284]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d119      	bne.n	8009d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e07f      	b.n	8009e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d003      	beq.n	8009d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	d107      	bne.n	8009d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d6e:	4b3f      	ldr	r3, [pc, #252]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d109      	bne.n	8009d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e06f      	b.n	8009e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d7e:	4b3b      	ldr	r3, [pc, #236]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e067      	b.n	8009e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d8e:	4b37      	ldr	r3, [pc, #220]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f023 0203 	bic.w	r2, r3, #3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	4934      	ldr	r1, [pc, #208]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009da0:	f7fd fcc6 	bl	8007730 <HAL_GetTick>
 8009da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009da6:	e00a      	b.n	8009dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009da8:	f7fd fcc2 	bl	8007730 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e04f      	b.n	8009e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dbe:	4b2b      	ldr	r3, [pc, #172]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f003 020c 	and.w	r2, r3, #12
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d1eb      	bne.n	8009da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009dd0:	4b25      	ldr	r3, [pc, #148]	; (8009e68 <HAL_RCC_ClockConfig+0x1b8>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 0307 	and.w	r3, r3, #7
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d20c      	bcs.n	8009df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dde:	4b22      	ldr	r3, [pc, #136]	; (8009e68 <HAL_RCC_ClockConfig+0x1b8>)
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	b2d2      	uxtb	r2, r2
 8009de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009de6:	4b20      	ldr	r3, [pc, #128]	; (8009e68 <HAL_RCC_ClockConfig+0x1b8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 0307 	and.w	r3, r3, #7
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d001      	beq.n	8009df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e032      	b.n	8009e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d008      	beq.n	8009e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e04:	4b19      	ldr	r3, [pc, #100]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	4916      	ldr	r1, [pc, #88]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0308 	and.w	r3, r3, #8
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e22:	4b12      	ldr	r3, [pc, #72]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	490e      	ldr	r1, [pc, #56]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e36:	f000 f821 	bl	8009e7c <HAL_RCC_GetSysClockFreq>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	4b0b      	ldr	r3, [pc, #44]	; (8009e6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	091b      	lsrs	r3, r3, #4
 8009e42:	f003 030f 	and.w	r3, r3, #15
 8009e46:	490a      	ldr	r1, [pc, #40]	; (8009e70 <HAL_RCC_ClockConfig+0x1c0>)
 8009e48:	5ccb      	ldrb	r3, [r1, r3]
 8009e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4e:	4a09      	ldr	r2, [pc, #36]	; (8009e74 <HAL_RCC_ClockConfig+0x1c4>)
 8009e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009e52:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <HAL_RCC_ClockConfig+0x1c8>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fd fc26 	bl	80076a8 <HAL_InitTick>

  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	40023c00 	.word	0x40023c00
 8009e6c:	40023800 	.word	0x40023800
 8009e70:	08011168 	.word	0x08011168
 8009e74:	20000030 	.word	0x20000030
 8009e78:	20000034 	.word	0x20000034

08009e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e80:	b094      	sub	sp, #80	; 0x50
 8009e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	647b      	str	r3, [r7, #68]	; 0x44
 8009e88:	2300      	movs	r3, #0
 8009e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e94:	4b79      	ldr	r3, [pc, #484]	; (800a07c <HAL_RCC_GetSysClockFreq+0x200>)
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f003 030c 	and.w	r3, r3, #12
 8009e9c:	2b08      	cmp	r3, #8
 8009e9e:	d00d      	beq.n	8009ebc <HAL_RCC_GetSysClockFreq+0x40>
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	f200 80e1 	bhi.w	800a068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d003      	beq.n	8009eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8009eae:	e0db      	b.n	800a068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009eb0:	4b73      	ldr	r3, [pc, #460]	; (800a080 <HAL_RCC_GetSysClockFreq+0x204>)
 8009eb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009eb4:	e0db      	b.n	800a06e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009eb6:	4b73      	ldr	r3, [pc, #460]	; (800a084 <HAL_RCC_GetSysClockFreq+0x208>)
 8009eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009eba:	e0d8      	b.n	800a06e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ebc:	4b6f      	ldr	r3, [pc, #444]	; (800a07c <HAL_RCC_GetSysClockFreq+0x200>)
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ec6:	4b6d      	ldr	r3, [pc, #436]	; (800a07c <HAL_RCC_GetSysClockFreq+0x200>)
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d063      	beq.n	8009f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ed2:	4b6a      	ldr	r3, [pc, #424]	; (800a07c <HAL_RCC_GetSysClockFreq+0x200>)
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	099b      	lsrs	r3, r3, #6
 8009ed8:	2200      	movs	r2, #0
 8009eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8009edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8009eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009eee:	4622      	mov	r2, r4
 8009ef0:	462b      	mov	r3, r5
 8009ef2:	f04f 0000 	mov.w	r0, #0
 8009ef6:	f04f 0100 	mov.w	r1, #0
 8009efa:	0159      	lsls	r1, r3, #5
 8009efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f00:	0150      	lsls	r0, r2, #5
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4621      	mov	r1, r4
 8009f08:	1a51      	subs	r1, r2, r1
 8009f0a:	6139      	str	r1, [r7, #16]
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f20:	4659      	mov	r1, fp
 8009f22:	018b      	lsls	r3, r1, #6
 8009f24:	4651      	mov	r1, sl
 8009f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f2a:	4651      	mov	r1, sl
 8009f2c:	018a      	lsls	r2, r1, #6
 8009f2e:	4651      	mov	r1, sl
 8009f30:	ebb2 0801 	subs.w	r8, r2, r1
 8009f34:	4659      	mov	r1, fp
 8009f36:	eb63 0901 	sbc.w	r9, r3, r1
 8009f3a:	f04f 0200 	mov.w	r2, #0
 8009f3e:	f04f 0300 	mov.w	r3, #0
 8009f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f4e:	4690      	mov	r8, r2
 8009f50:	4699      	mov	r9, r3
 8009f52:	4623      	mov	r3, r4
 8009f54:	eb18 0303 	adds.w	r3, r8, r3
 8009f58:	60bb      	str	r3, [r7, #8]
 8009f5a:	462b      	mov	r3, r5
 8009f5c:	eb49 0303 	adc.w	r3, r9, r3
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	f04f 0200 	mov.w	r2, #0
 8009f66:	f04f 0300 	mov.w	r3, #0
 8009f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009f6e:	4629      	mov	r1, r5
 8009f70:	024b      	lsls	r3, r1, #9
 8009f72:	4621      	mov	r1, r4
 8009f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009f78:	4621      	mov	r1, r4
 8009f7a:	024a      	lsls	r2, r1, #9
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f82:	2200      	movs	r2, #0
 8009f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f8c:	f7f6 fe5c 	bl	8000c48 <__aeabi_uldivmod>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4613      	mov	r3, r2
 8009f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f98:	e058      	b.n	800a04c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f9a:	4b38      	ldr	r3, [pc, #224]	; (800a07c <HAL_RCC_GetSysClockFreq+0x200>)
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	099b      	lsrs	r3, r3, #6
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009faa:	623b      	str	r3, [r7, #32]
 8009fac:	2300      	movs	r3, #0
 8009fae:	627b      	str	r3, [r7, #36]	; 0x24
 8009fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009fb4:	4642      	mov	r2, r8
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	f04f 0000 	mov.w	r0, #0
 8009fbc:	f04f 0100 	mov.w	r1, #0
 8009fc0:	0159      	lsls	r1, r3, #5
 8009fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009fc6:	0150      	lsls	r0, r2, #5
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4641      	mov	r1, r8
 8009fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8009fd8:	f04f 0200 	mov.w	r2, #0
 8009fdc:	f04f 0300 	mov.w	r3, #0
 8009fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009fec:	ebb2 040a 	subs.w	r4, r2, sl
 8009ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8009ff4:	f04f 0200 	mov.w	r2, #0
 8009ff8:	f04f 0300 	mov.w	r3, #0
 8009ffc:	00eb      	lsls	r3, r5, #3
 8009ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a002:	00e2      	lsls	r2, r4, #3
 800a004:	4614      	mov	r4, r2
 800a006:	461d      	mov	r5, r3
 800a008:	4643      	mov	r3, r8
 800a00a:	18e3      	adds	r3, r4, r3
 800a00c:	603b      	str	r3, [r7, #0]
 800a00e:	464b      	mov	r3, r9
 800a010:	eb45 0303 	adc.w	r3, r5, r3
 800a014:	607b      	str	r3, [r7, #4]
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a022:	4629      	mov	r1, r5
 800a024:	028b      	lsls	r3, r1, #10
 800a026:	4621      	mov	r1, r4
 800a028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a02c:	4621      	mov	r1, r4
 800a02e:	028a      	lsls	r2, r1, #10
 800a030:	4610      	mov	r0, r2
 800a032:	4619      	mov	r1, r3
 800a034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a036:	2200      	movs	r2, #0
 800a038:	61bb      	str	r3, [r7, #24]
 800a03a:	61fa      	str	r2, [r7, #28]
 800a03c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a040:	f7f6 fe02 	bl	8000c48 <__aeabi_uldivmod>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4613      	mov	r3, r2
 800a04a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a04c:	4b0b      	ldr	r3, [pc, #44]	; (800a07c <HAL_RCC_GetSysClockFreq+0x200>)
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	0c1b      	lsrs	r3, r3, #16
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	3301      	adds	r3, #1
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a05c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a05e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a060:	fbb2 f3f3 	udiv	r3, r2, r3
 800a064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a066:	e002      	b.n	800a06e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a068:	4b05      	ldr	r3, [pc, #20]	; (800a080 <HAL_RCC_GetSysClockFreq+0x204>)
 800a06a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a06c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a06e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a070:	4618      	mov	r0, r3
 800a072:	3750      	adds	r7, #80	; 0x50
 800a074:	46bd      	mov	sp, r7
 800a076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a07a:	bf00      	nop
 800a07c:	40023800 	.word	0x40023800
 800a080:	00f42400 	.word	0x00f42400
 800a084:	007a1200 	.word	0x007a1200

0800a088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a088:	b480      	push	{r7}
 800a08a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a08c:	4b03      	ldr	r3, [pc, #12]	; (800a09c <HAL_RCC_GetHCLKFreq+0x14>)
 800a08e:	681b      	ldr	r3, [r3, #0]
}
 800a090:	4618      	mov	r0, r3
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	20000030 	.word	0x20000030

0800a0a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0a4:	f7ff fff0 	bl	800a088 <HAL_RCC_GetHCLKFreq>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	0a9b      	lsrs	r3, r3, #10
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	4903      	ldr	r1, [pc, #12]	; (800a0c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0b6:	5ccb      	ldrb	r3, [r1, r3]
 800a0b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	40023800 	.word	0x40023800
 800a0c4:	08011178 	.word	0x08011178

0800a0c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a0cc:	f7ff ffdc 	bl	800a088 <HAL_RCC_GetHCLKFreq>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	0b5b      	lsrs	r3, r3, #13
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	4903      	ldr	r1, [pc, #12]	; (800a0ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0de:	5ccb      	ldrb	r3, [r1, r3]
 800a0e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	40023800 	.word	0x40023800
 800a0ec:	08011178 	.word	0x08011178

0800a0f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e041      	b.n	800a186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7fc ffe2 	bl	80070e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3304      	adds	r3, #4
 800a12c:	4619      	mov	r1, r3
 800a12e:	4610      	mov	r0, r2
 800a130:	f000 fd8c 	bl	800ac4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
	...

0800a190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d001      	beq.n	800a1a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e04e      	b.n	800a246 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68da      	ldr	r2, [r3, #12]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f042 0201 	orr.w	r2, r2, #1
 800a1be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a23      	ldr	r2, [pc, #140]	; (800a254 <HAL_TIM_Base_Start_IT+0xc4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d022      	beq.n	800a210 <HAL_TIM_Base_Start_IT+0x80>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d2:	d01d      	beq.n	800a210 <HAL_TIM_Base_Start_IT+0x80>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a1f      	ldr	r2, [pc, #124]	; (800a258 <HAL_TIM_Base_Start_IT+0xc8>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d018      	beq.n	800a210 <HAL_TIM_Base_Start_IT+0x80>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a1e      	ldr	r2, [pc, #120]	; (800a25c <HAL_TIM_Base_Start_IT+0xcc>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d013      	beq.n	800a210 <HAL_TIM_Base_Start_IT+0x80>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a1c      	ldr	r2, [pc, #112]	; (800a260 <HAL_TIM_Base_Start_IT+0xd0>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d00e      	beq.n	800a210 <HAL_TIM_Base_Start_IT+0x80>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a1b      	ldr	r2, [pc, #108]	; (800a264 <HAL_TIM_Base_Start_IT+0xd4>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d009      	beq.n	800a210 <HAL_TIM_Base_Start_IT+0x80>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a19      	ldr	r2, [pc, #100]	; (800a268 <HAL_TIM_Base_Start_IT+0xd8>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d004      	beq.n	800a210 <HAL_TIM_Base_Start_IT+0x80>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a18      	ldr	r2, [pc, #96]	; (800a26c <HAL_TIM_Base_Start_IT+0xdc>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d111      	bne.n	800a234 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b06      	cmp	r3, #6
 800a220:	d010      	beq.n	800a244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f042 0201 	orr.w	r2, r2, #1
 800a230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a232:	e007      	b.n	800a244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f042 0201 	orr.w	r2, r2, #1
 800a242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	40010000 	.word	0x40010000
 800a258:	40000400 	.word	0x40000400
 800a25c:	40000800 	.word	0x40000800
 800a260:	40000c00 	.word	0x40000c00
 800a264:	40010400 	.word	0x40010400
 800a268:	40014000 	.word	0x40014000
 800a26c:	40001800 	.word	0x40001800

0800a270 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e041      	b.n	800a306 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d106      	bne.n	800a29c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7fc ff48 	bl	800712c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2202      	movs	r2, #2
 800a2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	f000 fccc 	bl	800ac4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d109      	bne.n	800a334 <HAL_TIM_PWM_Start+0x24>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b01      	cmp	r3, #1
 800a32a:	bf14      	ite	ne
 800a32c:	2301      	movne	r3, #1
 800a32e:	2300      	moveq	r3, #0
 800a330:	b2db      	uxtb	r3, r3
 800a332:	e022      	b.n	800a37a <HAL_TIM_PWM_Start+0x6a>
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b04      	cmp	r3, #4
 800a338:	d109      	bne.n	800a34e <HAL_TIM_PWM_Start+0x3e>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b01      	cmp	r3, #1
 800a344:	bf14      	ite	ne
 800a346:	2301      	movne	r3, #1
 800a348:	2300      	moveq	r3, #0
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	e015      	b.n	800a37a <HAL_TIM_PWM_Start+0x6a>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b08      	cmp	r3, #8
 800a352:	d109      	bne.n	800a368 <HAL_TIM_PWM_Start+0x58>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	bf14      	ite	ne
 800a360:	2301      	movne	r3, #1
 800a362:	2300      	moveq	r3, #0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	e008      	b.n	800a37a <HAL_TIM_PWM_Start+0x6a>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	2b01      	cmp	r3, #1
 800a372:	bf14      	ite	ne
 800a374:	2301      	movne	r3, #1
 800a376:	2300      	moveq	r3, #0
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e07c      	b.n	800a47c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d104      	bne.n	800a392 <HAL_TIM_PWM_Start+0x82>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a390:	e013      	b.n	800a3ba <HAL_TIM_PWM_Start+0xaa>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b04      	cmp	r3, #4
 800a396:	d104      	bne.n	800a3a2 <HAL_TIM_PWM_Start+0x92>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3a0:	e00b      	b.n	800a3ba <HAL_TIM_PWM_Start+0xaa>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b08      	cmp	r3, #8
 800a3a6:	d104      	bne.n	800a3b2 <HAL_TIM_PWM_Start+0xa2>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3b0:	e003      	b.n	800a3ba <HAL_TIM_PWM_Start+0xaa>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 ff38 	bl	800b238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a2d      	ldr	r2, [pc, #180]	; (800a484 <HAL_TIM_PWM_Start+0x174>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d004      	beq.n	800a3dc <HAL_TIM_PWM_Start+0xcc>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a2c      	ldr	r2, [pc, #176]	; (800a488 <HAL_TIM_PWM_Start+0x178>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d101      	bne.n	800a3e0 <HAL_TIM_PWM_Start+0xd0>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e000      	b.n	800a3e2 <HAL_TIM_PWM_Start+0xd2>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d007      	beq.n	800a3f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a22      	ldr	r2, [pc, #136]	; (800a484 <HAL_TIM_PWM_Start+0x174>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d022      	beq.n	800a446 <HAL_TIM_PWM_Start+0x136>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a408:	d01d      	beq.n	800a446 <HAL_TIM_PWM_Start+0x136>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a1f      	ldr	r2, [pc, #124]	; (800a48c <HAL_TIM_PWM_Start+0x17c>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d018      	beq.n	800a446 <HAL_TIM_PWM_Start+0x136>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a1d      	ldr	r2, [pc, #116]	; (800a490 <HAL_TIM_PWM_Start+0x180>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d013      	beq.n	800a446 <HAL_TIM_PWM_Start+0x136>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a1c      	ldr	r2, [pc, #112]	; (800a494 <HAL_TIM_PWM_Start+0x184>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d00e      	beq.n	800a446 <HAL_TIM_PWM_Start+0x136>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a16      	ldr	r2, [pc, #88]	; (800a488 <HAL_TIM_PWM_Start+0x178>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d009      	beq.n	800a446 <HAL_TIM_PWM_Start+0x136>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a18      	ldr	r2, [pc, #96]	; (800a498 <HAL_TIM_PWM_Start+0x188>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d004      	beq.n	800a446 <HAL_TIM_PWM_Start+0x136>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a16      	ldr	r2, [pc, #88]	; (800a49c <HAL_TIM_PWM_Start+0x18c>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d111      	bne.n	800a46a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f003 0307 	and.w	r3, r3, #7
 800a450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b06      	cmp	r3, #6
 800a456:	d010      	beq.n	800a47a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f042 0201 	orr.w	r2, r2, #1
 800a466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a468:	e007      	b.n	800a47a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f042 0201 	orr.w	r2, r2, #1
 800a478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	40010000 	.word	0x40010000
 800a488:	40010400 	.word	0x40010400
 800a48c:	40000400 	.word	0x40000400
 800a490:	40000800 	.word	0x40000800
 800a494:	40000c00 	.word	0x40000c00
 800a498:	40014000 	.word	0x40014000
 800a49c:	40001800 	.word	0x40001800

0800a4a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e097      	b.n	800a5e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d106      	bne.n	800a4ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7fc fd89 	bl	8006fe0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	6812      	ldr	r2, [r2, #0]
 800a4e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4e4:	f023 0307 	bic.w	r3, r3, #7
 800a4e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	f000 fba9 	bl	800ac4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6a1b      	ldr	r3, [r3, #32]
 800a510:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	4313      	orrs	r3, r2
 800a51a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a522:	f023 0303 	bic.w	r3, r3, #3
 800a526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	689a      	ldr	r2, [r3, #8]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	699b      	ldr	r3, [r3, #24]
 800a530:	021b      	lsls	r3, r3, #8
 800a532:	4313      	orrs	r3, r2
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	4313      	orrs	r3, r2
 800a538:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a540:	f023 030c 	bic.w	r3, r3, #12
 800a544:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a54c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	69db      	ldr	r3, [r3, #28]
 800a55a:	021b      	lsls	r3, r3, #8
 800a55c:	4313      	orrs	r3, r2
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	4313      	orrs	r3, r2
 800a562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	011a      	lsls	r2, r3, #4
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	031b      	lsls	r3, r3, #12
 800a570:	4313      	orrs	r3, r2
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	4313      	orrs	r3, r2
 800a576:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a57e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a586:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	011b      	lsls	r3, r3, #4
 800a592:	4313      	orrs	r3, r2
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	4313      	orrs	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a604:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a60c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a614:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d110      	bne.n	800a63e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d102      	bne.n	800a628 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a622:	7b7b      	ldrb	r3, [r7, #13]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d001      	beq.n	800a62c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e069      	b.n	800a700 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a63c:	e031      	b.n	800a6a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b04      	cmp	r3, #4
 800a642:	d110      	bne.n	800a666 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d102      	bne.n	800a650 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a64a:	7b3b      	ldrb	r3, [r7, #12]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d001      	beq.n	800a654 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e055      	b.n	800a700 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2202      	movs	r2, #2
 800a658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2202      	movs	r2, #2
 800a660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a664:	e01d      	b.n	800a6a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d108      	bne.n	800a67e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d105      	bne.n	800a67e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a672:	7b7b      	ldrb	r3, [r7, #13]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d102      	bne.n	800a67e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a678:	7b3b      	ldrb	r3, [r7, #12]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d001      	beq.n	800a682 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e03e      	b.n	800a700 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2202      	movs	r2, #2
 800a686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2202      	movs	r2, #2
 800a68e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2202      	movs	r2, #2
 800a696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2202      	movs	r2, #2
 800a69e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d003      	beq.n	800a6b0 <HAL_TIM_Encoder_Start+0xc4>
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d008      	beq.n	800a6c0 <HAL_TIM_Encoder_Start+0xd4>
 800a6ae:	e00f      	b.n	800a6d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 fdbd 	bl	800b238 <TIM_CCxChannelCmd>
      break;
 800a6be:	e016      	b.n	800a6ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	2104      	movs	r1, #4
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 fdb5 	bl	800b238 <TIM_CCxChannelCmd>
      break;
 800a6ce:	e00e      	b.n	800a6ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 fdad 	bl	800b238 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	2104      	movs	r1, #4
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fda6 	bl	800b238 <TIM_CCxChannelCmd>
      break;
 800a6ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f042 0201 	orr.w	r2, r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	f003 0302 	and.w	r3, r3, #2
 800a726:	2b00      	cmp	r3, #0
 800a728:	d020      	beq.n	800a76c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f003 0302 	and.w	r3, r3, #2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d01b      	beq.n	800a76c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f06f 0202 	mvn.w	r2, #2
 800a73c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	f003 0303 	and.w	r3, r3, #3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d003      	beq.n	800a75a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fa5b 	bl	800ac0e <HAL_TIM_IC_CaptureCallback>
 800a758:	e005      	b.n	800a766 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fa4d 	bl	800abfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fa5e 	bl	800ac22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f003 0304 	and.w	r3, r3, #4
 800a772:	2b00      	cmp	r3, #0
 800a774:	d020      	beq.n	800a7b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01b      	beq.n	800a7b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f06f 0204 	mvn.w	r2, #4
 800a788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2202      	movs	r2, #2
 800a78e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fa35 	bl	800ac0e <HAL_TIM_IC_CaptureCallback>
 800a7a4:	e005      	b.n	800a7b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fa27 	bl	800abfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fa38 	bl	800ac22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f003 0308 	and.w	r3, r3, #8
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d020      	beq.n	800a804 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f003 0308 	and.w	r3, r3, #8
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d01b      	beq.n	800a804 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f06f 0208 	mvn.w	r2, #8
 800a7d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2204      	movs	r2, #4
 800a7da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	f003 0303 	and.w	r3, r3, #3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fa0f 	bl	800ac0e <HAL_TIM_IC_CaptureCallback>
 800a7f0:	e005      	b.n	800a7fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fa01 	bl	800abfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fa12 	bl	800ac22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f003 0310 	and.w	r3, r3, #16
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d020      	beq.n	800a850 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f003 0310 	and.w	r3, r3, #16
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01b      	beq.n	800a850 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f06f 0210 	mvn.w	r2, #16
 800a820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2208      	movs	r2, #8
 800a826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f9e9 	bl	800ac0e <HAL_TIM_IC_CaptureCallback>
 800a83c:	e005      	b.n	800a84a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f9db 	bl	800abfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f9ec 	bl	800ac22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00c      	beq.n	800a874 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	d007      	beq.n	800a874 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f06f 0201 	mvn.w	r2, #1
 800a86c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7f7 fe44 	bl	80024fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00c      	beq.n	800a898 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a884:	2b00      	cmp	r3, #0
 800a886:	d007      	beq.n	800a898 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fd7c 	bl	800b390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00c      	beq.n	800a8bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d007      	beq.n	800a8bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f9bd 	bl	800ac36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	f003 0320 	and.w	r3, r3, #32
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00c      	beq.n	800a8e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f003 0320 	and.w	r3, r3, #32
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d007      	beq.n	800a8e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f06f 0220 	mvn.w	r2, #32
 800a8d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fd4e 	bl	800b37c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8e0:	bf00      	nop
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d101      	bne.n	800a906 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a902:	2302      	movs	r3, #2
 800a904:	e0ae      	b.n	800aa64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b0c      	cmp	r3, #12
 800a912:	f200 809f 	bhi.w	800aa54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a916:	a201      	add	r2, pc, #4	; (adr r2, 800a91c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91c:	0800a951 	.word	0x0800a951
 800a920:	0800aa55 	.word	0x0800aa55
 800a924:	0800aa55 	.word	0x0800aa55
 800a928:	0800aa55 	.word	0x0800aa55
 800a92c:	0800a991 	.word	0x0800a991
 800a930:	0800aa55 	.word	0x0800aa55
 800a934:	0800aa55 	.word	0x0800aa55
 800a938:	0800aa55 	.word	0x0800aa55
 800a93c:	0800a9d3 	.word	0x0800a9d3
 800a940:	0800aa55 	.word	0x0800aa55
 800a944:	0800aa55 	.word	0x0800aa55
 800a948:	0800aa55 	.word	0x0800aa55
 800a94c:	0800aa13 	.word	0x0800aa13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68b9      	ldr	r1, [r7, #8]
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fa24 	bl	800ada4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0208 	orr.w	r2, r2, #8
 800a96a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	699a      	ldr	r2, [r3, #24]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f022 0204 	bic.w	r2, r2, #4
 800a97a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6999      	ldr	r1, [r3, #24]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	691a      	ldr	r2, [r3, #16]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	619a      	str	r2, [r3, #24]
      break;
 800a98e:	e064      	b.n	800aa5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68b9      	ldr	r1, [r7, #8]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 fa74 	bl	800ae84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	699a      	ldr	r2, [r3, #24]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	699a      	ldr	r2, [r3, #24]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6999      	ldr	r1, [r3, #24]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	021a      	lsls	r2, r3, #8
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	619a      	str	r2, [r3, #24]
      break;
 800a9d0:	e043      	b.n	800aa5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68b9      	ldr	r1, [r7, #8]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 fac9 	bl	800af70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	69da      	ldr	r2, [r3, #28]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f042 0208 	orr.w	r2, r2, #8
 800a9ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	69da      	ldr	r2, [r3, #28]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0204 	bic.w	r2, r2, #4
 800a9fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	69d9      	ldr	r1, [r3, #28]
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	691a      	ldr	r2, [r3, #16]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	61da      	str	r2, [r3, #28]
      break;
 800aa10:	e023      	b.n	800aa5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68b9      	ldr	r1, [r7, #8]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fb1d 	bl	800b058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	69da      	ldr	r2, [r3, #28]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	69da      	ldr	r2, [r3, #28]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	69d9      	ldr	r1, [r3, #28]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	021a      	lsls	r2, r3, #8
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	61da      	str	r2, [r3, #28]
      break;
 800aa52:	e002      	b.n	800aa5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	75fb      	strb	r3, [r7, #23]
      break;
 800aa58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa62:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d101      	bne.n	800aa88 <HAL_TIM_ConfigClockSource+0x1c>
 800aa84:	2302      	movs	r3, #2
 800aa86:	e0b4      	b.n	800abf2 <HAL_TIM_ConfigClockSource+0x186>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aaa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac0:	d03e      	beq.n	800ab40 <HAL_TIM_ConfigClockSource+0xd4>
 800aac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac6:	f200 8087 	bhi.w	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aaca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aace:	f000 8086 	beq.w	800abde <HAL_TIM_ConfigClockSource+0x172>
 800aad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad6:	d87f      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aad8:	2b70      	cmp	r3, #112	; 0x70
 800aada:	d01a      	beq.n	800ab12 <HAL_TIM_ConfigClockSource+0xa6>
 800aadc:	2b70      	cmp	r3, #112	; 0x70
 800aade:	d87b      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aae0:	2b60      	cmp	r3, #96	; 0x60
 800aae2:	d050      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x11a>
 800aae4:	2b60      	cmp	r3, #96	; 0x60
 800aae6:	d877      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aae8:	2b50      	cmp	r3, #80	; 0x50
 800aaea:	d03c      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0xfa>
 800aaec:	2b50      	cmp	r3, #80	; 0x50
 800aaee:	d873      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aaf0:	2b40      	cmp	r3, #64	; 0x40
 800aaf2:	d058      	beq.n	800aba6 <HAL_TIM_ConfigClockSource+0x13a>
 800aaf4:	2b40      	cmp	r3, #64	; 0x40
 800aaf6:	d86f      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aaf8:	2b30      	cmp	r3, #48	; 0x30
 800aafa:	d064      	beq.n	800abc6 <HAL_TIM_ConfigClockSource+0x15a>
 800aafc:	2b30      	cmp	r3, #48	; 0x30
 800aafe:	d86b      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800ab00:	2b20      	cmp	r3, #32
 800ab02:	d060      	beq.n	800abc6 <HAL_TIM_ConfigClockSource+0x15a>
 800ab04:	2b20      	cmp	r3, #32
 800ab06:	d867      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d05c      	beq.n	800abc6 <HAL_TIM_ConfigClockSource+0x15a>
 800ab0c:	2b10      	cmp	r3, #16
 800ab0e:	d05a      	beq.n	800abc6 <HAL_TIM_ConfigClockSource+0x15a>
 800ab10:	e062      	b.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab22:	f000 fb69 	bl	800b1f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	609a      	str	r2, [r3, #8]
      break;
 800ab3e:	e04f      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab50:	f000 fb52 	bl	800b1f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689a      	ldr	r2, [r3, #8]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab62:	609a      	str	r2, [r3, #8]
      break;
 800ab64:	e03c      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab72:	461a      	mov	r2, r3
 800ab74:	f000 fac6 	bl	800b104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2150      	movs	r1, #80	; 0x50
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fb1f 	bl	800b1c2 <TIM_ITRx_SetConfig>
      break;
 800ab84:	e02c      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab92:	461a      	mov	r2, r3
 800ab94:	f000 fae5 	bl	800b162 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2160      	movs	r1, #96	; 0x60
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 fb0f 	bl	800b1c2 <TIM_ITRx_SetConfig>
      break;
 800aba4:	e01c      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abb2:	461a      	mov	r2, r3
 800abb4:	f000 faa6 	bl	800b104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2140      	movs	r1, #64	; 0x40
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 faff 	bl	800b1c2 <TIM_ITRx_SetConfig>
      break;
 800abc4:	e00c      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4619      	mov	r1, r3
 800abd0:	4610      	mov	r0, r2
 800abd2:	f000 faf6 	bl	800b1c2 <TIM_ITRx_SetConfig>
      break;
 800abd6:	e003      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	73fb      	strb	r3, [r7, #15]
      break;
 800abdc:	e000      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800abde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac16:	bf00      	nop
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac2a:	bf00      	nop
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
	...

0800ac4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a46      	ldr	r2, [pc, #280]	; (800ad78 <TIM_Base_SetConfig+0x12c>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d013      	beq.n	800ac8c <TIM_Base_SetConfig+0x40>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac6a:	d00f      	beq.n	800ac8c <TIM_Base_SetConfig+0x40>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a43      	ldr	r2, [pc, #268]	; (800ad7c <TIM_Base_SetConfig+0x130>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d00b      	beq.n	800ac8c <TIM_Base_SetConfig+0x40>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a42      	ldr	r2, [pc, #264]	; (800ad80 <TIM_Base_SetConfig+0x134>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d007      	beq.n	800ac8c <TIM_Base_SetConfig+0x40>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a41      	ldr	r2, [pc, #260]	; (800ad84 <TIM_Base_SetConfig+0x138>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d003      	beq.n	800ac8c <TIM_Base_SetConfig+0x40>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a40      	ldr	r2, [pc, #256]	; (800ad88 <TIM_Base_SetConfig+0x13c>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d108      	bne.n	800ac9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a35      	ldr	r2, [pc, #212]	; (800ad78 <TIM_Base_SetConfig+0x12c>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d02b      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acac:	d027      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a32      	ldr	r2, [pc, #200]	; (800ad7c <TIM_Base_SetConfig+0x130>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d023      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a31      	ldr	r2, [pc, #196]	; (800ad80 <TIM_Base_SetConfig+0x134>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d01f      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a30      	ldr	r2, [pc, #192]	; (800ad84 <TIM_Base_SetConfig+0x138>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d01b      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a2f      	ldr	r2, [pc, #188]	; (800ad88 <TIM_Base_SetConfig+0x13c>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d017      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a2e      	ldr	r2, [pc, #184]	; (800ad8c <TIM_Base_SetConfig+0x140>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d013      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a2d      	ldr	r2, [pc, #180]	; (800ad90 <TIM_Base_SetConfig+0x144>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d00f      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a2c      	ldr	r2, [pc, #176]	; (800ad94 <TIM_Base_SetConfig+0x148>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d00b      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a2b      	ldr	r2, [pc, #172]	; (800ad98 <TIM_Base_SetConfig+0x14c>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d007      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a2a      	ldr	r2, [pc, #168]	; (800ad9c <TIM_Base_SetConfig+0x150>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d003      	beq.n	800acfe <TIM_Base_SetConfig+0xb2>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a29      	ldr	r2, [pc, #164]	; (800ada0 <TIM_Base_SetConfig+0x154>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d108      	bne.n	800ad10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	689a      	ldr	r2, [r3, #8]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a10      	ldr	r2, [pc, #64]	; (800ad78 <TIM_Base_SetConfig+0x12c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d003      	beq.n	800ad44 <TIM_Base_SetConfig+0xf8>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a12      	ldr	r2, [pc, #72]	; (800ad88 <TIM_Base_SetConfig+0x13c>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d103      	bne.n	800ad4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	691a      	ldr	r2, [r3, #16]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d105      	bne.n	800ad6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f023 0201 	bic.w	r2, r3, #1
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	611a      	str	r2, [r3, #16]
  }
}
 800ad6a:	bf00      	nop
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	40010000 	.word	0x40010000
 800ad7c:	40000400 	.word	0x40000400
 800ad80:	40000800 	.word	0x40000800
 800ad84:	40000c00 	.word	0x40000c00
 800ad88:	40010400 	.word	0x40010400
 800ad8c:	40014000 	.word	0x40014000
 800ad90:	40014400 	.word	0x40014400
 800ad94:	40014800 	.word	0x40014800
 800ad98:	40001800 	.word	0x40001800
 800ad9c:	40001c00 	.word	0x40001c00
 800ada0:	40002000 	.word	0x40002000

0800ada4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	f023 0201 	bic.w	r2, r3, #1
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f023 0303 	bic.w	r3, r3, #3
 800adda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f023 0302 	bic.w	r3, r3, #2
 800adec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a20      	ldr	r2, [pc, #128]	; (800ae7c <TIM_OC1_SetConfig+0xd8>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d003      	beq.n	800ae08 <TIM_OC1_SetConfig+0x64>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a1f      	ldr	r2, [pc, #124]	; (800ae80 <TIM_OC1_SetConfig+0xdc>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d10c      	bne.n	800ae22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	f023 0308 	bic.w	r3, r3, #8
 800ae0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f023 0304 	bic.w	r3, r3, #4
 800ae20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4a15      	ldr	r2, [pc, #84]	; (800ae7c <TIM_OC1_SetConfig+0xd8>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d003      	beq.n	800ae32 <TIM_OC1_SetConfig+0x8e>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a14      	ldr	r2, [pc, #80]	; (800ae80 <TIM_OC1_SetConfig+0xdc>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d111      	bne.n	800ae56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	697a      	ldr	r2, [r7, #20]
 800ae6e:	621a      	str	r2, [r3, #32]
}
 800ae70:	bf00      	nop
 800ae72:	371c      	adds	r7, #28
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	40010000 	.word	0x40010000
 800ae80:	40010400 	.word	0x40010400

0800ae84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b087      	sub	sp, #28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	f023 0210 	bic.w	r2, r3, #16
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	021b      	lsls	r3, r3, #8
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	f023 0320 	bic.w	r3, r3, #32
 800aece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	011b      	lsls	r3, r3, #4
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a22      	ldr	r2, [pc, #136]	; (800af68 <TIM_OC2_SetConfig+0xe4>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d003      	beq.n	800aeec <TIM_OC2_SetConfig+0x68>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a21      	ldr	r2, [pc, #132]	; (800af6c <TIM_OC2_SetConfig+0xe8>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d10d      	bne.n	800af08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	011b      	lsls	r3, r3, #4
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a17      	ldr	r2, [pc, #92]	; (800af68 <TIM_OC2_SetConfig+0xe4>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d003      	beq.n	800af18 <TIM_OC2_SetConfig+0x94>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a16      	ldr	r2, [pc, #88]	; (800af6c <TIM_OC2_SetConfig+0xe8>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d113      	bne.n	800af40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	4313      	orrs	r3, r2
 800af32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	621a      	str	r2, [r3, #32]
}
 800af5a:	bf00      	nop
 800af5c:	371c      	adds	r7, #28
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	40010000 	.word	0x40010000
 800af6c:	40010400 	.word	0x40010400

0800af70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af70:	b480      	push	{r7}
 800af72:	b087      	sub	sp, #28
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a1b      	ldr	r3, [r3, #32]
 800af84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	69db      	ldr	r3, [r3, #28]
 800af96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 0303 	bic.w	r3, r3, #3
 800afa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a21      	ldr	r2, [pc, #132]	; (800b050 <TIM_OC3_SetConfig+0xe0>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d003      	beq.n	800afd6 <TIM_OC3_SetConfig+0x66>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a20      	ldr	r2, [pc, #128]	; (800b054 <TIM_OC3_SetConfig+0xe4>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d10d      	bne.n	800aff2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	021b      	lsls	r3, r3, #8
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a16      	ldr	r2, [pc, #88]	; (800b050 <TIM_OC3_SetConfig+0xe0>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d003      	beq.n	800b002 <TIM_OC3_SetConfig+0x92>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a15      	ldr	r2, [pc, #84]	; (800b054 <TIM_OC3_SetConfig+0xe4>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d113      	bne.n	800b02a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	695b      	ldr	r3, [r3, #20]
 800b016:	011b      	lsls	r3, r3, #4
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	011b      	lsls	r3, r3, #4
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	4313      	orrs	r3, r2
 800b028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	621a      	str	r2, [r3, #32]
}
 800b044:	bf00      	nop
 800b046:	371c      	adds	r7, #28
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	40010000 	.word	0x40010000
 800b054:	40010400 	.word	0x40010400

0800b058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b058:	b480      	push	{r7}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a1b      	ldr	r3, [r3, #32]
 800b06c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	021b      	lsls	r3, r3, #8
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	4313      	orrs	r3, r2
 800b09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	031b      	lsls	r3, r3, #12
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a12      	ldr	r2, [pc, #72]	; (800b0fc <TIM_OC4_SetConfig+0xa4>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d003      	beq.n	800b0c0 <TIM_OC4_SetConfig+0x68>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a11      	ldr	r2, [pc, #68]	; (800b100 <TIM_OC4_SetConfig+0xa8>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d109      	bne.n	800b0d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	019b      	lsls	r3, r3, #6
 800b0ce:	697a      	ldr	r2, [r7, #20]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	685a      	ldr	r2, [r3, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	621a      	str	r2, [r3, #32]
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	40010000 	.word	0x40010000
 800b100:	40010400 	.word	0x40010400

0800b104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b104:	b480      	push	{r7}
 800b106:	b087      	sub	sp, #28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6a1b      	ldr	r3, [r3, #32]
 800b114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	f023 0201 	bic.w	r2, r3, #1
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	699b      	ldr	r3, [r3, #24]
 800b126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b12e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	011b      	lsls	r3, r3, #4
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	4313      	orrs	r3, r2
 800b138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	f023 030a 	bic.w	r3, r3, #10
 800b140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	4313      	orrs	r3, r2
 800b148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	621a      	str	r2, [r3, #32]
}
 800b156:	bf00      	nop
 800b158:	371c      	adds	r7, #28
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b162:	b480      	push	{r7}
 800b164:	b087      	sub	sp, #28
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6a1b      	ldr	r3, [r3, #32]
 800b178:	f023 0210 	bic.w	r2, r3, #16
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b18c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	031b      	lsls	r3, r3, #12
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	4313      	orrs	r3, r2
 800b196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b19e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	011b      	lsls	r3, r3, #4
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	621a      	str	r2, [r3, #32]
}
 800b1b6:	bf00      	nop
 800b1b8:	371c      	adds	r7, #28
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b085      	sub	sp, #20
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	f043 0307 	orr.w	r3, r3, #7
 800b1e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	609a      	str	r2, [r3, #8]
}
 800b1ec:	bf00      	nop
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
 800b204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	021a      	lsls	r2, r3, #8
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	431a      	orrs	r2, r3
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	4313      	orrs	r3, r2
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	4313      	orrs	r3, r2
 800b224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	697a      	ldr	r2, [r7, #20]
 800b22a:	609a      	str	r2, [r3, #8]
}
 800b22c:	bf00      	nop
 800b22e:	371c      	adds	r7, #28
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b238:	b480      	push	{r7}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	f003 031f 	and.w	r3, r3, #31
 800b24a:	2201      	movs	r2, #1
 800b24c:	fa02 f303 	lsl.w	r3, r2, r3
 800b250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6a1a      	ldr	r2, [r3, #32]
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	43db      	mvns	r3, r3
 800b25a:	401a      	ands	r2, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6a1a      	ldr	r2, [r3, #32]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	f003 031f 	and.w	r3, r3, #31
 800b26a:	6879      	ldr	r1, [r7, #4]
 800b26c:	fa01 f303 	lsl.w	r3, r1, r3
 800b270:	431a      	orrs	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	621a      	str	r2, [r3, #32]
}
 800b276:	bf00      	nop
 800b278:	371c      	adds	r7, #28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
	...

0800b284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b294:	2b01      	cmp	r3, #1
 800b296:	d101      	bne.n	800b29c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b298:	2302      	movs	r3, #2
 800b29a:	e05a      	b.n	800b352 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a21      	ldr	r2, [pc, #132]	; (800b360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d022      	beq.n	800b326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2e8:	d01d      	beq.n	800b326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a1d      	ldr	r2, [pc, #116]	; (800b364 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d018      	beq.n	800b326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a1b      	ldr	r2, [pc, #108]	; (800b368 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d013      	beq.n	800b326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a1a      	ldr	r2, [pc, #104]	; (800b36c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d00e      	beq.n	800b326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a18      	ldr	r2, [pc, #96]	; (800b370 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d009      	beq.n	800b326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a17      	ldr	r2, [pc, #92]	; (800b374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d004      	beq.n	800b326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a15      	ldr	r2, [pc, #84]	; (800b378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d10c      	bne.n	800b340 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b32c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	4313      	orrs	r3, r2
 800b336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	40010000 	.word	0x40010000
 800b364:	40000400 	.word	0x40000400
 800b368:	40000800 	.word	0x40000800
 800b36c:	40000c00 	.word	0x40000c00
 800b370:	40010400 	.word	0x40010400
 800b374:	40014000 	.word	0x40014000
 800b378:	40001800 	.word	0x40001800

0800b37c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e042      	b.n	800b43c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d106      	bne.n	800b3d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7fb ff0a 	bl	80071e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2224      	movs	r2, #36	; 0x24
 800b3d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68da      	ldr	r2, [r3, #12]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 ff37 	bl	800c25c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	691a      	ldr	r2, [r3, #16]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	695a      	ldr	r2, [r3, #20]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b40c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68da      	ldr	r2, [r3, #12]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b41c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2220      	movs	r2, #32
 800b428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2220      	movs	r2, #32
 800b430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08c      	sub	sp, #48	; 0x30
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b20      	cmp	r3, #32
 800b45c:	d156      	bne.n	800b50c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <HAL_UART_Transmit_DMA+0x26>
 800b464:	88fb      	ldrh	r3, [r7, #6]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d101      	bne.n	800b46e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e04f      	b.n	800b50e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	88fa      	ldrh	r2, [r7, #6]
 800b478:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	88fa      	ldrh	r2, [r7, #6]
 800b47e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2221      	movs	r2, #33	; 0x21
 800b48a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b492:	4a21      	ldr	r2, [pc, #132]	; (800b518 <HAL_UART_Transmit_DMA+0xd4>)
 800b494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b49a:	4a20      	ldr	r2, [pc, #128]	; (800b51c <HAL_UART_Transmit_DMA+0xd8>)
 800b49c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a2:	4a1f      	ldr	r2, [pc, #124]	; (800b520 <HAL_UART_Transmit_DMA+0xdc>)
 800b4a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b4ae:	f107 0308 	add.w	r3, r7, #8
 800b4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ba:	6819      	ldr	r1, [r3, #0]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	88fb      	ldrh	r3, [r7, #6]
 800b4c6:	f7fc fb23 	bl	8007b10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	3314      	adds	r3, #20
 800b4da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	e853 3f00 	ldrex	r3, [r3]
 800b4e2:	617b      	str	r3, [r7, #20]
   return(result);
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3314      	adds	r3, #20
 800b4f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4f4:	627a      	str	r2, [r7, #36]	; 0x24
 800b4f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f8:	6a39      	ldr	r1, [r7, #32]
 800b4fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fc:	e841 2300 	strex	r3, r2, [r1]
 800b500:	61fb      	str	r3, [r7, #28]
   return(result);
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1e5      	bne.n	800b4d4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800b508:	2300      	movs	r3, #0
 800b50a:	e000      	b.n	800b50e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800b50c:	2302      	movs	r3, #2
  }
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3730      	adds	r7, #48	; 0x30
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	0800bae9 	.word	0x0800bae9
 800b51c:	0800bb83 	.word	0x0800bb83
 800b520:	0800bd07 	.word	0x0800bd07

0800b524 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	4613      	mov	r3, r2
 800b530:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b20      	cmp	r3, #32
 800b53c:	d112      	bne.n	800b564 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <HAL_UART_Receive_DMA+0x26>
 800b544:	88fb      	ldrh	r3, [r7, #6]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e00b      	b.n	800b566 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b554:	88fb      	ldrh	r3, [r7, #6]
 800b556:	461a      	mov	r2, r3
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 fc1e 	bl	800bd9c <UART_Start_Receive_DMA>
 800b560:	4603      	mov	r3, r0
 800b562:	e000      	b.n	800b566 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b564:	2302      	movs	r3, #2
  }
}
 800b566:	4618      	mov	r0, r3
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
	...

0800b570 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b0ba      	sub	sp, #232	; 0xe8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	695b      	ldr	r3, [r3, #20]
 800b592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b596:	2300      	movs	r3, #0
 800b598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5a6:	f003 030f 	and.w	r3, r3, #15
 800b5aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b5ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10f      	bne.n	800b5d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ba:	f003 0320 	and.w	r3, r3, #32
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d009      	beq.n	800b5d6 <HAL_UART_IRQHandler+0x66>
 800b5c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5c6:	f003 0320 	and.w	r3, r3, #32
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fd85 	bl	800c0de <UART_Receive_IT>
      return;
 800b5d4:	e25b      	b.n	800ba8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b5d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f000 80de 	beq.w	800b79c <HAL_UART_IRQHandler+0x22c>
 800b5e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 80d1 	beq.w	800b79c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00b      	beq.n	800b61e <HAL_UART_IRQHandler+0xae>
 800b606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d005      	beq.n	800b61e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b616:	f043 0201 	orr.w	r2, r3, #1
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b622:	f003 0304 	and.w	r3, r3, #4
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00b      	beq.n	800b642 <HAL_UART_IRQHandler+0xd2>
 800b62a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b00      	cmp	r3, #0
 800b634:	d005      	beq.n	800b642 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b63a:	f043 0202 	orr.w	r2, r3, #2
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b646:	f003 0302 	and.w	r3, r3, #2
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <HAL_UART_IRQHandler+0xf6>
 800b64e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	2b00      	cmp	r3, #0
 800b658:	d005      	beq.n	800b666 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b65e:	f043 0204 	orr.w	r2, r3, #4
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b66a:	f003 0308 	and.w	r3, r3, #8
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d011      	beq.n	800b696 <HAL_UART_IRQHandler+0x126>
 800b672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b676:	f003 0320 	and.w	r3, r3, #32
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d105      	bne.n	800b68a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b67e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d005      	beq.n	800b696 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b68e:	f043 0208 	orr.w	r2, r3, #8
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 81f2 	beq.w	800ba84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a4:	f003 0320 	and.w	r3, r3, #32
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d008      	beq.n	800b6be <HAL_UART_IRQHandler+0x14e>
 800b6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6b0:	f003 0320 	and.w	r3, r3, #32
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fd10 	bl	800c0de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c8:	2b40      	cmp	r3, #64	; 0x40
 800b6ca:	bf0c      	ite	eq
 800b6cc:	2301      	moveq	r3, #1
 800b6ce:	2300      	movne	r3, #0
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6da:	f003 0308 	and.w	r3, r3, #8
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d103      	bne.n	800b6ea <HAL_UART_IRQHandler+0x17a>
 800b6e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d04f      	beq.n	800b78a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fc18 	bl	800bf20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6fa:	2b40      	cmp	r3, #64	; 0x40
 800b6fc:	d141      	bne.n	800b782 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3314      	adds	r3, #20
 800b704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b70c:	e853 3f00 	ldrex	r3, [r3]
 800b710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b71c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3314      	adds	r3, #20
 800b726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b72a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b72e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b73a:	e841 2300 	strex	r3, r2, [r1]
 800b73e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1d9      	bne.n	800b6fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d013      	beq.n	800b77a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b756:	4a7e      	ldr	r2, [pc, #504]	; (800b950 <HAL_UART_IRQHandler+0x3e0>)
 800b758:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fc fa9e 	bl	8007ca0 <HAL_DMA_Abort_IT>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d016      	beq.n	800b798 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b774:	4610      	mov	r0, r2
 800b776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b778:	e00e      	b.n	800b798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f99e 	bl	800babc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b780:	e00a      	b.n	800b798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f99a 	bl	800babc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b788:	e006      	b.n	800b798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f996 	bl	800babc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b796:	e175      	b.n	800ba84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b798:	bf00      	nop
    return;
 800b79a:	e173      	b.n	800ba84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	f040 814f 	bne.w	800ba44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7aa:	f003 0310 	and.w	r3, r3, #16
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 8148 	beq.w	800ba44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7b8:	f003 0310 	and.w	r3, r3, #16
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 8141 	beq.w	800ba44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60bb      	str	r3, [r7, #8]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	60bb      	str	r3, [r7, #8]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	60bb      	str	r3, [r7, #8]
 800b7d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e2:	2b40      	cmp	r3, #64	; 0x40
 800b7e4:	f040 80b6 	bne.w	800b954 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 8145 	beq.w	800ba88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b806:	429a      	cmp	r2, r3
 800b808:	f080 813e 	bcs.w	800ba88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b812:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b818:	69db      	ldr	r3, [r3, #28]
 800b81a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b81e:	f000 8088 	beq.w	800b932 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	330c      	adds	r3, #12
 800b828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b830:	e853 3f00 	ldrex	r3, [r3]
 800b834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b83c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	330c      	adds	r3, #12
 800b84a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b84e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b85a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b85e:	e841 2300 	strex	r3, r2, [r1]
 800b862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1d9      	bne.n	800b822 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3314      	adds	r3, #20
 800b874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b87e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b880:	f023 0301 	bic.w	r3, r3, #1
 800b884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3314      	adds	r3, #20
 800b88e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b89a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e1      	bne.n	800b86e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3314      	adds	r3, #20
 800b8b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3314      	adds	r3, #20
 800b8ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b8d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e3      	bne.n	800b8aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2220      	movs	r2, #32
 800b8e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	330c      	adds	r3, #12
 800b8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8fa:	e853 3f00 	ldrex	r3, [r3]
 800b8fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b902:	f023 0310 	bic.w	r3, r3, #16
 800b906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	330c      	adds	r3, #12
 800b910:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b914:	65ba      	str	r2, [r7, #88]	; 0x58
 800b916:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b91a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b91c:	e841 2300 	strex	r3, r2, [r1]
 800b920:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1e3      	bne.n	800b8f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fc f947 	bl	8007bc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2202      	movs	r2, #2
 800b936:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b940:	b29b      	uxth	r3, r3
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	b29b      	uxth	r3, r3
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f8c1 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b94e:	e09b      	b.n	800ba88 <HAL_UART_IRQHandler+0x518>
 800b950:	0800bfe7 	.word	0x0800bfe7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b968:	b29b      	uxth	r3, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 808e 	beq.w	800ba8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 8089 	beq.w	800ba8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	330c      	adds	r3, #12
 800b980:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b98c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b990:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	330c      	adds	r3, #12
 800b99a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b99e:	647a      	str	r2, [r7, #68]	; 0x44
 800b9a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9a6:	e841 2300 	strex	r3, r2, [r1]
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1e3      	bne.n	800b97a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	3314      	adds	r3, #20
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9bc:	e853 3f00 	ldrex	r3, [r3]
 800b9c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	f023 0301 	bic.w	r3, r3, #1
 800b9c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3314      	adds	r3, #20
 800b9d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9d6:	633a      	str	r2, [r7, #48]	; 0x30
 800b9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9de:	e841 2300 	strex	r3, r2, [r1]
 800b9e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1e3      	bne.n	800b9b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2220      	movs	r2, #32
 800b9ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	330c      	adds	r3, #12
 800b9fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	e853 3f00 	ldrex	r3, [r3]
 800ba06:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f023 0310 	bic.w	r3, r3, #16
 800ba0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	330c      	adds	r3, #12
 800ba18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba1c:	61fa      	str	r2, [r7, #28]
 800ba1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	69b9      	ldr	r1, [r7, #24]
 800ba22:	69fa      	ldr	r2, [r7, #28]
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	617b      	str	r3, [r7, #20]
   return(result);
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e3      	bne.n	800b9f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2202      	movs	r2, #2
 800ba34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f847 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba42:	e023      	b.n	800ba8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ba44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d009      	beq.n	800ba64 <HAL_UART_IRQHandler+0x4f4>
 800ba50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d003      	beq.n	800ba64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fad6 	bl	800c00e <UART_Transmit_IT>
    return;
 800ba62:	e014      	b.n	800ba8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00e      	beq.n	800ba8e <HAL_UART_IRQHandler+0x51e>
 800ba70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d008      	beq.n	800ba8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fb16 	bl	800c0ae <UART_EndTransmit_IT>
    return;
 800ba82:	e004      	b.n	800ba8e <HAL_UART_IRQHandler+0x51e>
    return;
 800ba84:	bf00      	nop
 800ba86:	e002      	b.n	800ba8e <HAL_UART_IRQHandler+0x51e>
      return;
 800ba88:	bf00      	nop
 800ba8a:	e000      	b.n	800ba8e <HAL_UART_IRQHandler+0x51e>
      return;
 800ba8c:	bf00      	nop
  }
}
 800ba8e:	37e8      	adds	r7, #232	; 0xe8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b090      	sub	sp, #64	; 0x40
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d137      	bne.n	800bb74 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bb04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb06:	2200      	movs	r2, #0
 800bb08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3314      	adds	r3, #20
 800bb10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	e853 3f00 	ldrex	r3, [r3]
 800bb18:	623b      	str	r3, [r7, #32]
   return(result);
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb20:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3314      	adds	r3, #20
 800bb28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb2a:	633a      	str	r2, [r7, #48]	; 0x30
 800bb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb32:	e841 2300 	strex	r3, r2, [r1]
 800bb36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1e5      	bne.n	800bb0a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	330c      	adds	r3, #12
 800bb44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	e853 3f00 	ldrex	r3, [r3]
 800bb4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb54:	637b      	str	r3, [r7, #52]	; 0x34
 800bb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	330c      	adds	r3, #12
 800bb5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb5e:	61fa      	str	r2, [r7, #28]
 800bb60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb62:	69b9      	ldr	r1, [r7, #24]
 800bb64:	69fa      	ldr	r2, [r7, #28]
 800bb66:	e841 2300 	strex	r3, r2, [r1]
 800bb6a:	617b      	str	r3, [r7, #20]
   return(result);
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1e5      	bne.n	800bb3e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb72:	e002      	b.n	800bb7a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bb74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bb76:	f7fa faf7 	bl	8006168 <HAL_UART_TxCpltCallback>
}
 800bb7a:	bf00      	nop
 800bb7c:	3740      	adds	r7, #64	; 0x40
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b084      	sub	sp, #16
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f7ff ff7f 	bl	800ba94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb96:	bf00      	nop
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b09c      	sub	sp, #112	; 0x70
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbaa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d172      	bne.n	800bca0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bbba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	330c      	adds	r3, #12
 800bbc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbca:	e853 3f00 	ldrex	r3, [r3]
 800bbce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bbd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbd6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	330c      	adds	r3, #12
 800bbde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbe0:	65ba      	str	r2, [r7, #88]	; 0x58
 800bbe2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bbe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbe8:	e841 2300 	strex	r3, r2, [r1]
 800bbec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bbee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1e5      	bne.n	800bbc0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	3314      	adds	r3, #20
 800bbfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	e853 3f00 	ldrex	r3, [r3]
 800bc02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc06:	f023 0301 	bic.w	r3, r3, #1
 800bc0a:	667b      	str	r3, [r7, #100]	; 0x64
 800bc0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3314      	adds	r3, #20
 800bc12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc14:	647a      	str	r2, [r7, #68]	; 0x44
 800bc16:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc1c:	e841 2300 	strex	r3, r2, [r1]
 800bc20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1e5      	bne.n	800bbf4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3314      	adds	r3, #20
 800bc2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc32:	e853 3f00 	ldrex	r3, [r3]
 800bc36:	623b      	str	r3, [r7, #32]
   return(result);
 800bc38:	6a3b      	ldr	r3, [r7, #32]
 800bc3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc3e:	663b      	str	r3, [r7, #96]	; 0x60
 800bc40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3314      	adds	r3, #20
 800bc46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc48:	633a      	str	r2, [r7, #48]	; 0x30
 800bc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc50:	e841 2300 	strex	r3, r2, [r1]
 800bc54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1e5      	bne.n	800bc28 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc5e:	2220      	movs	r2, #32
 800bc60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d119      	bne.n	800bca0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	330c      	adds	r3, #12
 800bc72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	e853 3f00 	ldrex	r3, [r3]
 800bc7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f023 0310 	bic.w	r3, r3, #16
 800bc82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	330c      	adds	r3, #12
 800bc8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc8c:	61fa      	str	r2, [r7, #28]
 800bc8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc90:	69b9      	ldr	r1, [r7, #24]
 800bc92:	69fa      	ldr	r2, [r7, #28]
 800bc94:	e841 2300 	strex	r3, r2, [r1]
 800bc98:	617b      	str	r3, [r7, #20]
   return(result);
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1e5      	bne.n	800bc6c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bca2:	2200      	movs	r2, #0
 800bca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d106      	bne.n	800bcbc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bcb6:	f7ff ff0b 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcba:	e002      	b.n	800bcc2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bcbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bcbe:	f7fa fa6b 	bl	8006198 <HAL_UART_RxCpltCallback>
}
 800bcc2:	bf00      	nop
 800bcc4:	3770      	adds	r7, #112	; 0x70
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b084      	sub	sp, #16
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d108      	bne.n	800bcf8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcea:	085b      	lsrs	r3, r3, #1
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	4619      	mov	r1, r3
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f7ff feed 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcf6:	e002      	b.n	800bcfe <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f7ff fed5 	bl	800baa8 <HAL_UART_RxHalfCpltCallback>
}
 800bcfe:	bf00      	nop
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b084      	sub	sp, #16
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd22:	2b80      	cmp	r3, #128	; 0x80
 800bd24:	bf0c      	ite	eq
 800bd26:	2301      	moveq	r3, #1
 800bd28:	2300      	movne	r3, #0
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b21      	cmp	r3, #33	; 0x21
 800bd38:	d108      	bne.n	800bd4c <UART_DMAError+0x46>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d005      	beq.n	800bd4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	2200      	movs	r2, #0
 800bd44:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bd46:	68b8      	ldr	r0, [r7, #8]
 800bd48:	f000 f8c2 	bl	800bed0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd56:	2b40      	cmp	r3, #64	; 0x40
 800bd58:	bf0c      	ite	eq
 800bd5a:	2301      	moveq	r3, #1
 800bd5c:	2300      	movne	r3, #0
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b22      	cmp	r3, #34	; 0x22
 800bd6c:	d108      	bne.n	800bd80 <UART_DMAError+0x7a>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d005      	beq.n	800bd80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	2200      	movs	r2, #0
 800bd78:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bd7a:	68b8      	ldr	r0, [r7, #8]
 800bd7c:	f000 f8d0 	bl	800bf20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd84:	f043 0210 	orr.w	r2, r3, #16
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd8c:	68b8      	ldr	r0, [r7, #8]
 800bd8e:	f7ff fe95 	bl	800babc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b098      	sub	sp, #96	; 0x60
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	4613      	mov	r3, r2
 800bda8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	88fa      	ldrh	r2, [r7, #6]
 800bdb4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2222      	movs	r2, #34	; 0x22
 800bdc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc8:	4a3e      	ldr	r2, [pc, #248]	; (800bec4 <UART_Start_Receive_DMA+0x128>)
 800bdca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdd0:	4a3d      	ldr	r2, [pc, #244]	; (800bec8 <UART_Start_Receive_DMA+0x12c>)
 800bdd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdd8:	4a3c      	ldr	r2, [pc, #240]	; (800becc <UART_Start_Receive_DMA+0x130>)
 800bdda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde0:	2200      	movs	r2, #0
 800bde2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bde4:	f107 0308 	add.w	r3, r7, #8
 800bde8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	88fb      	ldrh	r3, [r7, #6]
 800bdfc:	f7fb fe88 	bl	8007b10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800be00:	2300      	movs	r3, #0
 800be02:	613b      	str	r3, [r7, #16]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	613b      	str	r3, [r7, #16]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	613b      	str	r3, [r7, #16]
 800be14:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d019      	beq.n	800be52 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	330c      	adds	r3, #12
 800be24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be28:	e853 3f00 	ldrex	r3, [r3]
 800be2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be34:	65bb      	str	r3, [r7, #88]	; 0x58
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	330c      	adds	r3, #12
 800be3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800be40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800be44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be46:	e841 2300 	strex	r3, r2, [r1]
 800be4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800be4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1e5      	bne.n	800be1e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	3314      	adds	r3, #20
 800be58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5c:	e853 3f00 	ldrex	r3, [r3]
 800be60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be64:	f043 0301 	orr.w	r3, r3, #1
 800be68:	657b      	str	r3, [r7, #84]	; 0x54
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3314      	adds	r3, #20
 800be70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be72:	63ba      	str	r2, [r7, #56]	; 0x38
 800be74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800be78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be7a:	e841 2300 	strex	r3, r2, [r1]
 800be7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1e5      	bne.n	800be52 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	3314      	adds	r3, #20
 800be8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	e853 3f00 	ldrex	r3, [r3]
 800be94:	617b      	str	r3, [r7, #20]
   return(result);
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be9c:	653b      	str	r3, [r7, #80]	; 0x50
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	3314      	adds	r3, #20
 800bea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bea6:	627a      	str	r2, [r7, #36]	; 0x24
 800bea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	6a39      	ldr	r1, [r7, #32]
 800beac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beae:	e841 2300 	strex	r3, r2, [r1]
 800beb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1e5      	bne.n	800be86 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3760      	adds	r7, #96	; 0x60
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	0800bb9f 	.word	0x0800bb9f
 800bec8:	0800bccb 	.word	0x0800bccb
 800becc:	0800bd07 	.word	0x0800bd07

0800bed0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b089      	sub	sp, #36	; 0x24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	330c      	adds	r3, #12
 800bede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	e853 3f00 	ldrex	r3, [r3]
 800bee6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800beee:	61fb      	str	r3, [r7, #28]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	330c      	adds	r3, #12
 800bef6:	69fa      	ldr	r2, [r7, #28]
 800bef8:	61ba      	str	r2, [r7, #24]
 800befa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befc:	6979      	ldr	r1, [r7, #20]
 800befe:	69ba      	ldr	r2, [r7, #24]
 800bf00:	e841 2300 	strex	r3, r2, [r1]
 800bf04:	613b      	str	r3, [r7, #16]
   return(result);
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1e5      	bne.n	800bed8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2220      	movs	r2, #32
 800bf10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800bf14:	bf00      	nop
 800bf16:	3724      	adds	r7, #36	; 0x24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b095      	sub	sp, #84	; 0x54
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	330c      	adds	r3, #12
 800bf2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf32:	e853 3f00 	ldrex	r3, [r3]
 800bf36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	330c      	adds	r3, #12
 800bf46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf48:	643a      	str	r2, [r7, #64]	; 0x40
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf50:	e841 2300 	strex	r3, r2, [r1]
 800bf54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1e5      	bne.n	800bf28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3314      	adds	r3, #20
 800bf62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	e853 3f00 	ldrex	r3, [r3]
 800bf6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	f023 0301 	bic.w	r3, r3, #1
 800bf72:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3314      	adds	r3, #20
 800bf7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf84:	e841 2300 	strex	r3, r2, [r1]
 800bf88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1e5      	bne.n	800bf5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d119      	bne.n	800bfcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	330c      	adds	r3, #12
 800bf9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	e853 3f00 	ldrex	r3, [r3]
 800bfa6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	f023 0310 	bic.w	r3, r3, #16
 800bfae:	647b      	str	r3, [r7, #68]	; 0x44
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	330c      	adds	r3, #12
 800bfb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfb8:	61ba      	str	r2, [r7, #24]
 800bfba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbc:	6979      	ldr	r1, [r7, #20]
 800bfbe:	69ba      	ldr	r2, [r7, #24]
 800bfc0:	e841 2300 	strex	r3, r2, [r1]
 800bfc4:	613b      	str	r3, [r7, #16]
   return(result);
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1e5      	bne.n	800bf98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bfda:	bf00      	nop
 800bfdc:	3754      	adds	r7, #84	; 0x54
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f7ff fd5b 	bl	800babc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c006:	bf00      	nop
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c00e:	b480      	push	{r7}
 800c010:	b085      	sub	sp, #20
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b21      	cmp	r3, #33	; 0x21
 800c020:	d13e      	bne.n	800c0a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c02a:	d114      	bne.n	800c056 <UART_Transmit_IT+0x48>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d110      	bne.n	800c056 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a1b      	ldr	r3, [r3, #32]
 800c038:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	881b      	ldrh	r3, [r3, #0]
 800c03e:	461a      	mov	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c048:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	1c9a      	adds	r2, r3, #2
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	621a      	str	r2, [r3, #32]
 800c054:	e008      	b.n	800c068 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	1c59      	adds	r1, r3, #1
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	6211      	str	r1, [r2, #32]
 800c060:	781a      	ldrb	r2, [r3, #0]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	3b01      	subs	r3, #1
 800c070:	b29b      	uxth	r3, r3
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	4619      	mov	r1, r3
 800c076:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10f      	bne.n	800c09c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68da      	ldr	r2, [r3, #12]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c08a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68da      	ldr	r2, [r3, #12]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c09a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	e000      	b.n	800c0a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0a0:	2302      	movs	r3, #2
  }
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b082      	sub	sp, #8
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68da      	ldr	r2, [r3, #12]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2220      	movs	r2, #32
 800c0ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7fa f84a 	bl	8006168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b08c      	sub	sp, #48	; 0x30
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	2b22      	cmp	r3, #34	; 0x22
 800c0f0:	f040 80ae 	bne.w	800c250 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fc:	d117      	bne.n	800c12e <UART_Receive_IT+0x50>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d113      	bne.n	800c12e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c106:	2300      	movs	r3, #0
 800c108:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	b29b      	uxth	r3, r3
 800c118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c120:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c126:	1c9a      	adds	r2, r3, #2
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	629a      	str	r2, [r3, #40]	; 0x28
 800c12c:	e026      	b.n	800c17c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c132:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c134:	2300      	movs	r3, #0
 800c136:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c140:	d007      	beq.n	800c152 <UART_Receive_IT+0x74>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10a      	bne.n	800c160 <UART_Receive_IT+0x82>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d106      	bne.n	800c160 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15c:	701a      	strb	r2, [r3, #0]
 800c15e:	e008      	b.n	800c172 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	b2db      	uxtb	r3, r3
 800c168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c170:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c180:	b29b      	uxth	r3, r3
 800c182:	3b01      	subs	r3, #1
 800c184:	b29b      	uxth	r3, r3
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	4619      	mov	r1, r3
 800c18a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d15d      	bne.n	800c24c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	68da      	ldr	r2, [r3, #12]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f022 0220 	bic.w	r2, r2, #32
 800c19e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68da      	ldr	r2, [r3, #12]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	695a      	ldr	r2, [r3, #20]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f022 0201 	bic.w	r2, r2, #1
 800c1be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2220      	movs	r2, #32
 800c1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d135      	bne.n	800c242 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	330c      	adds	r3, #12
 800c1e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	e853 3f00 	ldrex	r3, [r3]
 800c1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	f023 0310 	bic.w	r3, r3, #16
 800c1f2:	627b      	str	r3, [r7, #36]	; 0x24
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	330c      	adds	r3, #12
 800c1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1fc:	623a      	str	r2, [r7, #32]
 800c1fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c200:	69f9      	ldr	r1, [r7, #28]
 800c202:	6a3a      	ldr	r2, [r7, #32]
 800c204:	e841 2300 	strex	r3, r2, [r1]
 800c208:	61bb      	str	r3, [r7, #24]
   return(result);
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1e5      	bne.n	800c1dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f003 0310 	and.w	r3, r3, #16
 800c21a:	2b10      	cmp	r3, #16
 800c21c:	d10a      	bne.n	800c234 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c21e:	2300      	movs	r3, #0
 800c220:	60fb      	str	r3, [r7, #12]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff fc48 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
 800c240:	e002      	b.n	800c248 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7f9 ffa8 	bl	8006198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c248:	2300      	movs	r3, #0
 800c24a:	e002      	b.n	800c252 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	e000      	b.n	800c252 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c250:	2302      	movs	r3, #2
  }
}
 800c252:	4618      	mov	r0, r3
 800c254:	3730      	adds	r7, #48	; 0x30
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
	...

0800c25c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c25c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c260:	b0c0      	sub	sp, #256	; 0x100
 800c262:	af00      	add	r7, sp, #0
 800c264:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c278:	68d9      	ldr	r1, [r3, #12]
 800c27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	ea40 0301 	orr.w	r3, r0, r1
 800c284:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c28a:	689a      	ldr	r2, [r3, #8]
 800c28c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	431a      	orrs	r2, r3
 800c294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	431a      	orrs	r2, r3
 800c29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2a0:	69db      	ldr	r3, [r3, #28]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c2b4:	f021 010c 	bic.w	r1, r1, #12
 800c2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c2c2:	430b      	orrs	r3, r1
 800c2c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	695b      	ldr	r3, [r3, #20]
 800c2ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2d6:	6999      	ldr	r1, [r3, #24]
 800c2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	ea40 0301 	orr.w	r3, r0, r1
 800c2e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	4b8f      	ldr	r3, [pc, #572]	; (800c528 <UART_SetConfig+0x2cc>)
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d005      	beq.n	800c2fc <UART_SetConfig+0xa0>
 800c2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	4b8d      	ldr	r3, [pc, #564]	; (800c52c <UART_SetConfig+0x2d0>)
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d104      	bne.n	800c306 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c2fc:	f7fd fee4 	bl	800a0c8 <HAL_RCC_GetPCLK2Freq>
 800c300:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c304:	e003      	b.n	800c30e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c306:	f7fd fecb 	bl	800a0a0 <HAL_RCC_GetPCLK1Freq>
 800c30a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c30e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c312:	69db      	ldr	r3, [r3, #28]
 800c314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c318:	f040 810c 	bne.w	800c534 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c31c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c320:	2200      	movs	r2, #0
 800c322:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c326:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c32a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c32e:	4622      	mov	r2, r4
 800c330:	462b      	mov	r3, r5
 800c332:	1891      	adds	r1, r2, r2
 800c334:	65b9      	str	r1, [r7, #88]	; 0x58
 800c336:	415b      	adcs	r3, r3
 800c338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c33a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c33e:	4621      	mov	r1, r4
 800c340:	eb12 0801 	adds.w	r8, r2, r1
 800c344:	4629      	mov	r1, r5
 800c346:	eb43 0901 	adc.w	r9, r3, r1
 800c34a:	f04f 0200 	mov.w	r2, #0
 800c34e:	f04f 0300 	mov.w	r3, #0
 800c352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c35a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c35e:	4690      	mov	r8, r2
 800c360:	4699      	mov	r9, r3
 800c362:	4623      	mov	r3, r4
 800c364:	eb18 0303 	adds.w	r3, r8, r3
 800c368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c36c:	462b      	mov	r3, r5
 800c36e:	eb49 0303 	adc.w	r3, r9, r3
 800c372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c382:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c386:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c38a:	460b      	mov	r3, r1
 800c38c:	18db      	adds	r3, r3, r3
 800c38e:	653b      	str	r3, [r7, #80]	; 0x50
 800c390:	4613      	mov	r3, r2
 800c392:	eb42 0303 	adc.w	r3, r2, r3
 800c396:	657b      	str	r3, [r7, #84]	; 0x54
 800c398:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c39c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c3a0:	f7f4 fc52 	bl	8000c48 <__aeabi_uldivmod>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4b61      	ldr	r3, [pc, #388]	; (800c530 <UART_SetConfig+0x2d4>)
 800c3aa:	fba3 2302 	umull	r2, r3, r3, r2
 800c3ae:	095b      	lsrs	r3, r3, #5
 800c3b0:	011c      	lsls	r4, r3, #4
 800c3b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c3bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c3c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c3c4:	4642      	mov	r2, r8
 800c3c6:	464b      	mov	r3, r9
 800c3c8:	1891      	adds	r1, r2, r2
 800c3ca:	64b9      	str	r1, [r7, #72]	; 0x48
 800c3cc:	415b      	adcs	r3, r3
 800c3ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3d4:	4641      	mov	r1, r8
 800c3d6:	eb12 0a01 	adds.w	sl, r2, r1
 800c3da:	4649      	mov	r1, r9
 800c3dc:	eb43 0b01 	adc.w	fp, r3, r1
 800c3e0:	f04f 0200 	mov.w	r2, #0
 800c3e4:	f04f 0300 	mov.w	r3, #0
 800c3e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c3ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c3f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c3f4:	4692      	mov	sl, r2
 800c3f6:	469b      	mov	fp, r3
 800c3f8:	4643      	mov	r3, r8
 800c3fa:	eb1a 0303 	adds.w	r3, sl, r3
 800c3fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c402:	464b      	mov	r3, r9
 800c404:	eb4b 0303 	adc.w	r3, fp, r3
 800c408:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c418:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c41c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c420:	460b      	mov	r3, r1
 800c422:	18db      	adds	r3, r3, r3
 800c424:	643b      	str	r3, [r7, #64]	; 0x40
 800c426:	4613      	mov	r3, r2
 800c428:	eb42 0303 	adc.w	r3, r2, r3
 800c42c:	647b      	str	r3, [r7, #68]	; 0x44
 800c42e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c432:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c436:	f7f4 fc07 	bl	8000c48 <__aeabi_uldivmod>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4611      	mov	r1, r2
 800c440:	4b3b      	ldr	r3, [pc, #236]	; (800c530 <UART_SetConfig+0x2d4>)
 800c442:	fba3 2301 	umull	r2, r3, r3, r1
 800c446:	095b      	lsrs	r3, r3, #5
 800c448:	2264      	movs	r2, #100	; 0x64
 800c44a:	fb02 f303 	mul.w	r3, r2, r3
 800c44e:	1acb      	subs	r3, r1, r3
 800c450:	00db      	lsls	r3, r3, #3
 800c452:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c456:	4b36      	ldr	r3, [pc, #216]	; (800c530 <UART_SetConfig+0x2d4>)
 800c458:	fba3 2302 	umull	r2, r3, r3, r2
 800c45c:	095b      	lsrs	r3, r3, #5
 800c45e:	005b      	lsls	r3, r3, #1
 800c460:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c464:	441c      	add	r4, r3
 800c466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c46a:	2200      	movs	r2, #0
 800c46c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c470:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c474:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c478:	4642      	mov	r2, r8
 800c47a:	464b      	mov	r3, r9
 800c47c:	1891      	adds	r1, r2, r2
 800c47e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c480:	415b      	adcs	r3, r3
 800c482:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c488:	4641      	mov	r1, r8
 800c48a:	1851      	adds	r1, r2, r1
 800c48c:	6339      	str	r1, [r7, #48]	; 0x30
 800c48e:	4649      	mov	r1, r9
 800c490:	414b      	adcs	r3, r1
 800c492:	637b      	str	r3, [r7, #52]	; 0x34
 800c494:	f04f 0200 	mov.w	r2, #0
 800c498:	f04f 0300 	mov.w	r3, #0
 800c49c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c4a0:	4659      	mov	r1, fp
 800c4a2:	00cb      	lsls	r3, r1, #3
 800c4a4:	4651      	mov	r1, sl
 800c4a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4aa:	4651      	mov	r1, sl
 800c4ac:	00ca      	lsls	r2, r1, #3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	4642      	mov	r2, r8
 800c4b6:	189b      	adds	r3, r3, r2
 800c4b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4bc:	464b      	mov	r3, r9
 800c4be:	460a      	mov	r2, r1
 800c4c0:	eb42 0303 	adc.w	r3, r2, r3
 800c4c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c4d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c4d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c4dc:	460b      	mov	r3, r1
 800c4de:	18db      	adds	r3, r3, r3
 800c4e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	eb42 0303 	adc.w	r3, r2, r3
 800c4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c4ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c4f2:	f7f4 fba9 	bl	8000c48 <__aeabi_uldivmod>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	4b0d      	ldr	r3, [pc, #52]	; (800c530 <UART_SetConfig+0x2d4>)
 800c4fc:	fba3 1302 	umull	r1, r3, r3, r2
 800c500:	095b      	lsrs	r3, r3, #5
 800c502:	2164      	movs	r1, #100	; 0x64
 800c504:	fb01 f303 	mul.w	r3, r1, r3
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	3332      	adds	r3, #50	; 0x32
 800c50e:	4a08      	ldr	r2, [pc, #32]	; (800c530 <UART_SetConfig+0x2d4>)
 800c510:	fba2 2303 	umull	r2, r3, r2, r3
 800c514:	095b      	lsrs	r3, r3, #5
 800c516:	f003 0207 	and.w	r2, r3, #7
 800c51a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4422      	add	r2, r4
 800c522:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c524:	e106      	b.n	800c734 <UART_SetConfig+0x4d8>
 800c526:	bf00      	nop
 800c528:	40011000 	.word	0x40011000
 800c52c:	40011400 	.word	0x40011400
 800c530:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c538:	2200      	movs	r2, #0
 800c53a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c53e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c542:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c546:	4642      	mov	r2, r8
 800c548:	464b      	mov	r3, r9
 800c54a:	1891      	adds	r1, r2, r2
 800c54c:	6239      	str	r1, [r7, #32]
 800c54e:	415b      	adcs	r3, r3
 800c550:	627b      	str	r3, [r7, #36]	; 0x24
 800c552:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c556:	4641      	mov	r1, r8
 800c558:	1854      	adds	r4, r2, r1
 800c55a:	4649      	mov	r1, r9
 800c55c:	eb43 0501 	adc.w	r5, r3, r1
 800c560:	f04f 0200 	mov.w	r2, #0
 800c564:	f04f 0300 	mov.w	r3, #0
 800c568:	00eb      	lsls	r3, r5, #3
 800c56a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c56e:	00e2      	lsls	r2, r4, #3
 800c570:	4614      	mov	r4, r2
 800c572:	461d      	mov	r5, r3
 800c574:	4643      	mov	r3, r8
 800c576:	18e3      	adds	r3, r4, r3
 800c578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c57c:	464b      	mov	r3, r9
 800c57e:	eb45 0303 	adc.w	r3, r5, r3
 800c582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c592:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c596:	f04f 0200 	mov.w	r2, #0
 800c59a:	f04f 0300 	mov.w	r3, #0
 800c59e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	008b      	lsls	r3, r1, #2
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	008a      	lsls	r2, r1, #2
 800c5b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c5b4:	f7f4 fb48 	bl	8000c48 <__aeabi_uldivmod>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4b60      	ldr	r3, [pc, #384]	; (800c740 <UART_SetConfig+0x4e4>)
 800c5be:	fba3 2302 	umull	r2, r3, r3, r2
 800c5c2:	095b      	lsrs	r3, r3, #5
 800c5c4:	011c      	lsls	r4, r3, #4
 800c5c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c5d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c5d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c5d8:	4642      	mov	r2, r8
 800c5da:	464b      	mov	r3, r9
 800c5dc:	1891      	adds	r1, r2, r2
 800c5de:	61b9      	str	r1, [r7, #24]
 800c5e0:	415b      	adcs	r3, r3
 800c5e2:	61fb      	str	r3, [r7, #28]
 800c5e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c5e8:	4641      	mov	r1, r8
 800c5ea:	1851      	adds	r1, r2, r1
 800c5ec:	6139      	str	r1, [r7, #16]
 800c5ee:	4649      	mov	r1, r9
 800c5f0:	414b      	adcs	r3, r1
 800c5f2:	617b      	str	r3, [r7, #20]
 800c5f4:	f04f 0200 	mov.w	r2, #0
 800c5f8:	f04f 0300 	mov.w	r3, #0
 800c5fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c600:	4659      	mov	r1, fp
 800c602:	00cb      	lsls	r3, r1, #3
 800c604:	4651      	mov	r1, sl
 800c606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c60a:	4651      	mov	r1, sl
 800c60c:	00ca      	lsls	r2, r1, #3
 800c60e:	4610      	mov	r0, r2
 800c610:	4619      	mov	r1, r3
 800c612:	4603      	mov	r3, r0
 800c614:	4642      	mov	r2, r8
 800c616:	189b      	adds	r3, r3, r2
 800c618:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c61c:	464b      	mov	r3, r9
 800c61e:	460a      	mov	r2, r1
 800c620:	eb42 0303 	adc.w	r3, r2, r3
 800c624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	67bb      	str	r3, [r7, #120]	; 0x78
 800c632:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c634:	f04f 0200 	mov.w	r2, #0
 800c638:	f04f 0300 	mov.w	r3, #0
 800c63c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c640:	4649      	mov	r1, r9
 800c642:	008b      	lsls	r3, r1, #2
 800c644:	4641      	mov	r1, r8
 800c646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c64a:	4641      	mov	r1, r8
 800c64c:	008a      	lsls	r2, r1, #2
 800c64e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c652:	f7f4 faf9 	bl	8000c48 <__aeabi_uldivmod>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4611      	mov	r1, r2
 800c65c:	4b38      	ldr	r3, [pc, #224]	; (800c740 <UART_SetConfig+0x4e4>)
 800c65e:	fba3 2301 	umull	r2, r3, r3, r1
 800c662:	095b      	lsrs	r3, r3, #5
 800c664:	2264      	movs	r2, #100	; 0x64
 800c666:	fb02 f303 	mul.w	r3, r2, r3
 800c66a:	1acb      	subs	r3, r1, r3
 800c66c:	011b      	lsls	r3, r3, #4
 800c66e:	3332      	adds	r3, #50	; 0x32
 800c670:	4a33      	ldr	r2, [pc, #204]	; (800c740 <UART_SetConfig+0x4e4>)
 800c672:	fba2 2303 	umull	r2, r3, r2, r3
 800c676:	095b      	lsrs	r3, r3, #5
 800c678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c67c:	441c      	add	r4, r3
 800c67e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c682:	2200      	movs	r2, #0
 800c684:	673b      	str	r3, [r7, #112]	; 0x70
 800c686:	677a      	str	r2, [r7, #116]	; 0x74
 800c688:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c68c:	4642      	mov	r2, r8
 800c68e:	464b      	mov	r3, r9
 800c690:	1891      	adds	r1, r2, r2
 800c692:	60b9      	str	r1, [r7, #8]
 800c694:	415b      	adcs	r3, r3
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c69c:	4641      	mov	r1, r8
 800c69e:	1851      	adds	r1, r2, r1
 800c6a0:	6039      	str	r1, [r7, #0]
 800c6a2:	4649      	mov	r1, r9
 800c6a4:	414b      	adcs	r3, r1
 800c6a6:	607b      	str	r3, [r7, #4]
 800c6a8:	f04f 0200 	mov.w	r2, #0
 800c6ac:	f04f 0300 	mov.w	r3, #0
 800c6b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c6b4:	4659      	mov	r1, fp
 800c6b6:	00cb      	lsls	r3, r1, #3
 800c6b8:	4651      	mov	r1, sl
 800c6ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c6be:	4651      	mov	r1, sl
 800c6c0:	00ca      	lsls	r2, r1, #3
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	4642      	mov	r2, r8
 800c6ca:	189b      	adds	r3, r3, r2
 800c6cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6ce:	464b      	mov	r3, r9
 800c6d0:	460a      	mov	r2, r1
 800c6d2:	eb42 0303 	adc.w	r3, r2, r3
 800c6d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	663b      	str	r3, [r7, #96]	; 0x60
 800c6e2:	667a      	str	r2, [r7, #100]	; 0x64
 800c6e4:	f04f 0200 	mov.w	r2, #0
 800c6e8:	f04f 0300 	mov.w	r3, #0
 800c6ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	008b      	lsls	r3, r1, #2
 800c6f4:	4641      	mov	r1, r8
 800c6f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c6fa:	4641      	mov	r1, r8
 800c6fc:	008a      	lsls	r2, r1, #2
 800c6fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c702:	f7f4 faa1 	bl	8000c48 <__aeabi_uldivmod>
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	4b0d      	ldr	r3, [pc, #52]	; (800c740 <UART_SetConfig+0x4e4>)
 800c70c:	fba3 1302 	umull	r1, r3, r3, r2
 800c710:	095b      	lsrs	r3, r3, #5
 800c712:	2164      	movs	r1, #100	; 0x64
 800c714:	fb01 f303 	mul.w	r3, r1, r3
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	011b      	lsls	r3, r3, #4
 800c71c:	3332      	adds	r3, #50	; 0x32
 800c71e:	4a08      	ldr	r2, [pc, #32]	; (800c740 <UART_SetConfig+0x4e4>)
 800c720:	fba2 2303 	umull	r2, r3, r2, r3
 800c724:	095b      	lsrs	r3, r3, #5
 800c726:	f003 020f 	and.w	r2, r3, #15
 800c72a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4422      	add	r2, r4
 800c732:	609a      	str	r2, [r3, #8]
}
 800c734:	bf00      	nop
 800c736:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c73a:	46bd      	mov	sp, r7
 800c73c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c740:	51eb851f 	.word	0x51eb851f

0800c744 <TM_GPIO_InitAlternate>:

	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af02      	add	r7, sp, #8
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	4608      	mov	r0, r1
 800c74e:	4611      	mov	r1, r2
 800c750:	461a      	mov	r2, r3
 800c752:	4603      	mov	r3, r0
 800c754:	807b      	strh	r3, [r7, #2]
 800c756:	460b      	mov	r3, r1
 800c758:	707b      	strb	r3, [r7, #1]
 800c75a:	4613      	mov	r3, r2
 800c75c:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 800c75e:	887b      	ldrh	r3, [r7, #2]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d03f      	beq.n	800c7e4 <TM_GPIO_InitAlternate+0xa0>
		return;
	}

	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f853 	bl	800c810 <TM_GPIO_INT_EnableClock>

	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800c76a:	2300      	movs	r3, #0
 800c76c:	60fb      	str	r3, [r7, #12]
 800c76e:	e02a      	b.n	800c7c6 <TM_GPIO_InitAlternate+0x82>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800c770:	887a      	ldrh	r2, [r7, #2]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	fa42 f303 	asr.w	r3, r2, r3
 800c778:	f003 0301 	and.w	r3, r3, #1
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d01e      	beq.n	800c7be <TM_GPIO_InitAlternate+0x7a>
			continue;
		}

		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	08da      	lsrs	r2, r3, #3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3208      	adds	r2, #8
 800c788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	f002 0207 	and.w	r2, r2, #7
 800c792:	0092      	lsls	r2, r2, #2
 800c794:	210f      	movs	r1, #15
 800c796:	fa01 f202 	lsl.w	r2, r1, r2
 800c79a:	43d2      	mvns	r2, r2
 800c79c:	4013      	ands	r3, r2
 800c79e:	7f39      	ldrb	r1, [r7, #28]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	f002 0207 	and.w	r2, r2, #7
 800c7a6:	0092      	lsls	r2, r2, #2
 800c7a8:	fa01 f202 	lsl.w	r2, r1, r2
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	08d2      	lsrs	r2, r2, #3
 800c7b2:	4319      	orrs	r1, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	3208      	adds	r2, #8
 800c7b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c7bc:	e000      	b.n	800c7c0 <TM_GPIO_InitAlternate+0x7c>
			continue;
 800c7be:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	60fb      	str	r3, [r7, #12]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b0f      	cmp	r3, #15
 800c7ca:	d9d1      	bls.n	800c770 <TM_GPIO_InitAlternate+0x2c>
	}

	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800c7cc:	787a      	ldrb	r2, [r7, #1]
 800c7ce:	8879      	ldrh	r1, [r7, #2]
 800c7d0:	7e3b      	ldrb	r3, [r7, #24]
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	783b      	ldrb	r3, [r7, #0]
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	4613      	mov	r3, r2
 800c7da:	2202      	movs	r2, #2
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f82f 	bl	800c840 <TM_GPIO_INT_Init>
 800c7e2:	e000      	b.n	800c7e6 <TM_GPIO_InitAlternate+0xa2>
		return;
 800c7e4:	bf00      	nop
}
 800c7e6:	3710      	adds	r7, #16
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <TM_GPIO_GetPortSource>:

	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 800c7fa:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800c7fe:	0a9b      	lsrs	r3, r3, #10
 800c800:	b29b      	uxth	r3, r3
}
 800c802:	4618      	mov	r0, r3
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
	...

0800c810 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7ff ffe7 	bl	800c7ec <TM_GPIO_GetPortSource>
 800c81e:	4603      	mov	r3, r0
 800c820:	461a      	mov	r2, r3
 800c822:	2301      	movs	r3, #1
 800c824:	fa03 f202 	lsl.w	r2, r3, r2
 800c828:	4b04      	ldr	r3, [pc, #16]	; (800c83c <TM_GPIO_INT_EnableClock+0x2c>)
 800c82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82c:	4611      	mov	r1, r2
 800c82e:	4a03      	ldr	r2, [pc, #12]	; (800c83c <TM_GPIO_INT_EnableClock+0x2c>)
 800c830:	430b      	orrs	r3, r1
 800c832:	6313      	str	r3, [r2, #48]	; 0x30
#endif
}
 800c834:	bf00      	nop
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	40023800 	.word	0x40023800

0800c840 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	4608      	mov	r0, r1
 800c84a:	4611      	mov	r1, r2
 800c84c:	461a      	mov	r2, r3
 800c84e:	4603      	mov	r3, r0
 800c850:	807b      	strh	r3, [r7, #2]
 800c852:	460b      	mov	r3, r1
 800c854:	707b      	strb	r3, [r7, #1]
 800c856:	4613      	mov	r3, r2
 800c858:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7ff ffc6 	bl	800c7ec <TM_GPIO_GetPortSource>
 800c860:	4603      	mov	r3, r0
 800c862:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif

	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800c864:	2300      	movs	r3, #0
 800c866:	73fb      	strb	r3, [r7, #15]
 800c868:	e067      	b.n	800c93a <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800c86a:	887a      	ldrh	r2, [r7, #2]
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
 800c86e:	fa42 f303 	asr.w	r3, r2, r3
 800c872:	f003 0301 	and.w	r3, r3, #1
 800c876:	2b00      	cmp	r3, #0
 800c878:	d05b      	beq.n	800c932 <TM_GPIO_INT_Init+0xf2>
			continue;
		}

		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800c87a:	7bbb      	ldrb	r3, [r7, #14]
 800c87c:	4a33      	ldr	r2, [pc, #204]	; (800c94c <TM_GPIO_INT_Init+0x10c>)
 800c87e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c882:	b21a      	sxth	r2, r3
 800c884:	7bfb      	ldrb	r3, [r7, #15]
 800c886:	2101      	movs	r1, #1
 800c888:	fa01 f303 	lsl.w	r3, r1, r3
 800c88c:	b21b      	sxth	r3, r3
 800c88e:	4313      	orrs	r3, r2
 800c890:	b21a      	sxth	r2, r3
 800c892:	7bbb      	ldrb	r3, [r7, #14]
 800c894:	b291      	uxth	r1, r2
 800c896:	4a2d      	ldr	r2, [pc, #180]	; (800c94c <TM_GPIO_INT_Init+0x10c>)
 800c898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	7bfa      	ldrb	r2, [r7, #15]
 800c8a2:	0052      	lsls	r2, r2, #1
 800c8a4:	2103      	movs	r1, #3
 800c8a6:	fa01 f202 	lsl.w	r2, r1, r2
 800c8aa:	43d2      	mvns	r2, r2
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	7e39      	ldrb	r1, [r7, #24]
 800c8b0:	7bfa      	ldrb	r2, [r7, #15]
 800c8b2:	0052      	lsls	r2, r2, #1
 800c8b4:	fa01 f202 	lsl.w	r2, r1, r2
 800c8b8:	431a      	orrs	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	60da      	str	r2, [r3, #12]

		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	2103      	movs	r1, #3
 800c8c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c8cc:	43db      	mvns	r3, r3
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	7879      	ldrb	r1, [r7, #1]
 800c8d2:	7bfa      	ldrb	r2, [r7, #15]
 800c8d4:	0052      	lsls	r2, r2, #1
 800c8d6:	fa01 f202 	lsl.w	r2, r1, r2
 800c8da:	431a      	orrs	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	601a      	str	r2, [r3, #0]

		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {
 800c8e0:	787b      	ldrb	r3, [r7, #1]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d002      	beq.n	800c8ec <TM_GPIO_INT_Init+0xac>
 800c8e6:	787b      	ldrb	r3, [r7, #1]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d123      	bne.n	800c934 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	7bfa      	ldrb	r2, [r7, #15]
 800c8f2:	2101      	movs	r1, #1
 800c8f4:	fa01 f202 	lsl.w	r2, r1, r2
 800c8f8:	b292      	uxth	r2, r2
 800c8fa:	43d2      	mvns	r2, r2
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	7839      	ldrb	r1, [r7, #0]
 800c900:	7bfa      	ldrb	r2, [r7, #15]
 800c902:	fa01 f202 	lsl.w	r2, r1, r2
 800c906:	b292      	uxth	r2, r2
 800c908:	431a      	orrs	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	605a      	str	r2, [r3, #4]

			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	689a      	ldr	r2, [r3, #8]
 800c912:	7bfb      	ldrb	r3, [r7, #15]
 800c914:	005b      	lsls	r3, r3, #1
 800c916:	2103      	movs	r1, #3
 800c918:	fa01 f303 	lsl.w	r3, r1, r3
 800c91c:	43db      	mvns	r3, r3
 800c91e:	4013      	ands	r3, r2
 800c920:	7f39      	ldrb	r1, [r7, #28]
 800c922:	7bfa      	ldrb	r2, [r7, #15]
 800c924:	0052      	lsls	r2, r2, #1
 800c926:	fa01 f202 	lsl.w	r2, r1, r2
 800c92a:	431a      	orrs	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	609a      	str	r2, [r3, #8]
 800c930:	e000      	b.n	800c934 <TM_GPIO_INT_Init+0xf4>
			continue;
 800c932:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800c934:	7bfb      	ldrb	r3, [r7, #15]
 800c936:	3301      	adds	r3, #1
 800c938:	73fb      	strb	r3, [r7, #15]
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
 800c93c:	2b0f      	cmp	r3, #15
 800c93e:	d994      	bls.n	800c86a <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	200012a0 	.word	0x200012a0

0800c950 <TM_I2C_GetHandle>:
#endif
#ifdef I2C4
static void TM_I2C4_INT_InitPins(TM_I2C_PinsPack_t pinspack);
#endif

I2C_HandleTypeDef* TM_I2C_GetHandle(I2C_TypeDef* I2Cx) {
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
#ifdef I2C1
	if (I2Cx == I2C1) {
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a0c      	ldr	r2, [pc, #48]	; (800c98c <TM_I2C_GetHandle+0x3c>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d101      	bne.n	800c964 <TM_I2C_GetHandle+0x14>
		return &I2C1Handle;
 800c960:	4b0b      	ldr	r3, [pc, #44]	; (800c990 <TM_I2C_GetHandle+0x40>)
 800c962:	e00c      	b.n	800c97e <TM_I2C_GetHandle+0x2e>
	}
#endif
#ifdef I2C2
	if (I2Cx == I2C2) {
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	4a0b      	ldr	r2, [pc, #44]	; (800c994 <TM_I2C_GetHandle+0x44>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d101      	bne.n	800c970 <TM_I2C_GetHandle+0x20>
		return &I2C2Handle;
 800c96c:	4b0a      	ldr	r3, [pc, #40]	; (800c998 <TM_I2C_GetHandle+0x48>)
 800c96e:	e006      	b.n	800c97e <TM_I2C_GetHandle+0x2e>
	}
#endif
#ifdef I2C3
	if (I2Cx == I2C3) {
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a0a      	ldr	r2, [pc, #40]	; (800c99c <TM_I2C_GetHandle+0x4c>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d101      	bne.n	800c97c <TM_I2C_GetHandle+0x2c>
		return &I2C3Handle;
 800c978:	4b09      	ldr	r3, [pc, #36]	; (800c9a0 <TM_I2C_GetHandle+0x50>)
 800c97a:	e000      	b.n	800c97e <TM_I2C_GetHandle+0x2e>
		return &I2C4Handle;
	}
#endif

	/* Return invalid */
	return 0;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	370c      	adds	r7, #12
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	40005400 	.word	0x40005400
 800c990:	2000003c 	.word	0x2000003c
 800c994:	40005800 	.word	0x40005800
 800c998:	20000090 	.word	0x20000090
 800c99c:	40005c00 	.word	0x40005c00
 800c9a0:	200000e4 	.word	0x200000e4

0800c9a4 <TM_I2C_FillSettings>:

static void TM_I2C_FillSettings(I2C_HandleTypeDef* Handle, uint32_t clockSpeed) {
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
	/* 100kHz @ 48MHz APB clock */
	uint32_t I2C_Timing = 0x10805E89;
#endif

	/* Fill settings */
	Handle->Init.OwnAddress2 = 0x00;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	619a      	str	r2, [r3, #24]
	Handle->Init.OwnAddress1 = 0x00;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	60da      	str	r2, [r3, #12]
	Handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c9c0:	611a      	str	r2, [r3, #16]
	Handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	615a      	str	r2, [r3, #20]
	Handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	61da      	str	r2, [r3, #28]
	Handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	621a      	str	r2, [r3, #32]
#if defined(STM32F7xx) || defined(STM32F0xx)
	Handle->Init.Timing = I2C_Timing;
#else
	Handle->Init.ClockSpeed = clockSpeed;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	605a      	str	r2, [r3, #4]
	Handle->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	609a      	str	r2, [r3, #8]
#endif
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <TM_I2C_Init>:

TM_I2C_Result_t TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b088      	sub	sp, #32
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	607a      	str	r2, [r7, #4]
 800c9f8:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f7ff ffa8 	bl	800c950 <TM_I2C_GetHandle>
 800ca00:	61f8      	str	r0, [r7, #28]

	/* Fill instance value */
	Handle->Instance = I2Cx;
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	601a      	str	r2, [r3, #0]

#ifdef I2C1
	if (I2Cx == I2C1) {
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4a26      	ldr	r2, [pc, #152]	; (800caa4 <TM_I2C_Init+0xb8>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d111      	bne.n	800ca34 <TM_I2C_Init+0x48>
		/* Enable clock */
		__HAL_RCC_I2C1_CLK_ENABLE();
 800ca10:	2300      	movs	r3, #0
 800ca12:	61bb      	str	r3, [r7, #24]
 800ca14:	4b24      	ldr	r3, [pc, #144]	; (800caa8 <TM_I2C_Init+0xbc>)
 800ca16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca18:	4a23      	ldr	r2, [pc, #140]	; (800caa8 <TM_I2C_Init+0xbc>)
 800ca1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca1e:	6413      	str	r3, [r2, #64]	; 0x40
 800ca20:	4b21      	ldr	r3, [pc, #132]	; (800caa8 <TM_I2C_Init+0xbc>)
 800ca22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca28:	61bb      	str	r3, [r7, #24]
 800ca2a:	69bb      	ldr	r3, [r7, #24]

		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 800ca2c:	7afb      	ldrb	r3, [r7, #11]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 f902 	bl	800cc38 <TM_I2C1_INT_InitPins>
	}
#endif
#ifdef I2C2
	if (I2Cx == I2C2) {
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	4a1d      	ldr	r2, [pc, #116]	; (800caac <TM_I2C_Init+0xc0>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d111      	bne.n	800ca60 <TM_I2C_Init+0x74>
		/* Enable clock */
		__HAL_RCC_I2C2_CLK_ENABLE();
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	617b      	str	r3, [r7, #20]
 800ca40:	4b19      	ldr	r3, [pc, #100]	; (800caa8 <TM_I2C_Init+0xbc>)
 800ca42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca44:	4a18      	ldr	r2, [pc, #96]	; (800caa8 <TM_I2C_Init+0xbc>)
 800ca46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ca4a:	6413      	str	r3, [r2, #64]	; 0x40
 800ca4c:	4b16      	ldr	r3, [pc, #88]	; (800caa8 <TM_I2C_Init+0xbc>)
 800ca4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca54:	617b      	str	r3, [r7, #20]
 800ca56:	697b      	ldr	r3, [r7, #20]

		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 800ca58:	7afb      	ldrb	r3, [r7, #11]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f000 f92a 	bl	800ccb4 <TM_I2C2_INT_InitPins>
	}
#endif
#ifdef I2C3
	if (I2Cx == I2C3) {
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	4a13      	ldr	r2, [pc, #76]	; (800cab0 <TM_I2C_Init+0xc4>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d111      	bne.n	800ca8c <TM_I2C_Init+0xa0>
		/* Enable clock */
		__HAL_RCC_I2C3_CLK_ENABLE();
 800ca68:	2300      	movs	r3, #0
 800ca6a:	613b      	str	r3, [r7, #16]
 800ca6c:	4b0e      	ldr	r3, [pc, #56]	; (800caa8 <TM_I2C_Init+0xbc>)
 800ca6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca70:	4a0d      	ldr	r2, [pc, #52]	; (800caa8 <TM_I2C_Init+0xbc>)
 800ca72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ca76:	6413      	str	r3, [r2, #64]	; 0x40
 800ca78:	4b0b      	ldr	r3, [pc, #44]	; (800caa8 <TM_I2C_Init+0xbc>)
 800ca7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca80:	613b      	str	r3, [r7, #16]
 800ca82:	693b      	ldr	r3, [r7, #16]

		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 800ca84:	7afb      	ldrb	r3, [r7, #11]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f954 	bl	800cd34 <TM_I2C3_INT_InitPins>
		TM_I2C4_INT_InitPins(pinspack);
	}
#endif

	/* Fill settings */
	TM_I2C_FillSettings(Handle, clockSpeed);
 800ca8c:	6879      	ldr	r1, [r7, #4]
 800ca8e:	69f8      	ldr	r0, [r7, #28]
 800ca90:	f7ff ff88 	bl	800c9a4 <TM_I2C_FillSettings>

	/* Initialize I2C */
	HAL_I2C_Init(Handle);
 800ca94:	69f8      	ldr	r0, [r7, #28]
 800ca96:	f7fb fd5f 	bl	8008558 <HAL_I2C_Init>
#if defined(I2C_ANALOGFILTER_ENABLE)
	HAL_I2CEx_ConfigAnalogFilter(Handle, I2C_ANALOGFILTER_ENABLE);
#endif

	/* Return OK */
	return TM_I2C_Result_Ok;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3720      	adds	r7, #32
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	40005400 	.word	0x40005400
 800caa8:	40023800 	.word	0x40023800
 800caac:	40005800 	.word	0x40005800
 800cab0:	40005c00 	.word	0x40005c00

0800cab4 <TM_I2C_Read>:

TM_I2C_Result_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data) {
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b088      	sub	sp, #32
 800cab8:	af02      	add	r7, sp, #8
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	607b      	str	r3, [r7, #4]
 800cabe:	460b      	mov	r3, r1
 800cac0:	72fb      	strb	r3, [r7, #11]
 800cac2:	4613      	mov	r3, r2
 800cac4:	72bb      	strb	r3, [r7, #10]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f7ff ff42 	bl	800c950 <TM_I2C_GetHandle>
 800cacc:	6178      	str	r0, [r7, #20]

	/* Send address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 800cace:	7afb      	ldrb	r3, [r7, #11]
 800cad0:	b299      	uxth	r1, r3
 800cad2:	f107 020a 	add.w	r2, r7, #10
 800cad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	2301      	movs	r3, #1
 800cade:	6978      	ldr	r0, [r7, #20]
 800cae0:	f7fb fe7e 	bl	80087e0 <HAL_I2C_Master_Transmit>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d004      	beq.n	800caf4 <TM_I2C_Read+0x40>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 800caea:	6978      	ldr	r0, [r7, #20]
 800caec:	f7fc fad6 	bl	800909c <HAL_I2C_GetError>

		}

		/* Return error */
		return TM_I2C_Result_Error;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e012      	b.n	800cb1a <TM_I2C_Read+0x66>
	}

	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(Handle, device_address, data, 1, 1000) != HAL_OK) {
 800caf4:	7afb      	ldrb	r3, [r7, #11]
 800caf6:	b299      	uxth	r1, r3
 800caf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	2301      	movs	r3, #1
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	6978      	ldr	r0, [r7, #20]
 800cb04:	f7fb ff6a 	bl	80089dc <HAL_I2C_Master_Receive>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d004      	beq.n	800cb18 <TM_I2C_Read+0x64>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 800cb0e:	6978      	ldr	r0, [r7, #20]
 800cb10:	f7fc fac4 	bl	800909c <HAL_I2C_GetError>

		}

		/* Return error */
		return TM_I2C_Result_Error;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e000      	b.n	800cb1a <TM_I2C_Read+0x66>
	}

	/* Return OK */
	return TM_I2C_Result_Ok;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <TM_I2C_ReadMulti>:

TM_I2C_Result_t TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b088      	sub	sp, #32
 800cb26:	af02      	add	r7, sp, #8
 800cb28:	60f8      	str	r0, [r7, #12]
 800cb2a:	607b      	str	r3, [r7, #4]
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	72fb      	strb	r3, [r7, #11]
 800cb30:	4613      	mov	r3, r2
 800cb32:	72bb      	strb	r3, [r7, #10]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f7ff ff0b 	bl	800c950 <TM_I2C_GetHandle>
 800cb3a:	6178      	str	r0, [r7, #20]

	/* Send register address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 800cb3c:	7afb      	ldrb	r3, [r7, #11]
 800cb3e:	b299      	uxth	r1, r3
 800cb40:	f107 020a 	add.w	r2, r7, #10
 800cb44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	6978      	ldr	r0, [r7, #20]
 800cb4e:	f7fb fe47 	bl	80087e0 <HAL_I2C_Master_Transmit>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d004      	beq.n	800cb62 <TM_I2C_ReadMulti+0x40>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 800cb58:	6978      	ldr	r0, [r7, #20]
 800cb5a:	f7fc fa9f 	bl	800909c <HAL_I2C_GetError>

		}

		/* Return error */
		return TM_I2C_Result_Error;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e012      	b.n	800cb88 <TM_I2C_ReadMulti+0x66>
	}

	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(Handle, device_address, data, count, 1000) != HAL_OK) {
 800cb62:	7afb      	ldrb	r3, [r7, #11]
 800cb64:	b299      	uxth	r1, r3
 800cb66:	8c3b      	ldrh	r3, [r7, #32]
 800cb68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb6c:	9200      	str	r2, [sp, #0]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	6978      	ldr	r0, [r7, #20]
 800cb72:	f7fb ff33 	bl	80089dc <HAL_I2C_Master_Receive>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d004      	beq.n	800cb86 <TM_I2C_ReadMulti+0x64>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 800cb7c:	6978      	ldr	r0, [r7, #20]
 800cb7e:	f7fc fa8d 	bl	800909c <HAL_I2C_GetError>

		}

		/* Return error */
		return TM_I2C_Result_Error;
 800cb82:	2301      	movs	r3, #1
 800cb84:	e000      	b.n	800cb88 <TM_I2C_ReadMulti+0x66>
	}

	/* Return OK */
	return TM_I2C_Result_Ok;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3718      	adds	r7, #24
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <TM_I2C_Write>:

	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_Write(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t data) {
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af02      	add	r7, sp, #8
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	4608      	mov	r0, r1
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	4603      	mov	r3, r0
 800cba0:	70fb      	strb	r3, [r7, #3]
 800cba2:	460b      	mov	r3, r1
 800cba4:	70bb      	strb	r3, [r7, #2]
 800cba6:	4613      	mov	r3, r2
 800cba8:	707b      	strb	r3, [r7, #1]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff fed0 	bl	800c950 <TM_I2C_GetHandle>
 800cbb0:	60f8      	str	r0, [r7, #12]

	/* Format array to send */
	d[0] = register_address;
 800cbb2:	78bb      	ldrb	r3, [r7, #2]
 800cbb4:	723b      	strb	r3, [r7, #8]
	d[1] = data;
 800cbb6:	787b      	ldrb	r3, [r7, #1]
 800cbb8:	727b      	strb	r3, [r7, #9]

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 800cbba:	78fb      	ldrb	r3, [r7, #3]
 800cbbc:	b299      	uxth	r1, r3
 800cbbe:	f107 0208 	add.w	r2, r7, #8
 800cbc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cbc6:	9300      	str	r3, [sp, #0]
 800cbc8:	2302      	movs	r3, #2
 800cbca:	68f8      	ldr	r0, [r7, #12]
 800cbcc:	f7fb fe08 	bl	80087e0 <HAL_I2C_Master_Transmit>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d004      	beq.n	800cbe0 <TM_I2C_Write+0x50>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7fc fa60 	bl	800909c <HAL_I2C_GetError>

		}

		/* Return error */
		return TM_I2C_Result_Error;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	e000      	b.n	800cbe2 <TM_I2C_Write+0x52>
	}

	/* Return OK */
	return TM_I2C_Result_Ok;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <TM_I2C_IsDeviceConnected>:

	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t device_address) {
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b084      	sub	sp, #16
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f7ff feaa 	bl	800c950 <TM_I2C_GetHandle>
 800cbfc:	60f8      	str	r0, [r7, #12]

	/* Check if device is ready for communication */
	if (HAL_I2C_IsDeviceReady(Handle, device_address, 2, 5) != HAL_OK) {
 800cbfe:	78fb      	ldrb	r3, [r7, #3]
 800cc00:	b299      	uxth	r1, r3
 800cc02:	2305      	movs	r3, #5
 800cc04:	2202      	movs	r2, #2
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f7fc f91a 	bl	8008e40 <HAL_I2C_IsDeviceReady>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d001      	beq.n	800cc16 <TM_I2C_IsDeviceConnected+0x2c>
		/* Return error */
		return TM_I2C_Result_Error;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e000      	b.n	800cc18 <TM_I2C_IsDeviceConnected+0x2e>
	}

	/* Return OK */
	return TM_I2C_Result_Ok;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <TM_I2C_InitCustomPinsCallback>:

	/* Return OK */
	return TM_I2C_Result_Ok;
}

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	460b      	mov	r3, r1
 800cc2a:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 800cc2c:	bf00      	nop
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <TM_I2C1_INT_InitPins>:

/* Private functions */
#ifdef I2C1
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	4603      	mov	r3, r0
 800cc40:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 800cc42:	79fb      	ldrb	r3, [r7, #7]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d109      	bne.n	800cc5c <TM_I2C1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 800cc48:	2304      	movs	r3, #4
 800cc4a:	9301      	str	r3, [sp, #4]
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	2301      	movs	r3, #1
 800cc52:	2201      	movs	r2, #1
 800cc54:	21c0      	movs	r1, #192	; 0xc0
 800cc56:	4815      	ldr	r0, [pc, #84]	; (800ccac <TM_I2C1_INT_InitPins+0x74>)
 800cc58:	f7ff fd74 	bl	800c744 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 800cc5c:	79fb      	ldrb	r3, [r7, #7]
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d10a      	bne.n	800cc78 <TM_I2C1_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 800cc62:	2304      	movs	r3, #4
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	2301      	movs	r3, #1
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	f44f 7140 	mov.w	r1, #768	; 0x300
 800cc72:	480e      	ldr	r0, [pc, #56]	; (800ccac <TM_I2C1_INT_InitPins+0x74>)
 800cc74:	f7ff fd66 	bl	800c744 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 800cc78:	79fb      	ldrb	r3, [r7, #7]
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d10a      	bne.n	800cc94 <TM_I2C1_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 800cc7e:	2304      	movs	r3, #4
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	2301      	movs	r3, #1
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	2301      	movs	r3, #1
 800cc88:	2201      	movs	r2, #1
 800cc8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc8e:	4807      	ldr	r0, [pc, #28]	; (800ccac <TM_I2C1_INT_InitPins+0x74>)
 800cc90:	f7ff fd58 	bl	800c744 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 800cc94:	79fb      	ldrb	r3, [r7, #7]
 800cc96:	2b04      	cmp	r3, #4
 800cc98:	d103      	bne.n	800cca2 <TM_I2C1_INT_InitPins+0x6a>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1, GPIO_AF4_I2C1);
 800cc9a:	2104      	movs	r1, #4
 800cc9c:	4804      	ldr	r0, [pc, #16]	; (800ccb0 <TM_I2C1_INT_InitPins+0x78>)
 800cc9e:	f7ff ffbf 	bl	800cc20 <TM_I2C_InitCustomPinsCallback>
	}
}
 800cca2:	bf00      	nop
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	40020400 	.word	0x40020400
 800ccb0:	40005400 	.word	0x40005400

0800ccb4 <TM_I2C2_INT_InitPins>:
#endif
#ifdef I2C2
static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af02      	add	r7, sp, #8
 800ccba:	4603      	mov	r3, r0
 800ccbc:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 800ccbe:	79fb      	ldrb	r3, [r7, #7]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <TM_I2C2_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 800ccc4:	2304      	movs	r3, #4
 800ccc6:	9301      	str	r3, [sp, #4]
 800ccc8:	2301      	movs	r3, #1
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	2301      	movs	r3, #1
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800ccd4:	4813      	ldr	r0, [pc, #76]	; (800cd24 <TM_I2C2_INT_InitPins+0x70>)
 800ccd6:	f7ff fd35 	bl	800c744 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 800ccda:	79fb      	ldrb	r3, [r7, #7]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d109      	bne.n	800ccf4 <TM_I2C2_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 800cce0:	2304      	movs	r3, #4
 800cce2:	9301      	str	r3, [sp, #4]
 800cce4:	2301      	movs	r3, #1
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	2301      	movs	r3, #1
 800ccea:	2201      	movs	r2, #1
 800ccec:	2103      	movs	r1, #3
 800ccee:	480e      	ldr	r0, [pc, #56]	; (800cd28 <TM_I2C2_INT_InitPins+0x74>)
 800ccf0:	f7ff fd28 	bl	800c744 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 800ccf4:	79fb      	ldrb	r3, [r7, #7]
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	d109      	bne.n	800cd0e <TM_I2C2_INT_InitPins+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 800ccfa:	2304      	movs	r3, #4
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	2301      	movs	r3, #1
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	2301      	movs	r3, #1
 800cd04:	2201      	movs	r2, #1
 800cd06:	2130      	movs	r1, #48	; 0x30
 800cd08:	4808      	ldr	r0, [pc, #32]	; (800cd2c <TM_I2C2_INT_InitPins+0x78>)
 800cd0a:	f7ff fd1b 	bl	800c744 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	2b04      	cmp	r3, #4
 800cd12:	d103      	bne.n	800cd1c <TM_I2C2_INT_InitPins+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2, GPIO_AF4_I2C2);
 800cd14:	2104      	movs	r1, #4
 800cd16:	4806      	ldr	r0, [pc, #24]	; (800cd30 <TM_I2C2_INT_InitPins+0x7c>)
 800cd18:	f7ff ff82 	bl	800cc20 <TM_I2C_InitCustomPinsCallback>
	}
}
 800cd1c:	bf00      	nop
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	40020400 	.word	0x40020400
 800cd28:	40021400 	.word	0x40021400
 800cd2c:	40021c00 	.word	0x40021c00
 800cd30:	40005800 	.word	0x40005800

0800cd34 <TM_I2C3_INT_InitPins>:
#endif
#ifdef I2C3
static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af02      	add	r7, sp, #8
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 800cd3e:	79fb      	ldrb	r3, [r7, #7]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d115      	bne.n	800cd70 <TM_I2C3_INT_InitPins+0x3c>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 800cd44:	2304      	movs	r3, #4
 800cd46:	9301      	str	r3, [sp, #4]
 800cd48:	2301      	movs	r3, #1
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cd54:	4813      	ldr	r0, [pc, #76]	; (800cda4 <TM_I2C3_INT_InitPins+0x70>)
 800cd56:	f7ff fcf5 	bl	800c744 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 800cd5a:	2304      	movs	r3, #4
 800cd5c:	9301      	str	r3, [sp, #4]
 800cd5e:	2301      	movs	r3, #1
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	2301      	movs	r3, #1
 800cd64:	2201      	movs	r2, #1
 800cd66:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd6a:	480f      	ldr	r0, [pc, #60]	; (800cda8 <TM_I2C3_INT_InitPins+0x74>)
 800cd6c:	f7ff fcea 	bl	800c744 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 800cd70:	79fb      	ldrb	r3, [r7, #7]
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d10a      	bne.n	800cd8c <TM_I2C3_INT_InitPins+0x58>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 800cd76:	2304      	movs	r3, #4
 800cd78:	9301      	str	r3, [sp, #4]
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	9300      	str	r3, [sp, #0]
 800cd7e:	2301      	movs	r3, #1
 800cd80:	2201      	movs	r2, #1
 800cd82:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800cd86:	4809      	ldr	r0, [pc, #36]	; (800cdac <TM_I2C3_INT_InitPins+0x78>)
 800cd88:	f7ff fcdc 	bl	800c744 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 800cd8c:	79fb      	ldrb	r3, [r7, #7]
 800cd8e:	2b04      	cmp	r3, #4
 800cd90:	d103      	bne.n	800cd9a <TM_I2C3_INT_InitPins+0x66>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF4_I2C3);
 800cd92:	2104      	movs	r1, #4
 800cd94:	4806      	ldr	r0, [pc, #24]	; (800cdb0 <TM_I2C3_INT_InitPins+0x7c>)
 800cd96:	f7ff ff43 	bl	800cc20 <TM_I2C_InitCustomPinsCallback>
	}
}
 800cd9a:	bf00      	nop
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	40020000 	.word	0x40020000
 800cda8:	40020800 	.word	0x40020800
 800cdac:	40021c00 	.word	0x40021c00
 800cdb0:	40005c00 	.word	0x40005c00

0800cdb4 <TM_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)


TM_MPU6050_Result_t TM_MPU6050_Init(TM_MPU6050_t* DataStruct, TM_MPU6050_Device_t DeviceNumber, TM_MPU6050_Accelerometer_t AccelerometerSensitivity, TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	4608      	mov	r0, r1
 800cdbe:	4611      	mov	r1, r2
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	70fb      	strb	r3, [r7, #3]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	70bb      	strb	r3, [r7, #2]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	707b      	strb	r3, [r7, #1]
	uint8_t temp;

	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 800cdce:	78fb      	ldrb	r3, [r7, #3]
 800cdd0:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	701a      	strb	r2, [r3, #0]

	/* Initialize I2C */
	TM_I2C_Init(MPU6050_I2C, MPU6050_I2C_PINSPACK, MPU6050_I2C_CLOCK);
 800cdda:	4a1b      	ldr	r2, [pc, #108]	; (800ce48 <TM_MPU6050_Init+0x94>)
 800cddc:	2100      	movs	r1, #0
 800cdde:	481b      	ldr	r0, [pc, #108]	; (800ce4c <TM_MPU6050_Init+0x98>)
 800cde0:	f7ff fe04 	bl	800c9ec <TM_I2C_Init>

	/* Check if device is connected */
	if (TM_I2C_IsDeviceConnected(MPU6050_I2C, DataStruct->Address) != TM_I2C_Result_Ok) {
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	4619      	mov	r1, r3
 800cdea:	4818      	ldr	r0, [pc, #96]	; (800ce4c <TM_MPU6050_Init+0x98>)
 800cdec:	f7ff fefd 	bl	800cbea <TM_I2C_IsDeviceConnected>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <TM_MPU6050_Init+0x46>
		/* Return error */
		return TM_MPU6050_Result_DeviceNotConnected;
 800cdf6:	2302      	movs	r3, #2
 800cdf8:	e022      	b.n	800ce40 <TM_MPU6050_Init+0x8c>
	}

	/* Check who am I */
	TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_WHO_AM_I, &temp);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	7819      	ldrb	r1, [r3, #0]
 800cdfe:	f107 030f 	add.w	r3, r7, #15
 800ce02:	2275      	movs	r2, #117	; 0x75
 800ce04:	4811      	ldr	r0, [pc, #68]	; (800ce4c <TM_MPU6050_Init+0x98>)
 800ce06:	f7ff fe55 	bl	800cab4 <TM_I2C_Read>
	if (temp != MPU6050_I_AM) {
 800ce0a:	7bfb      	ldrb	r3, [r7, #15]
 800ce0c:	2b68      	cmp	r3, #104	; 0x68
 800ce0e:	d001      	beq.n	800ce14 <TM_MPU6050_Init+0x60>
		/* Return error */
		return TM_MPU6050_Result_DeviceInvalid;
 800ce10:	2303      	movs	r3, #3
 800ce12:	e015      	b.n	800ce40 <TM_MPU6050_Init+0x8c>
	}

	/* Wakeup MPU6050 */
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_PWR_MGMT_1, 0x00);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7819      	ldrb	r1, [r3, #0]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	226b      	movs	r2, #107	; 0x6b
 800ce1c:	480b      	ldr	r0, [pc, #44]	; (800ce4c <TM_MPU6050_Init+0x98>)
 800ce1e:	f7ff feb7 	bl	800cb90 <TM_I2C_Write>

	/* Set sample rate to 1kHz */
	TM_MPU6050_SetDataRate(DataStruct, TM_MPU6050_DataRate_1KHz);
 800ce22:	2107      	movs	r1, #7
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 f8af 	bl	800cf88 <TM_MPU6050_SetDataRate>

	/* Config accelerometer */
	TM_MPU6050_SetAccelerometer(DataStruct, AccelerometerSensitivity);
 800ce2a:	78bb      	ldrb	r3, [r7, #2]
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f85e 	bl	800cef0 <TM_MPU6050_SetAccelerometer>

	/* Config accelerometer */
	TM_MPU6050_SetGyroscope(DataStruct, GyroscopeSensitivity);
 800ce34:	787b      	ldrb	r3, [r7, #1]
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f809 	bl	800ce50 <TM_MPU6050_SetGyroscope>

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	00061a80 	.word	0x00061a80
 800ce4c:	40005400 	.word	0x40005400

0800ce50 <TM_MPU6050_SetGyroscope>:

TM_MPU6050_Result_t TM_MPU6050_SetGyroscope(TM_MPU6050_t* DataStruct, TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;

	/* Config gyroscope */
	TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, &temp);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	7819      	ldrb	r1, [r3, #0]
 800ce60:	f107 030f 	add.w	r3, r7, #15
 800ce64:	221b      	movs	r2, #27
 800ce66:	481d      	ldr	r0, [pc, #116]	; (800cedc <TM_MPU6050_SetGyroscope+0x8c>)
 800ce68:	f7ff fe24 	bl	800cab4 <TM_I2C_Read>
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	b25b      	sxtb	r3, r3
 800ce70:	f023 0318 	bic.w	r3, r3, #24
 800ce74:	b25a      	sxtb	r2, r3
 800ce76:	78fb      	ldrb	r3, [r7, #3]
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	b25b      	sxtb	r3, r3
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	b25b      	sxtb	r3, r3
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, temp);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	7819      	ldrb	r1, [r3, #0]
 800ce88:	7bfb      	ldrb	r3, [r7, #15]
 800ce8a:	221b      	movs	r2, #27
 800ce8c:	4813      	ldr	r0, [pc, #76]	; (800cedc <TM_MPU6050_SetGyroscope+0x8c>)
 800ce8e:	f7ff fe7f 	bl	800cb90 <TM_I2C_Write>

	switch (GyroscopeSensitivity) {
 800ce92:	78fb      	ldrb	r3, [r7, #3]
 800ce94:	2b03      	cmp	r3, #3
 800ce96:	d81a      	bhi.n	800cece <TM_MPU6050_SetGyroscope+0x7e>
 800ce98:	a201      	add	r2, pc, #4	; (adr r2, 800cea0 <TM_MPU6050_SetGyroscope+0x50>)
 800ce9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9e:	bf00      	nop
 800cea0:	0800ceb1 	.word	0x0800ceb1
 800cea4:	0800ceb9 	.word	0x0800ceb9
 800cea8:	0800cec1 	.word	0x0800cec1
 800ceac:	0800cec9 	.word	0x0800cec9
		case TM_MPU6050_Gyroscope_250s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4a0b      	ldr	r2, [pc, #44]	; (800cee0 <TM_MPU6050_SetGyroscope+0x90>)
 800ceb4:	605a      	str	r2, [r3, #4]
			break;
 800ceb6:	e00b      	b.n	800ced0 <TM_MPU6050_SetGyroscope+0x80>
		case TM_MPU6050_Gyroscope_500s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a0a      	ldr	r2, [pc, #40]	; (800cee4 <TM_MPU6050_SetGyroscope+0x94>)
 800cebc:	605a      	str	r2, [r3, #4]
			break;
 800cebe:	e007      	b.n	800ced0 <TM_MPU6050_SetGyroscope+0x80>
		case TM_MPU6050_Gyroscope_1000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4a09      	ldr	r2, [pc, #36]	; (800cee8 <TM_MPU6050_SetGyroscope+0x98>)
 800cec4:	605a      	str	r2, [r3, #4]
			break;
 800cec6:	e003      	b.n	800ced0 <TM_MPU6050_SetGyroscope+0x80>
		case TM_MPU6050_Gyroscope_2000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a08      	ldr	r2, [pc, #32]	; (800ceec <TM_MPU6050_SetGyroscope+0x9c>)
 800cecc:	605a      	str	r2, [r3, #4]
		default:
			break;
 800cece:	bf00      	nop
	}

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	40005400 	.word	0x40005400
 800cee0:	3bfa232d 	.word	0x3bfa232d
 800cee4:	3c7a232d 	.word	0x3c7a232d
 800cee8:	3cf9c190 	.word	0x3cf9c190
 800ceec:	3d79c190 	.word	0x3d79c190

0800cef0 <TM_MPU6050_SetAccelerometer>:

TM_MPU6050_Result_t TM_MPU6050_SetAccelerometer(TM_MPU6050_t* DataStruct, TM_MPU6050_Accelerometer_t AccelerometerSensitivity) {
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;

	/* Config accelerometer */
	TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, &temp);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	7819      	ldrb	r1, [r3, #0]
 800cf00:	f107 030f 	add.w	r3, r7, #15
 800cf04:	221c      	movs	r2, #28
 800cf06:	481f      	ldr	r0, [pc, #124]	; (800cf84 <TM_MPU6050_SetAccelerometer+0x94>)
 800cf08:	f7ff fdd4 	bl	800cab4 <TM_I2C_Read>
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 800cf0c:	7bfb      	ldrb	r3, [r7, #15]
 800cf0e:	b25b      	sxtb	r3, r3
 800cf10:	f023 0318 	bic.w	r3, r3, #24
 800cf14:	b25a      	sxtb	r2, r3
 800cf16:	78fb      	ldrb	r3, [r7, #3]
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	b25b      	sxtb	r3, r3
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	b25b      	sxtb	r3, r3
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, temp);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	7819      	ldrb	r1, [r3, #0]
 800cf28:	7bfb      	ldrb	r3, [r7, #15]
 800cf2a:	221c      	movs	r2, #28
 800cf2c:	4815      	ldr	r0, [pc, #84]	; (800cf84 <TM_MPU6050_SetAccelerometer+0x94>)
 800cf2e:	f7ff fe2f 	bl	800cb90 <TM_I2C_Write>

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 800cf32:	78fb      	ldrb	r3, [r7, #3]
 800cf34:	2b03      	cmp	r3, #3
 800cf36:	d81e      	bhi.n	800cf76 <TM_MPU6050_SetAccelerometer+0x86>
 800cf38:	a201      	add	r2, pc, #4	; (adr r2, 800cf40 <TM_MPU6050_SetAccelerometer+0x50>)
 800cf3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3e:	bf00      	nop
 800cf40:	0800cf51 	.word	0x0800cf51
 800cf44:	0800cf5b 	.word	0x0800cf5b
 800cf48:	0800cf65 	.word	0x0800cf65
 800cf4c:	0800cf6f 	.word	0x0800cf6f
		case TM_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800cf56:	609a      	str	r2, [r3, #8]
			break;
 800cf58:	e00e      	b.n	800cf78 <TM_MPU6050_SetAccelerometer+0x88>
		case TM_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800cf60:	609a      	str	r2, [r3, #8]
			break;
 800cf62:	e009      	b.n	800cf78 <TM_MPU6050_SetAccelerometer+0x88>
		case TM_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800cf6a:	609a      	str	r2, [r3, #8]
			break;
 800cf6c:	e004      	b.n	800cf78 <TM_MPU6050_SetAccelerometer+0x88>
		case TM_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800cf74:	609a      	str	r2, [r3, #8]
		default:
			break;
 800cf76:	bf00      	nop
	}

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	40005400 	.word	0x40005400

0800cf88 <TM_MPU6050_SetDataRate>:

TM_MPU6050_Result_t TM_MPU6050_SetDataRate(TM_MPU6050_t* DataStruct, uint8_t rate) {
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	460b      	mov	r3, r1
 800cf92:	70fb      	strb	r3, [r7, #3]
	/* Set data sample rate */
	if (TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_SMPLRT_DIV, rate) != TM_I2C_Result_Ok) {
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7819      	ldrb	r1, [r3, #0]
 800cf98:	78fb      	ldrb	r3, [r7, #3]
 800cf9a:	2219      	movs	r2, #25
 800cf9c:	4806      	ldr	r0, [pc, #24]	; (800cfb8 <TM_MPU6050_SetDataRate+0x30>)
 800cf9e:	f7ff fdf7 	bl	800cb90 <TM_I2C_Write>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d001      	beq.n	800cfac <TM_MPU6050_SetDataRate+0x24>
		/* Return error */
		return TM_MPU6050_Result_Error;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	e000      	b.n	800cfae <TM_MPU6050_SetDataRate+0x26>
	}

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	40005400 	.word	0x40005400

0800cfbc <TM_MPU6050_ReadAll>:

	/* Return OK */
	return TM_MPU6050_Result_Ok;
}

TM_MPU6050_Result_t TM_MPU6050_ReadAll(TM_MPU6050_t* DataStruct) {
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b088      	sub	sp, #32
 800cfc0:	af02      	add	r7, sp, #8
 800cfc2:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	int16_t temp;

	/* Read full raw data, 14bytes */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_XOUT_H, data, 14);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	7819      	ldrb	r1, [r3, #0]
 800cfc8:	f107 0308 	add.w	r3, r7, #8
 800cfcc:	220e      	movs	r2, #14
 800cfce:	9200      	str	r2, [sp, #0]
 800cfd0:	223b      	movs	r2, #59	; 0x3b
 800cfd2:	482b      	ldr	r0, [pc, #172]	; (800d080 <TM_MPU6050_ReadAll+0xc4>)
 800cfd4:	f7ff fda5 	bl	800cb22 <TM_I2C_ReadMulti>

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 800cfd8:	7a3b      	ldrb	r3, [r7, #8]
 800cfda:	021b      	lsls	r3, r3, #8
 800cfdc:	b21a      	sxth	r2, r3
 800cfde:	7a7b      	ldrb	r3, [r7, #9]
 800cfe0:	b21b      	sxth	r3, r3
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	b21a      	sxth	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 800cfea:	7abb      	ldrb	r3, [r7, #10]
 800cfec:	021b      	lsls	r3, r3, #8
 800cfee:	b21a      	sxth	r2, r3
 800cff0:	7afb      	ldrb	r3, [r7, #11]
 800cff2:	b21b      	sxth	r3, r3
 800cff4:	4313      	orrs	r3, r2
 800cff6:	b21a      	sxth	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 800cffc:	7b3b      	ldrb	r3, [r7, #12]
 800cffe:	021b      	lsls	r3, r3, #8
 800d000:	b21a      	sxth	r2, r3
 800d002:	7b7b      	ldrb	r3, [r7, #13]
 800d004:	b21b      	sxth	r3, r3
 800d006:	4313      	orrs	r3, r2
 800d008:	b21a      	sxth	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 800d00e:	7bbb      	ldrb	r3, [r7, #14]
 800d010:	021b      	lsls	r3, r3, #8
 800d012:	b21a      	sxth	r2, r3
 800d014:	7bfb      	ldrb	r3, [r7, #15]
 800d016:	b21b      	sxth	r3, r3
 800d018:	4313      	orrs	r3, r2
 800d01a:	82fb      	strh	r3, [r7, #22]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 800d01c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d020:	ee07 3a90 	vmov	s15, r3
 800d024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d028:	eddf 6a16 	vldr	s13, [pc, #88]	; 800d084 <TM_MPU6050_ReadAll+0xc8>
 800d02c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d030:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d088 <TM_MPU6050_ReadAll+0xcc>
 800d034:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 800d03e:	7c3b      	ldrb	r3, [r7, #16]
 800d040:	021b      	lsls	r3, r3, #8
 800d042:	b21a      	sxth	r2, r3
 800d044:	7c7b      	ldrb	r3, [r7, #17]
 800d046:	b21b      	sxth	r3, r3
 800d048:	4313      	orrs	r3, r2
 800d04a:	b21a      	sxth	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 800d050:	7cbb      	ldrb	r3, [r7, #18]
 800d052:	021b      	lsls	r3, r3, #8
 800d054:	b21a      	sxth	r2, r3
 800d056:	7cfb      	ldrb	r3, [r7, #19]
 800d058:	b21b      	sxth	r3, r3
 800d05a:	4313      	orrs	r3, r2
 800d05c:	b21a      	sxth	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 800d062:	7d3b      	ldrb	r3, [r7, #20]
 800d064:	021b      	lsls	r3, r3, #8
 800d066:	b21a      	sxth	r2, r3
 800d068:	7d7b      	ldrb	r3, [r7, #21]
 800d06a:	b21b      	sxth	r3, r3
 800d06c:	4313      	orrs	r3, r2
 800d06e:	b21a      	sxth	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	40005400 	.word	0x40005400
 800d084:	43aa0000 	.word	0x43aa0000
 800d088:	42121eb8 	.word	0x42121eb8

0800d08c <pow>:
 800d08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08e:	ed2d 8b02 	vpush	{d8}
 800d092:	eeb0 8a40 	vmov.f32	s16, s0
 800d096:	eef0 8a60 	vmov.f32	s17, s1
 800d09a:	ec55 4b11 	vmov	r4, r5, d1
 800d09e:	f000 fb23 	bl	800d6e8 <__ieee754_pow>
 800d0a2:	4622      	mov	r2, r4
 800d0a4:	462b      	mov	r3, r5
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	4629      	mov	r1, r5
 800d0aa:	ec57 6b10 	vmov	r6, r7, d0
 800d0ae:	f7f3 fd3d 	bl	8000b2c <__aeabi_dcmpun>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d13b      	bne.n	800d12e <pow+0xa2>
 800d0b6:	ec51 0b18 	vmov	r0, r1, d8
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f7f3 fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0c2:	b1b8      	cbz	r0, 800d0f4 <pow+0x68>
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	4629      	mov	r1, r5
 800d0cc:	f7f3 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d146      	bne.n	800d162 <pow+0xd6>
 800d0d4:	ec45 4b10 	vmov	d0, r4, r5
 800d0d8:	f000 fa1f 	bl	800d51a <finite>
 800d0dc:	b338      	cbz	r0, 800d12e <pow+0xa2>
 800d0de:	2200      	movs	r2, #0
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	f7f3 fcf9 	bl	8000adc <__aeabi_dcmplt>
 800d0ea:	b300      	cbz	r0, 800d12e <pow+0xa2>
 800d0ec:	f001 fecc 	bl	800ee88 <__errno>
 800d0f0:	2322      	movs	r3, #34	; 0x22
 800d0f2:	e01b      	b.n	800d12c <pow+0xa0>
 800d0f4:	ec47 6b10 	vmov	d0, r6, r7
 800d0f8:	f000 fa0f 	bl	800d51a <finite>
 800d0fc:	b9e0      	cbnz	r0, 800d138 <pow+0xac>
 800d0fe:	eeb0 0a48 	vmov.f32	s0, s16
 800d102:	eef0 0a68 	vmov.f32	s1, s17
 800d106:	f000 fa08 	bl	800d51a <finite>
 800d10a:	b1a8      	cbz	r0, 800d138 <pow+0xac>
 800d10c:	ec45 4b10 	vmov	d0, r4, r5
 800d110:	f000 fa03 	bl	800d51a <finite>
 800d114:	b180      	cbz	r0, 800d138 <pow+0xac>
 800d116:	4632      	mov	r2, r6
 800d118:	463b      	mov	r3, r7
 800d11a:	4630      	mov	r0, r6
 800d11c:	4639      	mov	r1, r7
 800d11e:	f7f3 fd05 	bl	8000b2c <__aeabi_dcmpun>
 800d122:	2800      	cmp	r0, #0
 800d124:	d0e2      	beq.n	800d0ec <pow+0x60>
 800d126:	f001 feaf 	bl	800ee88 <__errno>
 800d12a:	2321      	movs	r3, #33	; 0x21
 800d12c:	6003      	str	r3, [r0, #0]
 800d12e:	ecbd 8b02 	vpop	{d8}
 800d132:	ec47 6b10 	vmov	d0, r6, r7
 800d136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d138:	2200      	movs	r2, #0
 800d13a:	2300      	movs	r3, #0
 800d13c:	4630      	mov	r0, r6
 800d13e:	4639      	mov	r1, r7
 800d140:	f7f3 fcc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d144:	2800      	cmp	r0, #0
 800d146:	d0f2      	beq.n	800d12e <pow+0xa2>
 800d148:	eeb0 0a48 	vmov.f32	s0, s16
 800d14c:	eef0 0a68 	vmov.f32	s1, s17
 800d150:	f000 f9e3 	bl	800d51a <finite>
 800d154:	2800      	cmp	r0, #0
 800d156:	d0ea      	beq.n	800d12e <pow+0xa2>
 800d158:	ec45 4b10 	vmov	d0, r4, r5
 800d15c:	f000 f9dd 	bl	800d51a <finite>
 800d160:	e7c3      	b.n	800d0ea <pow+0x5e>
 800d162:	4f01      	ldr	r7, [pc, #4]	; (800d168 <pow+0xdc>)
 800d164:	2600      	movs	r6, #0
 800d166:	e7e2      	b.n	800d12e <pow+0xa2>
 800d168:	3ff00000 	.word	0x3ff00000

0800d16c <sqrt>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	ed2d 8b02 	vpush	{d8}
 800d172:	ec55 4b10 	vmov	r4, r5, d0
 800d176:	f000 f9db 	bl	800d530 <__ieee754_sqrt>
 800d17a:	4622      	mov	r2, r4
 800d17c:	462b      	mov	r3, r5
 800d17e:	4620      	mov	r0, r4
 800d180:	4629      	mov	r1, r5
 800d182:	eeb0 8a40 	vmov.f32	s16, s0
 800d186:	eef0 8a60 	vmov.f32	s17, s1
 800d18a:	f7f3 fccf 	bl	8000b2c <__aeabi_dcmpun>
 800d18e:	b990      	cbnz	r0, 800d1b6 <sqrt+0x4a>
 800d190:	2200      	movs	r2, #0
 800d192:	2300      	movs	r3, #0
 800d194:	4620      	mov	r0, r4
 800d196:	4629      	mov	r1, r5
 800d198:	f7f3 fca0 	bl	8000adc <__aeabi_dcmplt>
 800d19c:	b158      	cbz	r0, 800d1b6 <sqrt+0x4a>
 800d19e:	f001 fe73 	bl	800ee88 <__errno>
 800d1a2:	2321      	movs	r3, #33	; 0x21
 800d1a4:	6003      	str	r3, [r0, #0]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	f7f3 fb4d 	bl	800084c <__aeabi_ddiv>
 800d1b2:	ec41 0b18 	vmov	d8, r0, r1
 800d1b6:	eeb0 0a48 	vmov.f32	s0, s16
 800d1ba:	eef0 0a68 	vmov.f32	s1, s17
 800d1be:	ecbd 8b02 	vpop	{d8}
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	0000      	movs	r0, r0
	...

0800d1c8 <atan>:
 800d1c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1cc:	ec55 4b10 	vmov	r4, r5, d0
 800d1d0:	4bc3      	ldr	r3, [pc, #780]	; (800d4e0 <atan+0x318>)
 800d1d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d1d6:	429e      	cmp	r6, r3
 800d1d8:	46ab      	mov	fp, r5
 800d1da:	dd18      	ble.n	800d20e <atan+0x46>
 800d1dc:	4bc1      	ldr	r3, [pc, #772]	; (800d4e4 <atan+0x31c>)
 800d1de:	429e      	cmp	r6, r3
 800d1e0:	dc01      	bgt.n	800d1e6 <atan+0x1e>
 800d1e2:	d109      	bne.n	800d1f8 <atan+0x30>
 800d1e4:	b144      	cbz	r4, 800d1f8 <atan+0x30>
 800d1e6:	4622      	mov	r2, r4
 800d1e8:	462b      	mov	r3, r5
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	f7f3 f84d 	bl	800028c <__adddf3>
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	460d      	mov	r5, r1
 800d1f6:	e006      	b.n	800d206 <atan+0x3e>
 800d1f8:	f1bb 0f00 	cmp.w	fp, #0
 800d1fc:	f300 8131 	bgt.w	800d462 <atan+0x29a>
 800d200:	a59b      	add	r5, pc, #620	; (adr r5, 800d470 <atan+0x2a8>)
 800d202:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d206:	ec45 4b10 	vmov	d0, r4, r5
 800d20a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20e:	4bb6      	ldr	r3, [pc, #728]	; (800d4e8 <atan+0x320>)
 800d210:	429e      	cmp	r6, r3
 800d212:	dc14      	bgt.n	800d23e <atan+0x76>
 800d214:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d218:	429e      	cmp	r6, r3
 800d21a:	dc0d      	bgt.n	800d238 <atan+0x70>
 800d21c:	a396      	add	r3, pc, #600	; (adr r3, 800d478 <atan+0x2b0>)
 800d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d222:	ee10 0a10 	vmov	r0, s0
 800d226:	4629      	mov	r1, r5
 800d228:	f7f3 f830 	bl	800028c <__adddf3>
 800d22c:	4baf      	ldr	r3, [pc, #700]	; (800d4ec <atan+0x324>)
 800d22e:	2200      	movs	r2, #0
 800d230:	f7f3 fc72 	bl	8000b18 <__aeabi_dcmpgt>
 800d234:	2800      	cmp	r0, #0
 800d236:	d1e6      	bne.n	800d206 <atan+0x3e>
 800d238:	f04f 3aff 	mov.w	sl, #4294967295
 800d23c:	e02b      	b.n	800d296 <atan+0xce>
 800d23e:	f000 f963 	bl	800d508 <fabs>
 800d242:	4bab      	ldr	r3, [pc, #684]	; (800d4f0 <atan+0x328>)
 800d244:	429e      	cmp	r6, r3
 800d246:	ec55 4b10 	vmov	r4, r5, d0
 800d24a:	f300 80bf 	bgt.w	800d3cc <atan+0x204>
 800d24e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d252:	429e      	cmp	r6, r3
 800d254:	f300 80a0 	bgt.w	800d398 <atan+0x1d0>
 800d258:	ee10 2a10 	vmov	r2, s0
 800d25c:	ee10 0a10 	vmov	r0, s0
 800d260:	462b      	mov	r3, r5
 800d262:	4629      	mov	r1, r5
 800d264:	f7f3 f812 	bl	800028c <__adddf3>
 800d268:	4ba0      	ldr	r3, [pc, #640]	; (800d4ec <atan+0x324>)
 800d26a:	2200      	movs	r2, #0
 800d26c:	f7f3 f80c 	bl	8000288 <__aeabi_dsub>
 800d270:	2200      	movs	r2, #0
 800d272:	4606      	mov	r6, r0
 800d274:	460f      	mov	r7, r1
 800d276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d27a:	4620      	mov	r0, r4
 800d27c:	4629      	mov	r1, r5
 800d27e:	f7f3 f805 	bl	800028c <__adddf3>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	4630      	mov	r0, r6
 800d288:	4639      	mov	r1, r7
 800d28a:	f7f3 fadf 	bl	800084c <__aeabi_ddiv>
 800d28e:	f04f 0a00 	mov.w	sl, #0
 800d292:	4604      	mov	r4, r0
 800d294:	460d      	mov	r5, r1
 800d296:	4622      	mov	r2, r4
 800d298:	462b      	mov	r3, r5
 800d29a:	4620      	mov	r0, r4
 800d29c:	4629      	mov	r1, r5
 800d29e:	f7f3 f9ab 	bl	80005f8 <__aeabi_dmul>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	4680      	mov	r8, r0
 800d2a8:	4689      	mov	r9, r1
 800d2aa:	f7f3 f9a5 	bl	80005f8 <__aeabi_dmul>
 800d2ae:	a374      	add	r3, pc, #464	; (adr r3, 800d480 <atan+0x2b8>)
 800d2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	460f      	mov	r7, r1
 800d2b8:	f7f3 f99e 	bl	80005f8 <__aeabi_dmul>
 800d2bc:	a372      	add	r3, pc, #456	; (adr r3, 800d488 <atan+0x2c0>)
 800d2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c2:	f7f2 ffe3 	bl	800028c <__adddf3>
 800d2c6:	4632      	mov	r2, r6
 800d2c8:	463b      	mov	r3, r7
 800d2ca:	f7f3 f995 	bl	80005f8 <__aeabi_dmul>
 800d2ce:	a370      	add	r3, pc, #448	; (adr r3, 800d490 <atan+0x2c8>)
 800d2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d4:	f7f2 ffda 	bl	800028c <__adddf3>
 800d2d8:	4632      	mov	r2, r6
 800d2da:	463b      	mov	r3, r7
 800d2dc:	f7f3 f98c 	bl	80005f8 <__aeabi_dmul>
 800d2e0:	a36d      	add	r3, pc, #436	; (adr r3, 800d498 <atan+0x2d0>)
 800d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e6:	f7f2 ffd1 	bl	800028c <__adddf3>
 800d2ea:	4632      	mov	r2, r6
 800d2ec:	463b      	mov	r3, r7
 800d2ee:	f7f3 f983 	bl	80005f8 <__aeabi_dmul>
 800d2f2:	a36b      	add	r3, pc, #428	; (adr r3, 800d4a0 <atan+0x2d8>)
 800d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f8:	f7f2 ffc8 	bl	800028c <__adddf3>
 800d2fc:	4632      	mov	r2, r6
 800d2fe:	463b      	mov	r3, r7
 800d300:	f7f3 f97a 	bl	80005f8 <__aeabi_dmul>
 800d304:	a368      	add	r3, pc, #416	; (adr r3, 800d4a8 <atan+0x2e0>)
 800d306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30a:	f7f2 ffbf 	bl	800028c <__adddf3>
 800d30e:	4642      	mov	r2, r8
 800d310:	464b      	mov	r3, r9
 800d312:	f7f3 f971 	bl	80005f8 <__aeabi_dmul>
 800d316:	a366      	add	r3, pc, #408	; (adr r3, 800d4b0 <atan+0x2e8>)
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	4680      	mov	r8, r0
 800d31e:	4689      	mov	r9, r1
 800d320:	4630      	mov	r0, r6
 800d322:	4639      	mov	r1, r7
 800d324:	f7f3 f968 	bl	80005f8 <__aeabi_dmul>
 800d328:	a363      	add	r3, pc, #396	; (adr r3, 800d4b8 <atan+0x2f0>)
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	f7f2 ffab 	bl	8000288 <__aeabi_dsub>
 800d332:	4632      	mov	r2, r6
 800d334:	463b      	mov	r3, r7
 800d336:	f7f3 f95f 	bl	80005f8 <__aeabi_dmul>
 800d33a:	a361      	add	r3, pc, #388	; (adr r3, 800d4c0 <atan+0x2f8>)
 800d33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d340:	f7f2 ffa2 	bl	8000288 <__aeabi_dsub>
 800d344:	4632      	mov	r2, r6
 800d346:	463b      	mov	r3, r7
 800d348:	f7f3 f956 	bl	80005f8 <__aeabi_dmul>
 800d34c:	a35e      	add	r3, pc, #376	; (adr r3, 800d4c8 <atan+0x300>)
 800d34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d352:	f7f2 ff99 	bl	8000288 <__aeabi_dsub>
 800d356:	4632      	mov	r2, r6
 800d358:	463b      	mov	r3, r7
 800d35a:	f7f3 f94d 	bl	80005f8 <__aeabi_dmul>
 800d35e:	a35c      	add	r3, pc, #368	; (adr r3, 800d4d0 <atan+0x308>)
 800d360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d364:	f7f2 ff90 	bl	8000288 <__aeabi_dsub>
 800d368:	4632      	mov	r2, r6
 800d36a:	463b      	mov	r3, r7
 800d36c:	f7f3 f944 	bl	80005f8 <__aeabi_dmul>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4640      	mov	r0, r8
 800d376:	4649      	mov	r1, r9
 800d378:	f7f2 ff88 	bl	800028c <__adddf3>
 800d37c:	4622      	mov	r2, r4
 800d37e:	462b      	mov	r3, r5
 800d380:	f7f3 f93a 	bl	80005f8 <__aeabi_dmul>
 800d384:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	d14b      	bne.n	800d426 <atan+0x25e>
 800d38e:	4620      	mov	r0, r4
 800d390:	4629      	mov	r1, r5
 800d392:	f7f2 ff79 	bl	8000288 <__aeabi_dsub>
 800d396:	e72c      	b.n	800d1f2 <atan+0x2a>
 800d398:	ee10 0a10 	vmov	r0, s0
 800d39c:	4b53      	ldr	r3, [pc, #332]	; (800d4ec <atan+0x324>)
 800d39e:	2200      	movs	r2, #0
 800d3a0:	4629      	mov	r1, r5
 800d3a2:	f7f2 ff71 	bl	8000288 <__aeabi_dsub>
 800d3a6:	4b51      	ldr	r3, [pc, #324]	; (800d4ec <atan+0x324>)
 800d3a8:	4606      	mov	r6, r0
 800d3aa:	460f      	mov	r7, r1
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	4629      	mov	r1, r5
 800d3b2:	f7f2 ff6b 	bl	800028c <__adddf3>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	4639      	mov	r1, r7
 800d3be:	f7f3 fa45 	bl	800084c <__aeabi_ddiv>
 800d3c2:	f04f 0a01 	mov.w	sl, #1
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	460d      	mov	r5, r1
 800d3ca:	e764      	b.n	800d296 <atan+0xce>
 800d3cc:	4b49      	ldr	r3, [pc, #292]	; (800d4f4 <atan+0x32c>)
 800d3ce:	429e      	cmp	r6, r3
 800d3d0:	da1d      	bge.n	800d40e <atan+0x246>
 800d3d2:	ee10 0a10 	vmov	r0, s0
 800d3d6:	4b48      	ldr	r3, [pc, #288]	; (800d4f8 <atan+0x330>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	4629      	mov	r1, r5
 800d3dc:	f7f2 ff54 	bl	8000288 <__aeabi_dsub>
 800d3e0:	4b45      	ldr	r3, [pc, #276]	; (800d4f8 <atan+0x330>)
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	460f      	mov	r7, r1
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	4629      	mov	r1, r5
 800d3ec:	f7f3 f904 	bl	80005f8 <__aeabi_dmul>
 800d3f0:	4b3e      	ldr	r3, [pc, #248]	; (800d4ec <atan+0x324>)
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f7f2 ff4a 	bl	800028c <__adddf3>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	4639      	mov	r1, r7
 800d400:	f7f3 fa24 	bl	800084c <__aeabi_ddiv>
 800d404:	f04f 0a02 	mov.w	sl, #2
 800d408:	4604      	mov	r4, r0
 800d40a:	460d      	mov	r5, r1
 800d40c:	e743      	b.n	800d296 <atan+0xce>
 800d40e:	462b      	mov	r3, r5
 800d410:	ee10 2a10 	vmov	r2, s0
 800d414:	4939      	ldr	r1, [pc, #228]	; (800d4fc <atan+0x334>)
 800d416:	2000      	movs	r0, #0
 800d418:	f7f3 fa18 	bl	800084c <__aeabi_ddiv>
 800d41c:	f04f 0a03 	mov.w	sl, #3
 800d420:	4604      	mov	r4, r0
 800d422:	460d      	mov	r5, r1
 800d424:	e737      	b.n	800d296 <atan+0xce>
 800d426:	4b36      	ldr	r3, [pc, #216]	; (800d500 <atan+0x338>)
 800d428:	4e36      	ldr	r6, [pc, #216]	; (800d504 <atan+0x33c>)
 800d42a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d432:	f7f2 ff29 	bl	8000288 <__aeabi_dsub>
 800d436:	4622      	mov	r2, r4
 800d438:	462b      	mov	r3, r5
 800d43a:	f7f2 ff25 	bl	8000288 <__aeabi_dsub>
 800d43e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d442:	4602      	mov	r2, r0
 800d444:	460b      	mov	r3, r1
 800d446:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d44a:	f7f2 ff1d 	bl	8000288 <__aeabi_dsub>
 800d44e:	f1bb 0f00 	cmp.w	fp, #0
 800d452:	4604      	mov	r4, r0
 800d454:	460d      	mov	r5, r1
 800d456:	f6bf aed6 	bge.w	800d206 <atan+0x3e>
 800d45a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d45e:	461d      	mov	r5, r3
 800d460:	e6d1      	b.n	800d206 <atan+0x3e>
 800d462:	a51d      	add	r5, pc, #116	; (adr r5, 800d4d8 <atan+0x310>)
 800d464:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d468:	e6cd      	b.n	800d206 <atan+0x3e>
 800d46a:	bf00      	nop
 800d46c:	f3af 8000 	nop.w
 800d470:	54442d18 	.word	0x54442d18
 800d474:	bff921fb 	.word	0xbff921fb
 800d478:	8800759c 	.word	0x8800759c
 800d47c:	7e37e43c 	.word	0x7e37e43c
 800d480:	e322da11 	.word	0xe322da11
 800d484:	3f90ad3a 	.word	0x3f90ad3a
 800d488:	24760deb 	.word	0x24760deb
 800d48c:	3fa97b4b 	.word	0x3fa97b4b
 800d490:	a0d03d51 	.word	0xa0d03d51
 800d494:	3fb10d66 	.word	0x3fb10d66
 800d498:	c54c206e 	.word	0xc54c206e
 800d49c:	3fb745cd 	.word	0x3fb745cd
 800d4a0:	920083ff 	.word	0x920083ff
 800d4a4:	3fc24924 	.word	0x3fc24924
 800d4a8:	5555550d 	.word	0x5555550d
 800d4ac:	3fd55555 	.word	0x3fd55555
 800d4b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d4b4:	bfa2b444 	.word	0xbfa2b444
 800d4b8:	52defd9a 	.word	0x52defd9a
 800d4bc:	3fadde2d 	.word	0x3fadde2d
 800d4c0:	af749a6d 	.word	0xaf749a6d
 800d4c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800d4c8:	fe231671 	.word	0xfe231671
 800d4cc:	3fbc71c6 	.word	0x3fbc71c6
 800d4d0:	9998ebc4 	.word	0x9998ebc4
 800d4d4:	3fc99999 	.word	0x3fc99999
 800d4d8:	54442d18 	.word	0x54442d18
 800d4dc:	3ff921fb 	.word	0x3ff921fb
 800d4e0:	440fffff 	.word	0x440fffff
 800d4e4:	7ff00000 	.word	0x7ff00000
 800d4e8:	3fdbffff 	.word	0x3fdbffff
 800d4ec:	3ff00000 	.word	0x3ff00000
 800d4f0:	3ff2ffff 	.word	0x3ff2ffff
 800d4f4:	40038000 	.word	0x40038000
 800d4f8:	3ff80000 	.word	0x3ff80000
 800d4fc:	bff00000 	.word	0xbff00000
 800d500:	080111a8 	.word	0x080111a8
 800d504:	08011188 	.word	0x08011188

0800d508 <fabs>:
 800d508:	ec51 0b10 	vmov	r0, r1, d0
 800d50c:	ee10 2a10 	vmov	r2, s0
 800d510:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d514:	ec43 2b10 	vmov	d0, r2, r3
 800d518:	4770      	bx	lr

0800d51a <finite>:
 800d51a:	b082      	sub	sp, #8
 800d51c:	ed8d 0b00 	vstr	d0, [sp]
 800d520:	9801      	ldr	r0, [sp, #4]
 800d522:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d526:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d52a:	0fc0      	lsrs	r0, r0, #31
 800d52c:	b002      	add	sp, #8
 800d52e:	4770      	bx	lr

0800d530 <__ieee754_sqrt>:
 800d530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d534:	ec55 4b10 	vmov	r4, r5, d0
 800d538:	4e67      	ldr	r6, [pc, #412]	; (800d6d8 <__ieee754_sqrt+0x1a8>)
 800d53a:	43ae      	bics	r6, r5
 800d53c:	ee10 0a10 	vmov	r0, s0
 800d540:	ee10 2a10 	vmov	r2, s0
 800d544:	4629      	mov	r1, r5
 800d546:	462b      	mov	r3, r5
 800d548:	d10d      	bne.n	800d566 <__ieee754_sqrt+0x36>
 800d54a:	f7f3 f855 	bl	80005f8 <__aeabi_dmul>
 800d54e:	4602      	mov	r2, r0
 800d550:	460b      	mov	r3, r1
 800d552:	4620      	mov	r0, r4
 800d554:	4629      	mov	r1, r5
 800d556:	f7f2 fe99 	bl	800028c <__adddf3>
 800d55a:	4604      	mov	r4, r0
 800d55c:	460d      	mov	r5, r1
 800d55e:	ec45 4b10 	vmov	d0, r4, r5
 800d562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d566:	2d00      	cmp	r5, #0
 800d568:	dc0b      	bgt.n	800d582 <__ieee754_sqrt+0x52>
 800d56a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d56e:	4326      	orrs	r6, r4
 800d570:	d0f5      	beq.n	800d55e <__ieee754_sqrt+0x2e>
 800d572:	b135      	cbz	r5, 800d582 <__ieee754_sqrt+0x52>
 800d574:	f7f2 fe88 	bl	8000288 <__aeabi_dsub>
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	f7f3 f966 	bl	800084c <__aeabi_ddiv>
 800d580:	e7eb      	b.n	800d55a <__ieee754_sqrt+0x2a>
 800d582:	1509      	asrs	r1, r1, #20
 800d584:	f000 808d 	beq.w	800d6a2 <__ieee754_sqrt+0x172>
 800d588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d58c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d594:	07c9      	lsls	r1, r1, #31
 800d596:	bf5c      	itt	pl
 800d598:	005b      	lslpl	r3, r3, #1
 800d59a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d59e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d5a2:	bf58      	it	pl
 800d5a4:	0052      	lslpl	r2, r2, #1
 800d5a6:	2500      	movs	r5, #0
 800d5a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d5ac:	1076      	asrs	r6, r6, #1
 800d5ae:	0052      	lsls	r2, r2, #1
 800d5b0:	f04f 0e16 	mov.w	lr, #22
 800d5b4:	46ac      	mov	ip, r5
 800d5b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d5ba:	eb0c 0001 	add.w	r0, ip, r1
 800d5be:	4298      	cmp	r0, r3
 800d5c0:	bfde      	ittt	le
 800d5c2:	1a1b      	suble	r3, r3, r0
 800d5c4:	eb00 0c01 	addle.w	ip, r0, r1
 800d5c8:	186d      	addle	r5, r5, r1
 800d5ca:	005b      	lsls	r3, r3, #1
 800d5cc:	f1be 0e01 	subs.w	lr, lr, #1
 800d5d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d5d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d5d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d5dc:	d1ed      	bne.n	800d5ba <__ieee754_sqrt+0x8a>
 800d5de:	4674      	mov	r4, lr
 800d5e0:	2720      	movs	r7, #32
 800d5e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d5e6:	4563      	cmp	r3, ip
 800d5e8:	eb01 000e 	add.w	r0, r1, lr
 800d5ec:	dc02      	bgt.n	800d5f4 <__ieee754_sqrt+0xc4>
 800d5ee:	d113      	bne.n	800d618 <__ieee754_sqrt+0xe8>
 800d5f0:	4290      	cmp	r0, r2
 800d5f2:	d811      	bhi.n	800d618 <__ieee754_sqrt+0xe8>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	eb00 0e01 	add.w	lr, r0, r1
 800d5fa:	da57      	bge.n	800d6ac <__ieee754_sqrt+0x17c>
 800d5fc:	f1be 0f00 	cmp.w	lr, #0
 800d600:	db54      	blt.n	800d6ac <__ieee754_sqrt+0x17c>
 800d602:	f10c 0801 	add.w	r8, ip, #1
 800d606:	eba3 030c 	sub.w	r3, r3, ip
 800d60a:	4290      	cmp	r0, r2
 800d60c:	bf88      	it	hi
 800d60e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d612:	1a12      	subs	r2, r2, r0
 800d614:	440c      	add	r4, r1
 800d616:	46c4      	mov	ip, r8
 800d618:	005b      	lsls	r3, r3, #1
 800d61a:	3f01      	subs	r7, #1
 800d61c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d620:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d624:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d628:	d1dd      	bne.n	800d5e6 <__ieee754_sqrt+0xb6>
 800d62a:	4313      	orrs	r3, r2
 800d62c:	d01b      	beq.n	800d666 <__ieee754_sqrt+0x136>
 800d62e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d6dc <__ieee754_sqrt+0x1ac>
 800d632:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d6e0 <__ieee754_sqrt+0x1b0>
 800d636:	e9da 0100 	ldrd	r0, r1, [sl]
 800d63a:	e9db 2300 	ldrd	r2, r3, [fp]
 800d63e:	f7f2 fe23 	bl	8000288 <__aeabi_dsub>
 800d642:	e9da 8900 	ldrd	r8, r9, [sl]
 800d646:	4602      	mov	r2, r0
 800d648:	460b      	mov	r3, r1
 800d64a:	4640      	mov	r0, r8
 800d64c:	4649      	mov	r1, r9
 800d64e:	f7f3 fa4f 	bl	8000af0 <__aeabi_dcmple>
 800d652:	b140      	cbz	r0, 800d666 <__ieee754_sqrt+0x136>
 800d654:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d658:	e9da 0100 	ldrd	r0, r1, [sl]
 800d65c:	e9db 2300 	ldrd	r2, r3, [fp]
 800d660:	d126      	bne.n	800d6b0 <__ieee754_sqrt+0x180>
 800d662:	3501      	adds	r5, #1
 800d664:	463c      	mov	r4, r7
 800d666:	106a      	asrs	r2, r5, #1
 800d668:	0863      	lsrs	r3, r4, #1
 800d66a:	07e9      	lsls	r1, r5, #31
 800d66c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d670:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d674:	bf48      	it	mi
 800d676:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d67a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d67e:	461c      	mov	r4, r3
 800d680:	e76d      	b.n	800d55e <__ieee754_sqrt+0x2e>
 800d682:	0ad3      	lsrs	r3, r2, #11
 800d684:	3815      	subs	r0, #21
 800d686:	0552      	lsls	r2, r2, #21
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d0fa      	beq.n	800d682 <__ieee754_sqrt+0x152>
 800d68c:	02dc      	lsls	r4, r3, #11
 800d68e:	d50a      	bpl.n	800d6a6 <__ieee754_sqrt+0x176>
 800d690:	f1c1 0420 	rsb	r4, r1, #32
 800d694:	fa22 f404 	lsr.w	r4, r2, r4
 800d698:	1e4d      	subs	r5, r1, #1
 800d69a:	408a      	lsls	r2, r1
 800d69c:	4323      	orrs	r3, r4
 800d69e:	1b41      	subs	r1, r0, r5
 800d6a0:	e772      	b.n	800d588 <__ieee754_sqrt+0x58>
 800d6a2:	4608      	mov	r0, r1
 800d6a4:	e7f0      	b.n	800d688 <__ieee754_sqrt+0x158>
 800d6a6:	005b      	lsls	r3, r3, #1
 800d6a8:	3101      	adds	r1, #1
 800d6aa:	e7ef      	b.n	800d68c <__ieee754_sqrt+0x15c>
 800d6ac:	46e0      	mov	r8, ip
 800d6ae:	e7aa      	b.n	800d606 <__ieee754_sqrt+0xd6>
 800d6b0:	f7f2 fdec 	bl	800028c <__adddf3>
 800d6b4:	e9da 8900 	ldrd	r8, r9, [sl]
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	4640      	mov	r0, r8
 800d6be:	4649      	mov	r1, r9
 800d6c0:	f7f3 fa0c 	bl	8000adc <__aeabi_dcmplt>
 800d6c4:	b120      	cbz	r0, 800d6d0 <__ieee754_sqrt+0x1a0>
 800d6c6:	1ca0      	adds	r0, r4, #2
 800d6c8:	bf08      	it	eq
 800d6ca:	3501      	addeq	r5, #1
 800d6cc:	3402      	adds	r4, #2
 800d6ce:	e7ca      	b.n	800d666 <__ieee754_sqrt+0x136>
 800d6d0:	3401      	adds	r4, #1
 800d6d2:	f024 0401 	bic.w	r4, r4, #1
 800d6d6:	e7c6      	b.n	800d666 <__ieee754_sqrt+0x136>
 800d6d8:	7ff00000 	.word	0x7ff00000
 800d6dc:	20000138 	.word	0x20000138
 800d6e0:	20000140 	.word	0x20000140
 800d6e4:	00000000 	.word	0x00000000

0800d6e8 <__ieee754_pow>:
 800d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	ed2d 8b06 	vpush	{d8-d10}
 800d6f0:	b089      	sub	sp, #36	; 0x24
 800d6f2:	ed8d 1b00 	vstr	d1, [sp]
 800d6f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d6fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d6fe:	ea58 0102 	orrs.w	r1, r8, r2
 800d702:	ec57 6b10 	vmov	r6, r7, d0
 800d706:	d115      	bne.n	800d734 <__ieee754_pow+0x4c>
 800d708:	19b3      	adds	r3, r6, r6
 800d70a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d70e:	4152      	adcs	r2, r2
 800d710:	4299      	cmp	r1, r3
 800d712:	4b89      	ldr	r3, [pc, #548]	; (800d938 <__ieee754_pow+0x250>)
 800d714:	4193      	sbcs	r3, r2
 800d716:	f080 84d1 	bcs.w	800e0bc <__ieee754_pow+0x9d4>
 800d71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d71e:	4630      	mov	r0, r6
 800d720:	4639      	mov	r1, r7
 800d722:	f7f2 fdb3 	bl	800028c <__adddf3>
 800d726:	ec41 0b10 	vmov	d0, r0, r1
 800d72a:	b009      	add	sp, #36	; 0x24
 800d72c:	ecbd 8b06 	vpop	{d8-d10}
 800d730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d734:	4b81      	ldr	r3, [pc, #516]	; (800d93c <__ieee754_pow+0x254>)
 800d736:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d73a:	429c      	cmp	r4, r3
 800d73c:	ee10 aa10 	vmov	sl, s0
 800d740:	463d      	mov	r5, r7
 800d742:	dc06      	bgt.n	800d752 <__ieee754_pow+0x6a>
 800d744:	d101      	bne.n	800d74a <__ieee754_pow+0x62>
 800d746:	2e00      	cmp	r6, #0
 800d748:	d1e7      	bne.n	800d71a <__ieee754_pow+0x32>
 800d74a:	4598      	cmp	r8, r3
 800d74c:	dc01      	bgt.n	800d752 <__ieee754_pow+0x6a>
 800d74e:	d10f      	bne.n	800d770 <__ieee754_pow+0x88>
 800d750:	b172      	cbz	r2, 800d770 <__ieee754_pow+0x88>
 800d752:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d756:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d75a:	ea55 050a 	orrs.w	r5, r5, sl
 800d75e:	d1dc      	bne.n	800d71a <__ieee754_pow+0x32>
 800d760:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d764:	18db      	adds	r3, r3, r3
 800d766:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d76a:	4152      	adcs	r2, r2
 800d76c:	429d      	cmp	r5, r3
 800d76e:	e7d0      	b.n	800d712 <__ieee754_pow+0x2a>
 800d770:	2d00      	cmp	r5, #0
 800d772:	da3b      	bge.n	800d7ec <__ieee754_pow+0x104>
 800d774:	4b72      	ldr	r3, [pc, #456]	; (800d940 <__ieee754_pow+0x258>)
 800d776:	4598      	cmp	r8, r3
 800d778:	dc51      	bgt.n	800d81e <__ieee754_pow+0x136>
 800d77a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d77e:	4598      	cmp	r8, r3
 800d780:	f340 84ab 	ble.w	800e0da <__ieee754_pow+0x9f2>
 800d784:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d788:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d78c:	2b14      	cmp	r3, #20
 800d78e:	dd0f      	ble.n	800d7b0 <__ieee754_pow+0xc8>
 800d790:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d794:	fa22 f103 	lsr.w	r1, r2, r3
 800d798:	fa01 f303 	lsl.w	r3, r1, r3
 800d79c:	4293      	cmp	r3, r2
 800d79e:	f040 849c 	bne.w	800e0da <__ieee754_pow+0x9f2>
 800d7a2:	f001 0101 	and.w	r1, r1, #1
 800d7a6:	f1c1 0302 	rsb	r3, r1, #2
 800d7aa:	9304      	str	r3, [sp, #16]
 800d7ac:	b182      	cbz	r2, 800d7d0 <__ieee754_pow+0xe8>
 800d7ae:	e05f      	b.n	800d870 <__ieee754_pow+0x188>
 800d7b0:	2a00      	cmp	r2, #0
 800d7b2:	d15b      	bne.n	800d86c <__ieee754_pow+0x184>
 800d7b4:	f1c3 0314 	rsb	r3, r3, #20
 800d7b8:	fa48 f103 	asr.w	r1, r8, r3
 800d7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d7c0:	4543      	cmp	r3, r8
 800d7c2:	f040 8487 	bne.w	800e0d4 <__ieee754_pow+0x9ec>
 800d7c6:	f001 0101 	and.w	r1, r1, #1
 800d7ca:	f1c1 0302 	rsb	r3, r1, #2
 800d7ce:	9304      	str	r3, [sp, #16]
 800d7d0:	4b5c      	ldr	r3, [pc, #368]	; (800d944 <__ieee754_pow+0x25c>)
 800d7d2:	4598      	cmp	r8, r3
 800d7d4:	d132      	bne.n	800d83c <__ieee754_pow+0x154>
 800d7d6:	f1b9 0f00 	cmp.w	r9, #0
 800d7da:	f280 8477 	bge.w	800e0cc <__ieee754_pow+0x9e4>
 800d7de:	4959      	ldr	r1, [pc, #356]	; (800d944 <__ieee754_pow+0x25c>)
 800d7e0:	4632      	mov	r2, r6
 800d7e2:	463b      	mov	r3, r7
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	f7f3 f831 	bl	800084c <__aeabi_ddiv>
 800d7ea:	e79c      	b.n	800d726 <__ieee754_pow+0x3e>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	9304      	str	r3, [sp, #16]
 800d7f0:	2a00      	cmp	r2, #0
 800d7f2:	d13d      	bne.n	800d870 <__ieee754_pow+0x188>
 800d7f4:	4b51      	ldr	r3, [pc, #324]	; (800d93c <__ieee754_pow+0x254>)
 800d7f6:	4598      	cmp	r8, r3
 800d7f8:	d1ea      	bne.n	800d7d0 <__ieee754_pow+0xe8>
 800d7fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d7fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d802:	ea53 030a 	orrs.w	r3, r3, sl
 800d806:	f000 8459 	beq.w	800e0bc <__ieee754_pow+0x9d4>
 800d80a:	4b4f      	ldr	r3, [pc, #316]	; (800d948 <__ieee754_pow+0x260>)
 800d80c:	429c      	cmp	r4, r3
 800d80e:	dd08      	ble.n	800d822 <__ieee754_pow+0x13a>
 800d810:	f1b9 0f00 	cmp.w	r9, #0
 800d814:	f2c0 8456 	blt.w	800e0c4 <__ieee754_pow+0x9dc>
 800d818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d81c:	e783      	b.n	800d726 <__ieee754_pow+0x3e>
 800d81e:	2302      	movs	r3, #2
 800d820:	e7e5      	b.n	800d7ee <__ieee754_pow+0x106>
 800d822:	f1b9 0f00 	cmp.w	r9, #0
 800d826:	f04f 0000 	mov.w	r0, #0
 800d82a:	f04f 0100 	mov.w	r1, #0
 800d82e:	f6bf af7a 	bge.w	800d726 <__ieee754_pow+0x3e>
 800d832:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d836:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d83a:	e774      	b.n	800d726 <__ieee754_pow+0x3e>
 800d83c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d840:	d106      	bne.n	800d850 <__ieee754_pow+0x168>
 800d842:	4632      	mov	r2, r6
 800d844:	463b      	mov	r3, r7
 800d846:	4630      	mov	r0, r6
 800d848:	4639      	mov	r1, r7
 800d84a:	f7f2 fed5 	bl	80005f8 <__aeabi_dmul>
 800d84e:	e76a      	b.n	800d726 <__ieee754_pow+0x3e>
 800d850:	4b3e      	ldr	r3, [pc, #248]	; (800d94c <__ieee754_pow+0x264>)
 800d852:	4599      	cmp	r9, r3
 800d854:	d10c      	bne.n	800d870 <__ieee754_pow+0x188>
 800d856:	2d00      	cmp	r5, #0
 800d858:	db0a      	blt.n	800d870 <__ieee754_pow+0x188>
 800d85a:	ec47 6b10 	vmov	d0, r6, r7
 800d85e:	b009      	add	sp, #36	; 0x24
 800d860:	ecbd 8b06 	vpop	{d8-d10}
 800d864:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d868:	f7ff be62 	b.w	800d530 <__ieee754_sqrt>
 800d86c:	2300      	movs	r3, #0
 800d86e:	9304      	str	r3, [sp, #16]
 800d870:	ec47 6b10 	vmov	d0, r6, r7
 800d874:	f7ff fe48 	bl	800d508 <fabs>
 800d878:	ec51 0b10 	vmov	r0, r1, d0
 800d87c:	f1ba 0f00 	cmp.w	sl, #0
 800d880:	d129      	bne.n	800d8d6 <__ieee754_pow+0x1ee>
 800d882:	b124      	cbz	r4, 800d88e <__ieee754_pow+0x1a6>
 800d884:	4b2f      	ldr	r3, [pc, #188]	; (800d944 <__ieee754_pow+0x25c>)
 800d886:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d123      	bne.n	800d8d6 <__ieee754_pow+0x1ee>
 800d88e:	f1b9 0f00 	cmp.w	r9, #0
 800d892:	da05      	bge.n	800d8a0 <__ieee754_pow+0x1b8>
 800d894:	4602      	mov	r2, r0
 800d896:	460b      	mov	r3, r1
 800d898:	2000      	movs	r0, #0
 800d89a:	492a      	ldr	r1, [pc, #168]	; (800d944 <__ieee754_pow+0x25c>)
 800d89c:	f7f2 ffd6 	bl	800084c <__aeabi_ddiv>
 800d8a0:	2d00      	cmp	r5, #0
 800d8a2:	f6bf af40 	bge.w	800d726 <__ieee754_pow+0x3e>
 800d8a6:	9b04      	ldr	r3, [sp, #16]
 800d8a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d8ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d8b0:	431c      	orrs	r4, r3
 800d8b2:	d108      	bne.n	800d8c6 <__ieee754_pow+0x1de>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	f7f2 fce4 	bl	8000288 <__aeabi_dsub>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	e78f      	b.n	800d7e6 <__ieee754_pow+0xfe>
 800d8c6:	9b04      	ldr	r3, [sp, #16]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	f47f af2c 	bne.w	800d726 <__ieee754_pow+0x3e>
 800d8ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	e727      	b.n	800d726 <__ieee754_pow+0x3e>
 800d8d6:	0feb      	lsrs	r3, r5, #31
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	9306      	str	r3, [sp, #24]
 800d8dc:	9a06      	ldr	r2, [sp, #24]
 800d8de:	9b04      	ldr	r3, [sp, #16]
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	d102      	bne.n	800d8ea <__ieee754_pow+0x202>
 800d8e4:	4632      	mov	r2, r6
 800d8e6:	463b      	mov	r3, r7
 800d8e8:	e7e6      	b.n	800d8b8 <__ieee754_pow+0x1d0>
 800d8ea:	4b19      	ldr	r3, [pc, #100]	; (800d950 <__ieee754_pow+0x268>)
 800d8ec:	4598      	cmp	r8, r3
 800d8ee:	f340 80fb 	ble.w	800dae8 <__ieee754_pow+0x400>
 800d8f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d8f6:	4598      	cmp	r8, r3
 800d8f8:	4b13      	ldr	r3, [pc, #76]	; (800d948 <__ieee754_pow+0x260>)
 800d8fa:	dd0c      	ble.n	800d916 <__ieee754_pow+0x22e>
 800d8fc:	429c      	cmp	r4, r3
 800d8fe:	dc0f      	bgt.n	800d920 <__ieee754_pow+0x238>
 800d900:	f1b9 0f00 	cmp.w	r9, #0
 800d904:	da0f      	bge.n	800d926 <__ieee754_pow+0x23e>
 800d906:	2000      	movs	r0, #0
 800d908:	b009      	add	sp, #36	; 0x24
 800d90a:	ecbd 8b06 	vpop	{d8-d10}
 800d90e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d912:	f000 bcba 	b.w	800e28a <__math_oflow>
 800d916:	429c      	cmp	r4, r3
 800d918:	dbf2      	blt.n	800d900 <__ieee754_pow+0x218>
 800d91a:	4b0a      	ldr	r3, [pc, #40]	; (800d944 <__ieee754_pow+0x25c>)
 800d91c:	429c      	cmp	r4, r3
 800d91e:	dd19      	ble.n	800d954 <__ieee754_pow+0x26c>
 800d920:	f1b9 0f00 	cmp.w	r9, #0
 800d924:	dcef      	bgt.n	800d906 <__ieee754_pow+0x21e>
 800d926:	2000      	movs	r0, #0
 800d928:	b009      	add	sp, #36	; 0x24
 800d92a:	ecbd 8b06 	vpop	{d8-d10}
 800d92e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d932:	f000 bca1 	b.w	800e278 <__math_uflow>
 800d936:	bf00      	nop
 800d938:	fff00000 	.word	0xfff00000
 800d93c:	7ff00000 	.word	0x7ff00000
 800d940:	433fffff 	.word	0x433fffff
 800d944:	3ff00000 	.word	0x3ff00000
 800d948:	3fefffff 	.word	0x3fefffff
 800d94c:	3fe00000 	.word	0x3fe00000
 800d950:	41e00000 	.word	0x41e00000
 800d954:	4b60      	ldr	r3, [pc, #384]	; (800dad8 <__ieee754_pow+0x3f0>)
 800d956:	2200      	movs	r2, #0
 800d958:	f7f2 fc96 	bl	8000288 <__aeabi_dsub>
 800d95c:	a354      	add	r3, pc, #336	; (adr r3, 800dab0 <__ieee754_pow+0x3c8>)
 800d95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d962:	4604      	mov	r4, r0
 800d964:	460d      	mov	r5, r1
 800d966:	f7f2 fe47 	bl	80005f8 <__aeabi_dmul>
 800d96a:	a353      	add	r3, pc, #332	; (adr r3, 800dab8 <__ieee754_pow+0x3d0>)
 800d96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d970:	4606      	mov	r6, r0
 800d972:	460f      	mov	r7, r1
 800d974:	4620      	mov	r0, r4
 800d976:	4629      	mov	r1, r5
 800d978:	f7f2 fe3e 	bl	80005f8 <__aeabi_dmul>
 800d97c:	4b57      	ldr	r3, [pc, #348]	; (800dadc <__ieee754_pow+0x3f4>)
 800d97e:	4682      	mov	sl, r0
 800d980:	468b      	mov	fp, r1
 800d982:	2200      	movs	r2, #0
 800d984:	4620      	mov	r0, r4
 800d986:	4629      	mov	r1, r5
 800d988:	f7f2 fe36 	bl	80005f8 <__aeabi_dmul>
 800d98c:	4602      	mov	r2, r0
 800d98e:	460b      	mov	r3, r1
 800d990:	a14b      	add	r1, pc, #300	; (adr r1, 800dac0 <__ieee754_pow+0x3d8>)
 800d992:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d996:	f7f2 fc77 	bl	8000288 <__aeabi_dsub>
 800d99a:	4622      	mov	r2, r4
 800d99c:	462b      	mov	r3, r5
 800d99e:	f7f2 fe2b 	bl	80005f8 <__aeabi_dmul>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	2000      	movs	r0, #0
 800d9a8:	494d      	ldr	r1, [pc, #308]	; (800dae0 <__ieee754_pow+0x3f8>)
 800d9aa:	f7f2 fc6d 	bl	8000288 <__aeabi_dsub>
 800d9ae:	4622      	mov	r2, r4
 800d9b0:	4680      	mov	r8, r0
 800d9b2:	4689      	mov	r9, r1
 800d9b4:	462b      	mov	r3, r5
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f2 fe1d 	bl	80005f8 <__aeabi_dmul>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	f7f2 fe17 	bl	80005f8 <__aeabi_dmul>
 800d9ca:	a33f      	add	r3, pc, #252	; (adr r3, 800dac8 <__ieee754_pow+0x3e0>)
 800d9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d0:	f7f2 fe12 	bl	80005f8 <__aeabi_dmul>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	4650      	mov	r0, sl
 800d9da:	4659      	mov	r1, fp
 800d9dc:	f7f2 fc54 	bl	8000288 <__aeabi_dsub>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	4680      	mov	r8, r0
 800d9e6:	4689      	mov	r9, r1
 800d9e8:	4630      	mov	r0, r6
 800d9ea:	4639      	mov	r1, r7
 800d9ec:	f7f2 fc4e 	bl	800028c <__adddf3>
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	4632      	mov	r2, r6
 800d9f4:	463b      	mov	r3, r7
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	460d      	mov	r5, r1
 800d9fa:	f7f2 fc45 	bl	8000288 <__aeabi_dsub>
 800d9fe:	4602      	mov	r2, r0
 800da00:	460b      	mov	r3, r1
 800da02:	4640      	mov	r0, r8
 800da04:	4649      	mov	r1, r9
 800da06:	f7f2 fc3f 	bl	8000288 <__aeabi_dsub>
 800da0a:	9b04      	ldr	r3, [sp, #16]
 800da0c:	9a06      	ldr	r2, [sp, #24]
 800da0e:	3b01      	subs	r3, #1
 800da10:	4313      	orrs	r3, r2
 800da12:	4682      	mov	sl, r0
 800da14:	468b      	mov	fp, r1
 800da16:	f040 81e7 	bne.w	800dde8 <__ieee754_pow+0x700>
 800da1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800dad0 <__ieee754_pow+0x3e8>
 800da1e:	eeb0 8a47 	vmov.f32	s16, s14
 800da22:	eef0 8a67 	vmov.f32	s17, s15
 800da26:	e9dd 6700 	ldrd	r6, r7, [sp]
 800da2a:	2600      	movs	r6, #0
 800da2c:	4632      	mov	r2, r6
 800da2e:	463b      	mov	r3, r7
 800da30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da34:	f7f2 fc28 	bl	8000288 <__aeabi_dsub>
 800da38:	4622      	mov	r2, r4
 800da3a:	462b      	mov	r3, r5
 800da3c:	f7f2 fddc 	bl	80005f8 <__aeabi_dmul>
 800da40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da44:	4680      	mov	r8, r0
 800da46:	4689      	mov	r9, r1
 800da48:	4650      	mov	r0, sl
 800da4a:	4659      	mov	r1, fp
 800da4c:	f7f2 fdd4 	bl	80005f8 <__aeabi_dmul>
 800da50:	4602      	mov	r2, r0
 800da52:	460b      	mov	r3, r1
 800da54:	4640      	mov	r0, r8
 800da56:	4649      	mov	r1, r9
 800da58:	f7f2 fc18 	bl	800028c <__adddf3>
 800da5c:	4632      	mov	r2, r6
 800da5e:	463b      	mov	r3, r7
 800da60:	4680      	mov	r8, r0
 800da62:	4689      	mov	r9, r1
 800da64:	4620      	mov	r0, r4
 800da66:	4629      	mov	r1, r5
 800da68:	f7f2 fdc6 	bl	80005f8 <__aeabi_dmul>
 800da6c:	460b      	mov	r3, r1
 800da6e:	4604      	mov	r4, r0
 800da70:	460d      	mov	r5, r1
 800da72:	4602      	mov	r2, r0
 800da74:	4649      	mov	r1, r9
 800da76:	4640      	mov	r0, r8
 800da78:	f7f2 fc08 	bl	800028c <__adddf3>
 800da7c:	4b19      	ldr	r3, [pc, #100]	; (800dae4 <__ieee754_pow+0x3fc>)
 800da7e:	4299      	cmp	r1, r3
 800da80:	ec45 4b19 	vmov	d9, r4, r5
 800da84:	4606      	mov	r6, r0
 800da86:	460f      	mov	r7, r1
 800da88:	468b      	mov	fp, r1
 800da8a:	f340 82f0 	ble.w	800e06e <__ieee754_pow+0x986>
 800da8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800da92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800da96:	4303      	orrs	r3, r0
 800da98:	f000 81e4 	beq.w	800de64 <__ieee754_pow+0x77c>
 800da9c:	ec51 0b18 	vmov	r0, r1, d8
 800daa0:	2200      	movs	r2, #0
 800daa2:	2300      	movs	r3, #0
 800daa4:	f7f3 f81a 	bl	8000adc <__aeabi_dcmplt>
 800daa8:	3800      	subs	r0, #0
 800daaa:	bf18      	it	ne
 800daac:	2001      	movne	r0, #1
 800daae:	e72b      	b.n	800d908 <__ieee754_pow+0x220>
 800dab0:	60000000 	.word	0x60000000
 800dab4:	3ff71547 	.word	0x3ff71547
 800dab8:	f85ddf44 	.word	0xf85ddf44
 800dabc:	3e54ae0b 	.word	0x3e54ae0b
 800dac0:	55555555 	.word	0x55555555
 800dac4:	3fd55555 	.word	0x3fd55555
 800dac8:	652b82fe 	.word	0x652b82fe
 800dacc:	3ff71547 	.word	0x3ff71547
 800dad0:	00000000 	.word	0x00000000
 800dad4:	bff00000 	.word	0xbff00000
 800dad8:	3ff00000 	.word	0x3ff00000
 800dadc:	3fd00000 	.word	0x3fd00000
 800dae0:	3fe00000 	.word	0x3fe00000
 800dae4:	408fffff 	.word	0x408fffff
 800dae8:	4bd5      	ldr	r3, [pc, #852]	; (800de40 <__ieee754_pow+0x758>)
 800daea:	402b      	ands	r3, r5
 800daec:	2200      	movs	r2, #0
 800daee:	b92b      	cbnz	r3, 800dafc <__ieee754_pow+0x414>
 800daf0:	4bd4      	ldr	r3, [pc, #848]	; (800de44 <__ieee754_pow+0x75c>)
 800daf2:	f7f2 fd81 	bl	80005f8 <__aeabi_dmul>
 800daf6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dafa:	460c      	mov	r4, r1
 800dafc:	1523      	asrs	r3, r4, #20
 800dafe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800db02:	4413      	add	r3, r2
 800db04:	9305      	str	r3, [sp, #20]
 800db06:	4bd0      	ldr	r3, [pc, #832]	; (800de48 <__ieee754_pow+0x760>)
 800db08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800db0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800db10:	429c      	cmp	r4, r3
 800db12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800db16:	dd08      	ble.n	800db2a <__ieee754_pow+0x442>
 800db18:	4bcc      	ldr	r3, [pc, #816]	; (800de4c <__ieee754_pow+0x764>)
 800db1a:	429c      	cmp	r4, r3
 800db1c:	f340 8162 	ble.w	800dde4 <__ieee754_pow+0x6fc>
 800db20:	9b05      	ldr	r3, [sp, #20]
 800db22:	3301      	adds	r3, #1
 800db24:	9305      	str	r3, [sp, #20]
 800db26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800db2a:	2400      	movs	r4, #0
 800db2c:	00e3      	lsls	r3, r4, #3
 800db2e:	9307      	str	r3, [sp, #28]
 800db30:	4bc7      	ldr	r3, [pc, #796]	; (800de50 <__ieee754_pow+0x768>)
 800db32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db36:	ed93 7b00 	vldr	d7, [r3]
 800db3a:	4629      	mov	r1, r5
 800db3c:	ec53 2b17 	vmov	r2, r3, d7
 800db40:	eeb0 9a47 	vmov.f32	s18, s14
 800db44:	eef0 9a67 	vmov.f32	s19, s15
 800db48:	4682      	mov	sl, r0
 800db4a:	f7f2 fb9d 	bl	8000288 <__aeabi_dsub>
 800db4e:	4652      	mov	r2, sl
 800db50:	4606      	mov	r6, r0
 800db52:	460f      	mov	r7, r1
 800db54:	462b      	mov	r3, r5
 800db56:	ec51 0b19 	vmov	r0, r1, d9
 800db5a:	f7f2 fb97 	bl	800028c <__adddf3>
 800db5e:	4602      	mov	r2, r0
 800db60:	460b      	mov	r3, r1
 800db62:	2000      	movs	r0, #0
 800db64:	49bb      	ldr	r1, [pc, #748]	; (800de54 <__ieee754_pow+0x76c>)
 800db66:	f7f2 fe71 	bl	800084c <__aeabi_ddiv>
 800db6a:	ec41 0b1a 	vmov	d10, r0, r1
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4630      	mov	r0, r6
 800db74:	4639      	mov	r1, r7
 800db76:	f7f2 fd3f 	bl	80005f8 <__aeabi_dmul>
 800db7a:	2300      	movs	r3, #0
 800db7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db80:	9302      	str	r3, [sp, #8]
 800db82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800db86:	46ab      	mov	fp, r5
 800db88:	106d      	asrs	r5, r5, #1
 800db8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800db8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800db92:	ec41 0b18 	vmov	d8, r0, r1
 800db96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800db9a:	2200      	movs	r2, #0
 800db9c:	4640      	mov	r0, r8
 800db9e:	4649      	mov	r1, r9
 800dba0:	4614      	mov	r4, r2
 800dba2:	461d      	mov	r5, r3
 800dba4:	f7f2 fd28 	bl	80005f8 <__aeabi_dmul>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	460b      	mov	r3, r1
 800dbac:	4630      	mov	r0, r6
 800dbae:	4639      	mov	r1, r7
 800dbb0:	f7f2 fb6a 	bl	8000288 <__aeabi_dsub>
 800dbb4:	ec53 2b19 	vmov	r2, r3, d9
 800dbb8:	4606      	mov	r6, r0
 800dbba:	460f      	mov	r7, r1
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	4629      	mov	r1, r5
 800dbc0:	f7f2 fb62 	bl	8000288 <__aeabi_dsub>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	4650      	mov	r0, sl
 800dbca:	4659      	mov	r1, fp
 800dbcc:	f7f2 fb5c 	bl	8000288 <__aeabi_dsub>
 800dbd0:	4642      	mov	r2, r8
 800dbd2:	464b      	mov	r3, r9
 800dbd4:	f7f2 fd10 	bl	80005f8 <__aeabi_dmul>
 800dbd8:	4602      	mov	r2, r0
 800dbda:	460b      	mov	r3, r1
 800dbdc:	4630      	mov	r0, r6
 800dbde:	4639      	mov	r1, r7
 800dbe0:	f7f2 fb52 	bl	8000288 <__aeabi_dsub>
 800dbe4:	ec53 2b1a 	vmov	r2, r3, d10
 800dbe8:	f7f2 fd06 	bl	80005f8 <__aeabi_dmul>
 800dbec:	ec53 2b18 	vmov	r2, r3, d8
 800dbf0:	ec41 0b19 	vmov	d9, r0, r1
 800dbf4:	ec51 0b18 	vmov	r0, r1, d8
 800dbf8:	f7f2 fcfe 	bl	80005f8 <__aeabi_dmul>
 800dbfc:	a37c      	add	r3, pc, #496	; (adr r3, 800ddf0 <__ieee754_pow+0x708>)
 800dbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc02:	4604      	mov	r4, r0
 800dc04:	460d      	mov	r5, r1
 800dc06:	f7f2 fcf7 	bl	80005f8 <__aeabi_dmul>
 800dc0a:	a37b      	add	r3, pc, #492	; (adr r3, 800ddf8 <__ieee754_pow+0x710>)
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	f7f2 fb3c 	bl	800028c <__adddf3>
 800dc14:	4622      	mov	r2, r4
 800dc16:	462b      	mov	r3, r5
 800dc18:	f7f2 fcee 	bl	80005f8 <__aeabi_dmul>
 800dc1c:	a378      	add	r3, pc, #480	; (adr r3, 800de00 <__ieee754_pow+0x718>)
 800dc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc22:	f7f2 fb33 	bl	800028c <__adddf3>
 800dc26:	4622      	mov	r2, r4
 800dc28:	462b      	mov	r3, r5
 800dc2a:	f7f2 fce5 	bl	80005f8 <__aeabi_dmul>
 800dc2e:	a376      	add	r3, pc, #472	; (adr r3, 800de08 <__ieee754_pow+0x720>)
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	f7f2 fb2a 	bl	800028c <__adddf3>
 800dc38:	4622      	mov	r2, r4
 800dc3a:	462b      	mov	r3, r5
 800dc3c:	f7f2 fcdc 	bl	80005f8 <__aeabi_dmul>
 800dc40:	a373      	add	r3, pc, #460	; (adr r3, 800de10 <__ieee754_pow+0x728>)
 800dc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc46:	f7f2 fb21 	bl	800028c <__adddf3>
 800dc4a:	4622      	mov	r2, r4
 800dc4c:	462b      	mov	r3, r5
 800dc4e:	f7f2 fcd3 	bl	80005f8 <__aeabi_dmul>
 800dc52:	a371      	add	r3, pc, #452	; (adr r3, 800de18 <__ieee754_pow+0x730>)
 800dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc58:	f7f2 fb18 	bl	800028c <__adddf3>
 800dc5c:	4622      	mov	r2, r4
 800dc5e:	4606      	mov	r6, r0
 800dc60:	460f      	mov	r7, r1
 800dc62:	462b      	mov	r3, r5
 800dc64:	4620      	mov	r0, r4
 800dc66:	4629      	mov	r1, r5
 800dc68:	f7f2 fcc6 	bl	80005f8 <__aeabi_dmul>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	4630      	mov	r0, r6
 800dc72:	4639      	mov	r1, r7
 800dc74:	f7f2 fcc0 	bl	80005f8 <__aeabi_dmul>
 800dc78:	4642      	mov	r2, r8
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	460d      	mov	r5, r1
 800dc7e:	464b      	mov	r3, r9
 800dc80:	ec51 0b18 	vmov	r0, r1, d8
 800dc84:	f7f2 fb02 	bl	800028c <__adddf3>
 800dc88:	ec53 2b19 	vmov	r2, r3, d9
 800dc8c:	f7f2 fcb4 	bl	80005f8 <__aeabi_dmul>
 800dc90:	4622      	mov	r2, r4
 800dc92:	462b      	mov	r3, r5
 800dc94:	f7f2 fafa 	bl	800028c <__adddf3>
 800dc98:	4642      	mov	r2, r8
 800dc9a:	4682      	mov	sl, r0
 800dc9c:	468b      	mov	fp, r1
 800dc9e:	464b      	mov	r3, r9
 800dca0:	4640      	mov	r0, r8
 800dca2:	4649      	mov	r1, r9
 800dca4:	f7f2 fca8 	bl	80005f8 <__aeabi_dmul>
 800dca8:	4b6b      	ldr	r3, [pc, #428]	; (800de58 <__ieee754_pow+0x770>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	4606      	mov	r6, r0
 800dcae:	460f      	mov	r7, r1
 800dcb0:	f7f2 faec 	bl	800028c <__adddf3>
 800dcb4:	4652      	mov	r2, sl
 800dcb6:	465b      	mov	r3, fp
 800dcb8:	f7f2 fae8 	bl	800028c <__adddf3>
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	460d      	mov	r5, r1
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	4649      	mov	r1, r9
 800dcca:	f7f2 fc95 	bl	80005f8 <__aeabi_dmul>
 800dcce:	4b62      	ldr	r3, [pc, #392]	; (800de58 <__ieee754_pow+0x770>)
 800dcd0:	4680      	mov	r8, r0
 800dcd2:	4689      	mov	r9, r1
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	4629      	mov	r1, r5
 800dcda:	f7f2 fad5 	bl	8000288 <__aeabi_dsub>
 800dcde:	4632      	mov	r2, r6
 800dce0:	463b      	mov	r3, r7
 800dce2:	f7f2 fad1 	bl	8000288 <__aeabi_dsub>
 800dce6:	4602      	mov	r2, r0
 800dce8:	460b      	mov	r3, r1
 800dcea:	4650      	mov	r0, sl
 800dcec:	4659      	mov	r1, fp
 800dcee:	f7f2 facb 	bl	8000288 <__aeabi_dsub>
 800dcf2:	ec53 2b18 	vmov	r2, r3, d8
 800dcf6:	f7f2 fc7f 	bl	80005f8 <__aeabi_dmul>
 800dcfa:	4622      	mov	r2, r4
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	460f      	mov	r7, r1
 800dd00:	462b      	mov	r3, r5
 800dd02:	ec51 0b19 	vmov	r0, r1, d9
 800dd06:	f7f2 fc77 	bl	80005f8 <__aeabi_dmul>
 800dd0a:	4602      	mov	r2, r0
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	4630      	mov	r0, r6
 800dd10:	4639      	mov	r1, r7
 800dd12:	f7f2 fabb 	bl	800028c <__adddf3>
 800dd16:	4606      	mov	r6, r0
 800dd18:	460f      	mov	r7, r1
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	4640      	mov	r0, r8
 800dd20:	4649      	mov	r1, r9
 800dd22:	f7f2 fab3 	bl	800028c <__adddf3>
 800dd26:	a33e      	add	r3, pc, #248	; (adr r3, 800de20 <__ieee754_pow+0x738>)
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	4604      	mov	r4, r0
 800dd30:	460d      	mov	r5, r1
 800dd32:	f7f2 fc61 	bl	80005f8 <__aeabi_dmul>
 800dd36:	4642      	mov	r2, r8
 800dd38:	ec41 0b18 	vmov	d8, r0, r1
 800dd3c:	464b      	mov	r3, r9
 800dd3e:	4620      	mov	r0, r4
 800dd40:	4629      	mov	r1, r5
 800dd42:	f7f2 faa1 	bl	8000288 <__aeabi_dsub>
 800dd46:	4602      	mov	r2, r0
 800dd48:	460b      	mov	r3, r1
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	4639      	mov	r1, r7
 800dd4e:	f7f2 fa9b 	bl	8000288 <__aeabi_dsub>
 800dd52:	a335      	add	r3, pc, #212	; (adr r3, 800de28 <__ieee754_pow+0x740>)
 800dd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd58:	f7f2 fc4e 	bl	80005f8 <__aeabi_dmul>
 800dd5c:	a334      	add	r3, pc, #208	; (adr r3, 800de30 <__ieee754_pow+0x748>)
 800dd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd62:	4606      	mov	r6, r0
 800dd64:	460f      	mov	r7, r1
 800dd66:	4620      	mov	r0, r4
 800dd68:	4629      	mov	r1, r5
 800dd6a:	f7f2 fc45 	bl	80005f8 <__aeabi_dmul>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	460b      	mov	r3, r1
 800dd72:	4630      	mov	r0, r6
 800dd74:	4639      	mov	r1, r7
 800dd76:	f7f2 fa89 	bl	800028c <__adddf3>
 800dd7a:	9a07      	ldr	r2, [sp, #28]
 800dd7c:	4b37      	ldr	r3, [pc, #220]	; (800de5c <__ieee754_pow+0x774>)
 800dd7e:	4413      	add	r3, r2
 800dd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd84:	f7f2 fa82 	bl	800028c <__adddf3>
 800dd88:	4682      	mov	sl, r0
 800dd8a:	9805      	ldr	r0, [sp, #20]
 800dd8c:	468b      	mov	fp, r1
 800dd8e:	f7f2 fbc9 	bl	8000524 <__aeabi_i2d>
 800dd92:	9a07      	ldr	r2, [sp, #28]
 800dd94:	4b32      	ldr	r3, [pc, #200]	; (800de60 <__ieee754_pow+0x778>)
 800dd96:	4413      	add	r3, r2
 800dd98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd9c:	4606      	mov	r6, r0
 800dd9e:	460f      	mov	r7, r1
 800dda0:	4652      	mov	r2, sl
 800dda2:	465b      	mov	r3, fp
 800dda4:	ec51 0b18 	vmov	r0, r1, d8
 800dda8:	f7f2 fa70 	bl	800028c <__adddf3>
 800ddac:	4642      	mov	r2, r8
 800ddae:	464b      	mov	r3, r9
 800ddb0:	f7f2 fa6c 	bl	800028c <__adddf3>
 800ddb4:	4632      	mov	r2, r6
 800ddb6:	463b      	mov	r3, r7
 800ddb8:	f7f2 fa68 	bl	800028c <__adddf3>
 800ddbc:	2000      	movs	r0, #0
 800ddbe:	4632      	mov	r2, r6
 800ddc0:	463b      	mov	r3, r7
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	460d      	mov	r5, r1
 800ddc6:	f7f2 fa5f 	bl	8000288 <__aeabi_dsub>
 800ddca:	4642      	mov	r2, r8
 800ddcc:	464b      	mov	r3, r9
 800ddce:	f7f2 fa5b 	bl	8000288 <__aeabi_dsub>
 800ddd2:	ec53 2b18 	vmov	r2, r3, d8
 800ddd6:	f7f2 fa57 	bl	8000288 <__aeabi_dsub>
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	4650      	mov	r0, sl
 800dde0:	4659      	mov	r1, fp
 800dde2:	e610      	b.n	800da06 <__ieee754_pow+0x31e>
 800dde4:	2401      	movs	r4, #1
 800dde6:	e6a1      	b.n	800db2c <__ieee754_pow+0x444>
 800dde8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800de38 <__ieee754_pow+0x750>
 800ddec:	e617      	b.n	800da1e <__ieee754_pow+0x336>
 800ddee:	bf00      	nop
 800ddf0:	4a454eef 	.word	0x4a454eef
 800ddf4:	3fca7e28 	.word	0x3fca7e28
 800ddf8:	93c9db65 	.word	0x93c9db65
 800ddfc:	3fcd864a 	.word	0x3fcd864a
 800de00:	a91d4101 	.word	0xa91d4101
 800de04:	3fd17460 	.word	0x3fd17460
 800de08:	518f264d 	.word	0x518f264d
 800de0c:	3fd55555 	.word	0x3fd55555
 800de10:	db6fabff 	.word	0xdb6fabff
 800de14:	3fdb6db6 	.word	0x3fdb6db6
 800de18:	33333303 	.word	0x33333303
 800de1c:	3fe33333 	.word	0x3fe33333
 800de20:	e0000000 	.word	0xe0000000
 800de24:	3feec709 	.word	0x3feec709
 800de28:	dc3a03fd 	.word	0xdc3a03fd
 800de2c:	3feec709 	.word	0x3feec709
 800de30:	145b01f5 	.word	0x145b01f5
 800de34:	be3e2fe0 	.word	0xbe3e2fe0
 800de38:	00000000 	.word	0x00000000
 800de3c:	3ff00000 	.word	0x3ff00000
 800de40:	7ff00000 	.word	0x7ff00000
 800de44:	43400000 	.word	0x43400000
 800de48:	0003988e 	.word	0x0003988e
 800de4c:	000bb679 	.word	0x000bb679
 800de50:	080111c8 	.word	0x080111c8
 800de54:	3ff00000 	.word	0x3ff00000
 800de58:	40080000 	.word	0x40080000
 800de5c:	080111e8 	.word	0x080111e8
 800de60:	080111d8 	.word	0x080111d8
 800de64:	a3b3      	add	r3, pc, #716	; (adr r3, 800e134 <__ieee754_pow+0xa4c>)
 800de66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6a:	4640      	mov	r0, r8
 800de6c:	4649      	mov	r1, r9
 800de6e:	f7f2 fa0d 	bl	800028c <__adddf3>
 800de72:	4622      	mov	r2, r4
 800de74:	ec41 0b1a 	vmov	d10, r0, r1
 800de78:	462b      	mov	r3, r5
 800de7a:	4630      	mov	r0, r6
 800de7c:	4639      	mov	r1, r7
 800de7e:	f7f2 fa03 	bl	8000288 <__aeabi_dsub>
 800de82:	4602      	mov	r2, r0
 800de84:	460b      	mov	r3, r1
 800de86:	ec51 0b1a 	vmov	r0, r1, d10
 800de8a:	f7f2 fe45 	bl	8000b18 <__aeabi_dcmpgt>
 800de8e:	2800      	cmp	r0, #0
 800de90:	f47f ae04 	bne.w	800da9c <__ieee754_pow+0x3b4>
 800de94:	4aa2      	ldr	r2, [pc, #648]	; (800e120 <__ieee754_pow+0xa38>)
 800de96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de9a:	4293      	cmp	r3, r2
 800de9c:	f340 8107 	ble.w	800e0ae <__ieee754_pow+0x9c6>
 800dea0:	151b      	asrs	r3, r3, #20
 800dea2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dea6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800deaa:	fa4a fa03 	asr.w	sl, sl, r3
 800deae:	44da      	add	sl, fp
 800deb0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800deb4:	489b      	ldr	r0, [pc, #620]	; (800e124 <__ieee754_pow+0xa3c>)
 800deb6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800deba:	4108      	asrs	r0, r1
 800debc:	ea00 030a 	and.w	r3, r0, sl
 800dec0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800dec4:	f1c1 0114 	rsb	r1, r1, #20
 800dec8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800decc:	fa4a fa01 	asr.w	sl, sl, r1
 800ded0:	f1bb 0f00 	cmp.w	fp, #0
 800ded4:	f04f 0200 	mov.w	r2, #0
 800ded8:	4620      	mov	r0, r4
 800deda:	4629      	mov	r1, r5
 800dedc:	bfb8      	it	lt
 800dede:	f1ca 0a00 	rsblt	sl, sl, #0
 800dee2:	f7f2 f9d1 	bl	8000288 <__aeabi_dsub>
 800dee6:	ec41 0b19 	vmov	d9, r0, r1
 800deea:	4642      	mov	r2, r8
 800deec:	464b      	mov	r3, r9
 800deee:	ec51 0b19 	vmov	r0, r1, d9
 800def2:	f7f2 f9cb 	bl	800028c <__adddf3>
 800def6:	a37a      	add	r3, pc, #488	; (adr r3, 800e0e0 <__ieee754_pow+0x9f8>)
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	2000      	movs	r0, #0
 800defe:	4604      	mov	r4, r0
 800df00:	460d      	mov	r5, r1
 800df02:	f7f2 fb79 	bl	80005f8 <__aeabi_dmul>
 800df06:	ec53 2b19 	vmov	r2, r3, d9
 800df0a:	4606      	mov	r6, r0
 800df0c:	460f      	mov	r7, r1
 800df0e:	4620      	mov	r0, r4
 800df10:	4629      	mov	r1, r5
 800df12:	f7f2 f9b9 	bl	8000288 <__aeabi_dsub>
 800df16:	4602      	mov	r2, r0
 800df18:	460b      	mov	r3, r1
 800df1a:	4640      	mov	r0, r8
 800df1c:	4649      	mov	r1, r9
 800df1e:	f7f2 f9b3 	bl	8000288 <__aeabi_dsub>
 800df22:	a371      	add	r3, pc, #452	; (adr r3, 800e0e8 <__ieee754_pow+0xa00>)
 800df24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df28:	f7f2 fb66 	bl	80005f8 <__aeabi_dmul>
 800df2c:	a370      	add	r3, pc, #448	; (adr r3, 800e0f0 <__ieee754_pow+0xa08>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	4680      	mov	r8, r0
 800df34:	4689      	mov	r9, r1
 800df36:	4620      	mov	r0, r4
 800df38:	4629      	mov	r1, r5
 800df3a:	f7f2 fb5d 	bl	80005f8 <__aeabi_dmul>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4640      	mov	r0, r8
 800df44:	4649      	mov	r1, r9
 800df46:	f7f2 f9a1 	bl	800028c <__adddf3>
 800df4a:	4604      	mov	r4, r0
 800df4c:	460d      	mov	r5, r1
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4630      	mov	r0, r6
 800df54:	4639      	mov	r1, r7
 800df56:	f7f2 f999 	bl	800028c <__adddf3>
 800df5a:	4632      	mov	r2, r6
 800df5c:	463b      	mov	r3, r7
 800df5e:	4680      	mov	r8, r0
 800df60:	4689      	mov	r9, r1
 800df62:	f7f2 f991 	bl	8000288 <__aeabi_dsub>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	4620      	mov	r0, r4
 800df6c:	4629      	mov	r1, r5
 800df6e:	f7f2 f98b 	bl	8000288 <__aeabi_dsub>
 800df72:	4642      	mov	r2, r8
 800df74:	4606      	mov	r6, r0
 800df76:	460f      	mov	r7, r1
 800df78:	464b      	mov	r3, r9
 800df7a:	4640      	mov	r0, r8
 800df7c:	4649      	mov	r1, r9
 800df7e:	f7f2 fb3b 	bl	80005f8 <__aeabi_dmul>
 800df82:	a35d      	add	r3, pc, #372	; (adr r3, 800e0f8 <__ieee754_pow+0xa10>)
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	4604      	mov	r4, r0
 800df8a:	460d      	mov	r5, r1
 800df8c:	f7f2 fb34 	bl	80005f8 <__aeabi_dmul>
 800df90:	a35b      	add	r3, pc, #364	; (adr r3, 800e100 <__ieee754_pow+0xa18>)
 800df92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df96:	f7f2 f977 	bl	8000288 <__aeabi_dsub>
 800df9a:	4622      	mov	r2, r4
 800df9c:	462b      	mov	r3, r5
 800df9e:	f7f2 fb2b 	bl	80005f8 <__aeabi_dmul>
 800dfa2:	a359      	add	r3, pc, #356	; (adr r3, 800e108 <__ieee754_pow+0xa20>)
 800dfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa8:	f7f2 f970 	bl	800028c <__adddf3>
 800dfac:	4622      	mov	r2, r4
 800dfae:	462b      	mov	r3, r5
 800dfb0:	f7f2 fb22 	bl	80005f8 <__aeabi_dmul>
 800dfb4:	a356      	add	r3, pc, #344	; (adr r3, 800e110 <__ieee754_pow+0xa28>)
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	f7f2 f965 	bl	8000288 <__aeabi_dsub>
 800dfbe:	4622      	mov	r2, r4
 800dfc0:	462b      	mov	r3, r5
 800dfc2:	f7f2 fb19 	bl	80005f8 <__aeabi_dmul>
 800dfc6:	a354      	add	r3, pc, #336	; (adr r3, 800e118 <__ieee754_pow+0xa30>)
 800dfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfcc:	f7f2 f95e 	bl	800028c <__adddf3>
 800dfd0:	4622      	mov	r2, r4
 800dfd2:	462b      	mov	r3, r5
 800dfd4:	f7f2 fb10 	bl	80005f8 <__aeabi_dmul>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4640      	mov	r0, r8
 800dfde:	4649      	mov	r1, r9
 800dfe0:	f7f2 f952 	bl	8000288 <__aeabi_dsub>
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	4602      	mov	r2, r0
 800dfea:	460b      	mov	r3, r1
 800dfec:	4640      	mov	r0, r8
 800dfee:	4649      	mov	r1, r9
 800dff0:	f7f2 fb02 	bl	80005f8 <__aeabi_dmul>
 800dff4:	2200      	movs	r2, #0
 800dff6:	ec41 0b19 	vmov	d9, r0, r1
 800dffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dffe:	4620      	mov	r0, r4
 800e000:	4629      	mov	r1, r5
 800e002:	f7f2 f941 	bl	8000288 <__aeabi_dsub>
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	ec51 0b19 	vmov	r0, r1, d9
 800e00e:	f7f2 fc1d 	bl	800084c <__aeabi_ddiv>
 800e012:	4632      	mov	r2, r6
 800e014:	4604      	mov	r4, r0
 800e016:	460d      	mov	r5, r1
 800e018:	463b      	mov	r3, r7
 800e01a:	4640      	mov	r0, r8
 800e01c:	4649      	mov	r1, r9
 800e01e:	f7f2 faeb 	bl	80005f8 <__aeabi_dmul>
 800e022:	4632      	mov	r2, r6
 800e024:	463b      	mov	r3, r7
 800e026:	f7f2 f931 	bl	800028c <__adddf3>
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	4620      	mov	r0, r4
 800e030:	4629      	mov	r1, r5
 800e032:	f7f2 f929 	bl	8000288 <__aeabi_dsub>
 800e036:	4642      	mov	r2, r8
 800e038:	464b      	mov	r3, r9
 800e03a:	f7f2 f925 	bl	8000288 <__aeabi_dsub>
 800e03e:	460b      	mov	r3, r1
 800e040:	4602      	mov	r2, r0
 800e042:	4939      	ldr	r1, [pc, #228]	; (800e128 <__ieee754_pow+0xa40>)
 800e044:	2000      	movs	r0, #0
 800e046:	f7f2 f91f 	bl	8000288 <__aeabi_dsub>
 800e04a:	ec41 0b10 	vmov	d0, r0, r1
 800e04e:	ee10 3a90 	vmov	r3, s1
 800e052:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e05a:	da2b      	bge.n	800e0b4 <__ieee754_pow+0x9cc>
 800e05c:	4650      	mov	r0, sl
 800e05e:	f000 f86f 	bl	800e140 <scalbn>
 800e062:	ec51 0b10 	vmov	r0, r1, d0
 800e066:	ec53 2b18 	vmov	r2, r3, d8
 800e06a:	f7ff bbee 	b.w	800d84a <__ieee754_pow+0x162>
 800e06e:	4b2f      	ldr	r3, [pc, #188]	; (800e12c <__ieee754_pow+0xa44>)
 800e070:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e074:	429e      	cmp	r6, r3
 800e076:	f77f af0d 	ble.w	800de94 <__ieee754_pow+0x7ac>
 800e07a:	4b2d      	ldr	r3, [pc, #180]	; (800e130 <__ieee754_pow+0xa48>)
 800e07c:	440b      	add	r3, r1
 800e07e:	4303      	orrs	r3, r0
 800e080:	d009      	beq.n	800e096 <__ieee754_pow+0x9ae>
 800e082:	ec51 0b18 	vmov	r0, r1, d8
 800e086:	2200      	movs	r2, #0
 800e088:	2300      	movs	r3, #0
 800e08a:	f7f2 fd27 	bl	8000adc <__aeabi_dcmplt>
 800e08e:	3800      	subs	r0, #0
 800e090:	bf18      	it	ne
 800e092:	2001      	movne	r0, #1
 800e094:	e448      	b.n	800d928 <__ieee754_pow+0x240>
 800e096:	4622      	mov	r2, r4
 800e098:	462b      	mov	r3, r5
 800e09a:	f7f2 f8f5 	bl	8000288 <__aeabi_dsub>
 800e09e:	4642      	mov	r2, r8
 800e0a0:	464b      	mov	r3, r9
 800e0a2:	f7f2 fd2f 	bl	8000b04 <__aeabi_dcmpge>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	f43f aef4 	beq.w	800de94 <__ieee754_pow+0x7ac>
 800e0ac:	e7e9      	b.n	800e082 <__ieee754_pow+0x99a>
 800e0ae:	f04f 0a00 	mov.w	sl, #0
 800e0b2:	e71a      	b.n	800deea <__ieee754_pow+0x802>
 800e0b4:	ec51 0b10 	vmov	r0, r1, d0
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	e7d4      	b.n	800e066 <__ieee754_pow+0x97e>
 800e0bc:	491a      	ldr	r1, [pc, #104]	; (800e128 <__ieee754_pow+0xa40>)
 800e0be:	2000      	movs	r0, #0
 800e0c0:	f7ff bb31 	b.w	800d726 <__ieee754_pow+0x3e>
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	2100      	movs	r1, #0
 800e0c8:	f7ff bb2d 	b.w	800d726 <__ieee754_pow+0x3e>
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	4639      	mov	r1, r7
 800e0d0:	f7ff bb29 	b.w	800d726 <__ieee754_pow+0x3e>
 800e0d4:	9204      	str	r2, [sp, #16]
 800e0d6:	f7ff bb7b 	b.w	800d7d0 <__ieee754_pow+0xe8>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f7ff bb65 	b.w	800d7aa <__ieee754_pow+0xc2>
 800e0e0:	00000000 	.word	0x00000000
 800e0e4:	3fe62e43 	.word	0x3fe62e43
 800e0e8:	fefa39ef 	.word	0xfefa39ef
 800e0ec:	3fe62e42 	.word	0x3fe62e42
 800e0f0:	0ca86c39 	.word	0x0ca86c39
 800e0f4:	be205c61 	.word	0xbe205c61
 800e0f8:	72bea4d0 	.word	0x72bea4d0
 800e0fc:	3e663769 	.word	0x3e663769
 800e100:	c5d26bf1 	.word	0xc5d26bf1
 800e104:	3ebbbd41 	.word	0x3ebbbd41
 800e108:	af25de2c 	.word	0xaf25de2c
 800e10c:	3f11566a 	.word	0x3f11566a
 800e110:	16bebd93 	.word	0x16bebd93
 800e114:	3f66c16c 	.word	0x3f66c16c
 800e118:	5555553e 	.word	0x5555553e
 800e11c:	3fc55555 	.word	0x3fc55555
 800e120:	3fe00000 	.word	0x3fe00000
 800e124:	fff00000 	.word	0xfff00000
 800e128:	3ff00000 	.word	0x3ff00000
 800e12c:	4090cbff 	.word	0x4090cbff
 800e130:	3f6f3400 	.word	0x3f6f3400
 800e134:	652b82fe 	.word	0x652b82fe
 800e138:	3c971547 	.word	0x3c971547
 800e13c:	00000000 	.word	0x00000000

0800e140 <scalbn>:
 800e140:	b570      	push	{r4, r5, r6, lr}
 800e142:	ec55 4b10 	vmov	r4, r5, d0
 800e146:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e14a:	4606      	mov	r6, r0
 800e14c:	462b      	mov	r3, r5
 800e14e:	b999      	cbnz	r1, 800e178 <scalbn+0x38>
 800e150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e154:	4323      	orrs	r3, r4
 800e156:	d03f      	beq.n	800e1d8 <scalbn+0x98>
 800e158:	4b35      	ldr	r3, [pc, #212]	; (800e230 <scalbn+0xf0>)
 800e15a:	4629      	mov	r1, r5
 800e15c:	ee10 0a10 	vmov	r0, s0
 800e160:	2200      	movs	r2, #0
 800e162:	f7f2 fa49 	bl	80005f8 <__aeabi_dmul>
 800e166:	4b33      	ldr	r3, [pc, #204]	; (800e234 <scalbn+0xf4>)
 800e168:	429e      	cmp	r6, r3
 800e16a:	4604      	mov	r4, r0
 800e16c:	460d      	mov	r5, r1
 800e16e:	da10      	bge.n	800e192 <scalbn+0x52>
 800e170:	a327      	add	r3, pc, #156	; (adr r3, 800e210 <scalbn+0xd0>)
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	e01f      	b.n	800e1b8 <scalbn+0x78>
 800e178:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e17c:	4291      	cmp	r1, r2
 800e17e:	d10c      	bne.n	800e19a <scalbn+0x5a>
 800e180:	ee10 2a10 	vmov	r2, s0
 800e184:	4620      	mov	r0, r4
 800e186:	4629      	mov	r1, r5
 800e188:	f7f2 f880 	bl	800028c <__adddf3>
 800e18c:	4604      	mov	r4, r0
 800e18e:	460d      	mov	r5, r1
 800e190:	e022      	b.n	800e1d8 <scalbn+0x98>
 800e192:	460b      	mov	r3, r1
 800e194:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e198:	3936      	subs	r1, #54	; 0x36
 800e19a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e19e:	4296      	cmp	r6, r2
 800e1a0:	dd0d      	ble.n	800e1be <scalbn+0x7e>
 800e1a2:	2d00      	cmp	r5, #0
 800e1a4:	a11c      	add	r1, pc, #112	; (adr r1, 800e218 <scalbn+0xd8>)
 800e1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1aa:	da02      	bge.n	800e1b2 <scalbn+0x72>
 800e1ac:	a11c      	add	r1, pc, #112	; (adr r1, 800e220 <scalbn+0xe0>)
 800e1ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1b2:	a319      	add	r3, pc, #100	; (adr r3, 800e218 <scalbn+0xd8>)
 800e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b8:	f7f2 fa1e 	bl	80005f8 <__aeabi_dmul>
 800e1bc:	e7e6      	b.n	800e18c <scalbn+0x4c>
 800e1be:	1872      	adds	r2, r6, r1
 800e1c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e1c4:	428a      	cmp	r2, r1
 800e1c6:	dcec      	bgt.n	800e1a2 <scalbn+0x62>
 800e1c8:	2a00      	cmp	r2, #0
 800e1ca:	dd08      	ble.n	800e1de <scalbn+0x9e>
 800e1cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e1d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e1d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e1d8:	ec45 4b10 	vmov	d0, r4, r5
 800e1dc:	bd70      	pop	{r4, r5, r6, pc}
 800e1de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e1e2:	da08      	bge.n	800e1f6 <scalbn+0xb6>
 800e1e4:	2d00      	cmp	r5, #0
 800e1e6:	a10a      	add	r1, pc, #40	; (adr r1, 800e210 <scalbn+0xd0>)
 800e1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ec:	dac0      	bge.n	800e170 <scalbn+0x30>
 800e1ee:	a10e      	add	r1, pc, #56	; (adr r1, 800e228 <scalbn+0xe8>)
 800e1f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1f4:	e7bc      	b.n	800e170 <scalbn+0x30>
 800e1f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e1fa:	3236      	adds	r2, #54	; 0x36
 800e1fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e200:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e204:	4620      	mov	r0, r4
 800e206:	4b0c      	ldr	r3, [pc, #48]	; (800e238 <scalbn+0xf8>)
 800e208:	2200      	movs	r2, #0
 800e20a:	e7d5      	b.n	800e1b8 <scalbn+0x78>
 800e20c:	f3af 8000 	nop.w
 800e210:	c2f8f359 	.word	0xc2f8f359
 800e214:	01a56e1f 	.word	0x01a56e1f
 800e218:	8800759c 	.word	0x8800759c
 800e21c:	7e37e43c 	.word	0x7e37e43c
 800e220:	8800759c 	.word	0x8800759c
 800e224:	fe37e43c 	.word	0xfe37e43c
 800e228:	c2f8f359 	.word	0xc2f8f359
 800e22c:	81a56e1f 	.word	0x81a56e1f
 800e230:	43500000 	.word	0x43500000
 800e234:	ffff3cb0 	.word	0xffff3cb0
 800e238:	3c900000 	.word	0x3c900000

0800e23c <with_errno>:
 800e23c:	b570      	push	{r4, r5, r6, lr}
 800e23e:	4604      	mov	r4, r0
 800e240:	460d      	mov	r5, r1
 800e242:	4616      	mov	r6, r2
 800e244:	f000 fe20 	bl	800ee88 <__errno>
 800e248:	4629      	mov	r1, r5
 800e24a:	6006      	str	r6, [r0, #0]
 800e24c:	4620      	mov	r0, r4
 800e24e:	bd70      	pop	{r4, r5, r6, pc}

0800e250 <xflow>:
 800e250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e252:	4614      	mov	r4, r2
 800e254:	461d      	mov	r5, r3
 800e256:	b108      	cbz	r0, 800e25c <xflow+0xc>
 800e258:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e25c:	e9cd 2300 	strd	r2, r3, [sp]
 800e260:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e264:	4620      	mov	r0, r4
 800e266:	4629      	mov	r1, r5
 800e268:	f7f2 f9c6 	bl	80005f8 <__aeabi_dmul>
 800e26c:	2222      	movs	r2, #34	; 0x22
 800e26e:	b003      	add	sp, #12
 800e270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e274:	f7ff bfe2 	b.w	800e23c <with_errno>

0800e278 <__math_uflow>:
 800e278:	b508      	push	{r3, lr}
 800e27a:	2200      	movs	r2, #0
 800e27c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e280:	f7ff ffe6 	bl	800e250 <xflow>
 800e284:	ec41 0b10 	vmov	d0, r0, r1
 800e288:	bd08      	pop	{r3, pc}

0800e28a <__math_oflow>:
 800e28a:	b508      	push	{r3, lr}
 800e28c:	2200      	movs	r2, #0
 800e28e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e292:	f7ff ffdd 	bl	800e250 <xflow>
 800e296:	ec41 0b10 	vmov	d0, r0, r1
 800e29a:	bd08      	pop	{r3, pc}

0800e29c <realloc>:
 800e29c:	4b02      	ldr	r3, [pc, #8]	; (800e2a8 <realloc+0xc>)
 800e29e:	460a      	mov	r2, r1
 800e2a0:	4601      	mov	r1, r0
 800e2a2:	6818      	ldr	r0, [r3, #0]
 800e2a4:	f000 b802 	b.w	800e2ac <_realloc_r>
 800e2a8:	200001a0 	.word	0x200001a0

0800e2ac <_realloc_r>:
 800e2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b0:	4680      	mov	r8, r0
 800e2b2:	4614      	mov	r4, r2
 800e2b4:	460e      	mov	r6, r1
 800e2b6:	b921      	cbnz	r1, 800e2c2 <_realloc_r+0x16>
 800e2b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2bc:	4611      	mov	r1, r2
 800e2be:	f001 bd0d 	b.w	800fcdc <_malloc_r>
 800e2c2:	b92a      	cbnz	r2, 800e2d0 <_realloc_r+0x24>
 800e2c4:	f001 fc96 	bl	800fbf4 <_free_r>
 800e2c8:	4625      	mov	r5, r4
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d0:	f002 f90c 	bl	80104ec <_malloc_usable_size_r>
 800e2d4:	4284      	cmp	r4, r0
 800e2d6:	4607      	mov	r7, r0
 800e2d8:	d802      	bhi.n	800e2e0 <_realloc_r+0x34>
 800e2da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2de:	d812      	bhi.n	800e306 <_realloc_r+0x5a>
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	4640      	mov	r0, r8
 800e2e4:	f001 fcfa 	bl	800fcdc <_malloc_r>
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d0ed      	beq.n	800e2ca <_realloc_r+0x1e>
 800e2ee:	42bc      	cmp	r4, r7
 800e2f0:	4622      	mov	r2, r4
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	bf28      	it	cs
 800e2f6:	463a      	movcs	r2, r7
 800e2f8:	f000 fdf3 	bl	800eee2 <memcpy>
 800e2fc:	4631      	mov	r1, r6
 800e2fe:	4640      	mov	r0, r8
 800e300:	f001 fc78 	bl	800fbf4 <_free_r>
 800e304:	e7e1      	b.n	800e2ca <_realloc_r+0x1e>
 800e306:	4635      	mov	r5, r6
 800e308:	e7df      	b.n	800e2ca <_realloc_r+0x1e>

0800e30a <__cvt>:
 800e30a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e30e:	ec55 4b10 	vmov	r4, r5, d0
 800e312:	2d00      	cmp	r5, #0
 800e314:	460e      	mov	r6, r1
 800e316:	4619      	mov	r1, r3
 800e318:	462b      	mov	r3, r5
 800e31a:	bfbb      	ittet	lt
 800e31c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e320:	461d      	movlt	r5, r3
 800e322:	2300      	movge	r3, #0
 800e324:	232d      	movlt	r3, #45	; 0x2d
 800e326:	700b      	strb	r3, [r1, #0]
 800e328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e32a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e32e:	4691      	mov	r9, r2
 800e330:	f023 0820 	bic.w	r8, r3, #32
 800e334:	bfbc      	itt	lt
 800e336:	4622      	movlt	r2, r4
 800e338:	4614      	movlt	r4, r2
 800e33a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e33e:	d005      	beq.n	800e34c <__cvt+0x42>
 800e340:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e344:	d100      	bne.n	800e348 <__cvt+0x3e>
 800e346:	3601      	adds	r6, #1
 800e348:	2102      	movs	r1, #2
 800e34a:	e000      	b.n	800e34e <__cvt+0x44>
 800e34c:	2103      	movs	r1, #3
 800e34e:	ab03      	add	r3, sp, #12
 800e350:	9301      	str	r3, [sp, #4]
 800e352:	ab02      	add	r3, sp, #8
 800e354:	9300      	str	r3, [sp, #0]
 800e356:	ec45 4b10 	vmov	d0, r4, r5
 800e35a:	4653      	mov	r3, sl
 800e35c:	4632      	mov	r2, r6
 800e35e:	f000 fe57 	bl	800f010 <_dtoa_r>
 800e362:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e366:	4607      	mov	r7, r0
 800e368:	d102      	bne.n	800e370 <__cvt+0x66>
 800e36a:	f019 0f01 	tst.w	r9, #1
 800e36e:	d022      	beq.n	800e3b6 <__cvt+0xac>
 800e370:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e374:	eb07 0906 	add.w	r9, r7, r6
 800e378:	d110      	bne.n	800e39c <__cvt+0x92>
 800e37a:	783b      	ldrb	r3, [r7, #0]
 800e37c:	2b30      	cmp	r3, #48	; 0x30
 800e37e:	d10a      	bne.n	800e396 <__cvt+0x8c>
 800e380:	2200      	movs	r2, #0
 800e382:	2300      	movs	r3, #0
 800e384:	4620      	mov	r0, r4
 800e386:	4629      	mov	r1, r5
 800e388:	f7f2 fb9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e38c:	b918      	cbnz	r0, 800e396 <__cvt+0x8c>
 800e38e:	f1c6 0601 	rsb	r6, r6, #1
 800e392:	f8ca 6000 	str.w	r6, [sl]
 800e396:	f8da 3000 	ldr.w	r3, [sl]
 800e39a:	4499      	add	r9, r3
 800e39c:	2200      	movs	r2, #0
 800e39e:	2300      	movs	r3, #0
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	f7f2 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3a8:	b108      	cbz	r0, 800e3ae <__cvt+0xa4>
 800e3aa:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3ae:	2230      	movs	r2, #48	; 0x30
 800e3b0:	9b03      	ldr	r3, [sp, #12]
 800e3b2:	454b      	cmp	r3, r9
 800e3b4:	d307      	bcc.n	800e3c6 <__cvt+0xbc>
 800e3b6:	9b03      	ldr	r3, [sp, #12]
 800e3b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3ba:	1bdb      	subs	r3, r3, r7
 800e3bc:	4638      	mov	r0, r7
 800e3be:	6013      	str	r3, [r2, #0]
 800e3c0:	b004      	add	sp, #16
 800e3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3c6:	1c59      	adds	r1, r3, #1
 800e3c8:	9103      	str	r1, [sp, #12]
 800e3ca:	701a      	strb	r2, [r3, #0]
 800e3cc:	e7f0      	b.n	800e3b0 <__cvt+0xa6>

0800e3ce <__exponent>:
 800e3ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2900      	cmp	r1, #0
 800e3d4:	bfb8      	it	lt
 800e3d6:	4249      	neglt	r1, r1
 800e3d8:	f803 2b02 	strb.w	r2, [r3], #2
 800e3dc:	bfb4      	ite	lt
 800e3de:	222d      	movlt	r2, #45	; 0x2d
 800e3e0:	222b      	movge	r2, #43	; 0x2b
 800e3e2:	2909      	cmp	r1, #9
 800e3e4:	7042      	strb	r2, [r0, #1]
 800e3e6:	dd2a      	ble.n	800e43e <__exponent+0x70>
 800e3e8:	f10d 0207 	add.w	r2, sp, #7
 800e3ec:	4617      	mov	r7, r2
 800e3ee:	260a      	movs	r6, #10
 800e3f0:	4694      	mov	ip, r2
 800e3f2:	fb91 f5f6 	sdiv	r5, r1, r6
 800e3f6:	fb06 1415 	mls	r4, r6, r5, r1
 800e3fa:	3430      	adds	r4, #48	; 0x30
 800e3fc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e400:	460c      	mov	r4, r1
 800e402:	2c63      	cmp	r4, #99	; 0x63
 800e404:	f102 32ff 	add.w	r2, r2, #4294967295
 800e408:	4629      	mov	r1, r5
 800e40a:	dcf1      	bgt.n	800e3f0 <__exponent+0x22>
 800e40c:	3130      	adds	r1, #48	; 0x30
 800e40e:	f1ac 0402 	sub.w	r4, ip, #2
 800e412:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e416:	1c41      	adds	r1, r0, #1
 800e418:	4622      	mov	r2, r4
 800e41a:	42ba      	cmp	r2, r7
 800e41c:	d30a      	bcc.n	800e434 <__exponent+0x66>
 800e41e:	f10d 0209 	add.w	r2, sp, #9
 800e422:	eba2 020c 	sub.w	r2, r2, ip
 800e426:	42bc      	cmp	r4, r7
 800e428:	bf88      	it	hi
 800e42a:	2200      	movhi	r2, #0
 800e42c:	4413      	add	r3, r2
 800e42e:	1a18      	subs	r0, r3, r0
 800e430:	b003      	add	sp, #12
 800e432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e434:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e438:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e43c:	e7ed      	b.n	800e41a <__exponent+0x4c>
 800e43e:	2330      	movs	r3, #48	; 0x30
 800e440:	3130      	adds	r1, #48	; 0x30
 800e442:	7083      	strb	r3, [r0, #2]
 800e444:	70c1      	strb	r1, [r0, #3]
 800e446:	1d03      	adds	r3, r0, #4
 800e448:	e7f1      	b.n	800e42e <__exponent+0x60>
	...

0800e44c <_printf_float>:
 800e44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e450:	ed2d 8b02 	vpush	{d8}
 800e454:	b08d      	sub	sp, #52	; 0x34
 800e456:	460c      	mov	r4, r1
 800e458:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e45c:	4616      	mov	r6, r2
 800e45e:	461f      	mov	r7, r3
 800e460:	4605      	mov	r5, r0
 800e462:	f000 fcc7 	bl	800edf4 <_localeconv_r>
 800e466:	f8d0 a000 	ldr.w	sl, [r0]
 800e46a:	4650      	mov	r0, sl
 800e46c:	f7f1 ff00 	bl	8000270 <strlen>
 800e470:	2300      	movs	r3, #0
 800e472:	930a      	str	r3, [sp, #40]	; 0x28
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	9305      	str	r3, [sp, #20]
 800e478:	f8d8 3000 	ldr.w	r3, [r8]
 800e47c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e480:	3307      	adds	r3, #7
 800e482:	f023 0307 	bic.w	r3, r3, #7
 800e486:	f103 0208 	add.w	r2, r3, #8
 800e48a:	f8c8 2000 	str.w	r2, [r8]
 800e48e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e492:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e496:	9307      	str	r3, [sp, #28]
 800e498:	f8cd 8018 	str.w	r8, [sp, #24]
 800e49c:	ee08 0a10 	vmov	s16, r0
 800e4a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e4a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4a8:	4b9e      	ldr	r3, [pc, #632]	; (800e724 <_printf_float+0x2d8>)
 800e4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ae:	f7f2 fb3d 	bl	8000b2c <__aeabi_dcmpun>
 800e4b2:	bb88      	cbnz	r0, 800e518 <_printf_float+0xcc>
 800e4b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4b8:	4b9a      	ldr	r3, [pc, #616]	; (800e724 <_printf_float+0x2d8>)
 800e4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e4be:	f7f2 fb17 	bl	8000af0 <__aeabi_dcmple>
 800e4c2:	bb48      	cbnz	r0, 800e518 <_printf_float+0xcc>
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	4640      	mov	r0, r8
 800e4ca:	4649      	mov	r1, r9
 800e4cc:	f7f2 fb06 	bl	8000adc <__aeabi_dcmplt>
 800e4d0:	b110      	cbz	r0, 800e4d8 <_printf_float+0x8c>
 800e4d2:	232d      	movs	r3, #45	; 0x2d
 800e4d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4d8:	4a93      	ldr	r2, [pc, #588]	; (800e728 <_printf_float+0x2dc>)
 800e4da:	4b94      	ldr	r3, [pc, #592]	; (800e72c <_printf_float+0x2e0>)
 800e4dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e4e0:	bf94      	ite	ls
 800e4e2:	4690      	movls	r8, r2
 800e4e4:	4698      	movhi	r8, r3
 800e4e6:	2303      	movs	r3, #3
 800e4e8:	6123      	str	r3, [r4, #16]
 800e4ea:	9b05      	ldr	r3, [sp, #20]
 800e4ec:	f023 0304 	bic.w	r3, r3, #4
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	f04f 0900 	mov.w	r9, #0
 800e4f6:	9700      	str	r7, [sp, #0]
 800e4f8:	4633      	mov	r3, r6
 800e4fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800e4fc:	4621      	mov	r1, r4
 800e4fe:	4628      	mov	r0, r5
 800e500:	f000 f9da 	bl	800e8b8 <_printf_common>
 800e504:	3001      	adds	r0, #1
 800e506:	f040 8090 	bne.w	800e62a <_printf_float+0x1de>
 800e50a:	f04f 30ff 	mov.w	r0, #4294967295
 800e50e:	b00d      	add	sp, #52	; 0x34
 800e510:	ecbd 8b02 	vpop	{d8}
 800e514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e518:	4642      	mov	r2, r8
 800e51a:	464b      	mov	r3, r9
 800e51c:	4640      	mov	r0, r8
 800e51e:	4649      	mov	r1, r9
 800e520:	f7f2 fb04 	bl	8000b2c <__aeabi_dcmpun>
 800e524:	b140      	cbz	r0, 800e538 <_printf_float+0xec>
 800e526:	464b      	mov	r3, r9
 800e528:	2b00      	cmp	r3, #0
 800e52a:	bfbc      	itt	lt
 800e52c:	232d      	movlt	r3, #45	; 0x2d
 800e52e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e532:	4a7f      	ldr	r2, [pc, #508]	; (800e730 <_printf_float+0x2e4>)
 800e534:	4b7f      	ldr	r3, [pc, #508]	; (800e734 <_printf_float+0x2e8>)
 800e536:	e7d1      	b.n	800e4dc <_printf_float+0x90>
 800e538:	6863      	ldr	r3, [r4, #4]
 800e53a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e53e:	9206      	str	r2, [sp, #24]
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	d13f      	bne.n	800e5c4 <_printf_float+0x178>
 800e544:	2306      	movs	r3, #6
 800e546:	6063      	str	r3, [r4, #4]
 800e548:	9b05      	ldr	r3, [sp, #20]
 800e54a:	6861      	ldr	r1, [r4, #4]
 800e54c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e550:	2300      	movs	r3, #0
 800e552:	9303      	str	r3, [sp, #12]
 800e554:	ab0a      	add	r3, sp, #40	; 0x28
 800e556:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e55a:	ab09      	add	r3, sp, #36	; 0x24
 800e55c:	ec49 8b10 	vmov	d0, r8, r9
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	6022      	str	r2, [r4, #0]
 800e564:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e568:	4628      	mov	r0, r5
 800e56a:	f7ff fece 	bl	800e30a <__cvt>
 800e56e:	9b06      	ldr	r3, [sp, #24]
 800e570:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e572:	2b47      	cmp	r3, #71	; 0x47
 800e574:	4680      	mov	r8, r0
 800e576:	d108      	bne.n	800e58a <_printf_float+0x13e>
 800e578:	1cc8      	adds	r0, r1, #3
 800e57a:	db02      	blt.n	800e582 <_printf_float+0x136>
 800e57c:	6863      	ldr	r3, [r4, #4]
 800e57e:	4299      	cmp	r1, r3
 800e580:	dd41      	ble.n	800e606 <_printf_float+0x1ba>
 800e582:	f1ab 0302 	sub.w	r3, fp, #2
 800e586:	fa5f fb83 	uxtb.w	fp, r3
 800e58a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e58e:	d820      	bhi.n	800e5d2 <_printf_float+0x186>
 800e590:	3901      	subs	r1, #1
 800e592:	465a      	mov	r2, fp
 800e594:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e598:	9109      	str	r1, [sp, #36]	; 0x24
 800e59a:	f7ff ff18 	bl	800e3ce <__exponent>
 800e59e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5a0:	1813      	adds	r3, r2, r0
 800e5a2:	2a01      	cmp	r2, #1
 800e5a4:	4681      	mov	r9, r0
 800e5a6:	6123      	str	r3, [r4, #16]
 800e5a8:	dc02      	bgt.n	800e5b0 <_printf_float+0x164>
 800e5aa:	6822      	ldr	r2, [r4, #0]
 800e5ac:	07d2      	lsls	r2, r2, #31
 800e5ae:	d501      	bpl.n	800e5b4 <_printf_float+0x168>
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	6123      	str	r3, [r4, #16]
 800e5b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d09c      	beq.n	800e4f6 <_printf_float+0xaa>
 800e5bc:	232d      	movs	r3, #45	; 0x2d
 800e5be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5c2:	e798      	b.n	800e4f6 <_printf_float+0xaa>
 800e5c4:	9a06      	ldr	r2, [sp, #24]
 800e5c6:	2a47      	cmp	r2, #71	; 0x47
 800e5c8:	d1be      	bne.n	800e548 <_printf_float+0xfc>
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1bc      	bne.n	800e548 <_printf_float+0xfc>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e7b9      	b.n	800e546 <_printf_float+0xfa>
 800e5d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e5d6:	d118      	bne.n	800e60a <_printf_float+0x1be>
 800e5d8:	2900      	cmp	r1, #0
 800e5da:	6863      	ldr	r3, [r4, #4]
 800e5dc:	dd0b      	ble.n	800e5f6 <_printf_float+0x1aa>
 800e5de:	6121      	str	r1, [r4, #16]
 800e5e0:	b913      	cbnz	r3, 800e5e8 <_printf_float+0x19c>
 800e5e2:	6822      	ldr	r2, [r4, #0]
 800e5e4:	07d0      	lsls	r0, r2, #31
 800e5e6:	d502      	bpl.n	800e5ee <_printf_float+0x1a2>
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	440b      	add	r3, r1
 800e5ec:	6123      	str	r3, [r4, #16]
 800e5ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800e5f0:	f04f 0900 	mov.w	r9, #0
 800e5f4:	e7de      	b.n	800e5b4 <_printf_float+0x168>
 800e5f6:	b913      	cbnz	r3, 800e5fe <_printf_float+0x1b2>
 800e5f8:	6822      	ldr	r2, [r4, #0]
 800e5fa:	07d2      	lsls	r2, r2, #31
 800e5fc:	d501      	bpl.n	800e602 <_printf_float+0x1b6>
 800e5fe:	3302      	adds	r3, #2
 800e600:	e7f4      	b.n	800e5ec <_printf_float+0x1a0>
 800e602:	2301      	movs	r3, #1
 800e604:	e7f2      	b.n	800e5ec <_printf_float+0x1a0>
 800e606:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e60a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e60c:	4299      	cmp	r1, r3
 800e60e:	db05      	blt.n	800e61c <_printf_float+0x1d0>
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	6121      	str	r1, [r4, #16]
 800e614:	07d8      	lsls	r0, r3, #31
 800e616:	d5ea      	bpl.n	800e5ee <_printf_float+0x1a2>
 800e618:	1c4b      	adds	r3, r1, #1
 800e61a:	e7e7      	b.n	800e5ec <_printf_float+0x1a0>
 800e61c:	2900      	cmp	r1, #0
 800e61e:	bfd4      	ite	le
 800e620:	f1c1 0202 	rsble	r2, r1, #2
 800e624:	2201      	movgt	r2, #1
 800e626:	4413      	add	r3, r2
 800e628:	e7e0      	b.n	800e5ec <_printf_float+0x1a0>
 800e62a:	6823      	ldr	r3, [r4, #0]
 800e62c:	055a      	lsls	r2, r3, #21
 800e62e:	d407      	bmi.n	800e640 <_printf_float+0x1f4>
 800e630:	6923      	ldr	r3, [r4, #16]
 800e632:	4642      	mov	r2, r8
 800e634:	4631      	mov	r1, r6
 800e636:	4628      	mov	r0, r5
 800e638:	47b8      	blx	r7
 800e63a:	3001      	adds	r0, #1
 800e63c:	d12c      	bne.n	800e698 <_printf_float+0x24c>
 800e63e:	e764      	b.n	800e50a <_printf_float+0xbe>
 800e640:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e644:	f240 80e0 	bls.w	800e808 <_printf_float+0x3bc>
 800e648:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e64c:	2200      	movs	r2, #0
 800e64e:	2300      	movs	r3, #0
 800e650:	f7f2 fa3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e654:	2800      	cmp	r0, #0
 800e656:	d034      	beq.n	800e6c2 <_printf_float+0x276>
 800e658:	4a37      	ldr	r2, [pc, #220]	; (800e738 <_printf_float+0x2ec>)
 800e65a:	2301      	movs	r3, #1
 800e65c:	4631      	mov	r1, r6
 800e65e:	4628      	mov	r0, r5
 800e660:	47b8      	blx	r7
 800e662:	3001      	adds	r0, #1
 800e664:	f43f af51 	beq.w	800e50a <_printf_float+0xbe>
 800e668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e66c:	429a      	cmp	r2, r3
 800e66e:	db02      	blt.n	800e676 <_printf_float+0x22a>
 800e670:	6823      	ldr	r3, [r4, #0]
 800e672:	07d8      	lsls	r0, r3, #31
 800e674:	d510      	bpl.n	800e698 <_printf_float+0x24c>
 800e676:	ee18 3a10 	vmov	r3, s16
 800e67a:	4652      	mov	r2, sl
 800e67c:	4631      	mov	r1, r6
 800e67e:	4628      	mov	r0, r5
 800e680:	47b8      	blx	r7
 800e682:	3001      	adds	r0, #1
 800e684:	f43f af41 	beq.w	800e50a <_printf_float+0xbe>
 800e688:	f04f 0800 	mov.w	r8, #0
 800e68c:	f104 091a 	add.w	r9, r4, #26
 800e690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e692:	3b01      	subs	r3, #1
 800e694:	4543      	cmp	r3, r8
 800e696:	dc09      	bgt.n	800e6ac <_printf_float+0x260>
 800e698:	6823      	ldr	r3, [r4, #0]
 800e69a:	079b      	lsls	r3, r3, #30
 800e69c:	f100 8107 	bmi.w	800e8ae <_printf_float+0x462>
 800e6a0:	68e0      	ldr	r0, [r4, #12]
 800e6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6a4:	4298      	cmp	r0, r3
 800e6a6:	bfb8      	it	lt
 800e6a8:	4618      	movlt	r0, r3
 800e6aa:	e730      	b.n	800e50e <_printf_float+0xc2>
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	464a      	mov	r2, r9
 800e6b0:	4631      	mov	r1, r6
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	47b8      	blx	r7
 800e6b6:	3001      	adds	r0, #1
 800e6b8:	f43f af27 	beq.w	800e50a <_printf_float+0xbe>
 800e6bc:	f108 0801 	add.w	r8, r8, #1
 800e6c0:	e7e6      	b.n	800e690 <_printf_float+0x244>
 800e6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	dc39      	bgt.n	800e73c <_printf_float+0x2f0>
 800e6c8:	4a1b      	ldr	r2, [pc, #108]	; (800e738 <_printf_float+0x2ec>)
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	4631      	mov	r1, r6
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	47b8      	blx	r7
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	f43f af19 	beq.w	800e50a <_printf_float+0xbe>
 800e6d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	d102      	bne.n	800e6e6 <_printf_float+0x29a>
 800e6e0:	6823      	ldr	r3, [r4, #0]
 800e6e2:	07d9      	lsls	r1, r3, #31
 800e6e4:	d5d8      	bpl.n	800e698 <_printf_float+0x24c>
 800e6e6:	ee18 3a10 	vmov	r3, s16
 800e6ea:	4652      	mov	r2, sl
 800e6ec:	4631      	mov	r1, r6
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	47b8      	blx	r7
 800e6f2:	3001      	adds	r0, #1
 800e6f4:	f43f af09 	beq.w	800e50a <_printf_float+0xbe>
 800e6f8:	f04f 0900 	mov.w	r9, #0
 800e6fc:	f104 0a1a 	add.w	sl, r4, #26
 800e700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e702:	425b      	negs	r3, r3
 800e704:	454b      	cmp	r3, r9
 800e706:	dc01      	bgt.n	800e70c <_printf_float+0x2c0>
 800e708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e70a:	e792      	b.n	800e632 <_printf_float+0x1e6>
 800e70c:	2301      	movs	r3, #1
 800e70e:	4652      	mov	r2, sl
 800e710:	4631      	mov	r1, r6
 800e712:	4628      	mov	r0, r5
 800e714:	47b8      	blx	r7
 800e716:	3001      	adds	r0, #1
 800e718:	f43f aef7 	beq.w	800e50a <_printf_float+0xbe>
 800e71c:	f109 0901 	add.w	r9, r9, #1
 800e720:	e7ee      	b.n	800e700 <_printf_float+0x2b4>
 800e722:	bf00      	nop
 800e724:	7fefffff 	.word	0x7fefffff
 800e728:	080111f8 	.word	0x080111f8
 800e72c:	080111fc 	.word	0x080111fc
 800e730:	08011200 	.word	0x08011200
 800e734:	08011204 	.word	0x08011204
 800e738:	08011208 	.word	0x08011208
 800e73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e73e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e740:	429a      	cmp	r2, r3
 800e742:	bfa8      	it	ge
 800e744:	461a      	movge	r2, r3
 800e746:	2a00      	cmp	r2, #0
 800e748:	4691      	mov	r9, r2
 800e74a:	dc37      	bgt.n	800e7bc <_printf_float+0x370>
 800e74c:	f04f 0b00 	mov.w	fp, #0
 800e750:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e754:	f104 021a 	add.w	r2, r4, #26
 800e758:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e75a:	9305      	str	r3, [sp, #20]
 800e75c:	eba3 0309 	sub.w	r3, r3, r9
 800e760:	455b      	cmp	r3, fp
 800e762:	dc33      	bgt.n	800e7cc <_printf_float+0x380>
 800e764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e768:	429a      	cmp	r2, r3
 800e76a:	db3b      	blt.n	800e7e4 <_printf_float+0x398>
 800e76c:	6823      	ldr	r3, [r4, #0]
 800e76e:	07da      	lsls	r2, r3, #31
 800e770:	d438      	bmi.n	800e7e4 <_printf_float+0x398>
 800e772:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e776:	eba2 0903 	sub.w	r9, r2, r3
 800e77a:	9b05      	ldr	r3, [sp, #20]
 800e77c:	1ad2      	subs	r2, r2, r3
 800e77e:	4591      	cmp	r9, r2
 800e780:	bfa8      	it	ge
 800e782:	4691      	movge	r9, r2
 800e784:	f1b9 0f00 	cmp.w	r9, #0
 800e788:	dc35      	bgt.n	800e7f6 <_printf_float+0x3aa>
 800e78a:	f04f 0800 	mov.w	r8, #0
 800e78e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e792:	f104 0a1a 	add.w	sl, r4, #26
 800e796:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e79a:	1a9b      	subs	r3, r3, r2
 800e79c:	eba3 0309 	sub.w	r3, r3, r9
 800e7a0:	4543      	cmp	r3, r8
 800e7a2:	f77f af79 	ble.w	800e698 <_printf_float+0x24c>
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	4652      	mov	r2, sl
 800e7aa:	4631      	mov	r1, r6
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	47b8      	blx	r7
 800e7b0:	3001      	adds	r0, #1
 800e7b2:	f43f aeaa 	beq.w	800e50a <_printf_float+0xbe>
 800e7b6:	f108 0801 	add.w	r8, r8, #1
 800e7ba:	e7ec      	b.n	800e796 <_printf_float+0x34a>
 800e7bc:	4613      	mov	r3, r2
 800e7be:	4631      	mov	r1, r6
 800e7c0:	4642      	mov	r2, r8
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	47b8      	blx	r7
 800e7c6:	3001      	adds	r0, #1
 800e7c8:	d1c0      	bne.n	800e74c <_printf_float+0x300>
 800e7ca:	e69e      	b.n	800e50a <_printf_float+0xbe>
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	4631      	mov	r1, r6
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	9205      	str	r2, [sp, #20]
 800e7d4:	47b8      	blx	r7
 800e7d6:	3001      	adds	r0, #1
 800e7d8:	f43f ae97 	beq.w	800e50a <_printf_float+0xbe>
 800e7dc:	9a05      	ldr	r2, [sp, #20]
 800e7de:	f10b 0b01 	add.w	fp, fp, #1
 800e7e2:	e7b9      	b.n	800e758 <_printf_float+0x30c>
 800e7e4:	ee18 3a10 	vmov	r3, s16
 800e7e8:	4652      	mov	r2, sl
 800e7ea:	4631      	mov	r1, r6
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	47b8      	blx	r7
 800e7f0:	3001      	adds	r0, #1
 800e7f2:	d1be      	bne.n	800e772 <_printf_float+0x326>
 800e7f4:	e689      	b.n	800e50a <_printf_float+0xbe>
 800e7f6:	9a05      	ldr	r2, [sp, #20]
 800e7f8:	464b      	mov	r3, r9
 800e7fa:	4442      	add	r2, r8
 800e7fc:	4631      	mov	r1, r6
 800e7fe:	4628      	mov	r0, r5
 800e800:	47b8      	blx	r7
 800e802:	3001      	adds	r0, #1
 800e804:	d1c1      	bne.n	800e78a <_printf_float+0x33e>
 800e806:	e680      	b.n	800e50a <_printf_float+0xbe>
 800e808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e80a:	2a01      	cmp	r2, #1
 800e80c:	dc01      	bgt.n	800e812 <_printf_float+0x3c6>
 800e80e:	07db      	lsls	r3, r3, #31
 800e810:	d53a      	bpl.n	800e888 <_printf_float+0x43c>
 800e812:	2301      	movs	r3, #1
 800e814:	4642      	mov	r2, r8
 800e816:	4631      	mov	r1, r6
 800e818:	4628      	mov	r0, r5
 800e81a:	47b8      	blx	r7
 800e81c:	3001      	adds	r0, #1
 800e81e:	f43f ae74 	beq.w	800e50a <_printf_float+0xbe>
 800e822:	ee18 3a10 	vmov	r3, s16
 800e826:	4652      	mov	r2, sl
 800e828:	4631      	mov	r1, r6
 800e82a:	4628      	mov	r0, r5
 800e82c:	47b8      	blx	r7
 800e82e:	3001      	adds	r0, #1
 800e830:	f43f ae6b 	beq.w	800e50a <_printf_float+0xbe>
 800e834:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e838:	2200      	movs	r2, #0
 800e83a:	2300      	movs	r3, #0
 800e83c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e840:	f7f2 f942 	bl	8000ac8 <__aeabi_dcmpeq>
 800e844:	b9d8      	cbnz	r0, 800e87e <_printf_float+0x432>
 800e846:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e84a:	f108 0201 	add.w	r2, r8, #1
 800e84e:	4631      	mov	r1, r6
 800e850:	4628      	mov	r0, r5
 800e852:	47b8      	blx	r7
 800e854:	3001      	adds	r0, #1
 800e856:	d10e      	bne.n	800e876 <_printf_float+0x42a>
 800e858:	e657      	b.n	800e50a <_printf_float+0xbe>
 800e85a:	2301      	movs	r3, #1
 800e85c:	4652      	mov	r2, sl
 800e85e:	4631      	mov	r1, r6
 800e860:	4628      	mov	r0, r5
 800e862:	47b8      	blx	r7
 800e864:	3001      	adds	r0, #1
 800e866:	f43f ae50 	beq.w	800e50a <_printf_float+0xbe>
 800e86a:	f108 0801 	add.w	r8, r8, #1
 800e86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e870:	3b01      	subs	r3, #1
 800e872:	4543      	cmp	r3, r8
 800e874:	dcf1      	bgt.n	800e85a <_printf_float+0x40e>
 800e876:	464b      	mov	r3, r9
 800e878:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e87c:	e6da      	b.n	800e634 <_printf_float+0x1e8>
 800e87e:	f04f 0800 	mov.w	r8, #0
 800e882:	f104 0a1a 	add.w	sl, r4, #26
 800e886:	e7f2      	b.n	800e86e <_printf_float+0x422>
 800e888:	2301      	movs	r3, #1
 800e88a:	4642      	mov	r2, r8
 800e88c:	e7df      	b.n	800e84e <_printf_float+0x402>
 800e88e:	2301      	movs	r3, #1
 800e890:	464a      	mov	r2, r9
 800e892:	4631      	mov	r1, r6
 800e894:	4628      	mov	r0, r5
 800e896:	47b8      	blx	r7
 800e898:	3001      	adds	r0, #1
 800e89a:	f43f ae36 	beq.w	800e50a <_printf_float+0xbe>
 800e89e:	f108 0801 	add.w	r8, r8, #1
 800e8a2:	68e3      	ldr	r3, [r4, #12]
 800e8a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8a6:	1a5b      	subs	r3, r3, r1
 800e8a8:	4543      	cmp	r3, r8
 800e8aa:	dcf0      	bgt.n	800e88e <_printf_float+0x442>
 800e8ac:	e6f8      	b.n	800e6a0 <_printf_float+0x254>
 800e8ae:	f04f 0800 	mov.w	r8, #0
 800e8b2:	f104 0919 	add.w	r9, r4, #25
 800e8b6:	e7f4      	b.n	800e8a2 <_printf_float+0x456>

0800e8b8 <_printf_common>:
 800e8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8bc:	4616      	mov	r6, r2
 800e8be:	4699      	mov	r9, r3
 800e8c0:	688a      	ldr	r2, [r1, #8]
 800e8c2:	690b      	ldr	r3, [r1, #16]
 800e8c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	bfb8      	it	lt
 800e8cc:	4613      	movlt	r3, r2
 800e8ce:	6033      	str	r3, [r6, #0]
 800e8d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e8d4:	4607      	mov	r7, r0
 800e8d6:	460c      	mov	r4, r1
 800e8d8:	b10a      	cbz	r2, 800e8de <_printf_common+0x26>
 800e8da:	3301      	adds	r3, #1
 800e8dc:	6033      	str	r3, [r6, #0]
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	0699      	lsls	r1, r3, #26
 800e8e2:	bf42      	ittt	mi
 800e8e4:	6833      	ldrmi	r3, [r6, #0]
 800e8e6:	3302      	addmi	r3, #2
 800e8e8:	6033      	strmi	r3, [r6, #0]
 800e8ea:	6825      	ldr	r5, [r4, #0]
 800e8ec:	f015 0506 	ands.w	r5, r5, #6
 800e8f0:	d106      	bne.n	800e900 <_printf_common+0x48>
 800e8f2:	f104 0a19 	add.w	sl, r4, #25
 800e8f6:	68e3      	ldr	r3, [r4, #12]
 800e8f8:	6832      	ldr	r2, [r6, #0]
 800e8fa:	1a9b      	subs	r3, r3, r2
 800e8fc:	42ab      	cmp	r3, r5
 800e8fe:	dc26      	bgt.n	800e94e <_printf_common+0x96>
 800e900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e904:	1e13      	subs	r3, r2, #0
 800e906:	6822      	ldr	r2, [r4, #0]
 800e908:	bf18      	it	ne
 800e90a:	2301      	movne	r3, #1
 800e90c:	0692      	lsls	r2, r2, #26
 800e90e:	d42b      	bmi.n	800e968 <_printf_common+0xb0>
 800e910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e914:	4649      	mov	r1, r9
 800e916:	4638      	mov	r0, r7
 800e918:	47c0      	blx	r8
 800e91a:	3001      	adds	r0, #1
 800e91c:	d01e      	beq.n	800e95c <_printf_common+0xa4>
 800e91e:	6823      	ldr	r3, [r4, #0]
 800e920:	6922      	ldr	r2, [r4, #16]
 800e922:	f003 0306 	and.w	r3, r3, #6
 800e926:	2b04      	cmp	r3, #4
 800e928:	bf02      	ittt	eq
 800e92a:	68e5      	ldreq	r5, [r4, #12]
 800e92c:	6833      	ldreq	r3, [r6, #0]
 800e92e:	1aed      	subeq	r5, r5, r3
 800e930:	68a3      	ldr	r3, [r4, #8]
 800e932:	bf0c      	ite	eq
 800e934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e938:	2500      	movne	r5, #0
 800e93a:	4293      	cmp	r3, r2
 800e93c:	bfc4      	itt	gt
 800e93e:	1a9b      	subgt	r3, r3, r2
 800e940:	18ed      	addgt	r5, r5, r3
 800e942:	2600      	movs	r6, #0
 800e944:	341a      	adds	r4, #26
 800e946:	42b5      	cmp	r5, r6
 800e948:	d11a      	bne.n	800e980 <_printf_common+0xc8>
 800e94a:	2000      	movs	r0, #0
 800e94c:	e008      	b.n	800e960 <_printf_common+0xa8>
 800e94e:	2301      	movs	r3, #1
 800e950:	4652      	mov	r2, sl
 800e952:	4649      	mov	r1, r9
 800e954:	4638      	mov	r0, r7
 800e956:	47c0      	blx	r8
 800e958:	3001      	adds	r0, #1
 800e95a:	d103      	bne.n	800e964 <_printf_common+0xac>
 800e95c:	f04f 30ff 	mov.w	r0, #4294967295
 800e960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e964:	3501      	adds	r5, #1
 800e966:	e7c6      	b.n	800e8f6 <_printf_common+0x3e>
 800e968:	18e1      	adds	r1, r4, r3
 800e96a:	1c5a      	adds	r2, r3, #1
 800e96c:	2030      	movs	r0, #48	; 0x30
 800e96e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e972:	4422      	add	r2, r4
 800e974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e97c:	3302      	adds	r3, #2
 800e97e:	e7c7      	b.n	800e910 <_printf_common+0x58>
 800e980:	2301      	movs	r3, #1
 800e982:	4622      	mov	r2, r4
 800e984:	4649      	mov	r1, r9
 800e986:	4638      	mov	r0, r7
 800e988:	47c0      	blx	r8
 800e98a:	3001      	adds	r0, #1
 800e98c:	d0e6      	beq.n	800e95c <_printf_common+0xa4>
 800e98e:	3601      	adds	r6, #1
 800e990:	e7d9      	b.n	800e946 <_printf_common+0x8e>
	...

0800e994 <_printf_i>:
 800e994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e998:	7e0f      	ldrb	r7, [r1, #24]
 800e99a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e99c:	2f78      	cmp	r7, #120	; 0x78
 800e99e:	4691      	mov	r9, r2
 800e9a0:	4680      	mov	r8, r0
 800e9a2:	460c      	mov	r4, r1
 800e9a4:	469a      	mov	sl, r3
 800e9a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e9aa:	d807      	bhi.n	800e9bc <_printf_i+0x28>
 800e9ac:	2f62      	cmp	r7, #98	; 0x62
 800e9ae:	d80a      	bhi.n	800e9c6 <_printf_i+0x32>
 800e9b0:	2f00      	cmp	r7, #0
 800e9b2:	f000 80d4 	beq.w	800eb5e <_printf_i+0x1ca>
 800e9b6:	2f58      	cmp	r7, #88	; 0x58
 800e9b8:	f000 80c0 	beq.w	800eb3c <_printf_i+0x1a8>
 800e9bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e9c4:	e03a      	b.n	800ea3c <_printf_i+0xa8>
 800e9c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e9ca:	2b15      	cmp	r3, #21
 800e9cc:	d8f6      	bhi.n	800e9bc <_printf_i+0x28>
 800e9ce:	a101      	add	r1, pc, #4	; (adr r1, 800e9d4 <_printf_i+0x40>)
 800e9d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9d4:	0800ea2d 	.word	0x0800ea2d
 800e9d8:	0800ea41 	.word	0x0800ea41
 800e9dc:	0800e9bd 	.word	0x0800e9bd
 800e9e0:	0800e9bd 	.word	0x0800e9bd
 800e9e4:	0800e9bd 	.word	0x0800e9bd
 800e9e8:	0800e9bd 	.word	0x0800e9bd
 800e9ec:	0800ea41 	.word	0x0800ea41
 800e9f0:	0800e9bd 	.word	0x0800e9bd
 800e9f4:	0800e9bd 	.word	0x0800e9bd
 800e9f8:	0800e9bd 	.word	0x0800e9bd
 800e9fc:	0800e9bd 	.word	0x0800e9bd
 800ea00:	0800eb45 	.word	0x0800eb45
 800ea04:	0800ea6d 	.word	0x0800ea6d
 800ea08:	0800eaff 	.word	0x0800eaff
 800ea0c:	0800e9bd 	.word	0x0800e9bd
 800ea10:	0800e9bd 	.word	0x0800e9bd
 800ea14:	0800eb67 	.word	0x0800eb67
 800ea18:	0800e9bd 	.word	0x0800e9bd
 800ea1c:	0800ea6d 	.word	0x0800ea6d
 800ea20:	0800e9bd 	.word	0x0800e9bd
 800ea24:	0800e9bd 	.word	0x0800e9bd
 800ea28:	0800eb07 	.word	0x0800eb07
 800ea2c:	682b      	ldr	r3, [r5, #0]
 800ea2e:	1d1a      	adds	r2, r3, #4
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	602a      	str	r2, [r5, #0]
 800ea34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e09f      	b.n	800eb80 <_printf_i+0x1ec>
 800ea40:	6820      	ldr	r0, [r4, #0]
 800ea42:	682b      	ldr	r3, [r5, #0]
 800ea44:	0607      	lsls	r7, r0, #24
 800ea46:	f103 0104 	add.w	r1, r3, #4
 800ea4a:	6029      	str	r1, [r5, #0]
 800ea4c:	d501      	bpl.n	800ea52 <_printf_i+0xbe>
 800ea4e:	681e      	ldr	r6, [r3, #0]
 800ea50:	e003      	b.n	800ea5a <_printf_i+0xc6>
 800ea52:	0646      	lsls	r6, r0, #25
 800ea54:	d5fb      	bpl.n	800ea4e <_printf_i+0xba>
 800ea56:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ea5a:	2e00      	cmp	r6, #0
 800ea5c:	da03      	bge.n	800ea66 <_printf_i+0xd2>
 800ea5e:	232d      	movs	r3, #45	; 0x2d
 800ea60:	4276      	negs	r6, r6
 800ea62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea66:	485a      	ldr	r0, [pc, #360]	; (800ebd0 <_printf_i+0x23c>)
 800ea68:	230a      	movs	r3, #10
 800ea6a:	e012      	b.n	800ea92 <_printf_i+0xfe>
 800ea6c:	682b      	ldr	r3, [r5, #0]
 800ea6e:	6820      	ldr	r0, [r4, #0]
 800ea70:	1d19      	adds	r1, r3, #4
 800ea72:	6029      	str	r1, [r5, #0]
 800ea74:	0605      	lsls	r5, r0, #24
 800ea76:	d501      	bpl.n	800ea7c <_printf_i+0xe8>
 800ea78:	681e      	ldr	r6, [r3, #0]
 800ea7a:	e002      	b.n	800ea82 <_printf_i+0xee>
 800ea7c:	0641      	lsls	r1, r0, #25
 800ea7e:	d5fb      	bpl.n	800ea78 <_printf_i+0xe4>
 800ea80:	881e      	ldrh	r6, [r3, #0]
 800ea82:	4853      	ldr	r0, [pc, #332]	; (800ebd0 <_printf_i+0x23c>)
 800ea84:	2f6f      	cmp	r7, #111	; 0x6f
 800ea86:	bf0c      	ite	eq
 800ea88:	2308      	moveq	r3, #8
 800ea8a:	230a      	movne	r3, #10
 800ea8c:	2100      	movs	r1, #0
 800ea8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea92:	6865      	ldr	r5, [r4, #4]
 800ea94:	60a5      	str	r5, [r4, #8]
 800ea96:	2d00      	cmp	r5, #0
 800ea98:	bfa2      	ittt	ge
 800ea9a:	6821      	ldrge	r1, [r4, #0]
 800ea9c:	f021 0104 	bicge.w	r1, r1, #4
 800eaa0:	6021      	strge	r1, [r4, #0]
 800eaa2:	b90e      	cbnz	r6, 800eaa8 <_printf_i+0x114>
 800eaa4:	2d00      	cmp	r5, #0
 800eaa6:	d04b      	beq.n	800eb40 <_printf_i+0x1ac>
 800eaa8:	4615      	mov	r5, r2
 800eaaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800eaae:	fb03 6711 	mls	r7, r3, r1, r6
 800eab2:	5dc7      	ldrb	r7, [r0, r7]
 800eab4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eab8:	4637      	mov	r7, r6
 800eaba:	42bb      	cmp	r3, r7
 800eabc:	460e      	mov	r6, r1
 800eabe:	d9f4      	bls.n	800eaaa <_printf_i+0x116>
 800eac0:	2b08      	cmp	r3, #8
 800eac2:	d10b      	bne.n	800eadc <_printf_i+0x148>
 800eac4:	6823      	ldr	r3, [r4, #0]
 800eac6:	07de      	lsls	r6, r3, #31
 800eac8:	d508      	bpl.n	800eadc <_printf_i+0x148>
 800eaca:	6923      	ldr	r3, [r4, #16]
 800eacc:	6861      	ldr	r1, [r4, #4]
 800eace:	4299      	cmp	r1, r3
 800ead0:	bfde      	ittt	le
 800ead2:	2330      	movle	r3, #48	; 0x30
 800ead4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ead8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eadc:	1b52      	subs	r2, r2, r5
 800eade:	6122      	str	r2, [r4, #16]
 800eae0:	f8cd a000 	str.w	sl, [sp]
 800eae4:	464b      	mov	r3, r9
 800eae6:	aa03      	add	r2, sp, #12
 800eae8:	4621      	mov	r1, r4
 800eaea:	4640      	mov	r0, r8
 800eaec:	f7ff fee4 	bl	800e8b8 <_printf_common>
 800eaf0:	3001      	adds	r0, #1
 800eaf2:	d14a      	bne.n	800eb8a <_printf_i+0x1f6>
 800eaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf8:	b004      	add	sp, #16
 800eafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eafe:	6823      	ldr	r3, [r4, #0]
 800eb00:	f043 0320 	orr.w	r3, r3, #32
 800eb04:	6023      	str	r3, [r4, #0]
 800eb06:	4833      	ldr	r0, [pc, #204]	; (800ebd4 <_printf_i+0x240>)
 800eb08:	2778      	movs	r7, #120	; 0x78
 800eb0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb0e:	6823      	ldr	r3, [r4, #0]
 800eb10:	6829      	ldr	r1, [r5, #0]
 800eb12:	061f      	lsls	r7, r3, #24
 800eb14:	f851 6b04 	ldr.w	r6, [r1], #4
 800eb18:	d402      	bmi.n	800eb20 <_printf_i+0x18c>
 800eb1a:	065f      	lsls	r7, r3, #25
 800eb1c:	bf48      	it	mi
 800eb1e:	b2b6      	uxthmi	r6, r6
 800eb20:	07df      	lsls	r7, r3, #31
 800eb22:	bf48      	it	mi
 800eb24:	f043 0320 	orrmi.w	r3, r3, #32
 800eb28:	6029      	str	r1, [r5, #0]
 800eb2a:	bf48      	it	mi
 800eb2c:	6023      	strmi	r3, [r4, #0]
 800eb2e:	b91e      	cbnz	r6, 800eb38 <_printf_i+0x1a4>
 800eb30:	6823      	ldr	r3, [r4, #0]
 800eb32:	f023 0320 	bic.w	r3, r3, #32
 800eb36:	6023      	str	r3, [r4, #0]
 800eb38:	2310      	movs	r3, #16
 800eb3a:	e7a7      	b.n	800ea8c <_printf_i+0xf8>
 800eb3c:	4824      	ldr	r0, [pc, #144]	; (800ebd0 <_printf_i+0x23c>)
 800eb3e:	e7e4      	b.n	800eb0a <_printf_i+0x176>
 800eb40:	4615      	mov	r5, r2
 800eb42:	e7bd      	b.n	800eac0 <_printf_i+0x12c>
 800eb44:	682b      	ldr	r3, [r5, #0]
 800eb46:	6826      	ldr	r6, [r4, #0]
 800eb48:	6961      	ldr	r1, [r4, #20]
 800eb4a:	1d18      	adds	r0, r3, #4
 800eb4c:	6028      	str	r0, [r5, #0]
 800eb4e:	0635      	lsls	r5, r6, #24
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	d501      	bpl.n	800eb58 <_printf_i+0x1c4>
 800eb54:	6019      	str	r1, [r3, #0]
 800eb56:	e002      	b.n	800eb5e <_printf_i+0x1ca>
 800eb58:	0670      	lsls	r0, r6, #25
 800eb5a:	d5fb      	bpl.n	800eb54 <_printf_i+0x1c0>
 800eb5c:	8019      	strh	r1, [r3, #0]
 800eb5e:	2300      	movs	r3, #0
 800eb60:	6123      	str	r3, [r4, #16]
 800eb62:	4615      	mov	r5, r2
 800eb64:	e7bc      	b.n	800eae0 <_printf_i+0x14c>
 800eb66:	682b      	ldr	r3, [r5, #0]
 800eb68:	1d1a      	adds	r2, r3, #4
 800eb6a:	602a      	str	r2, [r5, #0]
 800eb6c:	681d      	ldr	r5, [r3, #0]
 800eb6e:	6862      	ldr	r2, [r4, #4]
 800eb70:	2100      	movs	r1, #0
 800eb72:	4628      	mov	r0, r5
 800eb74:	f7f1 fb2c 	bl	80001d0 <memchr>
 800eb78:	b108      	cbz	r0, 800eb7e <_printf_i+0x1ea>
 800eb7a:	1b40      	subs	r0, r0, r5
 800eb7c:	6060      	str	r0, [r4, #4]
 800eb7e:	6863      	ldr	r3, [r4, #4]
 800eb80:	6123      	str	r3, [r4, #16]
 800eb82:	2300      	movs	r3, #0
 800eb84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb88:	e7aa      	b.n	800eae0 <_printf_i+0x14c>
 800eb8a:	6923      	ldr	r3, [r4, #16]
 800eb8c:	462a      	mov	r2, r5
 800eb8e:	4649      	mov	r1, r9
 800eb90:	4640      	mov	r0, r8
 800eb92:	47d0      	blx	sl
 800eb94:	3001      	adds	r0, #1
 800eb96:	d0ad      	beq.n	800eaf4 <_printf_i+0x160>
 800eb98:	6823      	ldr	r3, [r4, #0]
 800eb9a:	079b      	lsls	r3, r3, #30
 800eb9c:	d413      	bmi.n	800ebc6 <_printf_i+0x232>
 800eb9e:	68e0      	ldr	r0, [r4, #12]
 800eba0:	9b03      	ldr	r3, [sp, #12]
 800eba2:	4298      	cmp	r0, r3
 800eba4:	bfb8      	it	lt
 800eba6:	4618      	movlt	r0, r3
 800eba8:	e7a6      	b.n	800eaf8 <_printf_i+0x164>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	4632      	mov	r2, r6
 800ebae:	4649      	mov	r1, r9
 800ebb0:	4640      	mov	r0, r8
 800ebb2:	47d0      	blx	sl
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	d09d      	beq.n	800eaf4 <_printf_i+0x160>
 800ebb8:	3501      	adds	r5, #1
 800ebba:	68e3      	ldr	r3, [r4, #12]
 800ebbc:	9903      	ldr	r1, [sp, #12]
 800ebbe:	1a5b      	subs	r3, r3, r1
 800ebc0:	42ab      	cmp	r3, r5
 800ebc2:	dcf2      	bgt.n	800ebaa <_printf_i+0x216>
 800ebc4:	e7eb      	b.n	800eb9e <_printf_i+0x20a>
 800ebc6:	2500      	movs	r5, #0
 800ebc8:	f104 0619 	add.w	r6, r4, #25
 800ebcc:	e7f5      	b.n	800ebba <_printf_i+0x226>
 800ebce:	bf00      	nop
 800ebd0:	0801120a 	.word	0x0801120a
 800ebd4:	0801121b 	.word	0x0801121b

0800ebd8 <std>:
 800ebd8:	2300      	movs	r3, #0
 800ebda:	b510      	push	{r4, lr}
 800ebdc:	4604      	mov	r4, r0
 800ebde:	e9c0 3300 	strd	r3, r3, [r0]
 800ebe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebe6:	6083      	str	r3, [r0, #8]
 800ebe8:	8181      	strh	r1, [r0, #12]
 800ebea:	6643      	str	r3, [r0, #100]	; 0x64
 800ebec:	81c2      	strh	r2, [r0, #14]
 800ebee:	6183      	str	r3, [r0, #24]
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	2208      	movs	r2, #8
 800ebf4:	305c      	adds	r0, #92	; 0x5c
 800ebf6:	f000 f8f4 	bl	800ede2 <memset>
 800ebfa:	4b0d      	ldr	r3, [pc, #52]	; (800ec30 <std+0x58>)
 800ebfc:	6263      	str	r3, [r4, #36]	; 0x24
 800ebfe:	4b0d      	ldr	r3, [pc, #52]	; (800ec34 <std+0x5c>)
 800ec00:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec02:	4b0d      	ldr	r3, [pc, #52]	; (800ec38 <std+0x60>)
 800ec04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec06:	4b0d      	ldr	r3, [pc, #52]	; (800ec3c <std+0x64>)
 800ec08:	6323      	str	r3, [r4, #48]	; 0x30
 800ec0a:	4b0d      	ldr	r3, [pc, #52]	; (800ec40 <std+0x68>)
 800ec0c:	6224      	str	r4, [r4, #32]
 800ec0e:	429c      	cmp	r4, r3
 800ec10:	d006      	beq.n	800ec20 <std+0x48>
 800ec12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ec16:	4294      	cmp	r4, r2
 800ec18:	d002      	beq.n	800ec20 <std+0x48>
 800ec1a:	33d0      	adds	r3, #208	; 0xd0
 800ec1c:	429c      	cmp	r4, r3
 800ec1e:	d105      	bne.n	800ec2c <std+0x54>
 800ec20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec28:	f000 b958 	b.w	800eedc <__retarget_lock_init_recursive>
 800ec2c:	bd10      	pop	{r4, pc}
 800ec2e:	bf00      	nop
 800ec30:	0800ed5d 	.word	0x0800ed5d
 800ec34:	0800ed7f 	.word	0x0800ed7f
 800ec38:	0800edb7 	.word	0x0800edb7
 800ec3c:	0800eddb 	.word	0x0800eddb
 800ec40:	200012bc 	.word	0x200012bc

0800ec44 <stdio_exit_handler>:
 800ec44:	4a02      	ldr	r2, [pc, #8]	; (800ec50 <stdio_exit_handler+0xc>)
 800ec46:	4903      	ldr	r1, [pc, #12]	; (800ec54 <stdio_exit_handler+0x10>)
 800ec48:	4803      	ldr	r0, [pc, #12]	; (800ec58 <stdio_exit_handler+0x14>)
 800ec4a:	f000 b869 	b.w	800ed20 <_fwalk_sglue>
 800ec4e:	bf00      	nop
 800ec50:	20000148 	.word	0x20000148
 800ec54:	08010609 	.word	0x08010609
 800ec58:	20000154 	.word	0x20000154

0800ec5c <cleanup_stdio>:
 800ec5c:	6841      	ldr	r1, [r0, #4]
 800ec5e:	4b0c      	ldr	r3, [pc, #48]	; (800ec90 <cleanup_stdio+0x34>)
 800ec60:	4299      	cmp	r1, r3
 800ec62:	b510      	push	{r4, lr}
 800ec64:	4604      	mov	r4, r0
 800ec66:	d001      	beq.n	800ec6c <cleanup_stdio+0x10>
 800ec68:	f001 fcce 	bl	8010608 <_fflush_r>
 800ec6c:	68a1      	ldr	r1, [r4, #8]
 800ec6e:	4b09      	ldr	r3, [pc, #36]	; (800ec94 <cleanup_stdio+0x38>)
 800ec70:	4299      	cmp	r1, r3
 800ec72:	d002      	beq.n	800ec7a <cleanup_stdio+0x1e>
 800ec74:	4620      	mov	r0, r4
 800ec76:	f001 fcc7 	bl	8010608 <_fflush_r>
 800ec7a:	68e1      	ldr	r1, [r4, #12]
 800ec7c:	4b06      	ldr	r3, [pc, #24]	; (800ec98 <cleanup_stdio+0x3c>)
 800ec7e:	4299      	cmp	r1, r3
 800ec80:	d004      	beq.n	800ec8c <cleanup_stdio+0x30>
 800ec82:	4620      	mov	r0, r4
 800ec84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec88:	f001 bcbe 	b.w	8010608 <_fflush_r>
 800ec8c:	bd10      	pop	{r4, pc}
 800ec8e:	bf00      	nop
 800ec90:	200012bc 	.word	0x200012bc
 800ec94:	20001324 	.word	0x20001324
 800ec98:	2000138c 	.word	0x2000138c

0800ec9c <global_stdio_init.part.0>:
 800ec9c:	b510      	push	{r4, lr}
 800ec9e:	4b0b      	ldr	r3, [pc, #44]	; (800eccc <global_stdio_init.part.0+0x30>)
 800eca0:	4c0b      	ldr	r4, [pc, #44]	; (800ecd0 <global_stdio_init.part.0+0x34>)
 800eca2:	4a0c      	ldr	r2, [pc, #48]	; (800ecd4 <global_stdio_init.part.0+0x38>)
 800eca4:	601a      	str	r2, [r3, #0]
 800eca6:	4620      	mov	r0, r4
 800eca8:	2200      	movs	r2, #0
 800ecaa:	2104      	movs	r1, #4
 800ecac:	f7ff ff94 	bl	800ebd8 <std>
 800ecb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	2109      	movs	r1, #9
 800ecb8:	f7ff ff8e 	bl	800ebd8 <std>
 800ecbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ecc0:	2202      	movs	r2, #2
 800ecc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecc6:	2112      	movs	r1, #18
 800ecc8:	f7ff bf86 	b.w	800ebd8 <std>
 800eccc:	200013f4 	.word	0x200013f4
 800ecd0:	200012bc 	.word	0x200012bc
 800ecd4:	0800ec45 	.word	0x0800ec45

0800ecd8 <__sfp_lock_acquire>:
 800ecd8:	4801      	ldr	r0, [pc, #4]	; (800ece0 <__sfp_lock_acquire+0x8>)
 800ecda:	f000 b900 	b.w	800eede <__retarget_lock_acquire_recursive>
 800ecde:	bf00      	nop
 800ece0:	200013fd 	.word	0x200013fd

0800ece4 <__sfp_lock_release>:
 800ece4:	4801      	ldr	r0, [pc, #4]	; (800ecec <__sfp_lock_release+0x8>)
 800ece6:	f000 b8fb 	b.w	800eee0 <__retarget_lock_release_recursive>
 800ecea:	bf00      	nop
 800ecec:	200013fd 	.word	0x200013fd

0800ecf0 <__sinit>:
 800ecf0:	b510      	push	{r4, lr}
 800ecf2:	4604      	mov	r4, r0
 800ecf4:	f7ff fff0 	bl	800ecd8 <__sfp_lock_acquire>
 800ecf8:	6a23      	ldr	r3, [r4, #32]
 800ecfa:	b11b      	cbz	r3, 800ed04 <__sinit+0x14>
 800ecfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed00:	f7ff bff0 	b.w	800ece4 <__sfp_lock_release>
 800ed04:	4b04      	ldr	r3, [pc, #16]	; (800ed18 <__sinit+0x28>)
 800ed06:	6223      	str	r3, [r4, #32]
 800ed08:	4b04      	ldr	r3, [pc, #16]	; (800ed1c <__sinit+0x2c>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d1f5      	bne.n	800ecfc <__sinit+0xc>
 800ed10:	f7ff ffc4 	bl	800ec9c <global_stdio_init.part.0>
 800ed14:	e7f2      	b.n	800ecfc <__sinit+0xc>
 800ed16:	bf00      	nop
 800ed18:	0800ec5d 	.word	0x0800ec5d
 800ed1c:	200013f4 	.word	0x200013f4

0800ed20 <_fwalk_sglue>:
 800ed20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed24:	4607      	mov	r7, r0
 800ed26:	4688      	mov	r8, r1
 800ed28:	4614      	mov	r4, r2
 800ed2a:	2600      	movs	r6, #0
 800ed2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed30:	f1b9 0901 	subs.w	r9, r9, #1
 800ed34:	d505      	bpl.n	800ed42 <_fwalk_sglue+0x22>
 800ed36:	6824      	ldr	r4, [r4, #0]
 800ed38:	2c00      	cmp	r4, #0
 800ed3a:	d1f7      	bne.n	800ed2c <_fwalk_sglue+0xc>
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed42:	89ab      	ldrh	r3, [r5, #12]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d907      	bls.n	800ed58 <_fwalk_sglue+0x38>
 800ed48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	d003      	beq.n	800ed58 <_fwalk_sglue+0x38>
 800ed50:	4629      	mov	r1, r5
 800ed52:	4638      	mov	r0, r7
 800ed54:	47c0      	blx	r8
 800ed56:	4306      	orrs	r6, r0
 800ed58:	3568      	adds	r5, #104	; 0x68
 800ed5a:	e7e9      	b.n	800ed30 <_fwalk_sglue+0x10>

0800ed5c <__sread>:
 800ed5c:	b510      	push	{r4, lr}
 800ed5e:	460c      	mov	r4, r1
 800ed60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed64:	f000 f86c 	bl	800ee40 <_read_r>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	bfab      	itete	ge
 800ed6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ed6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ed70:	181b      	addge	r3, r3, r0
 800ed72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ed76:	bfac      	ite	ge
 800ed78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ed7a:	81a3      	strhlt	r3, [r4, #12]
 800ed7c:	bd10      	pop	{r4, pc}

0800ed7e <__swrite>:
 800ed7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed82:	461f      	mov	r7, r3
 800ed84:	898b      	ldrh	r3, [r1, #12]
 800ed86:	05db      	lsls	r3, r3, #23
 800ed88:	4605      	mov	r5, r0
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	4616      	mov	r6, r2
 800ed8e:	d505      	bpl.n	800ed9c <__swrite+0x1e>
 800ed90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed94:	2302      	movs	r3, #2
 800ed96:	2200      	movs	r2, #0
 800ed98:	f000 f840 	bl	800ee1c <_lseek_r>
 800ed9c:	89a3      	ldrh	r3, [r4, #12]
 800ed9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eda2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eda6:	81a3      	strh	r3, [r4, #12]
 800eda8:	4632      	mov	r2, r6
 800edaa:	463b      	mov	r3, r7
 800edac:	4628      	mov	r0, r5
 800edae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edb2:	f000 b857 	b.w	800ee64 <_write_r>

0800edb6 <__sseek>:
 800edb6:	b510      	push	{r4, lr}
 800edb8:	460c      	mov	r4, r1
 800edba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edbe:	f000 f82d 	bl	800ee1c <_lseek_r>
 800edc2:	1c43      	adds	r3, r0, #1
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	bf15      	itete	ne
 800edc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800edca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800edce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800edd2:	81a3      	strheq	r3, [r4, #12]
 800edd4:	bf18      	it	ne
 800edd6:	81a3      	strhne	r3, [r4, #12]
 800edd8:	bd10      	pop	{r4, pc}

0800edda <__sclose>:
 800edda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edde:	f000 b80d 	b.w	800edfc <_close_r>

0800ede2 <memset>:
 800ede2:	4402      	add	r2, r0
 800ede4:	4603      	mov	r3, r0
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d100      	bne.n	800edec <memset+0xa>
 800edea:	4770      	bx	lr
 800edec:	f803 1b01 	strb.w	r1, [r3], #1
 800edf0:	e7f9      	b.n	800ede6 <memset+0x4>
	...

0800edf4 <_localeconv_r>:
 800edf4:	4800      	ldr	r0, [pc, #0]	; (800edf8 <_localeconv_r+0x4>)
 800edf6:	4770      	bx	lr
 800edf8:	20000294 	.word	0x20000294

0800edfc <_close_r>:
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	4d06      	ldr	r5, [pc, #24]	; (800ee18 <_close_r+0x1c>)
 800ee00:	2300      	movs	r3, #0
 800ee02:	4604      	mov	r4, r0
 800ee04:	4608      	mov	r0, r1
 800ee06:	602b      	str	r3, [r5, #0]
 800ee08:	f7f8 fb85 	bl	8007516 <_close>
 800ee0c:	1c43      	adds	r3, r0, #1
 800ee0e:	d102      	bne.n	800ee16 <_close_r+0x1a>
 800ee10:	682b      	ldr	r3, [r5, #0]
 800ee12:	b103      	cbz	r3, 800ee16 <_close_r+0x1a>
 800ee14:	6023      	str	r3, [r4, #0]
 800ee16:	bd38      	pop	{r3, r4, r5, pc}
 800ee18:	200013f8 	.word	0x200013f8

0800ee1c <_lseek_r>:
 800ee1c:	b538      	push	{r3, r4, r5, lr}
 800ee1e:	4d07      	ldr	r5, [pc, #28]	; (800ee3c <_lseek_r+0x20>)
 800ee20:	4604      	mov	r4, r0
 800ee22:	4608      	mov	r0, r1
 800ee24:	4611      	mov	r1, r2
 800ee26:	2200      	movs	r2, #0
 800ee28:	602a      	str	r2, [r5, #0]
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	f7f8 fb9a 	bl	8007564 <_lseek>
 800ee30:	1c43      	adds	r3, r0, #1
 800ee32:	d102      	bne.n	800ee3a <_lseek_r+0x1e>
 800ee34:	682b      	ldr	r3, [r5, #0]
 800ee36:	b103      	cbz	r3, 800ee3a <_lseek_r+0x1e>
 800ee38:	6023      	str	r3, [r4, #0]
 800ee3a:	bd38      	pop	{r3, r4, r5, pc}
 800ee3c:	200013f8 	.word	0x200013f8

0800ee40 <_read_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4d07      	ldr	r5, [pc, #28]	; (800ee60 <_read_r+0x20>)
 800ee44:	4604      	mov	r4, r0
 800ee46:	4608      	mov	r0, r1
 800ee48:	4611      	mov	r1, r2
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	602a      	str	r2, [r5, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	f7f8 fb28 	bl	80074a4 <_read>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_read_r+0x1e>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_read_r+0x1e>
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	200013f8 	.word	0x200013f8

0800ee64 <_write_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	4d07      	ldr	r5, [pc, #28]	; (800ee84 <_write_r+0x20>)
 800ee68:	4604      	mov	r4, r0
 800ee6a:	4608      	mov	r0, r1
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	2200      	movs	r2, #0
 800ee70:	602a      	str	r2, [r5, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	f7f8 fb33 	bl	80074de <_write>
 800ee78:	1c43      	adds	r3, r0, #1
 800ee7a:	d102      	bne.n	800ee82 <_write_r+0x1e>
 800ee7c:	682b      	ldr	r3, [r5, #0]
 800ee7e:	b103      	cbz	r3, 800ee82 <_write_r+0x1e>
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	bd38      	pop	{r3, r4, r5, pc}
 800ee84:	200013f8 	.word	0x200013f8

0800ee88 <__errno>:
 800ee88:	4b01      	ldr	r3, [pc, #4]	; (800ee90 <__errno+0x8>)
 800ee8a:	6818      	ldr	r0, [r3, #0]
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	200001a0 	.word	0x200001a0

0800ee94 <__libc_init_array>:
 800ee94:	b570      	push	{r4, r5, r6, lr}
 800ee96:	4d0d      	ldr	r5, [pc, #52]	; (800eecc <__libc_init_array+0x38>)
 800ee98:	4c0d      	ldr	r4, [pc, #52]	; (800eed0 <__libc_init_array+0x3c>)
 800ee9a:	1b64      	subs	r4, r4, r5
 800ee9c:	10a4      	asrs	r4, r4, #2
 800ee9e:	2600      	movs	r6, #0
 800eea0:	42a6      	cmp	r6, r4
 800eea2:	d109      	bne.n	800eeb8 <__libc_init_array+0x24>
 800eea4:	4d0b      	ldr	r5, [pc, #44]	; (800eed4 <__libc_init_array+0x40>)
 800eea6:	4c0c      	ldr	r4, [pc, #48]	; (800eed8 <__libc_init_array+0x44>)
 800eea8:	f001 fef4 	bl	8010c94 <_init>
 800eeac:	1b64      	subs	r4, r4, r5
 800eeae:	10a4      	asrs	r4, r4, #2
 800eeb0:	2600      	movs	r6, #0
 800eeb2:	42a6      	cmp	r6, r4
 800eeb4:	d105      	bne.n	800eec2 <__libc_init_array+0x2e>
 800eeb6:	bd70      	pop	{r4, r5, r6, pc}
 800eeb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eebc:	4798      	blx	r3
 800eebe:	3601      	adds	r6, #1
 800eec0:	e7ee      	b.n	800eea0 <__libc_init_array+0xc>
 800eec2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eec6:	4798      	blx	r3
 800eec8:	3601      	adds	r6, #1
 800eeca:	e7f2      	b.n	800eeb2 <__libc_init_array+0x1e>
 800eecc:	08011574 	.word	0x08011574
 800eed0:	08011574 	.word	0x08011574
 800eed4:	08011574 	.word	0x08011574
 800eed8:	0801157c 	.word	0x0801157c

0800eedc <__retarget_lock_init_recursive>:
 800eedc:	4770      	bx	lr

0800eede <__retarget_lock_acquire_recursive>:
 800eede:	4770      	bx	lr

0800eee0 <__retarget_lock_release_recursive>:
 800eee0:	4770      	bx	lr

0800eee2 <memcpy>:
 800eee2:	440a      	add	r2, r1
 800eee4:	4291      	cmp	r1, r2
 800eee6:	f100 33ff 	add.w	r3, r0, #4294967295
 800eeea:	d100      	bne.n	800eeee <memcpy+0xc>
 800eeec:	4770      	bx	lr
 800eeee:	b510      	push	{r4, lr}
 800eef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eef8:	4291      	cmp	r1, r2
 800eefa:	d1f9      	bne.n	800eef0 <memcpy+0xe>
 800eefc:	bd10      	pop	{r4, pc}

0800eefe <quorem>:
 800eefe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef02:	6903      	ldr	r3, [r0, #16]
 800ef04:	690c      	ldr	r4, [r1, #16]
 800ef06:	42a3      	cmp	r3, r4
 800ef08:	4607      	mov	r7, r0
 800ef0a:	db7e      	blt.n	800f00a <quorem+0x10c>
 800ef0c:	3c01      	subs	r4, #1
 800ef0e:	f101 0814 	add.w	r8, r1, #20
 800ef12:	f100 0514 	add.w	r5, r0, #20
 800ef16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef1a:	9301      	str	r3, [sp, #4]
 800ef1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef24:	3301      	adds	r3, #1
 800ef26:	429a      	cmp	r2, r3
 800ef28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ef2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef30:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef34:	d331      	bcc.n	800ef9a <quorem+0x9c>
 800ef36:	f04f 0e00 	mov.w	lr, #0
 800ef3a:	4640      	mov	r0, r8
 800ef3c:	46ac      	mov	ip, r5
 800ef3e:	46f2      	mov	sl, lr
 800ef40:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef44:	b293      	uxth	r3, r2
 800ef46:	fb06 e303 	mla	r3, r6, r3, lr
 800ef4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef4e:	0c1a      	lsrs	r2, r3, #16
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	ebaa 0303 	sub.w	r3, sl, r3
 800ef56:	f8dc a000 	ldr.w	sl, [ip]
 800ef5a:	fa13 f38a 	uxtah	r3, r3, sl
 800ef5e:	fb06 220e 	mla	r2, r6, lr, r2
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	9b00      	ldr	r3, [sp, #0]
 800ef66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef6a:	b292      	uxth	r2, r2
 800ef6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ef70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef74:	f8bd 3000 	ldrh.w	r3, [sp]
 800ef78:	4581      	cmp	r9, r0
 800ef7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef7e:	f84c 3b04 	str.w	r3, [ip], #4
 800ef82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef86:	d2db      	bcs.n	800ef40 <quorem+0x42>
 800ef88:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef8c:	b92b      	cbnz	r3, 800ef9a <quorem+0x9c>
 800ef8e:	9b01      	ldr	r3, [sp, #4]
 800ef90:	3b04      	subs	r3, #4
 800ef92:	429d      	cmp	r5, r3
 800ef94:	461a      	mov	r2, r3
 800ef96:	d32c      	bcc.n	800eff2 <quorem+0xf4>
 800ef98:	613c      	str	r4, [r7, #16]
 800ef9a:	4638      	mov	r0, r7
 800ef9c:	f001 f9a6 	bl	80102ec <__mcmp>
 800efa0:	2800      	cmp	r0, #0
 800efa2:	db22      	blt.n	800efea <quorem+0xec>
 800efa4:	3601      	adds	r6, #1
 800efa6:	4629      	mov	r1, r5
 800efa8:	2000      	movs	r0, #0
 800efaa:	f858 2b04 	ldr.w	r2, [r8], #4
 800efae:	f8d1 c000 	ldr.w	ip, [r1]
 800efb2:	b293      	uxth	r3, r2
 800efb4:	1ac3      	subs	r3, r0, r3
 800efb6:	0c12      	lsrs	r2, r2, #16
 800efb8:	fa13 f38c 	uxtah	r3, r3, ip
 800efbc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800efc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efca:	45c1      	cmp	r9, r8
 800efcc:	f841 3b04 	str.w	r3, [r1], #4
 800efd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800efd4:	d2e9      	bcs.n	800efaa <quorem+0xac>
 800efd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efde:	b922      	cbnz	r2, 800efea <quorem+0xec>
 800efe0:	3b04      	subs	r3, #4
 800efe2:	429d      	cmp	r5, r3
 800efe4:	461a      	mov	r2, r3
 800efe6:	d30a      	bcc.n	800effe <quorem+0x100>
 800efe8:	613c      	str	r4, [r7, #16]
 800efea:	4630      	mov	r0, r6
 800efec:	b003      	add	sp, #12
 800efee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff2:	6812      	ldr	r2, [r2, #0]
 800eff4:	3b04      	subs	r3, #4
 800eff6:	2a00      	cmp	r2, #0
 800eff8:	d1ce      	bne.n	800ef98 <quorem+0x9a>
 800effa:	3c01      	subs	r4, #1
 800effc:	e7c9      	b.n	800ef92 <quorem+0x94>
 800effe:	6812      	ldr	r2, [r2, #0]
 800f000:	3b04      	subs	r3, #4
 800f002:	2a00      	cmp	r2, #0
 800f004:	d1f0      	bne.n	800efe8 <quorem+0xea>
 800f006:	3c01      	subs	r4, #1
 800f008:	e7eb      	b.n	800efe2 <quorem+0xe4>
 800f00a:	2000      	movs	r0, #0
 800f00c:	e7ee      	b.n	800efec <quorem+0xee>
	...

0800f010 <_dtoa_r>:
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	ed2d 8b04 	vpush	{d8-d9}
 800f018:	69c5      	ldr	r5, [r0, #28]
 800f01a:	b093      	sub	sp, #76	; 0x4c
 800f01c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f020:	ec57 6b10 	vmov	r6, r7, d0
 800f024:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f028:	9107      	str	r1, [sp, #28]
 800f02a:	4604      	mov	r4, r0
 800f02c:	920a      	str	r2, [sp, #40]	; 0x28
 800f02e:	930d      	str	r3, [sp, #52]	; 0x34
 800f030:	b975      	cbnz	r5, 800f050 <_dtoa_r+0x40>
 800f032:	2010      	movs	r0, #16
 800f034:	f000 fe2a 	bl	800fc8c <malloc>
 800f038:	4602      	mov	r2, r0
 800f03a:	61e0      	str	r0, [r4, #28]
 800f03c:	b920      	cbnz	r0, 800f048 <_dtoa_r+0x38>
 800f03e:	4bae      	ldr	r3, [pc, #696]	; (800f2f8 <_dtoa_r+0x2e8>)
 800f040:	21ef      	movs	r1, #239	; 0xef
 800f042:	48ae      	ldr	r0, [pc, #696]	; (800f2fc <_dtoa_r+0x2ec>)
 800f044:	f001 fb18 	bl	8010678 <__assert_func>
 800f048:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f04c:	6005      	str	r5, [r0, #0]
 800f04e:	60c5      	str	r5, [r0, #12]
 800f050:	69e3      	ldr	r3, [r4, #28]
 800f052:	6819      	ldr	r1, [r3, #0]
 800f054:	b151      	cbz	r1, 800f06c <_dtoa_r+0x5c>
 800f056:	685a      	ldr	r2, [r3, #4]
 800f058:	604a      	str	r2, [r1, #4]
 800f05a:	2301      	movs	r3, #1
 800f05c:	4093      	lsls	r3, r2
 800f05e:	608b      	str	r3, [r1, #8]
 800f060:	4620      	mov	r0, r4
 800f062:	f000 ff07 	bl	800fe74 <_Bfree>
 800f066:	69e3      	ldr	r3, [r4, #28]
 800f068:	2200      	movs	r2, #0
 800f06a:	601a      	str	r2, [r3, #0]
 800f06c:	1e3b      	subs	r3, r7, #0
 800f06e:	bfbb      	ittet	lt
 800f070:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f074:	9303      	strlt	r3, [sp, #12]
 800f076:	2300      	movge	r3, #0
 800f078:	2201      	movlt	r2, #1
 800f07a:	bfac      	ite	ge
 800f07c:	f8c8 3000 	strge.w	r3, [r8]
 800f080:	f8c8 2000 	strlt.w	r2, [r8]
 800f084:	4b9e      	ldr	r3, [pc, #632]	; (800f300 <_dtoa_r+0x2f0>)
 800f086:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f08a:	ea33 0308 	bics.w	r3, r3, r8
 800f08e:	d11b      	bne.n	800f0c8 <_dtoa_r+0xb8>
 800f090:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f092:	f242 730f 	movw	r3, #9999	; 0x270f
 800f096:	6013      	str	r3, [r2, #0]
 800f098:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f09c:	4333      	orrs	r3, r6
 800f09e:	f000 8593 	beq.w	800fbc8 <_dtoa_r+0xbb8>
 800f0a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0a4:	b963      	cbnz	r3, 800f0c0 <_dtoa_r+0xb0>
 800f0a6:	4b97      	ldr	r3, [pc, #604]	; (800f304 <_dtoa_r+0x2f4>)
 800f0a8:	e027      	b.n	800f0fa <_dtoa_r+0xea>
 800f0aa:	4b97      	ldr	r3, [pc, #604]	; (800f308 <_dtoa_r+0x2f8>)
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	3308      	adds	r3, #8
 800f0b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f0b2:	6013      	str	r3, [r2, #0]
 800f0b4:	9800      	ldr	r0, [sp, #0]
 800f0b6:	b013      	add	sp, #76	; 0x4c
 800f0b8:	ecbd 8b04 	vpop	{d8-d9}
 800f0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c0:	4b90      	ldr	r3, [pc, #576]	; (800f304 <_dtoa_r+0x2f4>)
 800f0c2:	9300      	str	r3, [sp, #0]
 800f0c4:	3303      	adds	r3, #3
 800f0c6:	e7f3      	b.n	800f0b0 <_dtoa_r+0xa0>
 800f0c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	ec51 0b17 	vmov	r0, r1, d7
 800f0d2:	eeb0 8a47 	vmov.f32	s16, s14
 800f0d6:	eef0 8a67 	vmov.f32	s17, s15
 800f0da:	2300      	movs	r3, #0
 800f0dc:	f7f1 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0e0:	4681      	mov	r9, r0
 800f0e2:	b160      	cbz	r0, 800f0fe <_dtoa_r+0xee>
 800f0e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	6013      	str	r3, [r2, #0]
 800f0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f000 8568 	beq.w	800fbc2 <_dtoa_r+0xbb2>
 800f0f2:	4b86      	ldr	r3, [pc, #536]	; (800f30c <_dtoa_r+0x2fc>)
 800f0f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f0f6:	6013      	str	r3, [r2, #0]
 800f0f8:	3b01      	subs	r3, #1
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	e7da      	b.n	800f0b4 <_dtoa_r+0xa4>
 800f0fe:	aa10      	add	r2, sp, #64	; 0x40
 800f100:	a911      	add	r1, sp, #68	; 0x44
 800f102:	4620      	mov	r0, r4
 800f104:	eeb0 0a48 	vmov.f32	s0, s16
 800f108:	eef0 0a68 	vmov.f32	s1, s17
 800f10c:	f001 f994 	bl	8010438 <__d2b>
 800f110:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f114:	4682      	mov	sl, r0
 800f116:	2d00      	cmp	r5, #0
 800f118:	d07f      	beq.n	800f21a <_dtoa_r+0x20a>
 800f11a:	ee18 3a90 	vmov	r3, s17
 800f11e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f122:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f126:	ec51 0b18 	vmov	r0, r1, d8
 800f12a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f12e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f132:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f136:	4619      	mov	r1, r3
 800f138:	2200      	movs	r2, #0
 800f13a:	4b75      	ldr	r3, [pc, #468]	; (800f310 <_dtoa_r+0x300>)
 800f13c:	f7f1 f8a4 	bl	8000288 <__aeabi_dsub>
 800f140:	a367      	add	r3, pc, #412	; (adr r3, 800f2e0 <_dtoa_r+0x2d0>)
 800f142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f146:	f7f1 fa57 	bl	80005f8 <__aeabi_dmul>
 800f14a:	a367      	add	r3, pc, #412	; (adr r3, 800f2e8 <_dtoa_r+0x2d8>)
 800f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f150:	f7f1 f89c 	bl	800028c <__adddf3>
 800f154:	4606      	mov	r6, r0
 800f156:	4628      	mov	r0, r5
 800f158:	460f      	mov	r7, r1
 800f15a:	f7f1 f9e3 	bl	8000524 <__aeabi_i2d>
 800f15e:	a364      	add	r3, pc, #400	; (adr r3, 800f2f0 <_dtoa_r+0x2e0>)
 800f160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f164:	f7f1 fa48 	bl	80005f8 <__aeabi_dmul>
 800f168:	4602      	mov	r2, r0
 800f16a:	460b      	mov	r3, r1
 800f16c:	4630      	mov	r0, r6
 800f16e:	4639      	mov	r1, r7
 800f170:	f7f1 f88c 	bl	800028c <__adddf3>
 800f174:	4606      	mov	r6, r0
 800f176:	460f      	mov	r7, r1
 800f178:	f7f1 fcee 	bl	8000b58 <__aeabi_d2iz>
 800f17c:	2200      	movs	r2, #0
 800f17e:	4683      	mov	fp, r0
 800f180:	2300      	movs	r3, #0
 800f182:	4630      	mov	r0, r6
 800f184:	4639      	mov	r1, r7
 800f186:	f7f1 fca9 	bl	8000adc <__aeabi_dcmplt>
 800f18a:	b148      	cbz	r0, 800f1a0 <_dtoa_r+0x190>
 800f18c:	4658      	mov	r0, fp
 800f18e:	f7f1 f9c9 	bl	8000524 <__aeabi_i2d>
 800f192:	4632      	mov	r2, r6
 800f194:	463b      	mov	r3, r7
 800f196:	f7f1 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800f19a:	b908      	cbnz	r0, 800f1a0 <_dtoa_r+0x190>
 800f19c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1a0:	f1bb 0f16 	cmp.w	fp, #22
 800f1a4:	d857      	bhi.n	800f256 <_dtoa_r+0x246>
 800f1a6:	4b5b      	ldr	r3, [pc, #364]	; (800f314 <_dtoa_r+0x304>)
 800f1a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b0:	ec51 0b18 	vmov	r0, r1, d8
 800f1b4:	f7f1 fc92 	bl	8000adc <__aeabi_dcmplt>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	d04e      	beq.n	800f25a <_dtoa_r+0x24a>
 800f1bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	930c      	str	r3, [sp, #48]	; 0x30
 800f1c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1c6:	1b5b      	subs	r3, r3, r5
 800f1c8:	1e5a      	subs	r2, r3, #1
 800f1ca:	bf45      	ittet	mi
 800f1cc:	f1c3 0301 	rsbmi	r3, r3, #1
 800f1d0:	9305      	strmi	r3, [sp, #20]
 800f1d2:	2300      	movpl	r3, #0
 800f1d4:	2300      	movmi	r3, #0
 800f1d6:	9206      	str	r2, [sp, #24]
 800f1d8:	bf54      	ite	pl
 800f1da:	9305      	strpl	r3, [sp, #20]
 800f1dc:	9306      	strmi	r3, [sp, #24]
 800f1de:	f1bb 0f00 	cmp.w	fp, #0
 800f1e2:	db3c      	blt.n	800f25e <_dtoa_r+0x24e>
 800f1e4:	9b06      	ldr	r3, [sp, #24]
 800f1e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f1ea:	445b      	add	r3, fp
 800f1ec:	9306      	str	r3, [sp, #24]
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	9308      	str	r3, [sp, #32]
 800f1f2:	9b07      	ldr	r3, [sp, #28]
 800f1f4:	2b09      	cmp	r3, #9
 800f1f6:	d868      	bhi.n	800f2ca <_dtoa_r+0x2ba>
 800f1f8:	2b05      	cmp	r3, #5
 800f1fa:	bfc4      	itt	gt
 800f1fc:	3b04      	subgt	r3, #4
 800f1fe:	9307      	strgt	r3, [sp, #28]
 800f200:	9b07      	ldr	r3, [sp, #28]
 800f202:	f1a3 0302 	sub.w	r3, r3, #2
 800f206:	bfcc      	ite	gt
 800f208:	2500      	movgt	r5, #0
 800f20a:	2501      	movle	r5, #1
 800f20c:	2b03      	cmp	r3, #3
 800f20e:	f200 8085 	bhi.w	800f31c <_dtoa_r+0x30c>
 800f212:	e8df f003 	tbb	[pc, r3]
 800f216:	3b2e      	.short	0x3b2e
 800f218:	5839      	.short	0x5839
 800f21a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f21e:	441d      	add	r5, r3
 800f220:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f224:	2b20      	cmp	r3, #32
 800f226:	bfc1      	itttt	gt
 800f228:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f22c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f230:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f234:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f238:	bfd6      	itet	le
 800f23a:	f1c3 0320 	rsble	r3, r3, #32
 800f23e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f242:	fa06 f003 	lslle.w	r0, r6, r3
 800f246:	f7f1 f95d 	bl	8000504 <__aeabi_ui2d>
 800f24a:	2201      	movs	r2, #1
 800f24c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f250:	3d01      	subs	r5, #1
 800f252:	920e      	str	r2, [sp, #56]	; 0x38
 800f254:	e76f      	b.n	800f136 <_dtoa_r+0x126>
 800f256:	2301      	movs	r3, #1
 800f258:	e7b3      	b.n	800f1c2 <_dtoa_r+0x1b2>
 800f25a:	900c      	str	r0, [sp, #48]	; 0x30
 800f25c:	e7b2      	b.n	800f1c4 <_dtoa_r+0x1b4>
 800f25e:	9b05      	ldr	r3, [sp, #20]
 800f260:	eba3 030b 	sub.w	r3, r3, fp
 800f264:	9305      	str	r3, [sp, #20]
 800f266:	f1cb 0300 	rsb	r3, fp, #0
 800f26a:	9308      	str	r3, [sp, #32]
 800f26c:	2300      	movs	r3, #0
 800f26e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f270:	e7bf      	b.n	800f1f2 <_dtoa_r+0x1e2>
 800f272:	2300      	movs	r3, #0
 800f274:	9309      	str	r3, [sp, #36]	; 0x24
 800f276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f278:	2b00      	cmp	r3, #0
 800f27a:	dc52      	bgt.n	800f322 <_dtoa_r+0x312>
 800f27c:	2301      	movs	r3, #1
 800f27e:	9301      	str	r3, [sp, #4]
 800f280:	9304      	str	r3, [sp, #16]
 800f282:	461a      	mov	r2, r3
 800f284:	920a      	str	r2, [sp, #40]	; 0x28
 800f286:	e00b      	b.n	800f2a0 <_dtoa_r+0x290>
 800f288:	2301      	movs	r3, #1
 800f28a:	e7f3      	b.n	800f274 <_dtoa_r+0x264>
 800f28c:	2300      	movs	r3, #0
 800f28e:	9309      	str	r3, [sp, #36]	; 0x24
 800f290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f292:	445b      	add	r3, fp
 800f294:	9301      	str	r3, [sp, #4]
 800f296:	3301      	adds	r3, #1
 800f298:	2b01      	cmp	r3, #1
 800f29a:	9304      	str	r3, [sp, #16]
 800f29c:	bfb8      	it	lt
 800f29e:	2301      	movlt	r3, #1
 800f2a0:	69e0      	ldr	r0, [r4, #28]
 800f2a2:	2100      	movs	r1, #0
 800f2a4:	2204      	movs	r2, #4
 800f2a6:	f102 0614 	add.w	r6, r2, #20
 800f2aa:	429e      	cmp	r6, r3
 800f2ac:	d93d      	bls.n	800f32a <_dtoa_r+0x31a>
 800f2ae:	6041      	str	r1, [r0, #4]
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	f000 fd9f 	bl	800fdf4 <_Balloc>
 800f2b6:	9000      	str	r0, [sp, #0]
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d139      	bne.n	800f330 <_dtoa_r+0x320>
 800f2bc:	4b16      	ldr	r3, [pc, #88]	; (800f318 <_dtoa_r+0x308>)
 800f2be:	4602      	mov	r2, r0
 800f2c0:	f240 11af 	movw	r1, #431	; 0x1af
 800f2c4:	e6bd      	b.n	800f042 <_dtoa_r+0x32>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e7e1      	b.n	800f28e <_dtoa_r+0x27e>
 800f2ca:	2501      	movs	r5, #1
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	9307      	str	r3, [sp, #28]
 800f2d0:	9509      	str	r5, [sp, #36]	; 0x24
 800f2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d6:	9301      	str	r3, [sp, #4]
 800f2d8:	9304      	str	r3, [sp, #16]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	2312      	movs	r3, #18
 800f2de:	e7d1      	b.n	800f284 <_dtoa_r+0x274>
 800f2e0:	636f4361 	.word	0x636f4361
 800f2e4:	3fd287a7 	.word	0x3fd287a7
 800f2e8:	8b60c8b3 	.word	0x8b60c8b3
 800f2ec:	3fc68a28 	.word	0x3fc68a28
 800f2f0:	509f79fb 	.word	0x509f79fb
 800f2f4:	3fd34413 	.word	0x3fd34413
 800f2f8:	08011239 	.word	0x08011239
 800f2fc:	08011250 	.word	0x08011250
 800f300:	7ff00000 	.word	0x7ff00000
 800f304:	08011235 	.word	0x08011235
 800f308:	0801122c 	.word	0x0801122c
 800f30c:	08011209 	.word	0x08011209
 800f310:	3ff80000 	.word	0x3ff80000
 800f314:	08011340 	.word	0x08011340
 800f318:	080112a8 	.word	0x080112a8
 800f31c:	2301      	movs	r3, #1
 800f31e:	9309      	str	r3, [sp, #36]	; 0x24
 800f320:	e7d7      	b.n	800f2d2 <_dtoa_r+0x2c2>
 800f322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f324:	9301      	str	r3, [sp, #4]
 800f326:	9304      	str	r3, [sp, #16]
 800f328:	e7ba      	b.n	800f2a0 <_dtoa_r+0x290>
 800f32a:	3101      	adds	r1, #1
 800f32c:	0052      	lsls	r2, r2, #1
 800f32e:	e7ba      	b.n	800f2a6 <_dtoa_r+0x296>
 800f330:	69e3      	ldr	r3, [r4, #28]
 800f332:	9a00      	ldr	r2, [sp, #0]
 800f334:	601a      	str	r2, [r3, #0]
 800f336:	9b04      	ldr	r3, [sp, #16]
 800f338:	2b0e      	cmp	r3, #14
 800f33a:	f200 80a8 	bhi.w	800f48e <_dtoa_r+0x47e>
 800f33e:	2d00      	cmp	r5, #0
 800f340:	f000 80a5 	beq.w	800f48e <_dtoa_r+0x47e>
 800f344:	f1bb 0f00 	cmp.w	fp, #0
 800f348:	dd38      	ble.n	800f3bc <_dtoa_r+0x3ac>
 800f34a:	4bc0      	ldr	r3, [pc, #768]	; (800f64c <_dtoa_r+0x63c>)
 800f34c:	f00b 020f 	and.w	r2, fp, #15
 800f350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f354:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f358:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f35c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f360:	d019      	beq.n	800f396 <_dtoa_r+0x386>
 800f362:	4bbb      	ldr	r3, [pc, #748]	; (800f650 <_dtoa_r+0x640>)
 800f364:	ec51 0b18 	vmov	r0, r1, d8
 800f368:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f36c:	f7f1 fa6e 	bl	800084c <__aeabi_ddiv>
 800f370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f374:	f008 080f 	and.w	r8, r8, #15
 800f378:	2503      	movs	r5, #3
 800f37a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f650 <_dtoa_r+0x640>
 800f37e:	f1b8 0f00 	cmp.w	r8, #0
 800f382:	d10a      	bne.n	800f39a <_dtoa_r+0x38a>
 800f384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f388:	4632      	mov	r2, r6
 800f38a:	463b      	mov	r3, r7
 800f38c:	f7f1 fa5e 	bl	800084c <__aeabi_ddiv>
 800f390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f394:	e02b      	b.n	800f3ee <_dtoa_r+0x3de>
 800f396:	2502      	movs	r5, #2
 800f398:	e7ef      	b.n	800f37a <_dtoa_r+0x36a>
 800f39a:	f018 0f01 	tst.w	r8, #1
 800f39e:	d008      	beq.n	800f3b2 <_dtoa_r+0x3a2>
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	4639      	mov	r1, r7
 800f3a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f3a8:	f7f1 f926 	bl	80005f8 <__aeabi_dmul>
 800f3ac:	3501      	adds	r5, #1
 800f3ae:	4606      	mov	r6, r0
 800f3b0:	460f      	mov	r7, r1
 800f3b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f3b6:	f109 0908 	add.w	r9, r9, #8
 800f3ba:	e7e0      	b.n	800f37e <_dtoa_r+0x36e>
 800f3bc:	f000 809f 	beq.w	800f4fe <_dtoa_r+0x4ee>
 800f3c0:	f1cb 0600 	rsb	r6, fp, #0
 800f3c4:	4ba1      	ldr	r3, [pc, #644]	; (800f64c <_dtoa_r+0x63c>)
 800f3c6:	4fa2      	ldr	r7, [pc, #648]	; (800f650 <_dtoa_r+0x640>)
 800f3c8:	f006 020f 	and.w	r2, r6, #15
 800f3cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d4:	ec51 0b18 	vmov	r0, r1, d8
 800f3d8:	f7f1 f90e 	bl	80005f8 <__aeabi_dmul>
 800f3dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3e0:	1136      	asrs	r6, r6, #4
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	2502      	movs	r5, #2
 800f3e6:	2e00      	cmp	r6, #0
 800f3e8:	d17e      	bne.n	800f4e8 <_dtoa_r+0x4d8>
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d1d0      	bne.n	800f390 <_dtoa_r+0x380>
 800f3ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f000 8084 	beq.w	800f502 <_dtoa_r+0x4f2>
 800f3fa:	4b96      	ldr	r3, [pc, #600]	; (800f654 <_dtoa_r+0x644>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	4640      	mov	r0, r8
 800f400:	4649      	mov	r1, r9
 800f402:	f7f1 fb6b 	bl	8000adc <__aeabi_dcmplt>
 800f406:	2800      	cmp	r0, #0
 800f408:	d07b      	beq.n	800f502 <_dtoa_r+0x4f2>
 800f40a:	9b04      	ldr	r3, [sp, #16]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d078      	beq.n	800f502 <_dtoa_r+0x4f2>
 800f410:	9b01      	ldr	r3, [sp, #4]
 800f412:	2b00      	cmp	r3, #0
 800f414:	dd39      	ble.n	800f48a <_dtoa_r+0x47a>
 800f416:	4b90      	ldr	r3, [pc, #576]	; (800f658 <_dtoa_r+0x648>)
 800f418:	2200      	movs	r2, #0
 800f41a:	4640      	mov	r0, r8
 800f41c:	4649      	mov	r1, r9
 800f41e:	f7f1 f8eb 	bl	80005f8 <__aeabi_dmul>
 800f422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f426:	9e01      	ldr	r6, [sp, #4]
 800f428:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f42c:	3501      	adds	r5, #1
 800f42e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f432:	4628      	mov	r0, r5
 800f434:	f7f1 f876 	bl	8000524 <__aeabi_i2d>
 800f438:	4642      	mov	r2, r8
 800f43a:	464b      	mov	r3, r9
 800f43c:	f7f1 f8dc 	bl	80005f8 <__aeabi_dmul>
 800f440:	4b86      	ldr	r3, [pc, #536]	; (800f65c <_dtoa_r+0x64c>)
 800f442:	2200      	movs	r2, #0
 800f444:	f7f0 ff22 	bl	800028c <__adddf3>
 800f448:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f44c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f450:	9303      	str	r3, [sp, #12]
 800f452:	2e00      	cmp	r6, #0
 800f454:	d158      	bne.n	800f508 <_dtoa_r+0x4f8>
 800f456:	4b82      	ldr	r3, [pc, #520]	; (800f660 <_dtoa_r+0x650>)
 800f458:	2200      	movs	r2, #0
 800f45a:	4640      	mov	r0, r8
 800f45c:	4649      	mov	r1, r9
 800f45e:	f7f0 ff13 	bl	8000288 <__aeabi_dsub>
 800f462:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f466:	4680      	mov	r8, r0
 800f468:	4689      	mov	r9, r1
 800f46a:	f7f1 fb55 	bl	8000b18 <__aeabi_dcmpgt>
 800f46e:	2800      	cmp	r0, #0
 800f470:	f040 8296 	bne.w	800f9a0 <_dtoa_r+0x990>
 800f474:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f478:	4640      	mov	r0, r8
 800f47a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f47e:	4649      	mov	r1, r9
 800f480:	f7f1 fb2c 	bl	8000adc <__aeabi_dcmplt>
 800f484:	2800      	cmp	r0, #0
 800f486:	f040 8289 	bne.w	800f99c <_dtoa_r+0x98c>
 800f48a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f48e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f490:	2b00      	cmp	r3, #0
 800f492:	f2c0 814e 	blt.w	800f732 <_dtoa_r+0x722>
 800f496:	f1bb 0f0e 	cmp.w	fp, #14
 800f49a:	f300 814a 	bgt.w	800f732 <_dtoa_r+0x722>
 800f49e:	4b6b      	ldr	r3, [pc, #428]	; (800f64c <_dtoa_r+0x63c>)
 800f4a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f4a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	f280 80dc 	bge.w	800f668 <_dtoa_r+0x658>
 800f4b0:	9b04      	ldr	r3, [sp, #16]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	f300 80d8 	bgt.w	800f668 <_dtoa_r+0x658>
 800f4b8:	f040 826f 	bne.w	800f99a <_dtoa_r+0x98a>
 800f4bc:	4b68      	ldr	r3, [pc, #416]	; (800f660 <_dtoa_r+0x650>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	4640      	mov	r0, r8
 800f4c2:	4649      	mov	r1, r9
 800f4c4:	f7f1 f898 	bl	80005f8 <__aeabi_dmul>
 800f4c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4cc:	f7f1 fb1a 	bl	8000b04 <__aeabi_dcmpge>
 800f4d0:	9e04      	ldr	r6, [sp, #16]
 800f4d2:	4637      	mov	r7, r6
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	f040 8245 	bne.w	800f964 <_dtoa_r+0x954>
 800f4da:	9d00      	ldr	r5, [sp, #0]
 800f4dc:	2331      	movs	r3, #49	; 0x31
 800f4de:	f805 3b01 	strb.w	r3, [r5], #1
 800f4e2:	f10b 0b01 	add.w	fp, fp, #1
 800f4e6:	e241      	b.n	800f96c <_dtoa_r+0x95c>
 800f4e8:	07f2      	lsls	r2, r6, #31
 800f4ea:	d505      	bpl.n	800f4f8 <_dtoa_r+0x4e8>
 800f4ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4f0:	f7f1 f882 	bl	80005f8 <__aeabi_dmul>
 800f4f4:	3501      	adds	r5, #1
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	1076      	asrs	r6, r6, #1
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	e773      	b.n	800f3e6 <_dtoa_r+0x3d6>
 800f4fe:	2502      	movs	r5, #2
 800f500:	e775      	b.n	800f3ee <_dtoa_r+0x3de>
 800f502:	9e04      	ldr	r6, [sp, #16]
 800f504:	465f      	mov	r7, fp
 800f506:	e792      	b.n	800f42e <_dtoa_r+0x41e>
 800f508:	9900      	ldr	r1, [sp, #0]
 800f50a:	4b50      	ldr	r3, [pc, #320]	; (800f64c <_dtoa_r+0x63c>)
 800f50c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f510:	4431      	add	r1, r6
 800f512:	9102      	str	r1, [sp, #8]
 800f514:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f516:	eeb0 9a47 	vmov.f32	s18, s14
 800f51a:	eef0 9a67 	vmov.f32	s19, s15
 800f51e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f522:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f526:	2900      	cmp	r1, #0
 800f528:	d044      	beq.n	800f5b4 <_dtoa_r+0x5a4>
 800f52a:	494e      	ldr	r1, [pc, #312]	; (800f664 <_dtoa_r+0x654>)
 800f52c:	2000      	movs	r0, #0
 800f52e:	f7f1 f98d 	bl	800084c <__aeabi_ddiv>
 800f532:	ec53 2b19 	vmov	r2, r3, d9
 800f536:	f7f0 fea7 	bl	8000288 <__aeabi_dsub>
 800f53a:	9d00      	ldr	r5, [sp, #0]
 800f53c:	ec41 0b19 	vmov	d9, r0, r1
 800f540:	4649      	mov	r1, r9
 800f542:	4640      	mov	r0, r8
 800f544:	f7f1 fb08 	bl	8000b58 <__aeabi_d2iz>
 800f548:	4606      	mov	r6, r0
 800f54a:	f7f0 ffeb 	bl	8000524 <__aeabi_i2d>
 800f54e:	4602      	mov	r2, r0
 800f550:	460b      	mov	r3, r1
 800f552:	4640      	mov	r0, r8
 800f554:	4649      	mov	r1, r9
 800f556:	f7f0 fe97 	bl	8000288 <__aeabi_dsub>
 800f55a:	3630      	adds	r6, #48	; 0x30
 800f55c:	f805 6b01 	strb.w	r6, [r5], #1
 800f560:	ec53 2b19 	vmov	r2, r3, d9
 800f564:	4680      	mov	r8, r0
 800f566:	4689      	mov	r9, r1
 800f568:	f7f1 fab8 	bl	8000adc <__aeabi_dcmplt>
 800f56c:	2800      	cmp	r0, #0
 800f56e:	d164      	bne.n	800f63a <_dtoa_r+0x62a>
 800f570:	4642      	mov	r2, r8
 800f572:	464b      	mov	r3, r9
 800f574:	4937      	ldr	r1, [pc, #220]	; (800f654 <_dtoa_r+0x644>)
 800f576:	2000      	movs	r0, #0
 800f578:	f7f0 fe86 	bl	8000288 <__aeabi_dsub>
 800f57c:	ec53 2b19 	vmov	r2, r3, d9
 800f580:	f7f1 faac 	bl	8000adc <__aeabi_dcmplt>
 800f584:	2800      	cmp	r0, #0
 800f586:	f040 80b6 	bne.w	800f6f6 <_dtoa_r+0x6e6>
 800f58a:	9b02      	ldr	r3, [sp, #8]
 800f58c:	429d      	cmp	r5, r3
 800f58e:	f43f af7c 	beq.w	800f48a <_dtoa_r+0x47a>
 800f592:	4b31      	ldr	r3, [pc, #196]	; (800f658 <_dtoa_r+0x648>)
 800f594:	ec51 0b19 	vmov	r0, r1, d9
 800f598:	2200      	movs	r2, #0
 800f59a:	f7f1 f82d 	bl	80005f8 <__aeabi_dmul>
 800f59e:	4b2e      	ldr	r3, [pc, #184]	; (800f658 <_dtoa_r+0x648>)
 800f5a0:	ec41 0b19 	vmov	d9, r0, r1
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	4640      	mov	r0, r8
 800f5a8:	4649      	mov	r1, r9
 800f5aa:	f7f1 f825 	bl	80005f8 <__aeabi_dmul>
 800f5ae:	4680      	mov	r8, r0
 800f5b0:	4689      	mov	r9, r1
 800f5b2:	e7c5      	b.n	800f540 <_dtoa_r+0x530>
 800f5b4:	ec51 0b17 	vmov	r0, r1, d7
 800f5b8:	f7f1 f81e 	bl	80005f8 <__aeabi_dmul>
 800f5bc:	9b02      	ldr	r3, [sp, #8]
 800f5be:	9d00      	ldr	r5, [sp, #0]
 800f5c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5c2:	ec41 0b19 	vmov	d9, r0, r1
 800f5c6:	4649      	mov	r1, r9
 800f5c8:	4640      	mov	r0, r8
 800f5ca:	f7f1 fac5 	bl	8000b58 <__aeabi_d2iz>
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	f7f0 ffa8 	bl	8000524 <__aeabi_i2d>
 800f5d4:	3630      	adds	r6, #48	; 0x30
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	460b      	mov	r3, r1
 800f5da:	4640      	mov	r0, r8
 800f5dc:	4649      	mov	r1, r9
 800f5de:	f7f0 fe53 	bl	8000288 <__aeabi_dsub>
 800f5e2:	f805 6b01 	strb.w	r6, [r5], #1
 800f5e6:	9b02      	ldr	r3, [sp, #8]
 800f5e8:	429d      	cmp	r5, r3
 800f5ea:	4680      	mov	r8, r0
 800f5ec:	4689      	mov	r9, r1
 800f5ee:	f04f 0200 	mov.w	r2, #0
 800f5f2:	d124      	bne.n	800f63e <_dtoa_r+0x62e>
 800f5f4:	4b1b      	ldr	r3, [pc, #108]	; (800f664 <_dtoa_r+0x654>)
 800f5f6:	ec51 0b19 	vmov	r0, r1, d9
 800f5fa:	f7f0 fe47 	bl	800028c <__adddf3>
 800f5fe:	4602      	mov	r2, r0
 800f600:	460b      	mov	r3, r1
 800f602:	4640      	mov	r0, r8
 800f604:	4649      	mov	r1, r9
 800f606:	f7f1 fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d173      	bne.n	800f6f6 <_dtoa_r+0x6e6>
 800f60e:	ec53 2b19 	vmov	r2, r3, d9
 800f612:	4914      	ldr	r1, [pc, #80]	; (800f664 <_dtoa_r+0x654>)
 800f614:	2000      	movs	r0, #0
 800f616:	f7f0 fe37 	bl	8000288 <__aeabi_dsub>
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	4640      	mov	r0, r8
 800f620:	4649      	mov	r1, r9
 800f622:	f7f1 fa5b 	bl	8000adc <__aeabi_dcmplt>
 800f626:	2800      	cmp	r0, #0
 800f628:	f43f af2f 	beq.w	800f48a <_dtoa_r+0x47a>
 800f62c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f62e:	1e6b      	subs	r3, r5, #1
 800f630:	930f      	str	r3, [sp, #60]	; 0x3c
 800f632:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f636:	2b30      	cmp	r3, #48	; 0x30
 800f638:	d0f8      	beq.n	800f62c <_dtoa_r+0x61c>
 800f63a:	46bb      	mov	fp, r7
 800f63c:	e04a      	b.n	800f6d4 <_dtoa_r+0x6c4>
 800f63e:	4b06      	ldr	r3, [pc, #24]	; (800f658 <_dtoa_r+0x648>)
 800f640:	f7f0 ffda 	bl	80005f8 <__aeabi_dmul>
 800f644:	4680      	mov	r8, r0
 800f646:	4689      	mov	r9, r1
 800f648:	e7bd      	b.n	800f5c6 <_dtoa_r+0x5b6>
 800f64a:	bf00      	nop
 800f64c:	08011340 	.word	0x08011340
 800f650:	08011318 	.word	0x08011318
 800f654:	3ff00000 	.word	0x3ff00000
 800f658:	40240000 	.word	0x40240000
 800f65c:	401c0000 	.word	0x401c0000
 800f660:	40140000 	.word	0x40140000
 800f664:	3fe00000 	.word	0x3fe00000
 800f668:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f66c:	9d00      	ldr	r5, [sp, #0]
 800f66e:	4642      	mov	r2, r8
 800f670:	464b      	mov	r3, r9
 800f672:	4630      	mov	r0, r6
 800f674:	4639      	mov	r1, r7
 800f676:	f7f1 f8e9 	bl	800084c <__aeabi_ddiv>
 800f67a:	f7f1 fa6d 	bl	8000b58 <__aeabi_d2iz>
 800f67e:	9001      	str	r0, [sp, #4]
 800f680:	f7f0 ff50 	bl	8000524 <__aeabi_i2d>
 800f684:	4642      	mov	r2, r8
 800f686:	464b      	mov	r3, r9
 800f688:	f7f0 ffb6 	bl	80005f8 <__aeabi_dmul>
 800f68c:	4602      	mov	r2, r0
 800f68e:	460b      	mov	r3, r1
 800f690:	4630      	mov	r0, r6
 800f692:	4639      	mov	r1, r7
 800f694:	f7f0 fdf8 	bl	8000288 <__aeabi_dsub>
 800f698:	9e01      	ldr	r6, [sp, #4]
 800f69a:	9f04      	ldr	r7, [sp, #16]
 800f69c:	3630      	adds	r6, #48	; 0x30
 800f69e:	f805 6b01 	strb.w	r6, [r5], #1
 800f6a2:	9e00      	ldr	r6, [sp, #0]
 800f6a4:	1bae      	subs	r6, r5, r6
 800f6a6:	42b7      	cmp	r7, r6
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	d134      	bne.n	800f718 <_dtoa_r+0x708>
 800f6ae:	f7f0 fded 	bl	800028c <__adddf3>
 800f6b2:	4642      	mov	r2, r8
 800f6b4:	464b      	mov	r3, r9
 800f6b6:	4606      	mov	r6, r0
 800f6b8:	460f      	mov	r7, r1
 800f6ba:	f7f1 fa2d 	bl	8000b18 <__aeabi_dcmpgt>
 800f6be:	b9c8      	cbnz	r0, 800f6f4 <_dtoa_r+0x6e4>
 800f6c0:	4642      	mov	r2, r8
 800f6c2:	464b      	mov	r3, r9
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	f7f1 f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6cc:	b110      	cbz	r0, 800f6d4 <_dtoa_r+0x6c4>
 800f6ce:	9b01      	ldr	r3, [sp, #4]
 800f6d0:	07db      	lsls	r3, r3, #31
 800f6d2:	d40f      	bmi.n	800f6f4 <_dtoa_r+0x6e4>
 800f6d4:	4651      	mov	r1, sl
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	f000 fbcc 	bl	800fe74 <_Bfree>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6e0:	702b      	strb	r3, [r5, #0]
 800f6e2:	f10b 0301 	add.w	r3, fp, #1
 800f6e6:	6013      	str	r3, [r2, #0]
 800f6e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f43f ace2 	beq.w	800f0b4 <_dtoa_r+0xa4>
 800f6f0:	601d      	str	r5, [r3, #0]
 800f6f2:	e4df      	b.n	800f0b4 <_dtoa_r+0xa4>
 800f6f4:	465f      	mov	r7, fp
 800f6f6:	462b      	mov	r3, r5
 800f6f8:	461d      	mov	r5, r3
 800f6fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6fe:	2a39      	cmp	r2, #57	; 0x39
 800f700:	d106      	bne.n	800f710 <_dtoa_r+0x700>
 800f702:	9a00      	ldr	r2, [sp, #0]
 800f704:	429a      	cmp	r2, r3
 800f706:	d1f7      	bne.n	800f6f8 <_dtoa_r+0x6e8>
 800f708:	9900      	ldr	r1, [sp, #0]
 800f70a:	2230      	movs	r2, #48	; 0x30
 800f70c:	3701      	adds	r7, #1
 800f70e:	700a      	strb	r2, [r1, #0]
 800f710:	781a      	ldrb	r2, [r3, #0]
 800f712:	3201      	adds	r2, #1
 800f714:	701a      	strb	r2, [r3, #0]
 800f716:	e790      	b.n	800f63a <_dtoa_r+0x62a>
 800f718:	4ba3      	ldr	r3, [pc, #652]	; (800f9a8 <_dtoa_r+0x998>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	f7f0 ff6c 	bl	80005f8 <__aeabi_dmul>
 800f720:	2200      	movs	r2, #0
 800f722:	2300      	movs	r3, #0
 800f724:	4606      	mov	r6, r0
 800f726:	460f      	mov	r7, r1
 800f728:	f7f1 f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800f72c:	2800      	cmp	r0, #0
 800f72e:	d09e      	beq.n	800f66e <_dtoa_r+0x65e>
 800f730:	e7d0      	b.n	800f6d4 <_dtoa_r+0x6c4>
 800f732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f734:	2a00      	cmp	r2, #0
 800f736:	f000 80ca 	beq.w	800f8ce <_dtoa_r+0x8be>
 800f73a:	9a07      	ldr	r2, [sp, #28]
 800f73c:	2a01      	cmp	r2, #1
 800f73e:	f300 80ad 	bgt.w	800f89c <_dtoa_r+0x88c>
 800f742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f744:	2a00      	cmp	r2, #0
 800f746:	f000 80a5 	beq.w	800f894 <_dtoa_r+0x884>
 800f74a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f74e:	9e08      	ldr	r6, [sp, #32]
 800f750:	9d05      	ldr	r5, [sp, #20]
 800f752:	9a05      	ldr	r2, [sp, #20]
 800f754:	441a      	add	r2, r3
 800f756:	9205      	str	r2, [sp, #20]
 800f758:	9a06      	ldr	r2, [sp, #24]
 800f75a:	2101      	movs	r1, #1
 800f75c:	441a      	add	r2, r3
 800f75e:	4620      	mov	r0, r4
 800f760:	9206      	str	r2, [sp, #24]
 800f762:	f000 fc3d 	bl	800ffe0 <__i2b>
 800f766:	4607      	mov	r7, r0
 800f768:	b165      	cbz	r5, 800f784 <_dtoa_r+0x774>
 800f76a:	9b06      	ldr	r3, [sp, #24]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	dd09      	ble.n	800f784 <_dtoa_r+0x774>
 800f770:	42ab      	cmp	r3, r5
 800f772:	9a05      	ldr	r2, [sp, #20]
 800f774:	bfa8      	it	ge
 800f776:	462b      	movge	r3, r5
 800f778:	1ad2      	subs	r2, r2, r3
 800f77a:	9205      	str	r2, [sp, #20]
 800f77c:	9a06      	ldr	r2, [sp, #24]
 800f77e:	1aed      	subs	r5, r5, r3
 800f780:	1ad3      	subs	r3, r2, r3
 800f782:	9306      	str	r3, [sp, #24]
 800f784:	9b08      	ldr	r3, [sp, #32]
 800f786:	b1f3      	cbz	r3, 800f7c6 <_dtoa_r+0x7b6>
 800f788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 80a3 	beq.w	800f8d6 <_dtoa_r+0x8c6>
 800f790:	2e00      	cmp	r6, #0
 800f792:	dd10      	ble.n	800f7b6 <_dtoa_r+0x7a6>
 800f794:	4639      	mov	r1, r7
 800f796:	4632      	mov	r2, r6
 800f798:	4620      	mov	r0, r4
 800f79a:	f000 fce1 	bl	8010160 <__pow5mult>
 800f79e:	4652      	mov	r2, sl
 800f7a0:	4601      	mov	r1, r0
 800f7a2:	4607      	mov	r7, r0
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f000 fc31 	bl	801000c <__multiply>
 800f7aa:	4651      	mov	r1, sl
 800f7ac:	4680      	mov	r8, r0
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	f000 fb60 	bl	800fe74 <_Bfree>
 800f7b4:	46c2      	mov	sl, r8
 800f7b6:	9b08      	ldr	r3, [sp, #32]
 800f7b8:	1b9a      	subs	r2, r3, r6
 800f7ba:	d004      	beq.n	800f7c6 <_dtoa_r+0x7b6>
 800f7bc:	4651      	mov	r1, sl
 800f7be:	4620      	mov	r0, r4
 800f7c0:	f000 fcce 	bl	8010160 <__pow5mult>
 800f7c4:	4682      	mov	sl, r0
 800f7c6:	2101      	movs	r1, #1
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f000 fc09 	bl	800ffe0 <__i2b>
 800f7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	f340 8081 	ble.w	800f8da <_dtoa_r+0x8ca>
 800f7d8:	461a      	mov	r2, r3
 800f7da:	4601      	mov	r1, r0
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f000 fcbf 	bl	8010160 <__pow5mult>
 800f7e2:	9b07      	ldr	r3, [sp, #28]
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	dd7a      	ble.n	800f8e0 <_dtoa_r+0x8d0>
 800f7ea:	f04f 0800 	mov.w	r8, #0
 800f7ee:	6933      	ldr	r3, [r6, #16]
 800f7f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f7f4:	6918      	ldr	r0, [r3, #16]
 800f7f6:	f000 fba5 	bl	800ff44 <__hi0bits>
 800f7fa:	f1c0 0020 	rsb	r0, r0, #32
 800f7fe:	9b06      	ldr	r3, [sp, #24]
 800f800:	4418      	add	r0, r3
 800f802:	f010 001f 	ands.w	r0, r0, #31
 800f806:	f000 8094 	beq.w	800f932 <_dtoa_r+0x922>
 800f80a:	f1c0 0320 	rsb	r3, r0, #32
 800f80e:	2b04      	cmp	r3, #4
 800f810:	f340 8085 	ble.w	800f91e <_dtoa_r+0x90e>
 800f814:	9b05      	ldr	r3, [sp, #20]
 800f816:	f1c0 001c 	rsb	r0, r0, #28
 800f81a:	4403      	add	r3, r0
 800f81c:	9305      	str	r3, [sp, #20]
 800f81e:	9b06      	ldr	r3, [sp, #24]
 800f820:	4403      	add	r3, r0
 800f822:	4405      	add	r5, r0
 800f824:	9306      	str	r3, [sp, #24]
 800f826:	9b05      	ldr	r3, [sp, #20]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	dd05      	ble.n	800f838 <_dtoa_r+0x828>
 800f82c:	4651      	mov	r1, sl
 800f82e:	461a      	mov	r2, r3
 800f830:	4620      	mov	r0, r4
 800f832:	f000 fcef 	bl	8010214 <__lshift>
 800f836:	4682      	mov	sl, r0
 800f838:	9b06      	ldr	r3, [sp, #24]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	dd05      	ble.n	800f84a <_dtoa_r+0x83a>
 800f83e:	4631      	mov	r1, r6
 800f840:	461a      	mov	r2, r3
 800f842:	4620      	mov	r0, r4
 800f844:	f000 fce6 	bl	8010214 <__lshift>
 800f848:	4606      	mov	r6, r0
 800f84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d072      	beq.n	800f936 <_dtoa_r+0x926>
 800f850:	4631      	mov	r1, r6
 800f852:	4650      	mov	r0, sl
 800f854:	f000 fd4a 	bl	80102ec <__mcmp>
 800f858:	2800      	cmp	r0, #0
 800f85a:	da6c      	bge.n	800f936 <_dtoa_r+0x926>
 800f85c:	2300      	movs	r3, #0
 800f85e:	4651      	mov	r1, sl
 800f860:	220a      	movs	r2, #10
 800f862:	4620      	mov	r0, r4
 800f864:	f000 fb28 	bl	800feb8 <__multadd>
 800f868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f86a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f86e:	4682      	mov	sl, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	f000 81b0 	beq.w	800fbd6 <_dtoa_r+0xbc6>
 800f876:	2300      	movs	r3, #0
 800f878:	4639      	mov	r1, r7
 800f87a:	220a      	movs	r2, #10
 800f87c:	4620      	mov	r0, r4
 800f87e:	f000 fb1b 	bl	800feb8 <__multadd>
 800f882:	9b01      	ldr	r3, [sp, #4]
 800f884:	2b00      	cmp	r3, #0
 800f886:	4607      	mov	r7, r0
 800f888:	f300 8096 	bgt.w	800f9b8 <_dtoa_r+0x9a8>
 800f88c:	9b07      	ldr	r3, [sp, #28]
 800f88e:	2b02      	cmp	r3, #2
 800f890:	dc59      	bgt.n	800f946 <_dtoa_r+0x936>
 800f892:	e091      	b.n	800f9b8 <_dtoa_r+0x9a8>
 800f894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f896:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f89a:	e758      	b.n	800f74e <_dtoa_r+0x73e>
 800f89c:	9b04      	ldr	r3, [sp, #16]
 800f89e:	1e5e      	subs	r6, r3, #1
 800f8a0:	9b08      	ldr	r3, [sp, #32]
 800f8a2:	42b3      	cmp	r3, r6
 800f8a4:	bfbf      	itttt	lt
 800f8a6:	9b08      	ldrlt	r3, [sp, #32]
 800f8a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f8aa:	9608      	strlt	r6, [sp, #32]
 800f8ac:	1af3      	sublt	r3, r6, r3
 800f8ae:	bfb4      	ite	lt
 800f8b0:	18d2      	addlt	r2, r2, r3
 800f8b2:	1b9e      	subge	r6, r3, r6
 800f8b4:	9b04      	ldr	r3, [sp, #16]
 800f8b6:	bfbc      	itt	lt
 800f8b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f8ba:	2600      	movlt	r6, #0
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	bfb7      	itett	lt
 800f8c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f8c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f8c8:	1a9d      	sublt	r5, r3, r2
 800f8ca:	2300      	movlt	r3, #0
 800f8cc:	e741      	b.n	800f752 <_dtoa_r+0x742>
 800f8ce:	9e08      	ldr	r6, [sp, #32]
 800f8d0:	9d05      	ldr	r5, [sp, #20]
 800f8d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f8d4:	e748      	b.n	800f768 <_dtoa_r+0x758>
 800f8d6:	9a08      	ldr	r2, [sp, #32]
 800f8d8:	e770      	b.n	800f7bc <_dtoa_r+0x7ac>
 800f8da:	9b07      	ldr	r3, [sp, #28]
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	dc19      	bgt.n	800f914 <_dtoa_r+0x904>
 800f8e0:	9b02      	ldr	r3, [sp, #8]
 800f8e2:	b9bb      	cbnz	r3, 800f914 <_dtoa_r+0x904>
 800f8e4:	9b03      	ldr	r3, [sp, #12]
 800f8e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8ea:	b99b      	cbnz	r3, 800f914 <_dtoa_r+0x904>
 800f8ec:	9b03      	ldr	r3, [sp, #12]
 800f8ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8f2:	0d1b      	lsrs	r3, r3, #20
 800f8f4:	051b      	lsls	r3, r3, #20
 800f8f6:	b183      	cbz	r3, 800f91a <_dtoa_r+0x90a>
 800f8f8:	9b05      	ldr	r3, [sp, #20]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	9305      	str	r3, [sp, #20]
 800f8fe:	9b06      	ldr	r3, [sp, #24]
 800f900:	3301      	adds	r3, #1
 800f902:	9306      	str	r3, [sp, #24]
 800f904:	f04f 0801 	mov.w	r8, #1
 800f908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	f47f af6f 	bne.w	800f7ee <_dtoa_r+0x7de>
 800f910:	2001      	movs	r0, #1
 800f912:	e774      	b.n	800f7fe <_dtoa_r+0x7ee>
 800f914:	f04f 0800 	mov.w	r8, #0
 800f918:	e7f6      	b.n	800f908 <_dtoa_r+0x8f8>
 800f91a:	4698      	mov	r8, r3
 800f91c:	e7f4      	b.n	800f908 <_dtoa_r+0x8f8>
 800f91e:	d082      	beq.n	800f826 <_dtoa_r+0x816>
 800f920:	9a05      	ldr	r2, [sp, #20]
 800f922:	331c      	adds	r3, #28
 800f924:	441a      	add	r2, r3
 800f926:	9205      	str	r2, [sp, #20]
 800f928:	9a06      	ldr	r2, [sp, #24]
 800f92a:	441a      	add	r2, r3
 800f92c:	441d      	add	r5, r3
 800f92e:	9206      	str	r2, [sp, #24]
 800f930:	e779      	b.n	800f826 <_dtoa_r+0x816>
 800f932:	4603      	mov	r3, r0
 800f934:	e7f4      	b.n	800f920 <_dtoa_r+0x910>
 800f936:	9b04      	ldr	r3, [sp, #16]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	dc37      	bgt.n	800f9ac <_dtoa_r+0x99c>
 800f93c:	9b07      	ldr	r3, [sp, #28]
 800f93e:	2b02      	cmp	r3, #2
 800f940:	dd34      	ble.n	800f9ac <_dtoa_r+0x99c>
 800f942:	9b04      	ldr	r3, [sp, #16]
 800f944:	9301      	str	r3, [sp, #4]
 800f946:	9b01      	ldr	r3, [sp, #4]
 800f948:	b963      	cbnz	r3, 800f964 <_dtoa_r+0x954>
 800f94a:	4631      	mov	r1, r6
 800f94c:	2205      	movs	r2, #5
 800f94e:	4620      	mov	r0, r4
 800f950:	f000 fab2 	bl	800feb8 <__multadd>
 800f954:	4601      	mov	r1, r0
 800f956:	4606      	mov	r6, r0
 800f958:	4650      	mov	r0, sl
 800f95a:	f000 fcc7 	bl	80102ec <__mcmp>
 800f95e:	2800      	cmp	r0, #0
 800f960:	f73f adbb 	bgt.w	800f4da <_dtoa_r+0x4ca>
 800f964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f966:	9d00      	ldr	r5, [sp, #0]
 800f968:	ea6f 0b03 	mvn.w	fp, r3
 800f96c:	f04f 0800 	mov.w	r8, #0
 800f970:	4631      	mov	r1, r6
 800f972:	4620      	mov	r0, r4
 800f974:	f000 fa7e 	bl	800fe74 <_Bfree>
 800f978:	2f00      	cmp	r7, #0
 800f97a:	f43f aeab 	beq.w	800f6d4 <_dtoa_r+0x6c4>
 800f97e:	f1b8 0f00 	cmp.w	r8, #0
 800f982:	d005      	beq.n	800f990 <_dtoa_r+0x980>
 800f984:	45b8      	cmp	r8, r7
 800f986:	d003      	beq.n	800f990 <_dtoa_r+0x980>
 800f988:	4641      	mov	r1, r8
 800f98a:	4620      	mov	r0, r4
 800f98c:	f000 fa72 	bl	800fe74 <_Bfree>
 800f990:	4639      	mov	r1, r7
 800f992:	4620      	mov	r0, r4
 800f994:	f000 fa6e 	bl	800fe74 <_Bfree>
 800f998:	e69c      	b.n	800f6d4 <_dtoa_r+0x6c4>
 800f99a:	2600      	movs	r6, #0
 800f99c:	4637      	mov	r7, r6
 800f99e:	e7e1      	b.n	800f964 <_dtoa_r+0x954>
 800f9a0:	46bb      	mov	fp, r7
 800f9a2:	4637      	mov	r7, r6
 800f9a4:	e599      	b.n	800f4da <_dtoa_r+0x4ca>
 800f9a6:	bf00      	nop
 800f9a8:	40240000 	.word	0x40240000
 800f9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f000 80c8 	beq.w	800fb44 <_dtoa_r+0xb34>
 800f9b4:	9b04      	ldr	r3, [sp, #16]
 800f9b6:	9301      	str	r3, [sp, #4]
 800f9b8:	2d00      	cmp	r5, #0
 800f9ba:	dd05      	ble.n	800f9c8 <_dtoa_r+0x9b8>
 800f9bc:	4639      	mov	r1, r7
 800f9be:	462a      	mov	r2, r5
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f000 fc27 	bl	8010214 <__lshift>
 800f9c6:	4607      	mov	r7, r0
 800f9c8:	f1b8 0f00 	cmp.w	r8, #0
 800f9cc:	d05b      	beq.n	800fa86 <_dtoa_r+0xa76>
 800f9ce:	6879      	ldr	r1, [r7, #4]
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f000 fa0f 	bl	800fdf4 <_Balloc>
 800f9d6:	4605      	mov	r5, r0
 800f9d8:	b928      	cbnz	r0, 800f9e6 <_dtoa_r+0x9d6>
 800f9da:	4b83      	ldr	r3, [pc, #524]	; (800fbe8 <_dtoa_r+0xbd8>)
 800f9dc:	4602      	mov	r2, r0
 800f9de:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f9e2:	f7ff bb2e 	b.w	800f042 <_dtoa_r+0x32>
 800f9e6:	693a      	ldr	r2, [r7, #16]
 800f9e8:	3202      	adds	r2, #2
 800f9ea:	0092      	lsls	r2, r2, #2
 800f9ec:	f107 010c 	add.w	r1, r7, #12
 800f9f0:	300c      	adds	r0, #12
 800f9f2:	f7ff fa76 	bl	800eee2 <memcpy>
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	4629      	mov	r1, r5
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f000 fc0a 	bl	8010214 <__lshift>
 800fa00:	9b00      	ldr	r3, [sp, #0]
 800fa02:	3301      	adds	r3, #1
 800fa04:	9304      	str	r3, [sp, #16]
 800fa06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	9308      	str	r3, [sp, #32]
 800fa0e:	9b02      	ldr	r3, [sp, #8]
 800fa10:	f003 0301 	and.w	r3, r3, #1
 800fa14:	46b8      	mov	r8, r7
 800fa16:	9306      	str	r3, [sp, #24]
 800fa18:	4607      	mov	r7, r0
 800fa1a:	9b04      	ldr	r3, [sp, #16]
 800fa1c:	4631      	mov	r1, r6
 800fa1e:	3b01      	subs	r3, #1
 800fa20:	4650      	mov	r0, sl
 800fa22:	9301      	str	r3, [sp, #4]
 800fa24:	f7ff fa6b 	bl	800eefe <quorem>
 800fa28:	4641      	mov	r1, r8
 800fa2a:	9002      	str	r0, [sp, #8]
 800fa2c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fa30:	4650      	mov	r0, sl
 800fa32:	f000 fc5b 	bl	80102ec <__mcmp>
 800fa36:	463a      	mov	r2, r7
 800fa38:	9005      	str	r0, [sp, #20]
 800fa3a:	4631      	mov	r1, r6
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	f000 fc71 	bl	8010324 <__mdiff>
 800fa42:	68c2      	ldr	r2, [r0, #12]
 800fa44:	4605      	mov	r5, r0
 800fa46:	bb02      	cbnz	r2, 800fa8a <_dtoa_r+0xa7a>
 800fa48:	4601      	mov	r1, r0
 800fa4a:	4650      	mov	r0, sl
 800fa4c:	f000 fc4e 	bl	80102ec <__mcmp>
 800fa50:	4602      	mov	r2, r0
 800fa52:	4629      	mov	r1, r5
 800fa54:	4620      	mov	r0, r4
 800fa56:	9209      	str	r2, [sp, #36]	; 0x24
 800fa58:	f000 fa0c 	bl	800fe74 <_Bfree>
 800fa5c:	9b07      	ldr	r3, [sp, #28]
 800fa5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa60:	9d04      	ldr	r5, [sp, #16]
 800fa62:	ea43 0102 	orr.w	r1, r3, r2
 800fa66:	9b06      	ldr	r3, [sp, #24]
 800fa68:	4319      	orrs	r1, r3
 800fa6a:	d110      	bne.n	800fa8e <_dtoa_r+0xa7e>
 800fa6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fa70:	d029      	beq.n	800fac6 <_dtoa_r+0xab6>
 800fa72:	9b05      	ldr	r3, [sp, #20]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	dd02      	ble.n	800fa7e <_dtoa_r+0xa6e>
 800fa78:	9b02      	ldr	r3, [sp, #8]
 800fa7a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fa7e:	9b01      	ldr	r3, [sp, #4]
 800fa80:	f883 9000 	strb.w	r9, [r3]
 800fa84:	e774      	b.n	800f970 <_dtoa_r+0x960>
 800fa86:	4638      	mov	r0, r7
 800fa88:	e7ba      	b.n	800fa00 <_dtoa_r+0x9f0>
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	e7e1      	b.n	800fa52 <_dtoa_r+0xa42>
 800fa8e:	9b05      	ldr	r3, [sp, #20]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	db04      	blt.n	800fa9e <_dtoa_r+0xa8e>
 800fa94:	9907      	ldr	r1, [sp, #28]
 800fa96:	430b      	orrs	r3, r1
 800fa98:	9906      	ldr	r1, [sp, #24]
 800fa9a:	430b      	orrs	r3, r1
 800fa9c:	d120      	bne.n	800fae0 <_dtoa_r+0xad0>
 800fa9e:	2a00      	cmp	r2, #0
 800faa0:	dded      	ble.n	800fa7e <_dtoa_r+0xa6e>
 800faa2:	4651      	mov	r1, sl
 800faa4:	2201      	movs	r2, #1
 800faa6:	4620      	mov	r0, r4
 800faa8:	f000 fbb4 	bl	8010214 <__lshift>
 800faac:	4631      	mov	r1, r6
 800faae:	4682      	mov	sl, r0
 800fab0:	f000 fc1c 	bl	80102ec <__mcmp>
 800fab4:	2800      	cmp	r0, #0
 800fab6:	dc03      	bgt.n	800fac0 <_dtoa_r+0xab0>
 800fab8:	d1e1      	bne.n	800fa7e <_dtoa_r+0xa6e>
 800faba:	f019 0f01 	tst.w	r9, #1
 800fabe:	d0de      	beq.n	800fa7e <_dtoa_r+0xa6e>
 800fac0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fac4:	d1d8      	bne.n	800fa78 <_dtoa_r+0xa68>
 800fac6:	9a01      	ldr	r2, [sp, #4]
 800fac8:	2339      	movs	r3, #57	; 0x39
 800faca:	7013      	strb	r3, [r2, #0]
 800facc:	462b      	mov	r3, r5
 800face:	461d      	mov	r5, r3
 800fad0:	3b01      	subs	r3, #1
 800fad2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fad6:	2a39      	cmp	r2, #57	; 0x39
 800fad8:	d06c      	beq.n	800fbb4 <_dtoa_r+0xba4>
 800fada:	3201      	adds	r2, #1
 800fadc:	701a      	strb	r2, [r3, #0]
 800fade:	e747      	b.n	800f970 <_dtoa_r+0x960>
 800fae0:	2a00      	cmp	r2, #0
 800fae2:	dd07      	ble.n	800faf4 <_dtoa_r+0xae4>
 800fae4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fae8:	d0ed      	beq.n	800fac6 <_dtoa_r+0xab6>
 800faea:	9a01      	ldr	r2, [sp, #4]
 800faec:	f109 0301 	add.w	r3, r9, #1
 800faf0:	7013      	strb	r3, [r2, #0]
 800faf2:	e73d      	b.n	800f970 <_dtoa_r+0x960>
 800faf4:	9b04      	ldr	r3, [sp, #16]
 800faf6:	9a08      	ldr	r2, [sp, #32]
 800faf8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d043      	beq.n	800fb88 <_dtoa_r+0xb78>
 800fb00:	4651      	mov	r1, sl
 800fb02:	2300      	movs	r3, #0
 800fb04:	220a      	movs	r2, #10
 800fb06:	4620      	mov	r0, r4
 800fb08:	f000 f9d6 	bl	800feb8 <__multadd>
 800fb0c:	45b8      	cmp	r8, r7
 800fb0e:	4682      	mov	sl, r0
 800fb10:	f04f 0300 	mov.w	r3, #0
 800fb14:	f04f 020a 	mov.w	r2, #10
 800fb18:	4641      	mov	r1, r8
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	d107      	bne.n	800fb2e <_dtoa_r+0xb1e>
 800fb1e:	f000 f9cb 	bl	800feb8 <__multadd>
 800fb22:	4680      	mov	r8, r0
 800fb24:	4607      	mov	r7, r0
 800fb26:	9b04      	ldr	r3, [sp, #16]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	9304      	str	r3, [sp, #16]
 800fb2c:	e775      	b.n	800fa1a <_dtoa_r+0xa0a>
 800fb2e:	f000 f9c3 	bl	800feb8 <__multadd>
 800fb32:	4639      	mov	r1, r7
 800fb34:	4680      	mov	r8, r0
 800fb36:	2300      	movs	r3, #0
 800fb38:	220a      	movs	r2, #10
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f000 f9bc 	bl	800feb8 <__multadd>
 800fb40:	4607      	mov	r7, r0
 800fb42:	e7f0      	b.n	800fb26 <_dtoa_r+0xb16>
 800fb44:	9b04      	ldr	r3, [sp, #16]
 800fb46:	9301      	str	r3, [sp, #4]
 800fb48:	9d00      	ldr	r5, [sp, #0]
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	4650      	mov	r0, sl
 800fb4e:	f7ff f9d6 	bl	800eefe <quorem>
 800fb52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fb56:	9b00      	ldr	r3, [sp, #0]
 800fb58:	f805 9b01 	strb.w	r9, [r5], #1
 800fb5c:	1aea      	subs	r2, r5, r3
 800fb5e:	9b01      	ldr	r3, [sp, #4]
 800fb60:	4293      	cmp	r3, r2
 800fb62:	dd07      	ble.n	800fb74 <_dtoa_r+0xb64>
 800fb64:	4651      	mov	r1, sl
 800fb66:	2300      	movs	r3, #0
 800fb68:	220a      	movs	r2, #10
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f000 f9a4 	bl	800feb8 <__multadd>
 800fb70:	4682      	mov	sl, r0
 800fb72:	e7ea      	b.n	800fb4a <_dtoa_r+0xb3a>
 800fb74:	9b01      	ldr	r3, [sp, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	bfc8      	it	gt
 800fb7a:	461d      	movgt	r5, r3
 800fb7c:	9b00      	ldr	r3, [sp, #0]
 800fb7e:	bfd8      	it	le
 800fb80:	2501      	movle	r5, #1
 800fb82:	441d      	add	r5, r3
 800fb84:	f04f 0800 	mov.w	r8, #0
 800fb88:	4651      	mov	r1, sl
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f000 fb41 	bl	8010214 <__lshift>
 800fb92:	4631      	mov	r1, r6
 800fb94:	4682      	mov	sl, r0
 800fb96:	f000 fba9 	bl	80102ec <__mcmp>
 800fb9a:	2800      	cmp	r0, #0
 800fb9c:	dc96      	bgt.n	800facc <_dtoa_r+0xabc>
 800fb9e:	d102      	bne.n	800fba6 <_dtoa_r+0xb96>
 800fba0:	f019 0f01 	tst.w	r9, #1
 800fba4:	d192      	bne.n	800facc <_dtoa_r+0xabc>
 800fba6:	462b      	mov	r3, r5
 800fba8:	461d      	mov	r5, r3
 800fbaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbae:	2a30      	cmp	r2, #48	; 0x30
 800fbb0:	d0fa      	beq.n	800fba8 <_dtoa_r+0xb98>
 800fbb2:	e6dd      	b.n	800f970 <_dtoa_r+0x960>
 800fbb4:	9a00      	ldr	r2, [sp, #0]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d189      	bne.n	800face <_dtoa_r+0xabe>
 800fbba:	f10b 0b01 	add.w	fp, fp, #1
 800fbbe:	2331      	movs	r3, #49	; 0x31
 800fbc0:	e796      	b.n	800faf0 <_dtoa_r+0xae0>
 800fbc2:	4b0a      	ldr	r3, [pc, #40]	; (800fbec <_dtoa_r+0xbdc>)
 800fbc4:	f7ff ba99 	b.w	800f0fa <_dtoa_r+0xea>
 800fbc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f47f aa6d 	bne.w	800f0aa <_dtoa_r+0x9a>
 800fbd0:	4b07      	ldr	r3, [pc, #28]	; (800fbf0 <_dtoa_r+0xbe0>)
 800fbd2:	f7ff ba92 	b.w	800f0fa <_dtoa_r+0xea>
 800fbd6:	9b01      	ldr	r3, [sp, #4]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	dcb5      	bgt.n	800fb48 <_dtoa_r+0xb38>
 800fbdc:	9b07      	ldr	r3, [sp, #28]
 800fbde:	2b02      	cmp	r3, #2
 800fbe0:	f73f aeb1 	bgt.w	800f946 <_dtoa_r+0x936>
 800fbe4:	e7b0      	b.n	800fb48 <_dtoa_r+0xb38>
 800fbe6:	bf00      	nop
 800fbe8:	080112a8 	.word	0x080112a8
 800fbec:	08011208 	.word	0x08011208
 800fbf0:	0801122c 	.word	0x0801122c

0800fbf4 <_free_r>:
 800fbf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbf6:	2900      	cmp	r1, #0
 800fbf8:	d044      	beq.n	800fc84 <_free_r+0x90>
 800fbfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbfe:	9001      	str	r0, [sp, #4]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f1a1 0404 	sub.w	r4, r1, #4
 800fc06:	bfb8      	it	lt
 800fc08:	18e4      	addlt	r4, r4, r3
 800fc0a:	f000 f8e7 	bl	800fddc <__malloc_lock>
 800fc0e:	4a1e      	ldr	r2, [pc, #120]	; (800fc88 <_free_r+0x94>)
 800fc10:	9801      	ldr	r0, [sp, #4]
 800fc12:	6813      	ldr	r3, [r2, #0]
 800fc14:	b933      	cbnz	r3, 800fc24 <_free_r+0x30>
 800fc16:	6063      	str	r3, [r4, #4]
 800fc18:	6014      	str	r4, [r2, #0]
 800fc1a:	b003      	add	sp, #12
 800fc1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc20:	f000 b8e2 	b.w	800fde8 <__malloc_unlock>
 800fc24:	42a3      	cmp	r3, r4
 800fc26:	d908      	bls.n	800fc3a <_free_r+0x46>
 800fc28:	6825      	ldr	r5, [r4, #0]
 800fc2a:	1961      	adds	r1, r4, r5
 800fc2c:	428b      	cmp	r3, r1
 800fc2e:	bf01      	itttt	eq
 800fc30:	6819      	ldreq	r1, [r3, #0]
 800fc32:	685b      	ldreq	r3, [r3, #4]
 800fc34:	1949      	addeq	r1, r1, r5
 800fc36:	6021      	streq	r1, [r4, #0]
 800fc38:	e7ed      	b.n	800fc16 <_free_r+0x22>
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	b10b      	cbz	r3, 800fc44 <_free_r+0x50>
 800fc40:	42a3      	cmp	r3, r4
 800fc42:	d9fa      	bls.n	800fc3a <_free_r+0x46>
 800fc44:	6811      	ldr	r1, [r2, #0]
 800fc46:	1855      	adds	r5, r2, r1
 800fc48:	42a5      	cmp	r5, r4
 800fc4a:	d10b      	bne.n	800fc64 <_free_r+0x70>
 800fc4c:	6824      	ldr	r4, [r4, #0]
 800fc4e:	4421      	add	r1, r4
 800fc50:	1854      	adds	r4, r2, r1
 800fc52:	42a3      	cmp	r3, r4
 800fc54:	6011      	str	r1, [r2, #0]
 800fc56:	d1e0      	bne.n	800fc1a <_free_r+0x26>
 800fc58:	681c      	ldr	r4, [r3, #0]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	6053      	str	r3, [r2, #4]
 800fc5e:	440c      	add	r4, r1
 800fc60:	6014      	str	r4, [r2, #0]
 800fc62:	e7da      	b.n	800fc1a <_free_r+0x26>
 800fc64:	d902      	bls.n	800fc6c <_free_r+0x78>
 800fc66:	230c      	movs	r3, #12
 800fc68:	6003      	str	r3, [r0, #0]
 800fc6a:	e7d6      	b.n	800fc1a <_free_r+0x26>
 800fc6c:	6825      	ldr	r5, [r4, #0]
 800fc6e:	1961      	adds	r1, r4, r5
 800fc70:	428b      	cmp	r3, r1
 800fc72:	bf04      	itt	eq
 800fc74:	6819      	ldreq	r1, [r3, #0]
 800fc76:	685b      	ldreq	r3, [r3, #4]
 800fc78:	6063      	str	r3, [r4, #4]
 800fc7a:	bf04      	itt	eq
 800fc7c:	1949      	addeq	r1, r1, r5
 800fc7e:	6021      	streq	r1, [r4, #0]
 800fc80:	6054      	str	r4, [r2, #4]
 800fc82:	e7ca      	b.n	800fc1a <_free_r+0x26>
 800fc84:	b003      	add	sp, #12
 800fc86:	bd30      	pop	{r4, r5, pc}
 800fc88:	20001400 	.word	0x20001400

0800fc8c <malloc>:
 800fc8c:	4b02      	ldr	r3, [pc, #8]	; (800fc98 <malloc+0xc>)
 800fc8e:	4601      	mov	r1, r0
 800fc90:	6818      	ldr	r0, [r3, #0]
 800fc92:	f000 b823 	b.w	800fcdc <_malloc_r>
 800fc96:	bf00      	nop
 800fc98:	200001a0 	.word	0x200001a0

0800fc9c <sbrk_aligned>:
 800fc9c:	b570      	push	{r4, r5, r6, lr}
 800fc9e:	4e0e      	ldr	r6, [pc, #56]	; (800fcd8 <sbrk_aligned+0x3c>)
 800fca0:	460c      	mov	r4, r1
 800fca2:	6831      	ldr	r1, [r6, #0]
 800fca4:	4605      	mov	r5, r0
 800fca6:	b911      	cbnz	r1, 800fcae <sbrk_aligned+0x12>
 800fca8:	f000 fcd6 	bl	8010658 <_sbrk_r>
 800fcac:	6030      	str	r0, [r6, #0]
 800fcae:	4621      	mov	r1, r4
 800fcb0:	4628      	mov	r0, r5
 800fcb2:	f000 fcd1 	bl	8010658 <_sbrk_r>
 800fcb6:	1c43      	adds	r3, r0, #1
 800fcb8:	d00a      	beq.n	800fcd0 <sbrk_aligned+0x34>
 800fcba:	1cc4      	adds	r4, r0, #3
 800fcbc:	f024 0403 	bic.w	r4, r4, #3
 800fcc0:	42a0      	cmp	r0, r4
 800fcc2:	d007      	beq.n	800fcd4 <sbrk_aligned+0x38>
 800fcc4:	1a21      	subs	r1, r4, r0
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f000 fcc6 	bl	8010658 <_sbrk_r>
 800fccc:	3001      	adds	r0, #1
 800fcce:	d101      	bne.n	800fcd4 <sbrk_aligned+0x38>
 800fcd0:	f04f 34ff 	mov.w	r4, #4294967295
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	bd70      	pop	{r4, r5, r6, pc}
 800fcd8:	20001404 	.word	0x20001404

0800fcdc <_malloc_r>:
 800fcdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fce0:	1ccd      	adds	r5, r1, #3
 800fce2:	f025 0503 	bic.w	r5, r5, #3
 800fce6:	3508      	adds	r5, #8
 800fce8:	2d0c      	cmp	r5, #12
 800fcea:	bf38      	it	cc
 800fcec:	250c      	movcc	r5, #12
 800fcee:	2d00      	cmp	r5, #0
 800fcf0:	4607      	mov	r7, r0
 800fcf2:	db01      	blt.n	800fcf8 <_malloc_r+0x1c>
 800fcf4:	42a9      	cmp	r1, r5
 800fcf6:	d905      	bls.n	800fd04 <_malloc_r+0x28>
 800fcf8:	230c      	movs	r3, #12
 800fcfa:	603b      	str	r3, [r7, #0]
 800fcfc:	2600      	movs	r6, #0
 800fcfe:	4630      	mov	r0, r6
 800fd00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fdd8 <_malloc_r+0xfc>
 800fd08:	f000 f868 	bl	800fddc <__malloc_lock>
 800fd0c:	f8d8 3000 	ldr.w	r3, [r8]
 800fd10:	461c      	mov	r4, r3
 800fd12:	bb5c      	cbnz	r4, 800fd6c <_malloc_r+0x90>
 800fd14:	4629      	mov	r1, r5
 800fd16:	4638      	mov	r0, r7
 800fd18:	f7ff ffc0 	bl	800fc9c <sbrk_aligned>
 800fd1c:	1c43      	adds	r3, r0, #1
 800fd1e:	4604      	mov	r4, r0
 800fd20:	d155      	bne.n	800fdce <_malloc_r+0xf2>
 800fd22:	f8d8 4000 	ldr.w	r4, [r8]
 800fd26:	4626      	mov	r6, r4
 800fd28:	2e00      	cmp	r6, #0
 800fd2a:	d145      	bne.n	800fdb8 <_malloc_r+0xdc>
 800fd2c:	2c00      	cmp	r4, #0
 800fd2e:	d048      	beq.n	800fdc2 <_malloc_r+0xe6>
 800fd30:	6823      	ldr	r3, [r4, #0]
 800fd32:	4631      	mov	r1, r6
 800fd34:	4638      	mov	r0, r7
 800fd36:	eb04 0903 	add.w	r9, r4, r3
 800fd3a:	f000 fc8d 	bl	8010658 <_sbrk_r>
 800fd3e:	4581      	cmp	r9, r0
 800fd40:	d13f      	bne.n	800fdc2 <_malloc_r+0xe6>
 800fd42:	6821      	ldr	r1, [r4, #0]
 800fd44:	1a6d      	subs	r5, r5, r1
 800fd46:	4629      	mov	r1, r5
 800fd48:	4638      	mov	r0, r7
 800fd4a:	f7ff ffa7 	bl	800fc9c <sbrk_aligned>
 800fd4e:	3001      	adds	r0, #1
 800fd50:	d037      	beq.n	800fdc2 <_malloc_r+0xe6>
 800fd52:	6823      	ldr	r3, [r4, #0]
 800fd54:	442b      	add	r3, r5
 800fd56:	6023      	str	r3, [r4, #0]
 800fd58:	f8d8 3000 	ldr.w	r3, [r8]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d038      	beq.n	800fdd2 <_malloc_r+0xf6>
 800fd60:	685a      	ldr	r2, [r3, #4]
 800fd62:	42a2      	cmp	r2, r4
 800fd64:	d12b      	bne.n	800fdbe <_malloc_r+0xe2>
 800fd66:	2200      	movs	r2, #0
 800fd68:	605a      	str	r2, [r3, #4]
 800fd6a:	e00f      	b.n	800fd8c <_malloc_r+0xb0>
 800fd6c:	6822      	ldr	r2, [r4, #0]
 800fd6e:	1b52      	subs	r2, r2, r5
 800fd70:	d41f      	bmi.n	800fdb2 <_malloc_r+0xd6>
 800fd72:	2a0b      	cmp	r2, #11
 800fd74:	d917      	bls.n	800fda6 <_malloc_r+0xca>
 800fd76:	1961      	adds	r1, r4, r5
 800fd78:	42a3      	cmp	r3, r4
 800fd7a:	6025      	str	r5, [r4, #0]
 800fd7c:	bf18      	it	ne
 800fd7e:	6059      	strne	r1, [r3, #4]
 800fd80:	6863      	ldr	r3, [r4, #4]
 800fd82:	bf08      	it	eq
 800fd84:	f8c8 1000 	streq.w	r1, [r8]
 800fd88:	5162      	str	r2, [r4, r5]
 800fd8a:	604b      	str	r3, [r1, #4]
 800fd8c:	4638      	mov	r0, r7
 800fd8e:	f104 060b 	add.w	r6, r4, #11
 800fd92:	f000 f829 	bl	800fde8 <__malloc_unlock>
 800fd96:	f026 0607 	bic.w	r6, r6, #7
 800fd9a:	1d23      	adds	r3, r4, #4
 800fd9c:	1af2      	subs	r2, r6, r3
 800fd9e:	d0ae      	beq.n	800fcfe <_malloc_r+0x22>
 800fda0:	1b9b      	subs	r3, r3, r6
 800fda2:	50a3      	str	r3, [r4, r2]
 800fda4:	e7ab      	b.n	800fcfe <_malloc_r+0x22>
 800fda6:	42a3      	cmp	r3, r4
 800fda8:	6862      	ldr	r2, [r4, #4]
 800fdaa:	d1dd      	bne.n	800fd68 <_malloc_r+0x8c>
 800fdac:	f8c8 2000 	str.w	r2, [r8]
 800fdb0:	e7ec      	b.n	800fd8c <_malloc_r+0xb0>
 800fdb2:	4623      	mov	r3, r4
 800fdb4:	6864      	ldr	r4, [r4, #4]
 800fdb6:	e7ac      	b.n	800fd12 <_malloc_r+0x36>
 800fdb8:	4634      	mov	r4, r6
 800fdba:	6876      	ldr	r6, [r6, #4]
 800fdbc:	e7b4      	b.n	800fd28 <_malloc_r+0x4c>
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	e7cc      	b.n	800fd5c <_malloc_r+0x80>
 800fdc2:	230c      	movs	r3, #12
 800fdc4:	603b      	str	r3, [r7, #0]
 800fdc6:	4638      	mov	r0, r7
 800fdc8:	f000 f80e 	bl	800fde8 <__malloc_unlock>
 800fdcc:	e797      	b.n	800fcfe <_malloc_r+0x22>
 800fdce:	6025      	str	r5, [r4, #0]
 800fdd0:	e7dc      	b.n	800fd8c <_malloc_r+0xb0>
 800fdd2:	605b      	str	r3, [r3, #4]
 800fdd4:	deff      	udf	#255	; 0xff
 800fdd6:	bf00      	nop
 800fdd8:	20001400 	.word	0x20001400

0800fddc <__malloc_lock>:
 800fddc:	4801      	ldr	r0, [pc, #4]	; (800fde4 <__malloc_lock+0x8>)
 800fdde:	f7ff b87e 	b.w	800eede <__retarget_lock_acquire_recursive>
 800fde2:	bf00      	nop
 800fde4:	200013fc 	.word	0x200013fc

0800fde8 <__malloc_unlock>:
 800fde8:	4801      	ldr	r0, [pc, #4]	; (800fdf0 <__malloc_unlock+0x8>)
 800fdea:	f7ff b879 	b.w	800eee0 <__retarget_lock_release_recursive>
 800fdee:	bf00      	nop
 800fdf0:	200013fc 	.word	0x200013fc

0800fdf4 <_Balloc>:
 800fdf4:	b570      	push	{r4, r5, r6, lr}
 800fdf6:	69c6      	ldr	r6, [r0, #28]
 800fdf8:	4604      	mov	r4, r0
 800fdfa:	460d      	mov	r5, r1
 800fdfc:	b976      	cbnz	r6, 800fe1c <_Balloc+0x28>
 800fdfe:	2010      	movs	r0, #16
 800fe00:	f7ff ff44 	bl	800fc8c <malloc>
 800fe04:	4602      	mov	r2, r0
 800fe06:	61e0      	str	r0, [r4, #28]
 800fe08:	b920      	cbnz	r0, 800fe14 <_Balloc+0x20>
 800fe0a:	4b18      	ldr	r3, [pc, #96]	; (800fe6c <_Balloc+0x78>)
 800fe0c:	4818      	ldr	r0, [pc, #96]	; (800fe70 <_Balloc+0x7c>)
 800fe0e:	216b      	movs	r1, #107	; 0x6b
 800fe10:	f000 fc32 	bl	8010678 <__assert_func>
 800fe14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe18:	6006      	str	r6, [r0, #0]
 800fe1a:	60c6      	str	r6, [r0, #12]
 800fe1c:	69e6      	ldr	r6, [r4, #28]
 800fe1e:	68f3      	ldr	r3, [r6, #12]
 800fe20:	b183      	cbz	r3, 800fe44 <_Balloc+0x50>
 800fe22:	69e3      	ldr	r3, [r4, #28]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe2a:	b9b8      	cbnz	r0, 800fe5c <_Balloc+0x68>
 800fe2c:	2101      	movs	r1, #1
 800fe2e:	fa01 f605 	lsl.w	r6, r1, r5
 800fe32:	1d72      	adds	r2, r6, #5
 800fe34:	0092      	lsls	r2, r2, #2
 800fe36:	4620      	mov	r0, r4
 800fe38:	f000 fc3c 	bl	80106b4 <_calloc_r>
 800fe3c:	b160      	cbz	r0, 800fe58 <_Balloc+0x64>
 800fe3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe42:	e00e      	b.n	800fe62 <_Balloc+0x6e>
 800fe44:	2221      	movs	r2, #33	; 0x21
 800fe46:	2104      	movs	r1, #4
 800fe48:	4620      	mov	r0, r4
 800fe4a:	f000 fc33 	bl	80106b4 <_calloc_r>
 800fe4e:	69e3      	ldr	r3, [r4, #28]
 800fe50:	60f0      	str	r0, [r6, #12]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d1e4      	bne.n	800fe22 <_Balloc+0x2e>
 800fe58:	2000      	movs	r0, #0
 800fe5a:	bd70      	pop	{r4, r5, r6, pc}
 800fe5c:	6802      	ldr	r2, [r0, #0]
 800fe5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe62:	2300      	movs	r3, #0
 800fe64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe68:	e7f7      	b.n	800fe5a <_Balloc+0x66>
 800fe6a:	bf00      	nop
 800fe6c:	08011239 	.word	0x08011239
 800fe70:	080112b9 	.word	0x080112b9

0800fe74 <_Bfree>:
 800fe74:	b570      	push	{r4, r5, r6, lr}
 800fe76:	69c6      	ldr	r6, [r0, #28]
 800fe78:	4605      	mov	r5, r0
 800fe7a:	460c      	mov	r4, r1
 800fe7c:	b976      	cbnz	r6, 800fe9c <_Bfree+0x28>
 800fe7e:	2010      	movs	r0, #16
 800fe80:	f7ff ff04 	bl	800fc8c <malloc>
 800fe84:	4602      	mov	r2, r0
 800fe86:	61e8      	str	r0, [r5, #28]
 800fe88:	b920      	cbnz	r0, 800fe94 <_Bfree+0x20>
 800fe8a:	4b09      	ldr	r3, [pc, #36]	; (800feb0 <_Bfree+0x3c>)
 800fe8c:	4809      	ldr	r0, [pc, #36]	; (800feb4 <_Bfree+0x40>)
 800fe8e:	218f      	movs	r1, #143	; 0x8f
 800fe90:	f000 fbf2 	bl	8010678 <__assert_func>
 800fe94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe98:	6006      	str	r6, [r0, #0]
 800fe9a:	60c6      	str	r6, [r0, #12]
 800fe9c:	b13c      	cbz	r4, 800feae <_Bfree+0x3a>
 800fe9e:	69eb      	ldr	r3, [r5, #28]
 800fea0:	6862      	ldr	r2, [r4, #4]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fea8:	6021      	str	r1, [r4, #0]
 800feaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800feae:	bd70      	pop	{r4, r5, r6, pc}
 800feb0:	08011239 	.word	0x08011239
 800feb4:	080112b9 	.word	0x080112b9

0800feb8 <__multadd>:
 800feb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800febc:	690d      	ldr	r5, [r1, #16]
 800febe:	4607      	mov	r7, r0
 800fec0:	460c      	mov	r4, r1
 800fec2:	461e      	mov	r6, r3
 800fec4:	f101 0c14 	add.w	ip, r1, #20
 800fec8:	2000      	movs	r0, #0
 800feca:	f8dc 3000 	ldr.w	r3, [ip]
 800fece:	b299      	uxth	r1, r3
 800fed0:	fb02 6101 	mla	r1, r2, r1, r6
 800fed4:	0c1e      	lsrs	r6, r3, #16
 800fed6:	0c0b      	lsrs	r3, r1, #16
 800fed8:	fb02 3306 	mla	r3, r2, r6, r3
 800fedc:	b289      	uxth	r1, r1
 800fede:	3001      	adds	r0, #1
 800fee0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fee4:	4285      	cmp	r5, r0
 800fee6:	f84c 1b04 	str.w	r1, [ip], #4
 800feea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800feee:	dcec      	bgt.n	800feca <__multadd+0x12>
 800fef0:	b30e      	cbz	r6, 800ff36 <__multadd+0x7e>
 800fef2:	68a3      	ldr	r3, [r4, #8]
 800fef4:	42ab      	cmp	r3, r5
 800fef6:	dc19      	bgt.n	800ff2c <__multadd+0x74>
 800fef8:	6861      	ldr	r1, [r4, #4]
 800fefa:	4638      	mov	r0, r7
 800fefc:	3101      	adds	r1, #1
 800fefe:	f7ff ff79 	bl	800fdf4 <_Balloc>
 800ff02:	4680      	mov	r8, r0
 800ff04:	b928      	cbnz	r0, 800ff12 <__multadd+0x5a>
 800ff06:	4602      	mov	r2, r0
 800ff08:	4b0c      	ldr	r3, [pc, #48]	; (800ff3c <__multadd+0x84>)
 800ff0a:	480d      	ldr	r0, [pc, #52]	; (800ff40 <__multadd+0x88>)
 800ff0c:	21ba      	movs	r1, #186	; 0xba
 800ff0e:	f000 fbb3 	bl	8010678 <__assert_func>
 800ff12:	6922      	ldr	r2, [r4, #16]
 800ff14:	3202      	adds	r2, #2
 800ff16:	f104 010c 	add.w	r1, r4, #12
 800ff1a:	0092      	lsls	r2, r2, #2
 800ff1c:	300c      	adds	r0, #12
 800ff1e:	f7fe ffe0 	bl	800eee2 <memcpy>
 800ff22:	4621      	mov	r1, r4
 800ff24:	4638      	mov	r0, r7
 800ff26:	f7ff ffa5 	bl	800fe74 <_Bfree>
 800ff2a:	4644      	mov	r4, r8
 800ff2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff30:	3501      	adds	r5, #1
 800ff32:	615e      	str	r6, [r3, #20]
 800ff34:	6125      	str	r5, [r4, #16]
 800ff36:	4620      	mov	r0, r4
 800ff38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff3c:	080112a8 	.word	0x080112a8
 800ff40:	080112b9 	.word	0x080112b9

0800ff44 <__hi0bits>:
 800ff44:	0c03      	lsrs	r3, r0, #16
 800ff46:	041b      	lsls	r3, r3, #16
 800ff48:	b9d3      	cbnz	r3, 800ff80 <__hi0bits+0x3c>
 800ff4a:	0400      	lsls	r0, r0, #16
 800ff4c:	2310      	movs	r3, #16
 800ff4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ff52:	bf04      	itt	eq
 800ff54:	0200      	lsleq	r0, r0, #8
 800ff56:	3308      	addeq	r3, #8
 800ff58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ff5c:	bf04      	itt	eq
 800ff5e:	0100      	lsleq	r0, r0, #4
 800ff60:	3304      	addeq	r3, #4
 800ff62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ff66:	bf04      	itt	eq
 800ff68:	0080      	lsleq	r0, r0, #2
 800ff6a:	3302      	addeq	r3, #2
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	db05      	blt.n	800ff7c <__hi0bits+0x38>
 800ff70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ff74:	f103 0301 	add.w	r3, r3, #1
 800ff78:	bf08      	it	eq
 800ff7a:	2320      	moveq	r3, #32
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	4770      	bx	lr
 800ff80:	2300      	movs	r3, #0
 800ff82:	e7e4      	b.n	800ff4e <__hi0bits+0xa>

0800ff84 <__lo0bits>:
 800ff84:	6803      	ldr	r3, [r0, #0]
 800ff86:	f013 0207 	ands.w	r2, r3, #7
 800ff8a:	d00c      	beq.n	800ffa6 <__lo0bits+0x22>
 800ff8c:	07d9      	lsls	r1, r3, #31
 800ff8e:	d422      	bmi.n	800ffd6 <__lo0bits+0x52>
 800ff90:	079a      	lsls	r2, r3, #30
 800ff92:	bf49      	itett	mi
 800ff94:	085b      	lsrmi	r3, r3, #1
 800ff96:	089b      	lsrpl	r3, r3, #2
 800ff98:	6003      	strmi	r3, [r0, #0]
 800ff9a:	2201      	movmi	r2, #1
 800ff9c:	bf5c      	itt	pl
 800ff9e:	6003      	strpl	r3, [r0, #0]
 800ffa0:	2202      	movpl	r2, #2
 800ffa2:	4610      	mov	r0, r2
 800ffa4:	4770      	bx	lr
 800ffa6:	b299      	uxth	r1, r3
 800ffa8:	b909      	cbnz	r1, 800ffae <__lo0bits+0x2a>
 800ffaa:	0c1b      	lsrs	r3, r3, #16
 800ffac:	2210      	movs	r2, #16
 800ffae:	b2d9      	uxtb	r1, r3
 800ffb0:	b909      	cbnz	r1, 800ffb6 <__lo0bits+0x32>
 800ffb2:	3208      	adds	r2, #8
 800ffb4:	0a1b      	lsrs	r3, r3, #8
 800ffb6:	0719      	lsls	r1, r3, #28
 800ffb8:	bf04      	itt	eq
 800ffba:	091b      	lsreq	r3, r3, #4
 800ffbc:	3204      	addeq	r2, #4
 800ffbe:	0799      	lsls	r1, r3, #30
 800ffc0:	bf04      	itt	eq
 800ffc2:	089b      	lsreq	r3, r3, #2
 800ffc4:	3202      	addeq	r2, #2
 800ffc6:	07d9      	lsls	r1, r3, #31
 800ffc8:	d403      	bmi.n	800ffd2 <__lo0bits+0x4e>
 800ffca:	085b      	lsrs	r3, r3, #1
 800ffcc:	f102 0201 	add.w	r2, r2, #1
 800ffd0:	d003      	beq.n	800ffda <__lo0bits+0x56>
 800ffd2:	6003      	str	r3, [r0, #0]
 800ffd4:	e7e5      	b.n	800ffa2 <__lo0bits+0x1e>
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	e7e3      	b.n	800ffa2 <__lo0bits+0x1e>
 800ffda:	2220      	movs	r2, #32
 800ffdc:	e7e1      	b.n	800ffa2 <__lo0bits+0x1e>
	...

0800ffe0 <__i2b>:
 800ffe0:	b510      	push	{r4, lr}
 800ffe2:	460c      	mov	r4, r1
 800ffe4:	2101      	movs	r1, #1
 800ffe6:	f7ff ff05 	bl	800fdf4 <_Balloc>
 800ffea:	4602      	mov	r2, r0
 800ffec:	b928      	cbnz	r0, 800fffa <__i2b+0x1a>
 800ffee:	4b05      	ldr	r3, [pc, #20]	; (8010004 <__i2b+0x24>)
 800fff0:	4805      	ldr	r0, [pc, #20]	; (8010008 <__i2b+0x28>)
 800fff2:	f240 1145 	movw	r1, #325	; 0x145
 800fff6:	f000 fb3f 	bl	8010678 <__assert_func>
 800fffa:	2301      	movs	r3, #1
 800fffc:	6144      	str	r4, [r0, #20]
 800fffe:	6103      	str	r3, [r0, #16]
 8010000:	bd10      	pop	{r4, pc}
 8010002:	bf00      	nop
 8010004:	080112a8 	.word	0x080112a8
 8010008:	080112b9 	.word	0x080112b9

0801000c <__multiply>:
 801000c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010010:	4691      	mov	r9, r2
 8010012:	690a      	ldr	r2, [r1, #16]
 8010014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010018:	429a      	cmp	r2, r3
 801001a:	bfb8      	it	lt
 801001c:	460b      	movlt	r3, r1
 801001e:	460c      	mov	r4, r1
 8010020:	bfbc      	itt	lt
 8010022:	464c      	movlt	r4, r9
 8010024:	4699      	movlt	r9, r3
 8010026:	6927      	ldr	r7, [r4, #16]
 8010028:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801002c:	68a3      	ldr	r3, [r4, #8]
 801002e:	6861      	ldr	r1, [r4, #4]
 8010030:	eb07 060a 	add.w	r6, r7, sl
 8010034:	42b3      	cmp	r3, r6
 8010036:	b085      	sub	sp, #20
 8010038:	bfb8      	it	lt
 801003a:	3101      	addlt	r1, #1
 801003c:	f7ff feda 	bl	800fdf4 <_Balloc>
 8010040:	b930      	cbnz	r0, 8010050 <__multiply+0x44>
 8010042:	4602      	mov	r2, r0
 8010044:	4b44      	ldr	r3, [pc, #272]	; (8010158 <__multiply+0x14c>)
 8010046:	4845      	ldr	r0, [pc, #276]	; (801015c <__multiply+0x150>)
 8010048:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801004c:	f000 fb14 	bl	8010678 <__assert_func>
 8010050:	f100 0514 	add.w	r5, r0, #20
 8010054:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010058:	462b      	mov	r3, r5
 801005a:	2200      	movs	r2, #0
 801005c:	4543      	cmp	r3, r8
 801005e:	d321      	bcc.n	80100a4 <__multiply+0x98>
 8010060:	f104 0314 	add.w	r3, r4, #20
 8010064:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010068:	f109 0314 	add.w	r3, r9, #20
 801006c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010070:	9202      	str	r2, [sp, #8]
 8010072:	1b3a      	subs	r2, r7, r4
 8010074:	3a15      	subs	r2, #21
 8010076:	f022 0203 	bic.w	r2, r2, #3
 801007a:	3204      	adds	r2, #4
 801007c:	f104 0115 	add.w	r1, r4, #21
 8010080:	428f      	cmp	r7, r1
 8010082:	bf38      	it	cc
 8010084:	2204      	movcc	r2, #4
 8010086:	9201      	str	r2, [sp, #4]
 8010088:	9a02      	ldr	r2, [sp, #8]
 801008a:	9303      	str	r3, [sp, #12]
 801008c:	429a      	cmp	r2, r3
 801008e:	d80c      	bhi.n	80100aa <__multiply+0x9e>
 8010090:	2e00      	cmp	r6, #0
 8010092:	dd03      	ble.n	801009c <__multiply+0x90>
 8010094:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010098:	2b00      	cmp	r3, #0
 801009a:	d05b      	beq.n	8010154 <__multiply+0x148>
 801009c:	6106      	str	r6, [r0, #16]
 801009e:	b005      	add	sp, #20
 80100a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a4:	f843 2b04 	str.w	r2, [r3], #4
 80100a8:	e7d8      	b.n	801005c <__multiply+0x50>
 80100aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80100ae:	f1ba 0f00 	cmp.w	sl, #0
 80100b2:	d024      	beq.n	80100fe <__multiply+0xf2>
 80100b4:	f104 0e14 	add.w	lr, r4, #20
 80100b8:	46a9      	mov	r9, r5
 80100ba:	f04f 0c00 	mov.w	ip, #0
 80100be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80100c2:	f8d9 1000 	ldr.w	r1, [r9]
 80100c6:	fa1f fb82 	uxth.w	fp, r2
 80100ca:	b289      	uxth	r1, r1
 80100cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80100d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80100d4:	f8d9 2000 	ldr.w	r2, [r9]
 80100d8:	4461      	add	r1, ip
 80100da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80100de:	fb0a c20b 	mla	r2, sl, fp, ip
 80100e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80100e6:	b289      	uxth	r1, r1
 80100e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80100ec:	4577      	cmp	r7, lr
 80100ee:	f849 1b04 	str.w	r1, [r9], #4
 80100f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80100f6:	d8e2      	bhi.n	80100be <__multiply+0xb2>
 80100f8:	9a01      	ldr	r2, [sp, #4]
 80100fa:	f845 c002 	str.w	ip, [r5, r2]
 80100fe:	9a03      	ldr	r2, [sp, #12]
 8010100:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010104:	3304      	adds	r3, #4
 8010106:	f1b9 0f00 	cmp.w	r9, #0
 801010a:	d021      	beq.n	8010150 <__multiply+0x144>
 801010c:	6829      	ldr	r1, [r5, #0]
 801010e:	f104 0c14 	add.w	ip, r4, #20
 8010112:	46ae      	mov	lr, r5
 8010114:	f04f 0a00 	mov.w	sl, #0
 8010118:	f8bc b000 	ldrh.w	fp, [ip]
 801011c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010120:	fb09 220b 	mla	r2, r9, fp, r2
 8010124:	4452      	add	r2, sl
 8010126:	b289      	uxth	r1, r1
 8010128:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801012c:	f84e 1b04 	str.w	r1, [lr], #4
 8010130:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010134:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010138:	f8be 1000 	ldrh.w	r1, [lr]
 801013c:	fb09 110a 	mla	r1, r9, sl, r1
 8010140:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010144:	4567      	cmp	r7, ip
 8010146:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801014a:	d8e5      	bhi.n	8010118 <__multiply+0x10c>
 801014c:	9a01      	ldr	r2, [sp, #4]
 801014e:	50a9      	str	r1, [r5, r2]
 8010150:	3504      	adds	r5, #4
 8010152:	e799      	b.n	8010088 <__multiply+0x7c>
 8010154:	3e01      	subs	r6, #1
 8010156:	e79b      	b.n	8010090 <__multiply+0x84>
 8010158:	080112a8 	.word	0x080112a8
 801015c:	080112b9 	.word	0x080112b9

08010160 <__pow5mult>:
 8010160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010164:	4615      	mov	r5, r2
 8010166:	f012 0203 	ands.w	r2, r2, #3
 801016a:	4606      	mov	r6, r0
 801016c:	460f      	mov	r7, r1
 801016e:	d007      	beq.n	8010180 <__pow5mult+0x20>
 8010170:	4c25      	ldr	r4, [pc, #148]	; (8010208 <__pow5mult+0xa8>)
 8010172:	3a01      	subs	r2, #1
 8010174:	2300      	movs	r3, #0
 8010176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801017a:	f7ff fe9d 	bl	800feb8 <__multadd>
 801017e:	4607      	mov	r7, r0
 8010180:	10ad      	asrs	r5, r5, #2
 8010182:	d03d      	beq.n	8010200 <__pow5mult+0xa0>
 8010184:	69f4      	ldr	r4, [r6, #28]
 8010186:	b97c      	cbnz	r4, 80101a8 <__pow5mult+0x48>
 8010188:	2010      	movs	r0, #16
 801018a:	f7ff fd7f 	bl	800fc8c <malloc>
 801018e:	4602      	mov	r2, r0
 8010190:	61f0      	str	r0, [r6, #28]
 8010192:	b928      	cbnz	r0, 80101a0 <__pow5mult+0x40>
 8010194:	4b1d      	ldr	r3, [pc, #116]	; (801020c <__pow5mult+0xac>)
 8010196:	481e      	ldr	r0, [pc, #120]	; (8010210 <__pow5mult+0xb0>)
 8010198:	f240 11b3 	movw	r1, #435	; 0x1b3
 801019c:	f000 fa6c 	bl	8010678 <__assert_func>
 80101a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80101a4:	6004      	str	r4, [r0, #0]
 80101a6:	60c4      	str	r4, [r0, #12]
 80101a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80101ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80101b0:	b94c      	cbnz	r4, 80101c6 <__pow5mult+0x66>
 80101b2:	f240 2171 	movw	r1, #625	; 0x271
 80101b6:	4630      	mov	r0, r6
 80101b8:	f7ff ff12 	bl	800ffe0 <__i2b>
 80101bc:	2300      	movs	r3, #0
 80101be:	f8c8 0008 	str.w	r0, [r8, #8]
 80101c2:	4604      	mov	r4, r0
 80101c4:	6003      	str	r3, [r0, #0]
 80101c6:	f04f 0900 	mov.w	r9, #0
 80101ca:	07eb      	lsls	r3, r5, #31
 80101cc:	d50a      	bpl.n	80101e4 <__pow5mult+0x84>
 80101ce:	4639      	mov	r1, r7
 80101d0:	4622      	mov	r2, r4
 80101d2:	4630      	mov	r0, r6
 80101d4:	f7ff ff1a 	bl	801000c <__multiply>
 80101d8:	4639      	mov	r1, r7
 80101da:	4680      	mov	r8, r0
 80101dc:	4630      	mov	r0, r6
 80101de:	f7ff fe49 	bl	800fe74 <_Bfree>
 80101e2:	4647      	mov	r7, r8
 80101e4:	106d      	asrs	r5, r5, #1
 80101e6:	d00b      	beq.n	8010200 <__pow5mult+0xa0>
 80101e8:	6820      	ldr	r0, [r4, #0]
 80101ea:	b938      	cbnz	r0, 80101fc <__pow5mult+0x9c>
 80101ec:	4622      	mov	r2, r4
 80101ee:	4621      	mov	r1, r4
 80101f0:	4630      	mov	r0, r6
 80101f2:	f7ff ff0b 	bl	801000c <__multiply>
 80101f6:	6020      	str	r0, [r4, #0]
 80101f8:	f8c0 9000 	str.w	r9, [r0]
 80101fc:	4604      	mov	r4, r0
 80101fe:	e7e4      	b.n	80101ca <__pow5mult+0x6a>
 8010200:	4638      	mov	r0, r7
 8010202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010206:	bf00      	nop
 8010208:	08011408 	.word	0x08011408
 801020c:	08011239 	.word	0x08011239
 8010210:	080112b9 	.word	0x080112b9

08010214 <__lshift>:
 8010214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010218:	460c      	mov	r4, r1
 801021a:	6849      	ldr	r1, [r1, #4]
 801021c:	6923      	ldr	r3, [r4, #16]
 801021e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010222:	68a3      	ldr	r3, [r4, #8]
 8010224:	4607      	mov	r7, r0
 8010226:	4691      	mov	r9, r2
 8010228:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801022c:	f108 0601 	add.w	r6, r8, #1
 8010230:	42b3      	cmp	r3, r6
 8010232:	db0b      	blt.n	801024c <__lshift+0x38>
 8010234:	4638      	mov	r0, r7
 8010236:	f7ff fddd 	bl	800fdf4 <_Balloc>
 801023a:	4605      	mov	r5, r0
 801023c:	b948      	cbnz	r0, 8010252 <__lshift+0x3e>
 801023e:	4602      	mov	r2, r0
 8010240:	4b28      	ldr	r3, [pc, #160]	; (80102e4 <__lshift+0xd0>)
 8010242:	4829      	ldr	r0, [pc, #164]	; (80102e8 <__lshift+0xd4>)
 8010244:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010248:	f000 fa16 	bl	8010678 <__assert_func>
 801024c:	3101      	adds	r1, #1
 801024e:	005b      	lsls	r3, r3, #1
 8010250:	e7ee      	b.n	8010230 <__lshift+0x1c>
 8010252:	2300      	movs	r3, #0
 8010254:	f100 0114 	add.w	r1, r0, #20
 8010258:	f100 0210 	add.w	r2, r0, #16
 801025c:	4618      	mov	r0, r3
 801025e:	4553      	cmp	r3, sl
 8010260:	db33      	blt.n	80102ca <__lshift+0xb6>
 8010262:	6920      	ldr	r0, [r4, #16]
 8010264:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010268:	f104 0314 	add.w	r3, r4, #20
 801026c:	f019 091f 	ands.w	r9, r9, #31
 8010270:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010274:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010278:	d02b      	beq.n	80102d2 <__lshift+0xbe>
 801027a:	f1c9 0e20 	rsb	lr, r9, #32
 801027e:	468a      	mov	sl, r1
 8010280:	2200      	movs	r2, #0
 8010282:	6818      	ldr	r0, [r3, #0]
 8010284:	fa00 f009 	lsl.w	r0, r0, r9
 8010288:	4310      	orrs	r0, r2
 801028a:	f84a 0b04 	str.w	r0, [sl], #4
 801028e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010292:	459c      	cmp	ip, r3
 8010294:	fa22 f20e 	lsr.w	r2, r2, lr
 8010298:	d8f3      	bhi.n	8010282 <__lshift+0x6e>
 801029a:	ebac 0304 	sub.w	r3, ip, r4
 801029e:	3b15      	subs	r3, #21
 80102a0:	f023 0303 	bic.w	r3, r3, #3
 80102a4:	3304      	adds	r3, #4
 80102a6:	f104 0015 	add.w	r0, r4, #21
 80102aa:	4584      	cmp	ip, r0
 80102ac:	bf38      	it	cc
 80102ae:	2304      	movcc	r3, #4
 80102b0:	50ca      	str	r2, [r1, r3]
 80102b2:	b10a      	cbz	r2, 80102b8 <__lshift+0xa4>
 80102b4:	f108 0602 	add.w	r6, r8, #2
 80102b8:	3e01      	subs	r6, #1
 80102ba:	4638      	mov	r0, r7
 80102bc:	612e      	str	r6, [r5, #16]
 80102be:	4621      	mov	r1, r4
 80102c0:	f7ff fdd8 	bl	800fe74 <_Bfree>
 80102c4:	4628      	mov	r0, r5
 80102c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80102ce:	3301      	adds	r3, #1
 80102d0:	e7c5      	b.n	801025e <__lshift+0x4a>
 80102d2:	3904      	subs	r1, #4
 80102d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80102d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80102dc:	459c      	cmp	ip, r3
 80102de:	d8f9      	bhi.n	80102d4 <__lshift+0xc0>
 80102e0:	e7ea      	b.n	80102b8 <__lshift+0xa4>
 80102e2:	bf00      	nop
 80102e4:	080112a8 	.word	0x080112a8
 80102e8:	080112b9 	.word	0x080112b9

080102ec <__mcmp>:
 80102ec:	b530      	push	{r4, r5, lr}
 80102ee:	6902      	ldr	r2, [r0, #16]
 80102f0:	690c      	ldr	r4, [r1, #16]
 80102f2:	1b12      	subs	r2, r2, r4
 80102f4:	d10e      	bne.n	8010314 <__mcmp+0x28>
 80102f6:	f100 0314 	add.w	r3, r0, #20
 80102fa:	3114      	adds	r1, #20
 80102fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010300:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010304:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010308:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801030c:	42a5      	cmp	r5, r4
 801030e:	d003      	beq.n	8010318 <__mcmp+0x2c>
 8010310:	d305      	bcc.n	801031e <__mcmp+0x32>
 8010312:	2201      	movs	r2, #1
 8010314:	4610      	mov	r0, r2
 8010316:	bd30      	pop	{r4, r5, pc}
 8010318:	4283      	cmp	r3, r0
 801031a:	d3f3      	bcc.n	8010304 <__mcmp+0x18>
 801031c:	e7fa      	b.n	8010314 <__mcmp+0x28>
 801031e:	f04f 32ff 	mov.w	r2, #4294967295
 8010322:	e7f7      	b.n	8010314 <__mcmp+0x28>

08010324 <__mdiff>:
 8010324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010328:	460c      	mov	r4, r1
 801032a:	4606      	mov	r6, r0
 801032c:	4611      	mov	r1, r2
 801032e:	4620      	mov	r0, r4
 8010330:	4690      	mov	r8, r2
 8010332:	f7ff ffdb 	bl	80102ec <__mcmp>
 8010336:	1e05      	subs	r5, r0, #0
 8010338:	d110      	bne.n	801035c <__mdiff+0x38>
 801033a:	4629      	mov	r1, r5
 801033c:	4630      	mov	r0, r6
 801033e:	f7ff fd59 	bl	800fdf4 <_Balloc>
 8010342:	b930      	cbnz	r0, 8010352 <__mdiff+0x2e>
 8010344:	4b3a      	ldr	r3, [pc, #232]	; (8010430 <__mdiff+0x10c>)
 8010346:	4602      	mov	r2, r0
 8010348:	f240 2137 	movw	r1, #567	; 0x237
 801034c:	4839      	ldr	r0, [pc, #228]	; (8010434 <__mdiff+0x110>)
 801034e:	f000 f993 	bl	8010678 <__assert_func>
 8010352:	2301      	movs	r3, #1
 8010354:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035c:	bfa4      	itt	ge
 801035e:	4643      	movge	r3, r8
 8010360:	46a0      	movge	r8, r4
 8010362:	4630      	mov	r0, r6
 8010364:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010368:	bfa6      	itte	ge
 801036a:	461c      	movge	r4, r3
 801036c:	2500      	movge	r5, #0
 801036e:	2501      	movlt	r5, #1
 8010370:	f7ff fd40 	bl	800fdf4 <_Balloc>
 8010374:	b920      	cbnz	r0, 8010380 <__mdiff+0x5c>
 8010376:	4b2e      	ldr	r3, [pc, #184]	; (8010430 <__mdiff+0x10c>)
 8010378:	4602      	mov	r2, r0
 801037a:	f240 2145 	movw	r1, #581	; 0x245
 801037e:	e7e5      	b.n	801034c <__mdiff+0x28>
 8010380:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010384:	6926      	ldr	r6, [r4, #16]
 8010386:	60c5      	str	r5, [r0, #12]
 8010388:	f104 0914 	add.w	r9, r4, #20
 801038c:	f108 0514 	add.w	r5, r8, #20
 8010390:	f100 0e14 	add.w	lr, r0, #20
 8010394:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010398:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801039c:	f108 0210 	add.w	r2, r8, #16
 80103a0:	46f2      	mov	sl, lr
 80103a2:	2100      	movs	r1, #0
 80103a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80103a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80103ac:	fa11 f88b 	uxtah	r8, r1, fp
 80103b0:	b299      	uxth	r1, r3
 80103b2:	0c1b      	lsrs	r3, r3, #16
 80103b4:	eba8 0801 	sub.w	r8, r8, r1
 80103b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80103bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80103c0:	fa1f f888 	uxth.w	r8, r8
 80103c4:	1419      	asrs	r1, r3, #16
 80103c6:	454e      	cmp	r6, r9
 80103c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80103cc:	f84a 3b04 	str.w	r3, [sl], #4
 80103d0:	d8e8      	bhi.n	80103a4 <__mdiff+0x80>
 80103d2:	1b33      	subs	r3, r6, r4
 80103d4:	3b15      	subs	r3, #21
 80103d6:	f023 0303 	bic.w	r3, r3, #3
 80103da:	3304      	adds	r3, #4
 80103dc:	3415      	adds	r4, #21
 80103de:	42a6      	cmp	r6, r4
 80103e0:	bf38      	it	cc
 80103e2:	2304      	movcc	r3, #4
 80103e4:	441d      	add	r5, r3
 80103e6:	4473      	add	r3, lr
 80103e8:	469e      	mov	lr, r3
 80103ea:	462e      	mov	r6, r5
 80103ec:	4566      	cmp	r6, ip
 80103ee:	d30e      	bcc.n	801040e <__mdiff+0xea>
 80103f0:	f10c 0203 	add.w	r2, ip, #3
 80103f4:	1b52      	subs	r2, r2, r5
 80103f6:	f022 0203 	bic.w	r2, r2, #3
 80103fa:	3d03      	subs	r5, #3
 80103fc:	45ac      	cmp	ip, r5
 80103fe:	bf38      	it	cc
 8010400:	2200      	movcc	r2, #0
 8010402:	4413      	add	r3, r2
 8010404:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010408:	b17a      	cbz	r2, 801042a <__mdiff+0x106>
 801040a:	6107      	str	r7, [r0, #16]
 801040c:	e7a4      	b.n	8010358 <__mdiff+0x34>
 801040e:	f856 8b04 	ldr.w	r8, [r6], #4
 8010412:	fa11 f288 	uxtah	r2, r1, r8
 8010416:	1414      	asrs	r4, r2, #16
 8010418:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801041c:	b292      	uxth	r2, r2
 801041e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010422:	f84e 2b04 	str.w	r2, [lr], #4
 8010426:	1421      	asrs	r1, r4, #16
 8010428:	e7e0      	b.n	80103ec <__mdiff+0xc8>
 801042a:	3f01      	subs	r7, #1
 801042c:	e7ea      	b.n	8010404 <__mdiff+0xe0>
 801042e:	bf00      	nop
 8010430:	080112a8 	.word	0x080112a8
 8010434:	080112b9 	.word	0x080112b9

08010438 <__d2b>:
 8010438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801043c:	460f      	mov	r7, r1
 801043e:	2101      	movs	r1, #1
 8010440:	ec59 8b10 	vmov	r8, r9, d0
 8010444:	4616      	mov	r6, r2
 8010446:	f7ff fcd5 	bl	800fdf4 <_Balloc>
 801044a:	4604      	mov	r4, r0
 801044c:	b930      	cbnz	r0, 801045c <__d2b+0x24>
 801044e:	4602      	mov	r2, r0
 8010450:	4b24      	ldr	r3, [pc, #144]	; (80104e4 <__d2b+0xac>)
 8010452:	4825      	ldr	r0, [pc, #148]	; (80104e8 <__d2b+0xb0>)
 8010454:	f240 310f 	movw	r1, #783	; 0x30f
 8010458:	f000 f90e 	bl	8010678 <__assert_func>
 801045c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010464:	bb2d      	cbnz	r5, 80104b2 <__d2b+0x7a>
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	f1b8 0300 	subs.w	r3, r8, #0
 801046c:	d026      	beq.n	80104bc <__d2b+0x84>
 801046e:	4668      	mov	r0, sp
 8010470:	9300      	str	r3, [sp, #0]
 8010472:	f7ff fd87 	bl	800ff84 <__lo0bits>
 8010476:	e9dd 1200 	ldrd	r1, r2, [sp]
 801047a:	b1e8      	cbz	r0, 80104b8 <__d2b+0x80>
 801047c:	f1c0 0320 	rsb	r3, r0, #32
 8010480:	fa02 f303 	lsl.w	r3, r2, r3
 8010484:	430b      	orrs	r3, r1
 8010486:	40c2      	lsrs	r2, r0
 8010488:	6163      	str	r3, [r4, #20]
 801048a:	9201      	str	r2, [sp, #4]
 801048c:	9b01      	ldr	r3, [sp, #4]
 801048e:	61a3      	str	r3, [r4, #24]
 8010490:	2b00      	cmp	r3, #0
 8010492:	bf14      	ite	ne
 8010494:	2202      	movne	r2, #2
 8010496:	2201      	moveq	r2, #1
 8010498:	6122      	str	r2, [r4, #16]
 801049a:	b1bd      	cbz	r5, 80104cc <__d2b+0x94>
 801049c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80104a0:	4405      	add	r5, r0
 80104a2:	603d      	str	r5, [r7, #0]
 80104a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80104a8:	6030      	str	r0, [r6, #0]
 80104aa:	4620      	mov	r0, r4
 80104ac:	b003      	add	sp, #12
 80104ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80104b6:	e7d6      	b.n	8010466 <__d2b+0x2e>
 80104b8:	6161      	str	r1, [r4, #20]
 80104ba:	e7e7      	b.n	801048c <__d2b+0x54>
 80104bc:	a801      	add	r0, sp, #4
 80104be:	f7ff fd61 	bl	800ff84 <__lo0bits>
 80104c2:	9b01      	ldr	r3, [sp, #4]
 80104c4:	6163      	str	r3, [r4, #20]
 80104c6:	3020      	adds	r0, #32
 80104c8:	2201      	movs	r2, #1
 80104ca:	e7e5      	b.n	8010498 <__d2b+0x60>
 80104cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80104d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80104d4:	6038      	str	r0, [r7, #0]
 80104d6:	6918      	ldr	r0, [r3, #16]
 80104d8:	f7ff fd34 	bl	800ff44 <__hi0bits>
 80104dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80104e0:	e7e2      	b.n	80104a8 <__d2b+0x70>
 80104e2:	bf00      	nop
 80104e4:	080112a8 	.word	0x080112a8
 80104e8:	080112b9 	.word	0x080112b9

080104ec <_malloc_usable_size_r>:
 80104ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104f0:	1f18      	subs	r0, r3, #4
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	bfbc      	itt	lt
 80104f6:	580b      	ldrlt	r3, [r1, r0]
 80104f8:	18c0      	addlt	r0, r0, r3
 80104fa:	4770      	bx	lr

080104fc <__sflush_r>:
 80104fc:	898a      	ldrh	r2, [r1, #12]
 80104fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010502:	4605      	mov	r5, r0
 8010504:	0710      	lsls	r0, r2, #28
 8010506:	460c      	mov	r4, r1
 8010508:	d458      	bmi.n	80105bc <__sflush_r+0xc0>
 801050a:	684b      	ldr	r3, [r1, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	dc05      	bgt.n	801051c <__sflush_r+0x20>
 8010510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010512:	2b00      	cmp	r3, #0
 8010514:	dc02      	bgt.n	801051c <__sflush_r+0x20>
 8010516:	2000      	movs	r0, #0
 8010518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801051c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801051e:	2e00      	cmp	r6, #0
 8010520:	d0f9      	beq.n	8010516 <__sflush_r+0x1a>
 8010522:	2300      	movs	r3, #0
 8010524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010528:	682f      	ldr	r7, [r5, #0]
 801052a:	6a21      	ldr	r1, [r4, #32]
 801052c:	602b      	str	r3, [r5, #0]
 801052e:	d032      	beq.n	8010596 <__sflush_r+0x9a>
 8010530:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010532:	89a3      	ldrh	r3, [r4, #12]
 8010534:	075a      	lsls	r2, r3, #29
 8010536:	d505      	bpl.n	8010544 <__sflush_r+0x48>
 8010538:	6863      	ldr	r3, [r4, #4]
 801053a:	1ac0      	subs	r0, r0, r3
 801053c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801053e:	b10b      	cbz	r3, 8010544 <__sflush_r+0x48>
 8010540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010542:	1ac0      	subs	r0, r0, r3
 8010544:	2300      	movs	r3, #0
 8010546:	4602      	mov	r2, r0
 8010548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801054a:	6a21      	ldr	r1, [r4, #32]
 801054c:	4628      	mov	r0, r5
 801054e:	47b0      	blx	r6
 8010550:	1c43      	adds	r3, r0, #1
 8010552:	89a3      	ldrh	r3, [r4, #12]
 8010554:	d106      	bne.n	8010564 <__sflush_r+0x68>
 8010556:	6829      	ldr	r1, [r5, #0]
 8010558:	291d      	cmp	r1, #29
 801055a:	d82b      	bhi.n	80105b4 <__sflush_r+0xb8>
 801055c:	4a29      	ldr	r2, [pc, #164]	; (8010604 <__sflush_r+0x108>)
 801055e:	410a      	asrs	r2, r1
 8010560:	07d6      	lsls	r6, r2, #31
 8010562:	d427      	bmi.n	80105b4 <__sflush_r+0xb8>
 8010564:	2200      	movs	r2, #0
 8010566:	6062      	str	r2, [r4, #4]
 8010568:	04d9      	lsls	r1, r3, #19
 801056a:	6922      	ldr	r2, [r4, #16]
 801056c:	6022      	str	r2, [r4, #0]
 801056e:	d504      	bpl.n	801057a <__sflush_r+0x7e>
 8010570:	1c42      	adds	r2, r0, #1
 8010572:	d101      	bne.n	8010578 <__sflush_r+0x7c>
 8010574:	682b      	ldr	r3, [r5, #0]
 8010576:	b903      	cbnz	r3, 801057a <__sflush_r+0x7e>
 8010578:	6560      	str	r0, [r4, #84]	; 0x54
 801057a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801057c:	602f      	str	r7, [r5, #0]
 801057e:	2900      	cmp	r1, #0
 8010580:	d0c9      	beq.n	8010516 <__sflush_r+0x1a>
 8010582:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010586:	4299      	cmp	r1, r3
 8010588:	d002      	beq.n	8010590 <__sflush_r+0x94>
 801058a:	4628      	mov	r0, r5
 801058c:	f7ff fb32 	bl	800fbf4 <_free_r>
 8010590:	2000      	movs	r0, #0
 8010592:	6360      	str	r0, [r4, #52]	; 0x34
 8010594:	e7c0      	b.n	8010518 <__sflush_r+0x1c>
 8010596:	2301      	movs	r3, #1
 8010598:	4628      	mov	r0, r5
 801059a:	47b0      	blx	r6
 801059c:	1c41      	adds	r1, r0, #1
 801059e:	d1c8      	bne.n	8010532 <__sflush_r+0x36>
 80105a0:	682b      	ldr	r3, [r5, #0]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d0c5      	beq.n	8010532 <__sflush_r+0x36>
 80105a6:	2b1d      	cmp	r3, #29
 80105a8:	d001      	beq.n	80105ae <__sflush_r+0xb2>
 80105aa:	2b16      	cmp	r3, #22
 80105ac:	d101      	bne.n	80105b2 <__sflush_r+0xb6>
 80105ae:	602f      	str	r7, [r5, #0]
 80105b0:	e7b1      	b.n	8010516 <__sflush_r+0x1a>
 80105b2:	89a3      	ldrh	r3, [r4, #12]
 80105b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105b8:	81a3      	strh	r3, [r4, #12]
 80105ba:	e7ad      	b.n	8010518 <__sflush_r+0x1c>
 80105bc:	690f      	ldr	r7, [r1, #16]
 80105be:	2f00      	cmp	r7, #0
 80105c0:	d0a9      	beq.n	8010516 <__sflush_r+0x1a>
 80105c2:	0793      	lsls	r3, r2, #30
 80105c4:	680e      	ldr	r6, [r1, #0]
 80105c6:	bf08      	it	eq
 80105c8:	694b      	ldreq	r3, [r1, #20]
 80105ca:	600f      	str	r7, [r1, #0]
 80105cc:	bf18      	it	ne
 80105ce:	2300      	movne	r3, #0
 80105d0:	eba6 0807 	sub.w	r8, r6, r7
 80105d4:	608b      	str	r3, [r1, #8]
 80105d6:	f1b8 0f00 	cmp.w	r8, #0
 80105da:	dd9c      	ble.n	8010516 <__sflush_r+0x1a>
 80105dc:	6a21      	ldr	r1, [r4, #32]
 80105de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80105e0:	4643      	mov	r3, r8
 80105e2:	463a      	mov	r2, r7
 80105e4:	4628      	mov	r0, r5
 80105e6:	47b0      	blx	r6
 80105e8:	2800      	cmp	r0, #0
 80105ea:	dc06      	bgt.n	80105fa <__sflush_r+0xfe>
 80105ec:	89a3      	ldrh	r3, [r4, #12]
 80105ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105f2:	81a3      	strh	r3, [r4, #12]
 80105f4:	f04f 30ff 	mov.w	r0, #4294967295
 80105f8:	e78e      	b.n	8010518 <__sflush_r+0x1c>
 80105fa:	4407      	add	r7, r0
 80105fc:	eba8 0800 	sub.w	r8, r8, r0
 8010600:	e7e9      	b.n	80105d6 <__sflush_r+0xda>
 8010602:	bf00      	nop
 8010604:	dfbffffe 	.word	0xdfbffffe

08010608 <_fflush_r>:
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	690b      	ldr	r3, [r1, #16]
 801060c:	4605      	mov	r5, r0
 801060e:	460c      	mov	r4, r1
 8010610:	b913      	cbnz	r3, 8010618 <_fflush_r+0x10>
 8010612:	2500      	movs	r5, #0
 8010614:	4628      	mov	r0, r5
 8010616:	bd38      	pop	{r3, r4, r5, pc}
 8010618:	b118      	cbz	r0, 8010622 <_fflush_r+0x1a>
 801061a:	6a03      	ldr	r3, [r0, #32]
 801061c:	b90b      	cbnz	r3, 8010622 <_fflush_r+0x1a>
 801061e:	f7fe fb67 	bl	800ecf0 <__sinit>
 8010622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d0f3      	beq.n	8010612 <_fflush_r+0xa>
 801062a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801062c:	07d0      	lsls	r0, r2, #31
 801062e:	d404      	bmi.n	801063a <_fflush_r+0x32>
 8010630:	0599      	lsls	r1, r3, #22
 8010632:	d402      	bmi.n	801063a <_fflush_r+0x32>
 8010634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010636:	f7fe fc52 	bl	800eede <__retarget_lock_acquire_recursive>
 801063a:	4628      	mov	r0, r5
 801063c:	4621      	mov	r1, r4
 801063e:	f7ff ff5d 	bl	80104fc <__sflush_r>
 8010642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010644:	07da      	lsls	r2, r3, #31
 8010646:	4605      	mov	r5, r0
 8010648:	d4e4      	bmi.n	8010614 <_fflush_r+0xc>
 801064a:	89a3      	ldrh	r3, [r4, #12]
 801064c:	059b      	lsls	r3, r3, #22
 801064e:	d4e1      	bmi.n	8010614 <_fflush_r+0xc>
 8010650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010652:	f7fe fc45 	bl	800eee0 <__retarget_lock_release_recursive>
 8010656:	e7dd      	b.n	8010614 <_fflush_r+0xc>

08010658 <_sbrk_r>:
 8010658:	b538      	push	{r3, r4, r5, lr}
 801065a:	4d06      	ldr	r5, [pc, #24]	; (8010674 <_sbrk_r+0x1c>)
 801065c:	2300      	movs	r3, #0
 801065e:	4604      	mov	r4, r0
 8010660:	4608      	mov	r0, r1
 8010662:	602b      	str	r3, [r5, #0]
 8010664:	f7f6 ff8c 	bl	8007580 <_sbrk>
 8010668:	1c43      	adds	r3, r0, #1
 801066a:	d102      	bne.n	8010672 <_sbrk_r+0x1a>
 801066c:	682b      	ldr	r3, [r5, #0]
 801066e:	b103      	cbz	r3, 8010672 <_sbrk_r+0x1a>
 8010670:	6023      	str	r3, [r4, #0]
 8010672:	bd38      	pop	{r3, r4, r5, pc}
 8010674:	200013f8 	.word	0x200013f8

08010678 <__assert_func>:
 8010678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801067a:	4614      	mov	r4, r2
 801067c:	461a      	mov	r2, r3
 801067e:	4b09      	ldr	r3, [pc, #36]	; (80106a4 <__assert_func+0x2c>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	4605      	mov	r5, r0
 8010684:	68d8      	ldr	r0, [r3, #12]
 8010686:	b14c      	cbz	r4, 801069c <__assert_func+0x24>
 8010688:	4b07      	ldr	r3, [pc, #28]	; (80106a8 <__assert_func+0x30>)
 801068a:	9100      	str	r1, [sp, #0]
 801068c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010690:	4906      	ldr	r1, [pc, #24]	; (80106ac <__assert_func+0x34>)
 8010692:	462b      	mov	r3, r5
 8010694:	f000 f844 	bl	8010720 <fiprintf>
 8010698:	f000 f854 	bl	8010744 <abort>
 801069c:	4b04      	ldr	r3, [pc, #16]	; (80106b0 <__assert_func+0x38>)
 801069e:	461c      	mov	r4, r3
 80106a0:	e7f3      	b.n	801068a <__assert_func+0x12>
 80106a2:	bf00      	nop
 80106a4:	200001a0 	.word	0x200001a0
 80106a8:	0801141e 	.word	0x0801141e
 80106ac:	0801142b 	.word	0x0801142b
 80106b0:	08011459 	.word	0x08011459

080106b4 <_calloc_r>:
 80106b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106b6:	fba1 2402 	umull	r2, r4, r1, r2
 80106ba:	b94c      	cbnz	r4, 80106d0 <_calloc_r+0x1c>
 80106bc:	4611      	mov	r1, r2
 80106be:	9201      	str	r2, [sp, #4]
 80106c0:	f7ff fb0c 	bl	800fcdc <_malloc_r>
 80106c4:	9a01      	ldr	r2, [sp, #4]
 80106c6:	4605      	mov	r5, r0
 80106c8:	b930      	cbnz	r0, 80106d8 <_calloc_r+0x24>
 80106ca:	4628      	mov	r0, r5
 80106cc:	b003      	add	sp, #12
 80106ce:	bd30      	pop	{r4, r5, pc}
 80106d0:	220c      	movs	r2, #12
 80106d2:	6002      	str	r2, [r0, #0]
 80106d4:	2500      	movs	r5, #0
 80106d6:	e7f8      	b.n	80106ca <_calloc_r+0x16>
 80106d8:	4621      	mov	r1, r4
 80106da:	f7fe fb82 	bl	800ede2 <memset>
 80106de:	e7f4      	b.n	80106ca <_calloc_r+0x16>

080106e0 <__ascii_mbtowc>:
 80106e0:	b082      	sub	sp, #8
 80106e2:	b901      	cbnz	r1, 80106e6 <__ascii_mbtowc+0x6>
 80106e4:	a901      	add	r1, sp, #4
 80106e6:	b142      	cbz	r2, 80106fa <__ascii_mbtowc+0x1a>
 80106e8:	b14b      	cbz	r3, 80106fe <__ascii_mbtowc+0x1e>
 80106ea:	7813      	ldrb	r3, [r2, #0]
 80106ec:	600b      	str	r3, [r1, #0]
 80106ee:	7812      	ldrb	r2, [r2, #0]
 80106f0:	1e10      	subs	r0, r2, #0
 80106f2:	bf18      	it	ne
 80106f4:	2001      	movne	r0, #1
 80106f6:	b002      	add	sp, #8
 80106f8:	4770      	bx	lr
 80106fa:	4610      	mov	r0, r2
 80106fc:	e7fb      	b.n	80106f6 <__ascii_mbtowc+0x16>
 80106fe:	f06f 0001 	mvn.w	r0, #1
 8010702:	e7f8      	b.n	80106f6 <__ascii_mbtowc+0x16>

08010704 <__ascii_wctomb>:
 8010704:	b149      	cbz	r1, 801071a <__ascii_wctomb+0x16>
 8010706:	2aff      	cmp	r2, #255	; 0xff
 8010708:	bf85      	ittet	hi
 801070a:	238a      	movhi	r3, #138	; 0x8a
 801070c:	6003      	strhi	r3, [r0, #0]
 801070e:	700a      	strbls	r2, [r1, #0]
 8010710:	f04f 30ff 	movhi.w	r0, #4294967295
 8010714:	bf98      	it	ls
 8010716:	2001      	movls	r0, #1
 8010718:	4770      	bx	lr
 801071a:	4608      	mov	r0, r1
 801071c:	4770      	bx	lr
	...

08010720 <fiprintf>:
 8010720:	b40e      	push	{r1, r2, r3}
 8010722:	b503      	push	{r0, r1, lr}
 8010724:	4601      	mov	r1, r0
 8010726:	ab03      	add	r3, sp, #12
 8010728:	4805      	ldr	r0, [pc, #20]	; (8010740 <fiprintf+0x20>)
 801072a:	f853 2b04 	ldr.w	r2, [r3], #4
 801072e:	6800      	ldr	r0, [r0, #0]
 8010730:	9301      	str	r3, [sp, #4]
 8010732:	f000 f837 	bl	80107a4 <_vfiprintf_r>
 8010736:	b002      	add	sp, #8
 8010738:	f85d eb04 	ldr.w	lr, [sp], #4
 801073c:	b003      	add	sp, #12
 801073e:	4770      	bx	lr
 8010740:	200001a0 	.word	0x200001a0

08010744 <abort>:
 8010744:	b508      	push	{r3, lr}
 8010746:	2006      	movs	r0, #6
 8010748:	f000 fa04 	bl	8010b54 <raise>
 801074c:	2001      	movs	r0, #1
 801074e:	f7f6 fe9f 	bl	8007490 <_exit>

08010752 <__sfputc_r>:
 8010752:	6893      	ldr	r3, [r2, #8]
 8010754:	3b01      	subs	r3, #1
 8010756:	2b00      	cmp	r3, #0
 8010758:	b410      	push	{r4}
 801075a:	6093      	str	r3, [r2, #8]
 801075c:	da08      	bge.n	8010770 <__sfputc_r+0x1e>
 801075e:	6994      	ldr	r4, [r2, #24]
 8010760:	42a3      	cmp	r3, r4
 8010762:	db01      	blt.n	8010768 <__sfputc_r+0x16>
 8010764:	290a      	cmp	r1, #10
 8010766:	d103      	bne.n	8010770 <__sfputc_r+0x1e>
 8010768:	f85d 4b04 	ldr.w	r4, [sp], #4
 801076c:	f000 b934 	b.w	80109d8 <__swbuf_r>
 8010770:	6813      	ldr	r3, [r2, #0]
 8010772:	1c58      	adds	r0, r3, #1
 8010774:	6010      	str	r0, [r2, #0]
 8010776:	7019      	strb	r1, [r3, #0]
 8010778:	4608      	mov	r0, r1
 801077a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801077e:	4770      	bx	lr

08010780 <__sfputs_r>:
 8010780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010782:	4606      	mov	r6, r0
 8010784:	460f      	mov	r7, r1
 8010786:	4614      	mov	r4, r2
 8010788:	18d5      	adds	r5, r2, r3
 801078a:	42ac      	cmp	r4, r5
 801078c:	d101      	bne.n	8010792 <__sfputs_r+0x12>
 801078e:	2000      	movs	r0, #0
 8010790:	e007      	b.n	80107a2 <__sfputs_r+0x22>
 8010792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010796:	463a      	mov	r2, r7
 8010798:	4630      	mov	r0, r6
 801079a:	f7ff ffda 	bl	8010752 <__sfputc_r>
 801079e:	1c43      	adds	r3, r0, #1
 80107a0:	d1f3      	bne.n	801078a <__sfputs_r+0xa>
 80107a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080107a4 <_vfiprintf_r>:
 80107a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a8:	460d      	mov	r5, r1
 80107aa:	b09d      	sub	sp, #116	; 0x74
 80107ac:	4614      	mov	r4, r2
 80107ae:	4698      	mov	r8, r3
 80107b0:	4606      	mov	r6, r0
 80107b2:	b118      	cbz	r0, 80107bc <_vfiprintf_r+0x18>
 80107b4:	6a03      	ldr	r3, [r0, #32]
 80107b6:	b90b      	cbnz	r3, 80107bc <_vfiprintf_r+0x18>
 80107b8:	f7fe fa9a 	bl	800ecf0 <__sinit>
 80107bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107be:	07d9      	lsls	r1, r3, #31
 80107c0:	d405      	bmi.n	80107ce <_vfiprintf_r+0x2a>
 80107c2:	89ab      	ldrh	r3, [r5, #12]
 80107c4:	059a      	lsls	r2, r3, #22
 80107c6:	d402      	bmi.n	80107ce <_vfiprintf_r+0x2a>
 80107c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107ca:	f7fe fb88 	bl	800eede <__retarget_lock_acquire_recursive>
 80107ce:	89ab      	ldrh	r3, [r5, #12]
 80107d0:	071b      	lsls	r3, r3, #28
 80107d2:	d501      	bpl.n	80107d8 <_vfiprintf_r+0x34>
 80107d4:	692b      	ldr	r3, [r5, #16]
 80107d6:	b99b      	cbnz	r3, 8010800 <_vfiprintf_r+0x5c>
 80107d8:	4629      	mov	r1, r5
 80107da:	4630      	mov	r0, r6
 80107dc:	f000 f93a 	bl	8010a54 <__swsetup_r>
 80107e0:	b170      	cbz	r0, 8010800 <_vfiprintf_r+0x5c>
 80107e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107e4:	07dc      	lsls	r4, r3, #31
 80107e6:	d504      	bpl.n	80107f2 <_vfiprintf_r+0x4e>
 80107e8:	f04f 30ff 	mov.w	r0, #4294967295
 80107ec:	b01d      	add	sp, #116	; 0x74
 80107ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f2:	89ab      	ldrh	r3, [r5, #12]
 80107f4:	0598      	lsls	r0, r3, #22
 80107f6:	d4f7      	bmi.n	80107e8 <_vfiprintf_r+0x44>
 80107f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107fa:	f7fe fb71 	bl	800eee0 <__retarget_lock_release_recursive>
 80107fe:	e7f3      	b.n	80107e8 <_vfiprintf_r+0x44>
 8010800:	2300      	movs	r3, #0
 8010802:	9309      	str	r3, [sp, #36]	; 0x24
 8010804:	2320      	movs	r3, #32
 8010806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801080a:	f8cd 800c 	str.w	r8, [sp, #12]
 801080e:	2330      	movs	r3, #48	; 0x30
 8010810:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80109c4 <_vfiprintf_r+0x220>
 8010814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010818:	f04f 0901 	mov.w	r9, #1
 801081c:	4623      	mov	r3, r4
 801081e:	469a      	mov	sl, r3
 8010820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010824:	b10a      	cbz	r2, 801082a <_vfiprintf_r+0x86>
 8010826:	2a25      	cmp	r2, #37	; 0x25
 8010828:	d1f9      	bne.n	801081e <_vfiprintf_r+0x7a>
 801082a:	ebba 0b04 	subs.w	fp, sl, r4
 801082e:	d00b      	beq.n	8010848 <_vfiprintf_r+0xa4>
 8010830:	465b      	mov	r3, fp
 8010832:	4622      	mov	r2, r4
 8010834:	4629      	mov	r1, r5
 8010836:	4630      	mov	r0, r6
 8010838:	f7ff ffa2 	bl	8010780 <__sfputs_r>
 801083c:	3001      	adds	r0, #1
 801083e:	f000 80a9 	beq.w	8010994 <_vfiprintf_r+0x1f0>
 8010842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010844:	445a      	add	r2, fp
 8010846:	9209      	str	r2, [sp, #36]	; 0x24
 8010848:	f89a 3000 	ldrb.w	r3, [sl]
 801084c:	2b00      	cmp	r3, #0
 801084e:	f000 80a1 	beq.w	8010994 <_vfiprintf_r+0x1f0>
 8010852:	2300      	movs	r3, #0
 8010854:	f04f 32ff 	mov.w	r2, #4294967295
 8010858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801085c:	f10a 0a01 	add.w	sl, sl, #1
 8010860:	9304      	str	r3, [sp, #16]
 8010862:	9307      	str	r3, [sp, #28]
 8010864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010868:	931a      	str	r3, [sp, #104]	; 0x68
 801086a:	4654      	mov	r4, sl
 801086c:	2205      	movs	r2, #5
 801086e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010872:	4854      	ldr	r0, [pc, #336]	; (80109c4 <_vfiprintf_r+0x220>)
 8010874:	f7ef fcac 	bl	80001d0 <memchr>
 8010878:	9a04      	ldr	r2, [sp, #16]
 801087a:	b9d8      	cbnz	r0, 80108b4 <_vfiprintf_r+0x110>
 801087c:	06d1      	lsls	r1, r2, #27
 801087e:	bf44      	itt	mi
 8010880:	2320      	movmi	r3, #32
 8010882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010886:	0713      	lsls	r3, r2, #28
 8010888:	bf44      	itt	mi
 801088a:	232b      	movmi	r3, #43	; 0x2b
 801088c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010890:	f89a 3000 	ldrb.w	r3, [sl]
 8010894:	2b2a      	cmp	r3, #42	; 0x2a
 8010896:	d015      	beq.n	80108c4 <_vfiprintf_r+0x120>
 8010898:	9a07      	ldr	r2, [sp, #28]
 801089a:	4654      	mov	r4, sl
 801089c:	2000      	movs	r0, #0
 801089e:	f04f 0c0a 	mov.w	ip, #10
 80108a2:	4621      	mov	r1, r4
 80108a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108a8:	3b30      	subs	r3, #48	; 0x30
 80108aa:	2b09      	cmp	r3, #9
 80108ac:	d94d      	bls.n	801094a <_vfiprintf_r+0x1a6>
 80108ae:	b1b0      	cbz	r0, 80108de <_vfiprintf_r+0x13a>
 80108b0:	9207      	str	r2, [sp, #28]
 80108b2:	e014      	b.n	80108de <_vfiprintf_r+0x13a>
 80108b4:	eba0 0308 	sub.w	r3, r0, r8
 80108b8:	fa09 f303 	lsl.w	r3, r9, r3
 80108bc:	4313      	orrs	r3, r2
 80108be:	9304      	str	r3, [sp, #16]
 80108c0:	46a2      	mov	sl, r4
 80108c2:	e7d2      	b.n	801086a <_vfiprintf_r+0xc6>
 80108c4:	9b03      	ldr	r3, [sp, #12]
 80108c6:	1d19      	adds	r1, r3, #4
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	9103      	str	r1, [sp, #12]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	bfbb      	ittet	lt
 80108d0:	425b      	neglt	r3, r3
 80108d2:	f042 0202 	orrlt.w	r2, r2, #2
 80108d6:	9307      	strge	r3, [sp, #28]
 80108d8:	9307      	strlt	r3, [sp, #28]
 80108da:	bfb8      	it	lt
 80108dc:	9204      	strlt	r2, [sp, #16]
 80108de:	7823      	ldrb	r3, [r4, #0]
 80108e0:	2b2e      	cmp	r3, #46	; 0x2e
 80108e2:	d10c      	bne.n	80108fe <_vfiprintf_r+0x15a>
 80108e4:	7863      	ldrb	r3, [r4, #1]
 80108e6:	2b2a      	cmp	r3, #42	; 0x2a
 80108e8:	d134      	bne.n	8010954 <_vfiprintf_r+0x1b0>
 80108ea:	9b03      	ldr	r3, [sp, #12]
 80108ec:	1d1a      	adds	r2, r3, #4
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	9203      	str	r2, [sp, #12]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	bfb8      	it	lt
 80108f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80108fa:	3402      	adds	r4, #2
 80108fc:	9305      	str	r3, [sp, #20]
 80108fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80109d4 <_vfiprintf_r+0x230>
 8010902:	7821      	ldrb	r1, [r4, #0]
 8010904:	2203      	movs	r2, #3
 8010906:	4650      	mov	r0, sl
 8010908:	f7ef fc62 	bl	80001d0 <memchr>
 801090c:	b138      	cbz	r0, 801091e <_vfiprintf_r+0x17a>
 801090e:	9b04      	ldr	r3, [sp, #16]
 8010910:	eba0 000a 	sub.w	r0, r0, sl
 8010914:	2240      	movs	r2, #64	; 0x40
 8010916:	4082      	lsls	r2, r0
 8010918:	4313      	orrs	r3, r2
 801091a:	3401      	adds	r4, #1
 801091c:	9304      	str	r3, [sp, #16]
 801091e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010922:	4829      	ldr	r0, [pc, #164]	; (80109c8 <_vfiprintf_r+0x224>)
 8010924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010928:	2206      	movs	r2, #6
 801092a:	f7ef fc51 	bl	80001d0 <memchr>
 801092e:	2800      	cmp	r0, #0
 8010930:	d03f      	beq.n	80109b2 <_vfiprintf_r+0x20e>
 8010932:	4b26      	ldr	r3, [pc, #152]	; (80109cc <_vfiprintf_r+0x228>)
 8010934:	bb1b      	cbnz	r3, 801097e <_vfiprintf_r+0x1da>
 8010936:	9b03      	ldr	r3, [sp, #12]
 8010938:	3307      	adds	r3, #7
 801093a:	f023 0307 	bic.w	r3, r3, #7
 801093e:	3308      	adds	r3, #8
 8010940:	9303      	str	r3, [sp, #12]
 8010942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010944:	443b      	add	r3, r7
 8010946:	9309      	str	r3, [sp, #36]	; 0x24
 8010948:	e768      	b.n	801081c <_vfiprintf_r+0x78>
 801094a:	fb0c 3202 	mla	r2, ip, r2, r3
 801094e:	460c      	mov	r4, r1
 8010950:	2001      	movs	r0, #1
 8010952:	e7a6      	b.n	80108a2 <_vfiprintf_r+0xfe>
 8010954:	2300      	movs	r3, #0
 8010956:	3401      	adds	r4, #1
 8010958:	9305      	str	r3, [sp, #20]
 801095a:	4619      	mov	r1, r3
 801095c:	f04f 0c0a 	mov.w	ip, #10
 8010960:	4620      	mov	r0, r4
 8010962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010966:	3a30      	subs	r2, #48	; 0x30
 8010968:	2a09      	cmp	r2, #9
 801096a:	d903      	bls.n	8010974 <_vfiprintf_r+0x1d0>
 801096c:	2b00      	cmp	r3, #0
 801096e:	d0c6      	beq.n	80108fe <_vfiprintf_r+0x15a>
 8010970:	9105      	str	r1, [sp, #20]
 8010972:	e7c4      	b.n	80108fe <_vfiprintf_r+0x15a>
 8010974:	fb0c 2101 	mla	r1, ip, r1, r2
 8010978:	4604      	mov	r4, r0
 801097a:	2301      	movs	r3, #1
 801097c:	e7f0      	b.n	8010960 <_vfiprintf_r+0x1bc>
 801097e:	ab03      	add	r3, sp, #12
 8010980:	9300      	str	r3, [sp, #0]
 8010982:	462a      	mov	r2, r5
 8010984:	4b12      	ldr	r3, [pc, #72]	; (80109d0 <_vfiprintf_r+0x22c>)
 8010986:	a904      	add	r1, sp, #16
 8010988:	4630      	mov	r0, r6
 801098a:	f7fd fd5f 	bl	800e44c <_printf_float>
 801098e:	4607      	mov	r7, r0
 8010990:	1c78      	adds	r0, r7, #1
 8010992:	d1d6      	bne.n	8010942 <_vfiprintf_r+0x19e>
 8010994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010996:	07d9      	lsls	r1, r3, #31
 8010998:	d405      	bmi.n	80109a6 <_vfiprintf_r+0x202>
 801099a:	89ab      	ldrh	r3, [r5, #12]
 801099c:	059a      	lsls	r2, r3, #22
 801099e:	d402      	bmi.n	80109a6 <_vfiprintf_r+0x202>
 80109a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109a2:	f7fe fa9d 	bl	800eee0 <__retarget_lock_release_recursive>
 80109a6:	89ab      	ldrh	r3, [r5, #12]
 80109a8:	065b      	lsls	r3, r3, #25
 80109aa:	f53f af1d 	bmi.w	80107e8 <_vfiprintf_r+0x44>
 80109ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109b0:	e71c      	b.n	80107ec <_vfiprintf_r+0x48>
 80109b2:	ab03      	add	r3, sp, #12
 80109b4:	9300      	str	r3, [sp, #0]
 80109b6:	462a      	mov	r2, r5
 80109b8:	4b05      	ldr	r3, [pc, #20]	; (80109d0 <_vfiprintf_r+0x22c>)
 80109ba:	a904      	add	r1, sp, #16
 80109bc:	4630      	mov	r0, r6
 80109be:	f7fd ffe9 	bl	800e994 <_printf_i>
 80109c2:	e7e4      	b.n	801098e <_vfiprintf_r+0x1ea>
 80109c4:	0801155b 	.word	0x0801155b
 80109c8:	08011565 	.word	0x08011565
 80109cc:	0800e44d 	.word	0x0800e44d
 80109d0:	08010781 	.word	0x08010781
 80109d4:	08011561 	.word	0x08011561

080109d8 <__swbuf_r>:
 80109d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109da:	460e      	mov	r6, r1
 80109dc:	4614      	mov	r4, r2
 80109de:	4605      	mov	r5, r0
 80109e0:	b118      	cbz	r0, 80109ea <__swbuf_r+0x12>
 80109e2:	6a03      	ldr	r3, [r0, #32]
 80109e4:	b90b      	cbnz	r3, 80109ea <__swbuf_r+0x12>
 80109e6:	f7fe f983 	bl	800ecf0 <__sinit>
 80109ea:	69a3      	ldr	r3, [r4, #24]
 80109ec:	60a3      	str	r3, [r4, #8]
 80109ee:	89a3      	ldrh	r3, [r4, #12]
 80109f0:	071a      	lsls	r2, r3, #28
 80109f2:	d525      	bpl.n	8010a40 <__swbuf_r+0x68>
 80109f4:	6923      	ldr	r3, [r4, #16]
 80109f6:	b31b      	cbz	r3, 8010a40 <__swbuf_r+0x68>
 80109f8:	6823      	ldr	r3, [r4, #0]
 80109fa:	6922      	ldr	r2, [r4, #16]
 80109fc:	1a98      	subs	r0, r3, r2
 80109fe:	6963      	ldr	r3, [r4, #20]
 8010a00:	b2f6      	uxtb	r6, r6
 8010a02:	4283      	cmp	r3, r0
 8010a04:	4637      	mov	r7, r6
 8010a06:	dc04      	bgt.n	8010a12 <__swbuf_r+0x3a>
 8010a08:	4621      	mov	r1, r4
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	f7ff fdfc 	bl	8010608 <_fflush_r>
 8010a10:	b9e0      	cbnz	r0, 8010a4c <__swbuf_r+0x74>
 8010a12:	68a3      	ldr	r3, [r4, #8]
 8010a14:	3b01      	subs	r3, #1
 8010a16:	60a3      	str	r3, [r4, #8]
 8010a18:	6823      	ldr	r3, [r4, #0]
 8010a1a:	1c5a      	adds	r2, r3, #1
 8010a1c:	6022      	str	r2, [r4, #0]
 8010a1e:	701e      	strb	r6, [r3, #0]
 8010a20:	6962      	ldr	r2, [r4, #20]
 8010a22:	1c43      	adds	r3, r0, #1
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d004      	beq.n	8010a32 <__swbuf_r+0x5a>
 8010a28:	89a3      	ldrh	r3, [r4, #12]
 8010a2a:	07db      	lsls	r3, r3, #31
 8010a2c:	d506      	bpl.n	8010a3c <__swbuf_r+0x64>
 8010a2e:	2e0a      	cmp	r6, #10
 8010a30:	d104      	bne.n	8010a3c <__swbuf_r+0x64>
 8010a32:	4621      	mov	r1, r4
 8010a34:	4628      	mov	r0, r5
 8010a36:	f7ff fde7 	bl	8010608 <_fflush_r>
 8010a3a:	b938      	cbnz	r0, 8010a4c <__swbuf_r+0x74>
 8010a3c:	4638      	mov	r0, r7
 8010a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a40:	4621      	mov	r1, r4
 8010a42:	4628      	mov	r0, r5
 8010a44:	f000 f806 	bl	8010a54 <__swsetup_r>
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	d0d5      	beq.n	80109f8 <__swbuf_r+0x20>
 8010a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8010a50:	e7f4      	b.n	8010a3c <__swbuf_r+0x64>
	...

08010a54 <__swsetup_r>:
 8010a54:	b538      	push	{r3, r4, r5, lr}
 8010a56:	4b2a      	ldr	r3, [pc, #168]	; (8010b00 <__swsetup_r+0xac>)
 8010a58:	4605      	mov	r5, r0
 8010a5a:	6818      	ldr	r0, [r3, #0]
 8010a5c:	460c      	mov	r4, r1
 8010a5e:	b118      	cbz	r0, 8010a68 <__swsetup_r+0x14>
 8010a60:	6a03      	ldr	r3, [r0, #32]
 8010a62:	b90b      	cbnz	r3, 8010a68 <__swsetup_r+0x14>
 8010a64:	f7fe f944 	bl	800ecf0 <__sinit>
 8010a68:	89a3      	ldrh	r3, [r4, #12]
 8010a6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a6e:	0718      	lsls	r0, r3, #28
 8010a70:	d422      	bmi.n	8010ab8 <__swsetup_r+0x64>
 8010a72:	06d9      	lsls	r1, r3, #27
 8010a74:	d407      	bmi.n	8010a86 <__swsetup_r+0x32>
 8010a76:	2309      	movs	r3, #9
 8010a78:	602b      	str	r3, [r5, #0]
 8010a7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a7e:	81a3      	strh	r3, [r4, #12]
 8010a80:	f04f 30ff 	mov.w	r0, #4294967295
 8010a84:	e034      	b.n	8010af0 <__swsetup_r+0x9c>
 8010a86:	0758      	lsls	r0, r3, #29
 8010a88:	d512      	bpl.n	8010ab0 <__swsetup_r+0x5c>
 8010a8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a8c:	b141      	cbz	r1, 8010aa0 <__swsetup_r+0x4c>
 8010a8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a92:	4299      	cmp	r1, r3
 8010a94:	d002      	beq.n	8010a9c <__swsetup_r+0x48>
 8010a96:	4628      	mov	r0, r5
 8010a98:	f7ff f8ac 	bl	800fbf4 <_free_r>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	6363      	str	r3, [r4, #52]	; 0x34
 8010aa0:	89a3      	ldrh	r3, [r4, #12]
 8010aa2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010aa6:	81a3      	strh	r3, [r4, #12]
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	6063      	str	r3, [r4, #4]
 8010aac:	6923      	ldr	r3, [r4, #16]
 8010aae:	6023      	str	r3, [r4, #0]
 8010ab0:	89a3      	ldrh	r3, [r4, #12]
 8010ab2:	f043 0308 	orr.w	r3, r3, #8
 8010ab6:	81a3      	strh	r3, [r4, #12]
 8010ab8:	6923      	ldr	r3, [r4, #16]
 8010aba:	b94b      	cbnz	r3, 8010ad0 <__swsetup_r+0x7c>
 8010abc:	89a3      	ldrh	r3, [r4, #12]
 8010abe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ac6:	d003      	beq.n	8010ad0 <__swsetup_r+0x7c>
 8010ac8:	4621      	mov	r1, r4
 8010aca:	4628      	mov	r0, r5
 8010acc:	f000 f884 	bl	8010bd8 <__smakebuf_r>
 8010ad0:	89a0      	ldrh	r0, [r4, #12]
 8010ad2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ad6:	f010 0301 	ands.w	r3, r0, #1
 8010ada:	d00a      	beq.n	8010af2 <__swsetup_r+0x9e>
 8010adc:	2300      	movs	r3, #0
 8010ade:	60a3      	str	r3, [r4, #8]
 8010ae0:	6963      	ldr	r3, [r4, #20]
 8010ae2:	425b      	negs	r3, r3
 8010ae4:	61a3      	str	r3, [r4, #24]
 8010ae6:	6923      	ldr	r3, [r4, #16]
 8010ae8:	b943      	cbnz	r3, 8010afc <__swsetup_r+0xa8>
 8010aea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010aee:	d1c4      	bne.n	8010a7a <__swsetup_r+0x26>
 8010af0:	bd38      	pop	{r3, r4, r5, pc}
 8010af2:	0781      	lsls	r1, r0, #30
 8010af4:	bf58      	it	pl
 8010af6:	6963      	ldrpl	r3, [r4, #20]
 8010af8:	60a3      	str	r3, [r4, #8]
 8010afa:	e7f4      	b.n	8010ae6 <__swsetup_r+0x92>
 8010afc:	2000      	movs	r0, #0
 8010afe:	e7f7      	b.n	8010af0 <__swsetup_r+0x9c>
 8010b00:	200001a0 	.word	0x200001a0

08010b04 <_raise_r>:
 8010b04:	291f      	cmp	r1, #31
 8010b06:	b538      	push	{r3, r4, r5, lr}
 8010b08:	4604      	mov	r4, r0
 8010b0a:	460d      	mov	r5, r1
 8010b0c:	d904      	bls.n	8010b18 <_raise_r+0x14>
 8010b0e:	2316      	movs	r3, #22
 8010b10:	6003      	str	r3, [r0, #0]
 8010b12:	f04f 30ff 	mov.w	r0, #4294967295
 8010b16:	bd38      	pop	{r3, r4, r5, pc}
 8010b18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010b1a:	b112      	cbz	r2, 8010b22 <_raise_r+0x1e>
 8010b1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b20:	b94b      	cbnz	r3, 8010b36 <_raise_r+0x32>
 8010b22:	4620      	mov	r0, r4
 8010b24:	f000 f830 	bl	8010b88 <_getpid_r>
 8010b28:	462a      	mov	r2, r5
 8010b2a:	4601      	mov	r1, r0
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b32:	f000 b817 	b.w	8010b64 <_kill_r>
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d00a      	beq.n	8010b50 <_raise_r+0x4c>
 8010b3a:	1c59      	adds	r1, r3, #1
 8010b3c:	d103      	bne.n	8010b46 <_raise_r+0x42>
 8010b3e:	2316      	movs	r3, #22
 8010b40:	6003      	str	r3, [r0, #0]
 8010b42:	2001      	movs	r0, #1
 8010b44:	e7e7      	b.n	8010b16 <_raise_r+0x12>
 8010b46:	2400      	movs	r4, #0
 8010b48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	4798      	blx	r3
 8010b50:	2000      	movs	r0, #0
 8010b52:	e7e0      	b.n	8010b16 <_raise_r+0x12>

08010b54 <raise>:
 8010b54:	4b02      	ldr	r3, [pc, #8]	; (8010b60 <raise+0xc>)
 8010b56:	4601      	mov	r1, r0
 8010b58:	6818      	ldr	r0, [r3, #0]
 8010b5a:	f7ff bfd3 	b.w	8010b04 <_raise_r>
 8010b5e:	bf00      	nop
 8010b60:	200001a0 	.word	0x200001a0

08010b64 <_kill_r>:
 8010b64:	b538      	push	{r3, r4, r5, lr}
 8010b66:	4d07      	ldr	r5, [pc, #28]	; (8010b84 <_kill_r+0x20>)
 8010b68:	2300      	movs	r3, #0
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	4608      	mov	r0, r1
 8010b6e:	4611      	mov	r1, r2
 8010b70:	602b      	str	r3, [r5, #0]
 8010b72:	f7f6 fc7d 	bl	8007470 <_kill>
 8010b76:	1c43      	adds	r3, r0, #1
 8010b78:	d102      	bne.n	8010b80 <_kill_r+0x1c>
 8010b7a:	682b      	ldr	r3, [r5, #0]
 8010b7c:	b103      	cbz	r3, 8010b80 <_kill_r+0x1c>
 8010b7e:	6023      	str	r3, [r4, #0]
 8010b80:	bd38      	pop	{r3, r4, r5, pc}
 8010b82:	bf00      	nop
 8010b84:	200013f8 	.word	0x200013f8

08010b88 <_getpid_r>:
 8010b88:	f7f6 bc6a 	b.w	8007460 <_getpid>

08010b8c <__swhatbuf_r>:
 8010b8c:	b570      	push	{r4, r5, r6, lr}
 8010b8e:	460c      	mov	r4, r1
 8010b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b94:	2900      	cmp	r1, #0
 8010b96:	b096      	sub	sp, #88	; 0x58
 8010b98:	4615      	mov	r5, r2
 8010b9a:	461e      	mov	r6, r3
 8010b9c:	da0d      	bge.n	8010bba <__swhatbuf_r+0x2e>
 8010b9e:	89a3      	ldrh	r3, [r4, #12]
 8010ba0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010ba4:	f04f 0100 	mov.w	r1, #0
 8010ba8:	bf0c      	ite	eq
 8010baa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010bae:	2340      	movne	r3, #64	; 0x40
 8010bb0:	2000      	movs	r0, #0
 8010bb2:	6031      	str	r1, [r6, #0]
 8010bb4:	602b      	str	r3, [r5, #0]
 8010bb6:	b016      	add	sp, #88	; 0x58
 8010bb8:	bd70      	pop	{r4, r5, r6, pc}
 8010bba:	466a      	mov	r2, sp
 8010bbc:	f000 f848 	bl	8010c50 <_fstat_r>
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	dbec      	blt.n	8010b9e <__swhatbuf_r+0x12>
 8010bc4:	9901      	ldr	r1, [sp, #4]
 8010bc6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010bca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010bce:	4259      	negs	r1, r3
 8010bd0:	4159      	adcs	r1, r3
 8010bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bd6:	e7eb      	b.n	8010bb0 <__swhatbuf_r+0x24>

08010bd8 <__smakebuf_r>:
 8010bd8:	898b      	ldrh	r3, [r1, #12]
 8010bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010bdc:	079d      	lsls	r5, r3, #30
 8010bde:	4606      	mov	r6, r0
 8010be0:	460c      	mov	r4, r1
 8010be2:	d507      	bpl.n	8010bf4 <__smakebuf_r+0x1c>
 8010be4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010be8:	6023      	str	r3, [r4, #0]
 8010bea:	6123      	str	r3, [r4, #16]
 8010bec:	2301      	movs	r3, #1
 8010bee:	6163      	str	r3, [r4, #20]
 8010bf0:	b002      	add	sp, #8
 8010bf2:	bd70      	pop	{r4, r5, r6, pc}
 8010bf4:	ab01      	add	r3, sp, #4
 8010bf6:	466a      	mov	r2, sp
 8010bf8:	f7ff ffc8 	bl	8010b8c <__swhatbuf_r>
 8010bfc:	9900      	ldr	r1, [sp, #0]
 8010bfe:	4605      	mov	r5, r0
 8010c00:	4630      	mov	r0, r6
 8010c02:	f7ff f86b 	bl	800fcdc <_malloc_r>
 8010c06:	b948      	cbnz	r0, 8010c1c <__smakebuf_r+0x44>
 8010c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c0c:	059a      	lsls	r2, r3, #22
 8010c0e:	d4ef      	bmi.n	8010bf0 <__smakebuf_r+0x18>
 8010c10:	f023 0303 	bic.w	r3, r3, #3
 8010c14:	f043 0302 	orr.w	r3, r3, #2
 8010c18:	81a3      	strh	r3, [r4, #12]
 8010c1a:	e7e3      	b.n	8010be4 <__smakebuf_r+0xc>
 8010c1c:	89a3      	ldrh	r3, [r4, #12]
 8010c1e:	6020      	str	r0, [r4, #0]
 8010c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c24:	81a3      	strh	r3, [r4, #12]
 8010c26:	9b00      	ldr	r3, [sp, #0]
 8010c28:	6163      	str	r3, [r4, #20]
 8010c2a:	9b01      	ldr	r3, [sp, #4]
 8010c2c:	6120      	str	r0, [r4, #16]
 8010c2e:	b15b      	cbz	r3, 8010c48 <__smakebuf_r+0x70>
 8010c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c34:	4630      	mov	r0, r6
 8010c36:	f000 f81d 	bl	8010c74 <_isatty_r>
 8010c3a:	b128      	cbz	r0, 8010c48 <__smakebuf_r+0x70>
 8010c3c:	89a3      	ldrh	r3, [r4, #12]
 8010c3e:	f023 0303 	bic.w	r3, r3, #3
 8010c42:	f043 0301 	orr.w	r3, r3, #1
 8010c46:	81a3      	strh	r3, [r4, #12]
 8010c48:	89a3      	ldrh	r3, [r4, #12]
 8010c4a:	431d      	orrs	r5, r3
 8010c4c:	81a5      	strh	r5, [r4, #12]
 8010c4e:	e7cf      	b.n	8010bf0 <__smakebuf_r+0x18>

08010c50 <_fstat_r>:
 8010c50:	b538      	push	{r3, r4, r5, lr}
 8010c52:	4d07      	ldr	r5, [pc, #28]	; (8010c70 <_fstat_r+0x20>)
 8010c54:	2300      	movs	r3, #0
 8010c56:	4604      	mov	r4, r0
 8010c58:	4608      	mov	r0, r1
 8010c5a:	4611      	mov	r1, r2
 8010c5c:	602b      	str	r3, [r5, #0]
 8010c5e:	f7f6 fc66 	bl	800752e <_fstat>
 8010c62:	1c43      	adds	r3, r0, #1
 8010c64:	d102      	bne.n	8010c6c <_fstat_r+0x1c>
 8010c66:	682b      	ldr	r3, [r5, #0]
 8010c68:	b103      	cbz	r3, 8010c6c <_fstat_r+0x1c>
 8010c6a:	6023      	str	r3, [r4, #0]
 8010c6c:	bd38      	pop	{r3, r4, r5, pc}
 8010c6e:	bf00      	nop
 8010c70:	200013f8 	.word	0x200013f8

08010c74 <_isatty_r>:
 8010c74:	b538      	push	{r3, r4, r5, lr}
 8010c76:	4d06      	ldr	r5, [pc, #24]	; (8010c90 <_isatty_r+0x1c>)
 8010c78:	2300      	movs	r3, #0
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	4608      	mov	r0, r1
 8010c7e:	602b      	str	r3, [r5, #0]
 8010c80:	f7f6 fc65 	bl	800754e <_isatty>
 8010c84:	1c43      	adds	r3, r0, #1
 8010c86:	d102      	bne.n	8010c8e <_isatty_r+0x1a>
 8010c88:	682b      	ldr	r3, [r5, #0]
 8010c8a:	b103      	cbz	r3, 8010c8e <_isatty_r+0x1a>
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	bd38      	pop	{r3, r4, r5, pc}
 8010c90:	200013f8 	.word	0x200013f8

08010c94 <_init>:
 8010c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c96:	bf00      	nop
 8010c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c9a:	bc08      	pop	{r3}
 8010c9c:	469e      	mov	lr, r3
 8010c9e:	4770      	bx	lr

08010ca0 <_fini>:
 8010ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca2:	bf00      	nop
 8010ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ca6:	bc08      	pop	{r3}
 8010ca8:	469e      	mov	lr, r3
 8010caa:	4770      	bx	lr
