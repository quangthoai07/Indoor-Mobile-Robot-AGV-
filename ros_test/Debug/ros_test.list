
ros_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008068  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  080081f0  080081f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086a8  080086a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b0  080086b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080086bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000dd0  20000068  20000068  00020068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000e38  20000e38  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011824  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002314  00000000  00000000  000318ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a80  00000000  00000000  00033c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000812  00000000  00000000  00034698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002100b  00000000  00000000  00034eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d85e  00000000  00000000  00055eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca145  00000000  00000000  00063713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f38  00000000  00000000  0012d858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00130790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081d8 	.word	0x080081d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	080081d8 	.word	0x080081d8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	0a5a      	lsrs	r2, r3, #9
 80004e4:	490f      	ldr	r1, [pc, #60]	; (8000524 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004e6:	fba1 1202 	umull	r1, r2, r1, r2
 80004ea:	09d2      	lsrs	r2, r2, #7
 80004ec:	490e      	ldr	r1, [pc, #56]	; (8000528 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80004ee:	fb01 f202 	mul.w	r2, r1, r2
 80004f2:	1a9b      	subs	r3, r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	0a5b      	lsrs	r3, r3, #9
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	09db      	lsrs	r3, r3, #7
 8000504:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	441a      	add	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	601a      	str	r2, [r3, #0]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	00044b83 	.word	0x00044b83
 8000528:	3b9aca00 	.word	0x3b9aca00

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f004 fee6 	bl	8005300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f814 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f8ce 	bl	80006d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800053c:	f000 f8a4 	bl	8000688 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000540:	f000 f878 	bl	8000634 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000544:	f003 ff46 	bl	80043d4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000548:	f003 ff5a 	bl	8004400 <loop>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000552:	4802      	ldr	r0, [pc, #8]	; (800055c <main+0x30>)
 8000554:	f005 fe1a 	bl	800618c <HAL_GPIO_WritePin>
  {
 8000558:	e7f6      	b.n	8000548 <main+0x1c>
 800055a:	bf00      	nop
 800055c:	40020c00 	.word	0x40020c00

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f007 fcdf 	bl	8007f32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005da:	2304      	movs	r3, #4
 80005dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005de:	2304      	movs	r3, #4
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	4618      	mov	r0, r3
 80005e8:	f005 fe04 	bl	80061f4 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f2:	f000 f8d1 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2102      	movs	r1, #2
 8000612:	4618      	mov	r0, r3
 8000614:	f006 f866 	bl	80066e4 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 f8bb 	bl	8000798 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART6_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART6_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART6_UART_Init+0x4c>)
 8000640:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000644:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART6_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART6_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART6_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART6_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART6_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART6_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART6_UART_Init+0x4c>)
 800066c:	f006 fa5a 	bl	8006b24 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f88f 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000084 	.word	0x20000084
 8000684:	40011400 	.word	0x40011400

08000688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_DMA_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <MX_DMA_Init+0x4c>)
 8000698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_DMA_Init+0x4c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2039      	movs	r0, #57	; 0x39
 80006b0:	f004 ff97 	bl	80055e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80006b4:	2039      	movs	r0, #57	; 0x39
 80006b6:	f004 ffb0 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2045      	movs	r0, #69	; 0x45
 80006c0:	f004 ff8f 	bl	80055e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006c4:	2045      	movs	r0, #69	; 0x45
 80006c6:	f004 ffa8 	bl	800561a <HAL_NVIC_EnableIRQ>

}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b27      	ldr	r3, [pc, #156]	; (8000790 <MX_GPIO_Init+0xb8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <MX_GPIO_Init+0xb8>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_GPIO_Init+0xb8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_GPIO_Init+0xb8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a11      	ldr	r2, [pc, #68]	; (8000790 <MX_GPIO_Init+0xb8>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0xbc>)
 8000766:	f005 fd11 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800076a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0xbc>)
 8000784:	f005 fb66 	bl	8005e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020c00 	.word	0x40020c00

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>

080007a2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <_ZN3ros3MsgC1Ev+0x1c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	08008678 	.word	0x08008678

080007e4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
      data()
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ffe8 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3304      	adds	r3, #4
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ffcf 	bl	80007a2 <_ZN3ros4TimeC1Ev>
    {
    }
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	08008660 	.word	0x08008660

08000814 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6859      	ldr	r1, [r3, #4]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	4413      	add	r3, r2
 800082c:	b2ca      	uxtb	r2, r1
 800082e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	0a19      	lsrs	r1, r3, #8
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	3301      	adds	r3, #1
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	4413      	add	r3, r2
 800083e:	b2ca      	uxtb	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	0c19      	lsrs	r1, r3, #16
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3302      	adds	r3, #2
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	4413      	add	r3, r2
 8000850:	b2ca      	uxtb	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	0e19      	lsrs	r1, r3, #24
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3303      	adds	r3, #3
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	4413      	add	r3, r2
 8000862:	b2ca      	uxtb	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3304      	adds	r3, #4
 800086a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6899      	ldr	r1, [r3, #8]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	b2ca      	uxtb	r2, r1
 8000878:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	3301      	adds	r3, #1
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4413      	add	r3, r2
 8000888:	b2ca      	uxtb	r2, r1
 800088a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	0c19      	lsrs	r1, r3, #16
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3302      	adds	r3, #2
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	4413      	add	r3, r2
 800089a:	b2ca      	uxtb	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	0e19      	lsrs	r1, r3, #24
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3303      	adds	r3, #3
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	b2ca      	uxtb	r2, r1
 80008ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	3304      	adds	r3, #4
 80008b4:	60fb      	str	r3, [r7, #12]
      return offset;
 80008b6:	68fb      	ldr	r3, [r7, #12]
    }
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	6839      	ldr	r1, [r7, #0]
 80008ea:	440b      	add	r3, r1
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	431a      	orrs	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3302      	adds	r3, #2
 80008fe:	6839      	ldr	r1, [r7, #0]
 8000900:	440b      	add	r3, r1
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	041b      	lsls	r3, r3, #16
 8000906:	431a      	orrs	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3303      	adds	r3, #3
 8000914:	6839      	ldr	r1, [r7, #0]
 8000916:	440b      	add	r3, r1
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	061b      	lsls	r3, r3, #24
 800091c:	431a      	orrs	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3304      	adds	r3, #4
 8000926:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	4413      	add	r3, r2
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	6839      	ldr	r1, [r7, #0]
 8000940:	440b      	add	r3, r1
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	431a      	orrs	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3302      	adds	r3, #2
 8000954:	6839      	ldr	r1, [r7, #0]
 8000956:	440b      	add	r3, r1
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	041b      	lsls	r3, r3, #16
 800095c:	431a      	orrs	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	3303      	adds	r3, #3
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	440b      	add	r3, r1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	061b      	lsls	r3, r3, #24
 8000972:	431a      	orrs	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3304      	adds	r3, #4
 800097c:	60fb      	str	r3, [r7, #12]
     return offset;
 800097e:	68fb      	ldr	r3, [r7, #12]
    }
 8000980:	4618      	mov	r0, r3
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	080081f0 	.word	0x080081f0

080009a8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	08008200 	.word	0x08008200

080009c4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fef8 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80009e4:	609a      	str	r2, [r3, #8]
      message_type(""),
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80009ea:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80009f0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
    {
    }
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	08008648 	.word	0x08008648
 8000a08:	08008224 	.word	0x08008224

08000a0c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	8899      	ldrh	r1, [r3, #4]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	b2ca      	uxtb	r2, r1
 8000a26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	889b      	ldrh	r3, [r3, #4]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	b299      	uxth	r1, r3
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	3301      	adds	r3, #1
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	b2ca      	uxtb	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fbbe 	bl	80001c8 <strlen>
 8000a4c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	69b9      	ldr	r1, [r7, #24]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 fcec 	bl	8004434 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	18d0      	adds	r0, r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f007 fa94 	bl	8007f9c <memcpy>
      offset += length_topic_name;
 8000a74:	69fa      	ldr	r2, [r7, #28]
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4413      	add	r3, r2
 8000a7a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fba1 	bl	80001c8 <strlen>
 8000a86:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6979      	ldr	r1, [r7, #20]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 fccf 	bl	8004434 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	18d0      	adds	r0, r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f007 fa77 	bl	8007f9c <memcpy>
      offset += length_message_type;
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fb84 	bl	80001c8 <strlen>
 8000ac0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	6939      	ldr	r1, [r7, #16]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 fcb2 	bl	8004434 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	18d0      	adds	r0, r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f007 fa5a 	bl	8007f9c <memcpy>
      offset += length_md5sum;
 8000ae8:	69fa      	ldr	r2, [r7, #28]
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	4413      	add	r3, r2
 8000aee:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000af6:	68f9      	ldr	r1, [r7, #12]
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	b2ca      	uxtb	r2, r1
 8000b00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	0a19      	lsrs	r1, r3, #8
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	0c19      	lsrs	r1, r3, #16
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3302      	adds	r3, #2
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	0e19      	lsrs	r1, r3, #24
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3303      	adds	r3, #3
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2ca      	uxtb	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	61fb      	str	r3, [r7, #28]
      return offset;
 8000b38:	69fb      	ldr	r3, [r7, #28]
    }
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b08a      	sub	sp, #40	; 0x28
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	889b      	ldrh	r3, [r3, #4]
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	3301      	adds	r3, #1
 8000b68:	6839      	ldr	r1, [r7, #0]
 8000b6a:	440b      	add	r3, r1
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	441a      	add	r2, r3
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 fc6f 	bl	8004472 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	3304      	adds	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9e:	e00b      	b.n	8000bb8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	441a      	add	r2, r3
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	440b      	add	r3, r1
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d3ed      	bcc.n	8000ba0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	4413      	add	r3, r2
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	441a      	add	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	441a      	add	r2, r3
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fc3c 	bl	8004472 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	623b      	str	r3, [r7, #32]
 8000c04:	e00b      	b.n	8000c1e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	441a      	add	r2, r3
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6839      	ldr	r1, [r7, #0]
 8000c12:	440b      	add	r3, r1
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4413      	add	r3, r2
 8000c24:	6a3a      	ldr	r2, [r7, #32]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3ed      	bcc.n	8000c06 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4413      	add	r3, r2
 8000c30:	3b01      	subs	r3, #1
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	4413      	add	r3, r2
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	441a      	add	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	441a      	add	r2, r3
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 fc09 	bl	8004472 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	3304      	adds	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	e00b      	b.n	8000c84 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	441a      	add	r2, r3
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	6839      	ldr	r1, [r7, #0]
 8000c78:	440b      	add	r3, r1
 8000c7a:	7812      	ldrb	r2, [r2, #0]
 8000c7c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4413      	add	r3, r2
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3ed      	bcc.n	8000c6c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4413      	add	r3, r2
 8000c96:	3b01      	subs	r3, #1
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	441a      	add	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	440a      	add	r2, r1
 8000cc0:	7812      	ldrb	r2, [r2, #0]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	6839      	ldr	r1, [r7, #0]
 8000cce:	440b      	add	r3, r1
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	3302      	adds	r3, #2
 8000cde:	6839      	ldr	r1, [r7, #0]
 8000ce0:	440b      	add	r3, r1
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	041b      	lsls	r3, r3, #16
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	3303      	adds	r3, #3
 8000cf0:	6839      	ldr	r1, [r7, #0]
 8000cf2:	440b      	add	r3, r1
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	061b      	lsls	r3, r3, #24
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	3304      	adds	r3, #4
 8000d06:	61bb      	str	r3, [r7, #24]
     return offset;
 8000d08:	69bb      	ldr	r3, [r7, #24]
    }
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	08008228 	.word	0x08008228

08000d30 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	08008244 	.word	0x08008244

08000d4c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fd34 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	601a      	str	r2, [r3, #0]
      level(0),
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	711a      	strb	r2, [r3, #4]
      msg("")
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000d6c:	609a      	str	r2, [r3, #8]
    {
    }
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	08008630 	.word	0x08008630
 8000d7c:	08008224 	.word	0x08008224

08000d80 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	7912      	ldrb	r2, [r2, #4]
 8000d98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa0f 	bl	80001c8 <strlen>
 8000daa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 fb3d 	bl	8004434 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	18d0      	adds	r0, r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f007 f8e5 	bl	8007f9c <memcpy>
      offset += length_msg;
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
      return offset;
 8000dda:	68fb      	ldr	r3, [r7, #12]
    }
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	3301      	adds	r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	441a      	add	r2, r3
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fb2e 	bl	8004472 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e00b      	b.n	8000e3a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	441a      	add	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6839      	ldr	r1, [r7, #0]
 8000e2e:	440b      	add	r3, r1
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d3ed      	bcc.n	8000e22 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	441a      	add	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
     return offset;
 8000e6a:	693b      	ldr	r3, [r7, #16]
    }
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	08008268 	.word	0x08008268

08000e90 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	0800827c 	.word	0x0800827c

08000eac <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fc84 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 8000ebc:	4a11      	ldr	r2, [pc, #68]	; (8000f04 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	08008618 	.word	0x08008618

08000f08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6859      	ldr	r1, [r3, #4]
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2ca      	uxtb	r2, r1
 8000f22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	0a19      	lsrs	r1, r3, #8
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	b2ca      	uxtb	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	0c19      	lsrs	r1, r3, #16
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	3302      	adds	r3, #2
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	b2ca      	uxtb	r2, r1
 8000f46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	0e19      	lsrs	r1, r3, #24
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	3303      	adds	r3, #3
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	b2ca      	uxtb	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	e02a      	b.n	8000fbc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000f74:	6939      	ldr	r1, [r7, #16]
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2ca      	uxtb	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	0a19      	lsrs	r1, r3, #8
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	3301      	adds	r3, #1
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b2ca      	uxtb	r2, r1
 8000f8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	0c19      	lsrs	r1, r3, #16
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	3302      	adds	r3, #2
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b2ca      	uxtb	r2, r1
 8000f9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	0e19      	lsrs	r1, r3, #24
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	3303      	adds	r3, #3
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	b2ca      	uxtb	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	6a3a      	ldr	r2, [r7, #32]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d3cf      	bcc.n	8000f66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6919      	ldr	r1, [r3, #16]
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	b2ca      	uxtb	r2, r1
 8000fd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	0a19      	lsrs	r1, r3, #8
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	3301      	adds	r3, #1
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2ca      	uxtb	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	0c19      	lsrs	r1, r3, #16
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	3302      	adds	r3, #2
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b2ca      	uxtb	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	0e19      	lsrs	r1, r3, #24
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	3303      	adds	r3, #3
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	3304      	adds	r3, #4
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	e02a      	b.n	800106c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699a      	ldr	r2, [r3, #24]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001024:	68f9      	ldr	r1, [r7, #12]
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4413      	add	r3, r2
 800102c:	b2ca      	uxtb	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	0a19      	lsrs	r1, r3, #8
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	3301      	adds	r3, #1
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	b2ca      	uxtb	r2, r1
 800103e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	0c19      	lsrs	r1, r3, #16
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	3302      	adds	r3, #2
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	4413      	add	r3, r2
 800104c:	b2ca      	uxtb	r2, r1
 800104e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	0e19      	lsrs	r1, r3, #24
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	3303      	adds	r3, #3
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	b2ca      	uxtb	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	3304      	adds	r3, #4
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	429a      	cmp	r2, r3
 8001074:	d3cf      	bcc.n	8001016 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69d9      	ldr	r1, [r3, #28]
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	b2ca      	uxtb	r2, r1
 8001082:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	0a19      	lsrs	r1, r3, #8
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	3301      	adds	r3, #1
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	4413      	add	r3, r2
 8001092:	b2ca      	uxtb	r2, r1
 8001094:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	0c19      	lsrs	r1, r3, #16
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	3302      	adds	r3, #2
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	b2ca      	uxtb	r2, r1
 80010a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	0e19      	lsrs	r1, r3, #24
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	3303      	adds	r3, #3
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	b2ca      	uxtb	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	3304      	adds	r3, #4
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	e027      	b.n	8001116 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f878 	bl	80001c8 <strlen>
 80010d8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	6979      	ldr	r1, [r7, #20]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 f9a6 	bl	8004434 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	3304      	adds	r3, #4
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	18d0      	adds	r0, r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	4619      	mov	r1, r3
 8001104:	f006 ff4a 	bl	8007f9c <memcpy>
      offset += length_stringsi;
 8001108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	4413      	add	r3, r2
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	3301      	adds	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	429a      	cmp	r2, r3
 800111e:	d3d2      	bcc.n	80010c6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001122:	4618      	mov	r0, r3
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800112a:	b580      	push	{r7, lr}
 800112c:	b08e      	sub	sp, #56	; 0x38
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001144:	3301      	adds	r3, #1
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	6a3a      	ldr	r2, [r7, #32]
 8001150:	4313      	orrs	r3, r2
 8001152:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001156:	3302      	adds	r3, #2
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	6a3a      	ldr	r2, [r7, #32]
 8001162:	4313      	orrs	r3, r2
 8001164:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001168:	3303      	adds	r3, #3
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	061b      	lsls	r3, r3, #24
 8001172:	6a3a      	ldr	r2, [r7, #32]
 8001174:	4313      	orrs	r3, r2
 8001176:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117a:	3304      	adds	r3, #4
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	6a3a      	ldr	r2, [r7, #32]
 8001184:	429a      	cmp	r2, r3
 8001186:	d90a      	bls.n	800119e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4619      	mov	r1, r3
 8001192:	4610      	mov	r0, r2
 8001194:	f006 fe96 	bl	8007ec4 <realloc>
 8001198:	4602      	mov	r2, r0
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a3a      	ldr	r2, [r7, #32]
 80011a2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
 80011a8:	e035      	b.n	8001216 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	440a      	add	r2, r1
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c0:	3301      	adds	r3, #1
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	440b      	add	r3, r1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	4313      	orrs	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d2:	3302      	adds	r3, #2
 80011d4:	6839      	ldr	r1, [r7, #0]
 80011d6:	440b      	add	r3, r1
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	041b      	lsls	r3, r3, #16
 80011dc:	4313      	orrs	r3, r2
 80011de:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e4:	3303      	adds	r3, #3
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	440b      	add	r3, r1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	061b      	lsls	r3, r3, #24
 80011ee:	4313      	orrs	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80011f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fa:	3304      	adds	r3, #4
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001212:	3301      	adds	r3, #1
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800121c:	429a      	cmp	r2, r3
 800121e:	d3c4      	bcc.n	80011aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800122a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800122c:	3301      	adds	r3, #1
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	4313      	orrs	r3, r2
 800123a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800123c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123e:	3302      	adds	r3, #2
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	041b      	lsls	r3, r3, #16
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	4313      	orrs	r3, r2
 800124c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001250:	3303      	adds	r3, #3
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	061b      	lsls	r3, r3, #24
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	4313      	orrs	r3, r2
 800125e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001262:	3304      	adds	r3, #4
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	429a      	cmp	r2, r3
 800126e:	d90a      	bls.n	8001286 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f006 fe22 	bl	8007ec4 <realloc>
 8001280:	4602      	mov	r2, r0
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001290:	e035      	b.n	80012fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800129a:	6839      	ldr	r1, [r7, #0]
 800129c:	440a      	add	r2, r1
 800129e:	7812      	ldrb	r2, [r2, #0]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a8:	3301      	adds	r3, #1
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	440b      	add	r3, r1
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ba:	3302      	adds	r3, #2
 80012bc:	6839      	ldr	r1, [r7, #0]
 80012be:	440b      	add	r3, r1
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	041b      	lsls	r3, r3, #16
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	3303      	adds	r3, #3
 80012ce:	6839      	ldr	r1, [r7, #0]
 80012d0:	440b      	add	r3, r1
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	061b      	lsls	r3, r3, #24
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80012e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e2:	3304      	adds	r3, #4
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	3214      	adds	r2, #20
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80012f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fa:	3301      	adds	r3, #1
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001304:	429a      	cmp	r2, r3
 8001306:	d3c4      	bcc.n	8001292 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001314:	3301      	adds	r3, #1
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	4413      	add	r3, r2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001326:	3302      	adds	r3, #2
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	041b      	lsls	r3, r3, #16
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	3303      	adds	r3, #3
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	3304      	adds	r3, #4
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	429a      	cmp	r2, r3
 8001356:	d90a      	bls.n	800136e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f006 fdae 	bl	8007ec4 <realloc>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
 8001378:	e03e      	b.n	80013f8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800137a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	441a      	add	r2, r3
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f003 f873 	bl	8004472 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800138c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138e:	3304      	adds	r3, #4
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
 8001396:	e00b      	b.n	80013b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	441a      	add	r2, r3
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	3b01      	subs	r3, #1
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	440b      	add	r3, r1
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	3301      	adds	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4413      	add	r3, r2
 80013b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3ed      	bcc.n	8001398 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80013bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	3b01      	subs	r3, #1
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80013cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ce:	3b01      	subs	r3, #1
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	441a      	add	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80013d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	3220      	adds	r2, #32
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	3301      	adds	r3, #1
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013fe:	429a      	cmp	r2, r3
 8001400:	d3bb      	bcc.n	800137a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001404:	4618      	mov	r0, r3
 8001406:	3738      	adds	r7, #56	; 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	080084dc 	.word	0x080084dc

08001428 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	080082a0 	.word	0x080082a0

08001444 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68d8      	ldr	r0, [r3, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6891      	ldr	r1, [r2, #8]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	4798      	blx	r3
 8001490:	4603      	mov	r3, r0
  };
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
  }
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80014c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
      huart(&huart6), rind(0), twind(0), tfind(0){
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <_ZN13STM32HardwareC1Ev+0x34>)
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000084 	.word	0x20000084

08001510 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f804 	bl	8001526 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153a:	4619      	mov	r1, r3
 800153c:	f005 fbb2 	bl	8006ca4 <HAL_UART_Receive_DMA>
    }
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ffa8 	bl	80014b2 <_ZN13STM32Hardware10getRdmaIndEv>
 8001562:	4603      	mov	r3, r0
 8001564:	429c      	cmp	r4, r3
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d012      	beq.n	8001598 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001578:	1c59      	adds	r1, r3, #1
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	791b      	ldrb	r3, [r3, #4]
 8001586:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800158e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001598:	68fb      	ldr	r3, [r7, #12]
    }
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}
	...

080015a4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b20      	cmp	r3, #32
 80015b8:	d108      	bne.n	80015cc <_ZN13STM32Hardware5flushEv+0x28>
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <_ZN13STM32Hardware5flushEv+0xe4>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	f083 0301 	eor.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <_ZN13STM32Hardware5flushEv+0x28>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <_ZN13STM32Hardware5flushEv+0x2a>
 80015cc:	2300      	movs	r3, #0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d055      	beq.n	800167e <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 80015d2:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <_ZN13STM32Hardware5flushEv+0xe4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d047      	beq.n	8001678 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d217      	bcs.n	800162c <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001602:	b29a      	uxth	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800160a:	b29b      	uxth	r3, r3
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800161a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	89fa      	ldrh	r2, [r7, #14]
 8001624:	4619      	mov	r1, r3
 8001626:	f005 facd 	bl	8006bc4 <HAL_UART_Transmit_DMA>
 800162a:	e01f      	b.n	800166c <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001632:	b29b      	uxth	r3, r3
 8001634:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001638:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001644:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4413      	add	r3, r2
 800164c:	89fa      	ldrh	r2, [r7, #14]
 800164e:	4619      	mov	r1, r3
 8001650:	f005 fab8 	bl	8006bc4 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind); //lỗi ở đây, sửa &(tbuf) thành tbuf
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f503 7102 	add.w	r1, r3, #520	; 0x208
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001664:	b29b      	uxth	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	f005 faac 	bl	8006bc4 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <_ZN13STM32Hardware5flushEv+0xe4>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
      }
    }
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000018c 	.word	0x2000018c

0800168c <_ZN13STM32Hardware5writeEPKhi>:

    void write(const uint8_t* data, int length){  //lỗi ở đây, sửa uint8_t* thành const uint8_t
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
      int n = length;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a2:	bfa8      	it	ge
 80016a4:	f44f 7300 	movge.w	r3, #512	; 0x200
 80016a8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016b0:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4293      	cmp	r3, r2
 80016b8:	bf28      	it	cs
 80016ba:	4613      	movcs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f006 fc63 	bl	8007f9c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4413      	add	r3, r2
 80016e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d00b      	beq.n	800170a <_ZN13STM32Hardware5writeEPKhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	18d1      	adds	r1, r2, r3
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	461a      	mov	r2, r3
 8001706:	f006 fc49 	bl	8007f9c <memcpy>
      }

      flush();
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff ff4a 	bl	80015a4 <_ZN13STM32Hardware5flushEv>
    }
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	f003 fe54 	bl	80053cc <HAL_GetTick>
 8001724:	4603      	mov	r3, r0
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
      data(0)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f842 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <_ZN8std_msgs5Int32C1Ev+0x28>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
    {
    }
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	080085d4 	.word	0x080085d4

0800175c <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	4413      	add	r3, r2
 8001778:	b2ca      	uxtb	r2, r1
 800177a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	0a19      	lsrs	r1, r3, #8
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	b2ca      	uxtb	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	0c19      	lsrs	r1, r3, #16
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3302      	adds	r3, #2
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	b2ca      	uxtb	r2, r1
 800179a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	0e19      	lsrs	r1, r3, #24
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3303      	adds	r3, #3
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	b2ca      	uxtb	r2, r1
 80017aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3304      	adds	r3, #4
 80017b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80017b2:	68fb      	ldr	r3, [r7, #12]
    }
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	6839      	ldr	r1, [r7, #0]
 80017d8:	440a      	add	r2, r1
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	440b      	add	r3, r1
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3302      	adds	r3, #2
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	440b      	add	r3, r1
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	041b      	lsls	r3, r3, #16
 8001800:	4313      	orrs	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3303      	adds	r3, #3
 800180a:	6839      	ldr	r1, [r7, #0]
 800180c:	440b      	add	r3, r1
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	061b      	lsls	r3, r3, #24
 8001812:	4313      	orrs	r3, r2
 8001814:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3304      	adds	r3, #4
 8001820:	60fb      	str	r3, [r7, #12]
     return offset;
 8001822:	68fb      	ldr	r3, [r7, #12]
    }
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_ZN8std_msgs5Int327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int32"; };
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	080082c4 	.word	0x080082c4

0800184c <_ZN8std_msgs5Int326getMD5Ev>:
    virtual const char * getMD5() override { return "da5909fbe378aeaf85e547e830cc1bb7"; };
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	080082d4 	.word	0x080082d4

08001868 <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe ffa6 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 8001878:	4a03      	ldr	r2, [pc, #12]	; (8001888 <_ZN8std_msgs5EmptyC1Ev+0x20>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	601a      	str	r2, [r3, #0]
    }
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	080085bc 	.word	0x080085bc

0800188c <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
      return offset;
 800189a:	68fb      	ldr	r3, [r7, #12]
    }
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80018b6:	68fb      	ldr	r3, [r7, #12]
    }
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_ZN8std_msgs5Empty7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Empty"; };
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	080082f8 	.word	0x080082f8

080018e0 <_ZN8std_msgs5Empty6getMD5Ev>:
    virtual const char * getMD5() override { return "d41d8cd98f00b204e9800998ecf8427e"; };
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	08008308 	.word	0x08008308

080018fc <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
      data("")
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe ff5c 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 800190c:	4a05      	ldr	r2, [pc, #20]	; (8001924 <_ZN8std_msgs6StringC1Ev+0x28>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001916:	605a      	str	r2, [r3, #4]
    {
    }
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	080085a4 	.word	0x080085a4
 8001928:	08008224 	.word	0x08008224

0800192c <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fc42 	bl	80001c8 <strlen>
 8001944:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	4413      	add	r3, r2
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fd70 	bl	8004434 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3304      	adds	r3, #4
 8001958:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	18d0      	adds	r0, r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	4619      	mov	r1, r3
 8001968:	f006 fb18 	bl	8007f9c <memcpy>
      offset += length_data;
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4413      	add	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
      return offset;
 8001974:	68fb      	ldr	r3, [r7, #12]
    }
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	441a      	add	r2, r3
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fd6a 	bl	8004472 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	3304      	adds	r3, #4
 80019a2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00b      	b.n	80019c2 <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	441a      	add	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	440b      	add	r3, r1
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d3ed      	bcc.n	80019aa <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	3b01      	subs	r3, #1
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	441a      	add	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
     return offset;
 80019f2:	693b      	ldr	r3, [r7, #16]
    }
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	0800832c 	.word	0x0800832c

08001a18 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	0800833c 	.word	0x0800833c

08001a34 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fec0 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	601a      	str	r2, [r3, #0]
      x(0),
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	0800858c 	.word	0x0800858c

08001a84 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001a84:	b480      	push	{r7}
 8001a86:	b08b      	sub	sp, #44	; 0x2c
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a98:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001a9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aa2:	6838      	ldr	r0, [r7, #0]
 8001aa4:	4401      	add	r1, r0
 8001aa6:	b2d3      	uxtb	r3, r2
 8001aa8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001aaa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	0a02      	lsrs	r2, r0, #8
 8001ab8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001abc:	0a0b      	lsrs	r3, r1, #8
 8001abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ac0:	3101      	adds	r1, #1
 8001ac2:	6838      	ldr	r0, [r7, #0]
 8001ac4:	4401      	add	r1, r0
 8001ac6:	b2d3      	uxtb	r3, r2
 8001ac8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001aca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	0c02      	lsrs	r2, r0, #16
 8001ad8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001adc:	0c0b      	lsrs	r3, r1, #16
 8001ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae0:	3102      	adds	r1, #2
 8001ae2:	6838      	ldr	r0, [r7, #0]
 8001ae4:	4401      	add	r1, r0
 8001ae6:	b2d3      	uxtb	r3, r2
 8001ae8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8001aea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	0e02      	lsrs	r2, r0, #24
 8001af8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001afc:	0e0b      	lsrs	r3, r1, #24
 8001afe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b00:	3103      	adds	r1, #3
 8001b02:	6838      	ldr	r0, [r7, #0]
 8001b04:	4401      	add	r1, r0
 8001b06:	b2d3      	uxtb	r3, r2
 8001b08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8001b0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	000a      	movs	r2, r1
 8001b18:	2300      	movs	r3, #0
 8001b1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b1c:	3104      	adds	r1, #4
 8001b1e:	6838      	ldr	r0, [r7, #0]
 8001b20:	4401      	add	r1, r0
 8001b22:	b2d3      	uxtb	r3, r2
 8001b24:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8001b26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	0a0a      	lsrs	r2, r1, #8
 8001b34:	2300      	movs	r3, #0
 8001b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b38:	3105      	adds	r1, #5
 8001b3a:	6838      	ldr	r0, [r7, #0]
 8001b3c:	4401      	add	r1, r0
 8001b3e:	b2d3      	uxtb	r3, r2
 8001b40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001b42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	0c0a      	lsrs	r2, r1, #16
 8001b50:	2300      	movs	r3, #0
 8001b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b54:	3106      	adds	r1, #6
 8001b56:	6838      	ldr	r0, [r7, #0]
 8001b58:	4401      	add	r1, r0
 8001b5a:	b2d3      	uxtb	r3, r2
 8001b5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8001b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	0e0a      	lsrs	r2, r1, #24
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b70:	3107      	adds	r1, #7
 8001b72:	6838      	ldr	r0, [r7, #0]
 8001b74:	4401      	add	r1, r0
 8001b76:	b2d3      	uxtb	r3, r2
 8001b78:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b86:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8001b8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b90:	6838      	ldr	r0, [r7, #0]
 8001b92:	4401      	add	r1, r0
 8001b94:	b2d3      	uxtb	r3, r2
 8001b96:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001b98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	0a02      	lsrs	r2, r0, #8
 8001ba6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001baa:	0a0b      	lsrs	r3, r1, #8
 8001bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bae:	3101      	adds	r1, #1
 8001bb0:	6838      	ldr	r0, [r7, #0]
 8001bb2:	4401      	add	r1, r0
 8001bb4:	b2d3      	uxtb	r3, r2
 8001bb6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8001bb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	0c02      	lsrs	r2, r0, #16
 8001bc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001bca:	0c0b      	lsrs	r3, r1, #16
 8001bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bce:	3102      	adds	r1, #2
 8001bd0:	6838      	ldr	r0, [r7, #0]
 8001bd2:	4401      	add	r1, r0
 8001bd4:	b2d3      	uxtb	r3, r2
 8001bd6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001bd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	0e02      	lsrs	r2, r0, #24
 8001be6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001bea:	0e0b      	lsrs	r3, r1, #24
 8001bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bee:	3103      	adds	r1, #3
 8001bf0:	6838      	ldr	r0, [r7, #0]
 8001bf2:	4401      	add	r1, r0
 8001bf4:	b2d3      	uxtb	r3, r2
 8001bf6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001bf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	000a      	movs	r2, r1
 8001c06:	2300      	movs	r3, #0
 8001c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c0a:	3104      	adds	r1, #4
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	4401      	add	r1, r0
 8001c10:	b2d3      	uxtb	r3, r2
 8001c12:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001c14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	0a0a      	lsrs	r2, r1, #8
 8001c22:	2300      	movs	r3, #0
 8001c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c26:	3105      	adds	r1, #5
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	4401      	add	r1, r0
 8001c2c:	b2d3      	uxtb	r3, r2
 8001c2e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001c30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	0c0a      	lsrs	r2, r1, #16
 8001c3e:	2300      	movs	r3, #0
 8001c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c42:	3106      	adds	r1, #6
 8001c44:	6838      	ldr	r0, [r7, #0]
 8001c46:	4401      	add	r1, r0
 8001c48:	b2d3      	uxtb	r3, r2
 8001c4a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8001c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	0e0a      	lsrs	r2, r1, #24
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c5e:	3107      	adds	r1, #7
 8001c60:	6838      	ldr	r0, [r7, #0]
 8001c62:	4401      	add	r1, r0
 8001c64:	b2d3      	uxtb	r3, r2
 8001c66:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c74:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7e:	6838      	ldr	r0, [r7, #0]
 8001c80:	4401      	add	r1, r0
 8001c82:	b2d3      	uxtb	r3, r2
 8001c84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001c86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	0a02      	lsrs	r2, r0, #8
 8001c94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001c98:	0a0b      	lsrs	r3, r1, #8
 8001c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c9c:	3101      	adds	r1, #1
 8001c9e:	6838      	ldr	r0, [r7, #0]
 8001ca0:	4401      	add	r1, r0
 8001ca2:	b2d3      	uxtb	r3, r2
 8001ca4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8001ca6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	0c02      	lsrs	r2, r0, #16
 8001cb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001cb8:	0c0b      	lsrs	r3, r1, #16
 8001cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cbc:	3102      	adds	r1, #2
 8001cbe:	6838      	ldr	r0, [r7, #0]
 8001cc0:	4401      	add	r1, r0
 8001cc2:	b2d3      	uxtb	r3, r2
 8001cc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8001cc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	0e02      	lsrs	r2, r0, #24
 8001cd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cd8:	0e0b      	lsrs	r3, r1, #24
 8001cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cdc:	3103      	adds	r1, #3
 8001cde:	6838      	ldr	r0, [r7, #0]
 8001ce0:	4401      	add	r1, r0
 8001ce2:	b2d3      	uxtb	r3, r2
 8001ce4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8001ce6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	000a      	movs	r2, r1
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf8:	3104      	adds	r1, #4
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	4401      	add	r1, r0
 8001cfe:	b2d3      	uxtb	r3, r2
 8001d00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8001d02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	0a0a      	lsrs	r2, r1, #8
 8001d10:	2300      	movs	r3, #0
 8001d12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d14:	3105      	adds	r1, #5
 8001d16:	6838      	ldr	r0, [r7, #0]
 8001d18:	4401      	add	r1, r0
 8001d1a:	b2d3      	uxtb	r3, r2
 8001d1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8001d1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	0c0a      	lsrs	r2, r1, #16
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d30:	3106      	adds	r1, #6
 8001d32:	6838      	ldr	r0, [r7, #0]
 8001d34:	4401      	add	r1, r0
 8001d36:	b2d3      	uxtb	r3, r2
 8001d38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8001d3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	0e0a      	lsrs	r2, r1, #24
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d4c:	3107      	adds	r1, #7
 8001d4e:	6838      	ldr	r0, [r7, #0]
 8001d50:	4401      	add	r1, r0
 8001d52:	b2d3      	uxtb	r3, r2
 8001d54:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	3308      	adds	r3, #8
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d5e:	4618      	mov	r0, r3
 8001d60:	372c      	adds	r7, #44	; 0x2c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001d6a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d6e:	b0eb      	sub	sp, #428	; 0x1ac
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8001d76:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d8c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001d90:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001d94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2200      	movs	r2, #0
 8001da0:	461c      	mov	r4, r3
 8001da2:	4615      	mov	r5, r2
 8001da4:	ea40 0804 	orr.w	r8, r0, r4
 8001da8:	ea41 0905 	orr.w	r9, r1, r5
 8001dac:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001db0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001db4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	469a      	mov	sl, r3
 8001dc8:	4693      	mov	fp, r2
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8001dd6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8001dda:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8001dde:	ea40 0402 	orr.w	r4, r0, r2
 8001de2:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8001de6:	430b      	orrs	r3, r1
 8001de8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001dec:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8001df0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001df4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001df8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001dfc:	1c9a      	adds	r2, r3, #2
 8001dfe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001e0e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8001e1e:	464c      	mov	r4, r9
 8001e20:	0423      	lsls	r3, r4, #16
 8001e22:	4644      	mov	r4, r8
 8001e24:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001e28:	4644      	mov	r4, r8
 8001e2a:	0422      	lsls	r2, r4, #16
 8001e2c:	ea40 0402 	orr.w	r4, r0, r2
 8001e30:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8001e34:	430b      	orrs	r3, r1
 8001e36:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001e3a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8001e3e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e42:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001e46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e4a:	1cda      	adds	r2, r3, #3
 8001e4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e50:	4413      	add	r3, r2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2200      	movs	r2, #0
 8001e58:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001e5c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001e60:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001e64:	4623      	mov	r3, r4
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001e6c:	4623      	mov	r3, r4
 8001e6e:	061b      	lsls	r3, r3, #24
 8001e70:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001e74:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8001e78:	4623      	mov	r3, r4
 8001e7a:	4303      	orrs	r3, r0
 8001e7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e80:	462b      	mov	r3, r5
 8001e82:	430b      	orrs	r3, r1
 8001e84:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e88:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8001e8c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001e90:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001e94:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e98:	1d1a      	adds	r2, r3, #4
 8001e9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001eaa:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8001eba:	0023      	movs	r3, r4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	ea40 0402 	orr.w	r4, r0, r2
 8001ec2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8001ec6:	430b      	orrs	r3, r1
 8001ec8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001ecc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8001ed0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001ed4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001ed8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001edc:	1d5a      	adds	r2, r3, #5
 8001ede:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001eee:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8001efe:	0223      	lsls	r3, r4, #8
 8001f00:	2200      	movs	r2, #0
 8001f02:	ea40 0402 	orr.w	r4, r0, r2
 8001f06:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001f10:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8001f14:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001f18:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001f1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f20:	1d9a      	adds	r2, r3, #6
 8001f22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001f32:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8001f42:	0423      	lsls	r3, r4, #16
 8001f44:	2200      	movs	r2, #0
 8001f46:	ea40 0402 	orr.w	r4, r0, r2
 8001f4a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f54:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8001f58:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001f5c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001f60:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f64:	1dda      	adds	r2, r3, #7
 8001f66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f6a:	4413      	add	r3, r2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2200      	movs	r2, #0
 8001f72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001f76:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8001f86:	0623      	lsls	r3, r4, #24
 8001f88:	2200      	movs	r2, #0
 8001f8a:	ea40 0402 	orr.w	r4, r0, r2
 8001f8e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8001f92:	430b      	orrs	r3, r1
 8001f94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f98:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8001f9c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8001fa0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001fa4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001fa8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8001fac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001fb0:	3308      	adds	r3, #8
 8001fb2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fc2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001fc6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001fca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001fce:	4413      	add	r3, r2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001fda:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001fde:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	4303      	orrs	r3, r0
 8001fe6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001fea:	462b      	mov	r3, r5
 8001fec:	430b      	orrs	r3, r1
 8001fee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ff2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8001ff6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ffa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001ffe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2200      	movs	r2, #0
 8002010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002014:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002024:	464c      	mov	r4, r9
 8002026:	0223      	lsls	r3, r4, #8
 8002028:	4644      	mov	r4, r8
 800202a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800202e:	4644      	mov	r4, r8
 8002030:	0222      	lsls	r2, r4, #8
 8002032:	ea40 0402 	orr.w	r4, r0, r2
 8002036:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800203a:	430b      	orrs	r3, r1
 800203c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002040:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002044:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002048:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800204c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002050:	1c9a      	adds	r2, r3, #2
 8002052:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2200      	movs	r2, #0
 800205e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002062:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002072:	464c      	mov	r4, r9
 8002074:	0423      	lsls	r3, r4, #16
 8002076:	4644      	mov	r4, r8
 8002078:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800207c:	4644      	mov	r4, r8
 800207e:	0422      	lsls	r2, r4, #16
 8002080:	ea40 0402 	orr.w	r4, r0, r2
 8002084:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002088:	430b      	orrs	r3, r1
 800208a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800208e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002092:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002096:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800209a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800209e:	1cda      	adds	r2, r3, #3
 80020a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80020b0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80020b4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80020b8:	4623      	mov	r3, r4
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80020c0:	4623      	mov	r3, r4
 80020c2:	061b      	lsls	r3, r3, #24
 80020c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020c8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80020cc:	4623      	mov	r3, r4
 80020ce:	4303      	orrs	r3, r0
 80020d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020d4:	462b      	mov	r3, r5
 80020d6:	430b      	orrs	r3, r1
 80020d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020dc:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80020e0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80020e4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80020e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020ec:	1d1a      	adds	r2, r3, #4
 80020ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2200      	movs	r2, #0
 80020fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020fe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800210e:	0023      	movs	r3, r4
 8002110:	2200      	movs	r2, #0
 8002112:	ea40 0402 	orr.w	r4, r0, r2
 8002116:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800211a:	430b      	orrs	r3, r1
 800211c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002120:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002124:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002128:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800212c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002130:	1d5a      	adds	r2, r3, #5
 8002132:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2200      	movs	r2, #0
 800213e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002142:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002152:	0223      	lsls	r3, r4, #8
 8002154:	2200      	movs	r2, #0
 8002156:	ea40 0402 	orr.w	r4, r0, r2
 800215a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800215e:	430b      	orrs	r3, r1
 8002160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002164:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002168:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800216c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002170:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002174:	1d9a      	adds	r2, r3, #6
 8002176:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2200      	movs	r2, #0
 8002182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002186:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002196:	0423      	lsls	r3, r4, #16
 8002198:	2200      	movs	r2, #0
 800219a:	ea40 0402 	orr.w	r4, r0, r2
 800219e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80021a2:	430b      	orrs	r3, r1
 80021a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021a8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80021ac:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80021b0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80021b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021b8:	1dda      	adds	r2, r3, #7
 80021ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2200      	movs	r2, #0
 80021c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80021da:	0623      	lsls	r3, r4, #24
 80021dc:	2200      	movs	r2, #0
 80021de:	ea40 0402 	orr.w	r4, r0, r2
 80021e2:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80021e6:	430b      	orrs	r3, r1
 80021e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80021ec:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80021f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80021f4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80021f8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80021fc:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002200:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002204:	3308      	adds	r3, #8
 8002206:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002216:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800221a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800221e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2200      	movs	r2, #0
 800222a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800222e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002232:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002236:	4623      	mov	r3, r4
 8002238:	4303      	orrs	r3, r0
 800223a:	67bb      	str	r3, [r7, #120]	; 0x78
 800223c:	462b      	mov	r3, r5
 800223e:	430b      	orrs	r3, r1
 8002240:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002242:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002246:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800224a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800224e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002258:	4413      	add	r3, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2200      	movs	r2, #0
 8002260:	673b      	str	r3, [r7, #112]	; 0x70
 8002262:	677a      	str	r2, [r7, #116]	; 0x74
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002270:	464c      	mov	r4, r9
 8002272:	0223      	lsls	r3, r4, #8
 8002274:	4644      	mov	r4, r8
 8002276:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800227a:	4644      	mov	r4, r8
 800227c:	0222      	lsls	r2, r4, #8
 800227e:	ea40 0402 	orr.w	r4, r0, r2
 8002282:	66bc      	str	r4, [r7, #104]	; 0x68
 8002284:	430b      	orrs	r3, r1
 8002286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002288:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800228c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002290:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002294:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002298:	1c9a      	adds	r2, r3, #2
 800229a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2200      	movs	r2, #0
 80022a6:	663b      	str	r3, [r7, #96]	; 0x60
 80022a8:	667a      	str	r2, [r7, #100]	; 0x64
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80022b6:	464c      	mov	r4, r9
 80022b8:	0423      	lsls	r3, r4, #16
 80022ba:	4644      	mov	r4, r8
 80022bc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80022c0:	4644      	mov	r4, r8
 80022c2:	0422      	lsls	r2, r4, #16
 80022c4:	ea40 0402 	orr.w	r4, r0, r2
 80022c8:	65bc      	str	r4, [r7, #88]	; 0x58
 80022ca:	430b      	orrs	r3, r1
 80022cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ce:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80022d2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022d6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80022da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022de:	1cda      	adds	r2, r3, #3
 80022e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2200      	movs	r2, #0
 80022ec:	653b      	str	r3, [r7, #80]	; 0x50
 80022ee:	657a      	str	r2, [r7, #84]	; 0x54
 80022f0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80022f4:	4623      	mov	r3, r4
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022fa:	4623      	mov	r3, r4
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002300:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002304:	4623      	mov	r3, r4
 8002306:	4303      	orrs	r3, r0
 8002308:	643b      	str	r3, [r7, #64]	; 0x40
 800230a:	462b      	mov	r3, r5
 800230c:	430b      	orrs	r3, r1
 800230e:	647b      	str	r3, [r7, #68]	; 0x44
 8002310:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002314:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002318:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800231c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002320:	1d1a      	adds	r2, r3, #4
 8002322:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2200      	movs	r2, #0
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002330:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800233c:	0023      	movs	r3, r4
 800233e:	2200      	movs	r2, #0
 8002340:	ea40 0402 	orr.w	r4, r0, r2
 8002344:	633c      	str	r4, [r7, #48]	; 0x30
 8002346:	430b      	orrs	r3, r1
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
 800234a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800234e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002352:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002356:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800235a:	1d5a      	adds	r2, r3, #5
 800235c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2200      	movs	r2, #0
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
 800236a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002376:	0223      	lsls	r3, r4, #8
 8002378:	2200      	movs	r2, #0
 800237a:	ea40 0402 	orr.w	r4, r0, r2
 800237e:	623c      	str	r4, [r7, #32]
 8002380:	430b      	orrs	r3, r1
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
 8002384:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002388:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800238c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002390:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002394:	3306      	adds	r3, #6
 8002396:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800239a:	4413      	add	r3, r2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2200      	movs	r2, #0
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	61fa      	str	r2, [r7, #28]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	69bc      	ldr	r4, [r7, #24]
 80023b0:	0423      	lsls	r3, r4, #16
 80023b2:	2200      	movs	r2, #0
 80023b4:	ea40 0402 	orr.w	r4, r0, r2
 80023b8:	613c      	str	r4, [r7, #16]
 80023ba:	430b      	orrs	r3, r1
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80023c2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80023c6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80023ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023ce:	3307      	adds	r3, #7
 80023d0:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2200      	movs	r2, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	60fa      	str	r2, [r7, #12]
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	68bc      	ldr	r4, [r7, #8]
 80023ea:	0623      	lsls	r3, r4, #24
 80023ec:	2200      	movs	r2, #0
 80023ee:	ea40 0402 	orr.w	r4, r0, r2
 80023f2:	603c      	str	r4, [r7, #0]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80023fc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002400:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002404:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002408:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800240c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002410:	3308      	adds	r3, #8
 8002412:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002416:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800241a:	4618      	mov	r0, r3
 800241c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002420:	46bd      	mov	sp, r7
 8002422:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002426:	4770      	bx	lr

08002428 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	08008360 	.word	0x08008360

08002444 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	08008378 	.word	0x08008378

08002460 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f9aa 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 8002470:	4a08      	ldr	r2, [pc, #32]	; (8002494 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	601a      	str	r2, [r3, #0]
      linear(),
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3308      	adds	r3, #8
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fada 	bl	8001a34 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3328      	adds	r3, #40	; 0x28
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fad5 	bl	8001a34 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	08008574 	.word	0x08008574

08002498 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f103 0008 	add.w	r0, r3, #8
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7ff fae6 	bl	8001a84 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f7ff fad9 	bl	8001a84 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
      return offset;
 80024da:	68fb      	ldr	r3, [r7, #12]
    }
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f103 0008 	add.w	r0, r3, #8
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f7ff fc33 	bl	8001d6a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4413      	add	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	4413      	add	r3, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7ff fc26 	bl	8001d6a <_ZN13geometry_msgs7Vector311deserializeEPh>
 800251e:	4602      	mov	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
     return offset;
 8002526:	68fb      	ldr	r3, [r7, #12]
    }
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	0800839c 	.word	0x0800839c

0800254c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	080083b0 	.word	0x080083b0

08002568 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe f926 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 8002578:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]
      seq(0),
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	605a      	str	r2, [r3, #4]
      stamp(),
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3308      	adds	r3, #8
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe f90a 	bl	80007a2 <_ZN3ros4TimeC1Ev>
      frame_id("")
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8002592:	611a      	str	r2, [r3, #16]
    {
    }
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	0800855c 	.word	0x0800855c
 80025a4:	08008224 	.word	0x08008224

080025a8 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	b2ca      	uxtb	r2, r1
 80025c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	0a19      	lsrs	r1, r3, #8
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3301      	adds	r3, #1
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	4413      	add	r3, r2
 80025d2:	b2ca      	uxtb	r2, r1
 80025d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0c19      	lsrs	r1, r3, #16
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3302      	adds	r3, #2
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	b2ca      	uxtb	r2, r1
 80025e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0e19      	lsrs	r1, r3, #24
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3303      	adds	r3, #3
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	b2ca      	uxtb	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3304      	adds	r3, #4
 80025fe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	4413      	add	r3, r2
 800260a:	b2ca      	uxtb	r2, r1
 800260c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0a19      	lsrs	r1, r3, #8
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3301      	adds	r3, #1
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	4413      	add	r3, r2
 800261c:	b2ca      	uxtb	r2, r1
 800261e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	0c19      	lsrs	r1, r3, #16
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3302      	adds	r3, #2
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	4413      	add	r3, r2
 800262e:	b2ca      	uxtb	r2, r1
 8002630:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0e19      	lsrs	r1, r3, #24
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3303      	adds	r3, #3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4413      	add	r3, r2
 8002640:	b2ca      	uxtb	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3304      	adds	r3, #4
 8002648:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68d9      	ldr	r1, [r3, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	4413      	add	r3, r2
 8002654:	b2ca      	uxtb	r2, r1
 8002656:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a19      	lsrs	r1, r3, #8
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3301      	adds	r3, #1
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	4413      	add	r3, r2
 8002666:	b2ca      	uxtb	r2, r1
 8002668:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	0c19      	lsrs	r1, r3, #16
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3302      	adds	r3, #2
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	4413      	add	r3, r2
 8002678:	b2ca      	uxtb	r2, r1
 800267a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0e19      	lsrs	r1, r3, #24
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3303      	adds	r3, #3
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	4413      	add	r3, r2
 800268a:	b2ca      	uxtb	r2, r1
 800268c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3304      	adds	r3, #4
 8002692:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd fd95 	bl	80001c8 <strlen>
 800269e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 fec3 	bl	8004434 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	18d0      	adds	r0, r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f005 fc6b 	bl	8007f9c <memcpy>
      offset += length_frame_id;
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4413      	add	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
      return offset;
 80026ce:	68fb      	ldr	r3, [r7, #12]
    }
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	3301      	adds	r3, #1
 80026fc:	6839      	ldr	r1, [r7, #0]
 80026fe:	440b      	add	r3, r1
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3302      	adds	r3, #2
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	440b      	add	r3, r1
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	3303      	adds	r3, #3
 8002728:	6839      	ldr	r1, [r7, #0]
 800272a:	440b      	add	r3, r1
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	061b      	lsls	r3, r3, #24
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	3304      	adds	r3, #4
 800273a:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	3301      	adds	r3, #1
 8002752:	6839      	ldr	r1, [r7, #0]
 8002754:	440b      	add	r3, r1
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	3302      	adds	r3, #2
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	440b      	add	r3, r1
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	3303      	adds	r3, #3
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	440b      	add	r3, r1
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	3304      	adds	r3, #4
 8002790:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	4413      	add	r3, r2
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	3301      	adds	r3, #1
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	440b      	add	r3, r1
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	3302      	adds	r3, #2
 80027be:	6839      	ldr	r1, [r7, #0]
 80027c0:	440b      	add	r3, r1
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3303      	adds	r3, #3
 80027d4:	6839      	ldr	r1, [r7, #0]
 80027d6:	440b      	add	r3, r1
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	061b      	lsls	r3, r3, #24
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	3304      	adds	r3, #4
 80027e6:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	441a      	add	r2, r3
 80027ee:	f107 030c 	add.w	r3, r7, #12
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 fe3c 	bl	8004472 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	3304      	adds	r3, #4
 80027fe:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e00b      	b.n	800281e <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	441a      	add	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3b01      	subs	r3, #1
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	440b      	add	r3, r1
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	429a      	cmp	r2, r3
 8002828:	d3ed      	bcc.n	8002806 <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	3b01      	subs	r3, #1
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	4413      	add	r3, r2
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	3b01      	subs	r3, #1
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	441a      	add	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
     return offset;
 800284e:	693b      	ldr	r3, [r7, #16]
    }
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	080083d4 	.word	0x080083d4

08002874 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	080083e4 	.word	0x080083e4

08002890 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd ff92 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 80028a0:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	601a      	str	r2, [r3, #0]
      x(0),
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	08008544 	.word	0x08008544

080028ec <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80028ec:	b480      	push	{r7}
 80028ee:	b08d      	sub	sp, #52	; 0x34
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002900:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002904:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800290a:	6838      	ldr	r0, [r7, #0]
 800290c:	4401      	add	r1, r0
 800290e:	b2d3      	uxtb	r3, r2
 8002910:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002912:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	0a02      	lsrs	r2, r0, #8
 8002920:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002924:	0a0b      	lsrs	r3, r1, #8
 8002926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002928:	3101      	adds	r1, #1
 800292a:	6838      	ldr	r0, [r7, #0]
 800292c:	4401      	add	r1, r0
 800292e:	b2d3      	uxtb	r3, r2
 8002930:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002932:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	0c02      	lsrs	r2, r0, #16
 8002940:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002944:	0c0b      	lsrs	r3, r1, #16
 8002946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002948:	3102      	adds	r1, #2
 800294a:	6838      	ldr	r0, [r7, #0]
 800294c:	4401      	add	r1, r0
 800294e:	b2d3      	uxtb	r3, r2
 8002950:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002952:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	0e02      	lsrs	r2, r0, #24
 8002960:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002964:	0e0b      	lsrs	r3, r1, #24
 8002966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002968:	3103      	adds	r1, #3
 800296a:	6838      	ldr	r0, [r7, #0]
 800296c:	4401      	add	r1, r0
 800296e:	b2d3      	uxtb	r3, r2
 8002970:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002972:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	000a      	movs	r2, r1
 8002980:	2300      	movs	r3, #0
 8002982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002984:	3104      	adds	r1, #4
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	4401      	add	r1, r0
 800298a:	b2d3      	uxtb	r3, r2
 800298c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800298e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	0a0a      	lsrs	r2, r1, #8
 800299c:	2300      	movs	r3, #0
 800299e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029a0:	3105      	adds	r1, #5
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	4401      	add	r1, r0
 80029a6:	b2d3      	uxtb	r3, r2
 80029a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80029aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	0c0a      	lsrs	r2, r1, #16
 80029b8:	2300      	movs	r3, #0
 80029ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029bc:	3106      	adds	r1, #6
 80029be:	6838      	ldr	r0, [r7, #0]
 80029c0:	4401      	add	r1, r0
 80029c2:	b2d3      	uxtb	r3, r2
 80029c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80029c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	0e0a      	lsrs	r2, r1, #24
 80029d4:	2300      	movs	r3, #0
 80029d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029d8:	3107      	adds	r1, #7
 80029da:	6838      	ldr	r0, [r7, #0]
 80029dc:	4401      	add	r1, r0
 80029de:	b2d3      	uxtb	r3, r2
 80029e0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	3308      	adds	r3, #8
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80029f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029f8:	6838      	ldr	r0, [r7, #0]
 80029fa:	4401      	add	r1, r0
 80029fc:	b2d3      	uxtb	r3, r2
 80029fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002a00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	0a02      	lsrs	r2, r0, #8
 8002a0e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a12:	0a0b      	lsrs	r3, r1, #8
 8002a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a16:	3101      	adds	r1, #1
 8002a18:	6838      	ldr	r0, [r7, #0]
 8002a1a:	4401      	add	r1, r0
 8002a1c:	b2d3      	uxtb	r3, r2
 8002a1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002a20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	0c02      	lsrs	r2, r0, #16
 8002a2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a32:	0c0b      	lsrs	r3, r1, #16
 8002a34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a36:	3102      	adds	r1, #2
 8002a38:	6838      	ldr	r0, [r7, #0]
 8002a3a:	4401      	add	r1, r0
 8002a3c:	b2d3      	uxtb	r3, r2
 8002a3e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002a40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	0e02      	lsrs	r2, r0, #24
 8002a4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a52:	0e0b      	lsrs	r3, r1, #24
 8002a54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a56:	3103      	adds	r1, #3
 8002a58:	6838      	ldr	r0, [r7, #0]
 8002a5a:	4401      	add	r1, r0
 8002a5c:	b2d3      	uxtb	r3, r2
 8002a5e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002a60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	000a      	movs	r2, r1
 8002a6e:	2300      	movs	r3, #0
 8002a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a72:	3104      	adds	r1, #4
 8002a74:	6838      	ldr	r0, [r7, #0]
 8002a76:	4401      	add	r1, r0
 8002a78:	b2d3      	uxtb	r3, r2
 8002a7a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002a7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	0a0a      	lsrs	r2, r1, #8
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a8e:	3105      	adds	r1, #5
 8002a90:	6838      	ldr	r0, [r7, #0]
 8002a92:	4401      	add	r1, r0
 8002a94:	b2d3      	uxtb	r3, r2
 8002a96:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002a98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	0c0a      	lsrs	r2, r1, #16
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002aaa:	3106      	adds	r1, #6
 8002aac:	6838      	ldr	r0, [r7, #0]
 8002aae:	4401      	add	r1, r0
 8002ab0:	b2d3      	uxtb	r3, r2
 8002ab2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002ab4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	0e0a      	lsrs	r2, r1, #24
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ac6:	3107      	adds	r1, #7
 8002ac8:	6838      	ldr	r0, [r7, #0]
 8002aca:	4401      	add	r1, r0
 8002acc:	b2d3      	uxtb	r3, r2
 8002ace:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002adc:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002ae0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ae6:	6838      	ldr	r0, [r7, #0]
 8002ae8:	4401      	add	r1, r0
 8002aea:	b2d3      	uxtb	r3, r2
 8002aec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002aee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	0a02      	lsrs	r2, r0, #8
 8002afc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b00:	0a0b      	lsrs	r3, r1, #8
 8002b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b04:	3101      	adds	r1, #1
 8002b06:	6838      	ldr	r0, [r7, #0]
 8002b08:	4401      	add	r1, r0
 8002b0a:	b2d3      	uxtb	r3, r2
 8002b0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002b0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	0c02      	lsrs	r2, r0, #16
 8002b1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b20:	0c0b      	lsrs	r3, r1, #16
 8002b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b24:	3102      	adds	r1, #2
 8002b26:	6838      	ldr	r0, [r7, #0]
 8002b28:	4401      	add	r1, r0
 8002b2a:	b2d3      	uxtb	r3, r2
 8002b2c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002b2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	0e02      	lsrs	r2, r0, #24
 8002b3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b40:	0e0b      	lsrs	r3, r1, #24
 8002b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b44:	3103      	adds	r1, #3
 8002b46:	6838      	ldr	r0, [r7, #0]
 8002b48:	4401      	add	r1, r0
 8002b4a:	b2d3      	uxtb	r3, r2
 8002b4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002b4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	000a      	movs	r2, r1
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b60:	3104      	adds	r1, #4
 8002b62:	6838      	ldr	r0, [r7, #0]
 8002b64:	4401      	add	r1, r0
 8002b66:	b2d3      	uxtb	r3, r2
 8002b68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002b6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	0a0a      	lsrs	r2, r1, #8
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b7c:	3105      	adds	r1, #5
 8002b7e:	6838      	ldr	r0, [r7, #0]
 8002b80:	4401      	add	r1, r0
 8002b82:	b2d3      	uxtb	r3, r2
 8002b84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002b86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	0c0a      	lsrs	r2, r1, #16
 8002b94:	2300      	movs	r3, #0
 8002b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b98:	3106      	adds	r1, #6
 8002b9a:	6838      	ldr	r0, [r7, #0]
 8002b9c:	4401      	add	r1, r0
 8002b9e:	b2d3      	uxtb	r3, r2
 8002ba0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002ba2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	0e0a      	lsrs	r2, r1, #24
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bb4:	3107      	adds	r1, #7
 8002bb6:	6838      	ldr	r0, [r7, #0]
 8002bb8:	4401      	add	r1, r0
 8002bba:	b2d3      	uxtb	r3, r2
 8002bbc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002bca:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8002bce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bd4:	6838      	ldr	r0, [r7, #0]
 8002bd6:	4401      	add	r1, r0
 8002bd8:	b2d3      	uxtb	r3, r2
 8002bda:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8002bdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	0a02      	lsrs	r2, r0, #8
 8002bea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002bee:	0a0b      	lsrs	r3, r1, #8
 8002bf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bf2:	3101      	adds	r1, #1
 8002bf4:	6838      	ldr	r0, [r7, #0]
 8002bf6:	4401      	add	r1, r0
 8002bf8:	b2d3      	uxtb	r3, r2
 8002bfa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8002bfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	0c02      	lsrs	r2, r0, #16
 8002c0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c0e:	0c0b      	lsrs	r3, r1, #16
 8002c10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c12:	3102      	adds	r1, #2
 8002c14:	6838      	ldr	r0, [r7, #0]
 8002c16:	4401      	add	r1, r0
 8002c18:	b2d3      	uxtb	r3, r2
 8002c1a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8002c1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	0e02      	lsrs	r2, r0, #24
 8002c2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c2e:	0e0b      	lsrs	r3, r1, #24
 8002c30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c32:	3103      	adds	r1, #3
 8002c34:	6838      	ldr	r0, [r7, #0]
 8002c36:	4401      	add	r1, r0
 8002c38:	b2d3      	uxtb	r3, r2
 8002c3a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8002c3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	000a      	movs	r2, r1
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c4e:	3104      	adds	r1, #4
 8002c50:	6838      	ldr	r0, [r7, #0]
 8002c52:	4401      	add	r1, r0
 8002c54:	b2d3      	uxtb	r3, r2
 8002c56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8002c58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	0a0a      	lsrs	r2, r1, #8
 8002c66:	2300      	movs	r3, #0
 8002c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c6a:	3105      	adds	r1, #5
 8002c6c:	6838      	ldr	r0, [r7, #0]
 8002c6e:	4401      	add	r1, r0
 8002c70:	b2d3      	uxtb	r3, r2
 8002c72:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8002c74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	0c0a      	lsrs	r2, r1, #16
 8002c82:	2300      	movs	r3, #0
 8002c84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c86:	3106      	adds	r1, #6
 8002c88:	6838      	ldr	r0, [r7, #0]
 8002c8a:	4401      	add	r1, r0
 8002c8c:	b2d3      	uxtb	r3, r2
 8002c8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8002c90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	0e0a      	lsrs	r2, r1, #24
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ca2:	3107      	adds	r1, #7
 8002ca4:	6838      	ldr	r0, [r7, #0]
 8002ca6:	4401      	add	r1, r0
 8002ca8:	b2d3      	uxtb	r3, r2
 8002caa:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	3308      	adds	r3, #8
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3734      	adds	r7, #52	; 0x34
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002cc0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002cc4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 8002cce:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    {
      int offset = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ce4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002ce8:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8002cec:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002cf0:	4413      	add	r3, r2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	461c      	mov	r4, r3
 8002cfa:	4615      	mov	r5, r2
 8002cfc:	ea40 0804 	orr.w	r8, r0, r4
 8002d00:	ea41 0905 	orr.w	r9, r1, r5
 8002d04:	e9c7 898a 	strd	r8, r9, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d08:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002d0c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	469a      	mov	sl, r3
 8002d20:	4693      	mov	fp, r2
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002d2e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002d32:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002d36:	ea40 0402 	orr.w	r4, r0, r2
 8002d3a:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002d44:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8002d48:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d4c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002d50:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8002d66:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8002d76:	464c      	mov	r4, r9
 8002d78:	0423      	lsls	r3, r4, #16
 8002d7a:	4644      	mov	r4, r8
 8002d7c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d80:	4644      	mov	r4, r8
 8002d82:	0422      	lsls	r2, r4, #16
 8002d84:	ea40 0402 	orr.w	r4, r0, r2
 8002d88:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8002d92:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8002d96:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d9a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002d9e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002da2:	1cda      	adds	r2, r3, #3
 8002da4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002da8:	4413      	add	r3, r2
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002db4:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8002db8:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8002dbc:	4623      	mov	r3, r4
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002dc4:	4623      	mov	r3, r4
 8002dc6:	061b      	lsls	r3, r3, #24
 8002dc8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002dcc:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8002dd0:	4623      	mov	r3, r4
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8002dd8:	462b      	mov	r3, r5
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002de0:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8002de4:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002de8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002dec:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002df0:	1d1a      	adds	r2, r3, #4
 8002df2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002df6:	4413      	add	r3, r2
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002e02:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 8002e12:	0023      	movs	r3, r4
 8002e14:	2200      	movs	r2, #0
 8002e16:	ea40 0402 	orr.w	r4, r0, r2
 8002e1a:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8002e24:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8002e28:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e2c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002e30:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002e34:	1d5a      	adds	r2, r3, #5
 8002e36:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002e3a:	4413      	add	r3, r2
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e46:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 8002e56:	0223      	lsls	r3, r4, #8
 8002e58:	2200      	movs	r2, #0
 8002e5a:	ea40 0402 	orr.w	r4, r0, r2
 8002e5e:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8002e62:	430b      	orrs	r3, r1
 8002e64:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e68:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8002e6c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e70:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002e74:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002e78:	1d9a      	adds	r2, r3, #6
 8002e7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002e8a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 8002e9a:	0423      	lsls	r3, r4, #16
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	ea40 0402 	orr.w	r4, r0, r2
 8002ea2:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002eac:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8002eb0:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002eb4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002eb8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002ebc:	1dda      	adds	r2, r3, #7
 8002ebe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ece:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 8002ede:	0623      	lsls	r3, r4, #24
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	ea40 0402 	orr.w	r4, r0, r2
 8002ee6:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8002eea:	430b      	orrs	r3, r1
 8002eec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ef0:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8002ef4:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      this->x = u_x.real;
 8002ef8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002efc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002f00:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002f04:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002f08:	3308      	adds	r3, #8
 8002f0a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f1a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8002f1e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8002f22:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002f32:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8002f36:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	4303      	orrs	r3, r0
 8002f3e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002f42:	462b      	mov	r3, r5
 8002f44:	430b      	orrs	r3, r1
 8002f46:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002f4a:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8002f4e:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f52:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8002f56:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002f60:	4413      	add	r3, r2
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f6c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8002f7c:	464c      	mov	r4, r9
 8002f7e:	0223      	lsls	r3, r4, #8
 8002f80:	4644      	mov	r4, r8
 8002f82:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f86:	4644      	mov	r4, r8
 8002f88:	0222      	lsls	r2, r4, #8
 8002f8a:	ea40 0402 	orr.w	r4, r0, r2
 8002f8e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002f92:	430b      	orrs	r3, r1
 8002f94:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f98:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002f9c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fa0:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8002fa4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002fa8:	1c9a      	adds	r2, r3, #2
 8002faa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002fae:	4413      	add	r3, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002fba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002fca:	464c      	mov	r4, r9
 8002fcc:	0423      	lsls	r3, r4, #16
 8002fce:	4644      	mov	r4, r8
 8002fd0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002fd4:	4644      	mov	r4, r8
 8002fd6:	0422      	lsls	r2, r4, #16
 8002fd8:	ea40 0402 	orr.w	r4, r0, r2
 8002fdc:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002fe6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002fea:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fee:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8002ff2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002ff6:	1cda      	adds	r2, r3, #3
 8002ff8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002ffc:	4413      	add	r3, r2
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003008:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800300c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003010:	4623      	mov	r3, r4
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003018:	4623      	mov	r3, r4
 800301a:	061b      	lsls	r3, r3, #24
 800301c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003020:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003024:	4623      	mov	r3, r4
 8003026:	4303      	orrs	r3, r0
 8003028:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800302c:	462b      	mov	r3, r5
 800302e:	430b      	orrs	r3, r1
 8003030:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003034:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003038:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800303c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003040:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003044:	1d1a      	adds	r2, r3, #4
 8003046:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800304a:	4413      	add	r3, r2
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2200      	movs	r2, #0
 8003052:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003056:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003066:	0023      	movs	r3, r4
 8003068:	2200      	movs	r2, #0
 800306a:	ea40 0402 	orr.w	r4, r0, r2
 800306e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003072:	430b      	orrs	r3, r1
 8003074:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003078:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800307c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003080:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003084:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003088:	1d5a      	adds	r2, r3, #5
 800308a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800308e:	4413      	add	r3, r2
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2200      	movs	r2, #0
 8003096:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800309a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80030aa:	0223      	lsls	r3, r4, #8
 80030ac:	2200      	movs	r2, #0
 80030ae:	ea40 0402 	orr.w	r4, r0, r2
 80030b2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80030b6:	430b      	orrs	r3, r1
 80030b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80030bc:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80030c0:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030c4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80030c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80030cc:	1d9a      	adds	r2, r3, #6
 80030ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2200      	movs	r2, #0
 80030da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80030de:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80030ee:	0423      	lsls	r3, r4, #16
 80030f0:	2200      	movs	r2, #0
 80030f2:	ea40 0402 	orr.w	r4, r0, r2
 80030f6:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80030fa:	430b      	orrs	r3, r1
 80030fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003100:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003104:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003108:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800310c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003110:	1dda      	adds	r2, r3, #7
 8003112:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003116:	4413      	add	r3, r2
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2200      	movs	r2, #0
 800311e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003122:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003132:	0623      	lsls	r3, r4, #24
 8003134:	2200      	movs	r2, #0
 8003136:	ea40 0402 	orr.w	r4, r0, r2
 800313a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800313e:	430b      	orrs	r3, r1
 8003140:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003144:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003148:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      this->y = u_y.real;
 800314c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003150:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003154:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003158:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800315c:	3308      	adds	r3, #8
 800315e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800316e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003172:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003176:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2200      	movs	r2, #0
 8003182:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003186:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800318a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800318e:	4623      	mov	r3, r4
 8003190:	4303      	orrs	r3, r0
 8003192:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003196:	462b      	mov	r3, r5
 8003198:	430b      	orrs	r3, r1
 800319a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800319e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80031a2:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031a6:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80031aa:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80031b4:	4413      	add	r3, r2
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80031c0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80031d0:	464c      	mov	r4, r9
 80031d2:	0223      	lsls	r3, r4, #8
 80031d4:	4644      	mov	r4, r8
 80031d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031da:	4644      	mov	r4, r8
 80031dc:	0222      	lsls	r2, r4, #8
 80031de:	ea40 0402 	orr.w	r4, r0, r2
 80031e2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80031e6:	430b      	orrs	r3, r1
 80031e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80031ec:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80031f0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031f4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80031f8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003202:	4413      	add	r3, r2
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2200      	movs	r2, #0
 800320a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800320e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800321e:	464c      	mov	r4, r9
 8003220:	0423      	lsls	r3, r4, #16
 8003222:	4644      	mov	r4, r8
 8003224:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003228:	4644      	mov	r4, r8
 800322a:	0422      	lsls	r2, r4, #16
 800322c:	ea40 0402 	orr.w	r4, r0, r2
 8003230:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003234:	430b      	orrs	r3, r1
 8003236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800323a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800323e:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003242:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003246:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800324a:	1cda      	adds	r2, r3, #3
 800324c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003250:	4413      	add	r3, r2
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800325c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003260:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003264:	4623      	mov	r3, r4
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800326c:	4623      	mov	r3, r4
 800326e:	061b      	lsls	r3, r3, #24
 8003270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003274:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003278:	4623      	mov	r3, r4
 800327a:	4303      	orrs	r3, r0
 800327c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003280:	462b      	mov	r3, r5
 8003282:	430b      	orrs	r3, r1
 8003284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003288:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800328c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003290:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003294:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003298:	1d1a      	adds	r2, r3, #4
 800329a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800329e:	4413      	add	r3, r2
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032aa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80032ba:	0023      	movs	r3, r4
 80032bc:	2200      	movs	r2, #0
 80032be:	ea40 0402 	orr.w	r4, r0, r2
 80032c2:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80032c6:	430b      	orrs	r3, r1
 80032c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032cc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80032d0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80032d4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80032d8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80032dc:	1d5a      	adds	r2, r3, #5
 80032de:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80032e2:	4413      	add	r3, r2
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032ee:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80032fe:	0223      	lsls	r3, r4, #8
 8003300:	2200      	movs	r2, #0
 8003302:	ea40 0402 	orr.w	r4, r0, r2
 8003306:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800330a:	430b      	orrs	r3, r1
 800330c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003310:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003314:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003318:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800331c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003320:	1d9a      	adds	r2, r3, #6
 8003322:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003326:	4413      	add	r3, r2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2200      	movs	r2, #0
 800332e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003332:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003342:	0423      	lsls	r3, r4, #16
 8003344:	2200      	movs	r2, #0
 8003346:	ea40 0402 	orr.w	r4, r0, r2
 800334a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800334e:	430b      	orrs	r3, r1
 8003350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003354:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003358:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800335c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003360:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003364:	1dda      	adds	r2, r3, #7
 8003366:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800336a:	4413      	add	r3, r2
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2200      	movs	r2, #0
 8003372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003376:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003386:	0623      	lsls	r3, r4, #24
 8003388:	2200      	movs	r2, #0
 800338a:	ea40 0402 	orr.w	r4, r0, r2
 800338e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003392:	430b      	orrs	r3, r1
 8003394:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003398:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800339c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      this->z = u_z.real;
 80033a0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80033a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80033a8:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 80033ac:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80033b0:	3308      	adds	r3, #8
 80033b2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033c2:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80033c6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80033ca:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80033ce:	4413      	add	r3, r2
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2200      	movs	r2, #0
 80033d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033da:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033de:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80033e2:	4623      	mov	r3, r4
 80033e4:	4303      	orrs	r3, r0
 80033e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80033e8:	462b      	mov	r3, r5
 80033ea:	430b      	orrs	r3, r1
 80033ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033ee:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80033f2:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033f6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80033fa:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003404:	4413      	add	r3, r2
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2200      	movs	r2, #0
 800340c:	673b      	str	r3, [r7, #112]	; 0x70
 800340e:	677a      	str	r2, [r7, #116]	; 0x74
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800341c:	464c      	mov	r4, r9
 800341e:	0223      	lsls	r3, r4, #8
 8003420:	4644      	mov	r4, r8
 8003422:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003426:	4644      	mov	r4, r8
 8003428:	0222      	lsls	r2, r4, #8
 800342a:	ea40 0402 	orr.w	r4, r0, r2
 800342e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003430:	430b      	orrs	r3, r1
 8003432:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003434:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003438:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800343c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003440:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003444:	1c9a      	adds	r2, r3, #2
 8003446:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800344a:	4413      	add	r3, r2
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2200      	movs	r2, #0
 8003452:	663b      	str	r3, [r7, #96]	; 0x60
 8003454:	667a      	str	r2, [r7, #100]	; 0x64
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003462:	464c      	mov	r4, r9
 8003464:	0423      	lsls	r3, r4, #16
 8003466:	4644      	mov	r4, r8
 8003468:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800346c:	4644      	mov	r4, r8
 800346e:	0422      	lsls	r2, r4, #16
 8003470:	ea40 0402 	orr.w	r4, r0, r2
 8003474:	65bc      	str	r4, [r7, #88]	; 0x58
 8003476:	430b      	orrs	r3, r1
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800347e:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003482:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003486:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800348a:	1cda      	adds	r2, r3, #3
 800348c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003490:	4413      	add	r3, r2
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2200      	movs	r2, #0
 8003498:	653b      	str	r3, [r7, #80]	; 0x50
 800349a:	657a      	str	r2, [r7, #84]	; 0x54
 800349c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80034a0:	4623      	mov	r3, r4
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a6:	4623      	mov	r3, r4
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80034b0:	4623      	mov	r3, r4
 80034b2:	4303      	orrs	r3, r0
 80034b4:	643b      	str	r3, [r7, #64]	; 0x40
 80034b6:	462b      	mov	r3, r5
 80034b8:	430b      	orrs	r3, r1
 80034ba:	647b      	str	r3, [r7, #68]	; 0x44
 80034bc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80034c0:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80034c4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80034c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80034cc:	1d1a      	adds	r2, r3, #4
 80034ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2200      	movs	r2, #0
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
 80034dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80034e8:	0023      	movs	r3, r4
 80034ea:	2200      	movs	r2, #0
 80034ec:	ea40 0402 	orr.w	r4, r0, r2
 80034f0:	633c      	str	r4, [r7, #48]	; 0x30
 80034f2:	430b      	orrs	r3, r1
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
 80034f6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80034fa:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80034fe:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003502:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003506:	1d5a      	adds	r2, r3, #5
 8003508:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800350c:	4413      	add	r3, r2
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2200      	movs	r2, #0
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
 8003516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003522:	0223      	lsls	r3, r4, #8
 8003524:	2200      	movs	r2, #0
 8003526:	ea40 0402 	orr.w	r4, r0, r2
 800352a:	623c      	str	r4, [r7, #32]
 800352c:	430b      	orrs	r3, r1
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003534:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003538:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800353c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003540:	3306      	adds	r3, #6
 8003542:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8003546:	4413      	add	r3, r2
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2200      	movs	r2, #0
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	61fa      	str	r2, [r7, #28]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	69bc      	ldr	r4, [r7, #24]
 800355c:	0423      	lsls	r3, r4, #16
 800355e:	2200      	movs	r2, #0
 8003560:	ea40 0402 	orr.w	r4, r0, r2
 8003564:	613c      	str	r4, [r7, #16]
 8003566:	430b      	orrs	r3, r1
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800356e:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003572:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003576:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800357a:	3307      	adds	r3, #7
 800357c:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8003580:	4413      	add	r3, r2
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2200      	movs	r2, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	60fa      	str	r2, [r7, #12]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	68bc      	ldr	r4, [r7, #8]
 8003596:	0623      	lsls	r3, r4, #24
 8003598:	2200      	movs	r2, #0
 800359a:	ea40 0402 	orr.w	r4, r0, r2
 800359e:	603c      	str	r4, [r7, #0]
 80035a0:	430b      	orrs	r3, r1
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80035a8:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      this->w = u_w.real;
 80035ac:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 80035b0:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80035b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 80035b8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80035bc:	3308      	adds	r3, #8
 80035be:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
     return offset;
 80035c2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
    }
 80035c6:	4618      	mov	r0, r3
 80035c8:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 80035cc:	46bd      	mov	sp, r7
 80035ce:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035d2:	4770      	bx	lr

080035d4 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	08008408 	.word	0x08008408

080035f0 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	08008424 	.word	0x08008424

0800360c <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd f8d4 	bl	80007c4 <_ZN3ros3MsgC1Ev>
 800361c:	4a24      	ldr	r2, [pc, #144]	; (80036b0 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	601a      	str	r2, [r3, #0]
      header(),
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe ff9e 	bl	8002568 <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3318      	adds	r3, #24
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f92d 	bl	8002890 <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800363c:	2308      	movs	r3, #8
 800363e:	e007      	b.n	8003650 <_ZN11sensor_msgs3ImuC1Ev+0x44>
 8003640:	f04f 0000 	mov.w	r0, #0
 8003644:	f04f 0100 	mov.w	r1, #0
 8003648:	e9c2 0100 	strd	r0, r1, [r2]
 800364c:	3208      	adds	r2, #8
 800364e:	3b01      	subs	r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	daf5      	bge.n	8003640 <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3388      	adds	r3, #136	; 0x88
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe f9eb 	bl	8001a34 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8003664:	2308      	movs	r3, #8
 8003666:	e007      	b.n	8003678 <_ZN11sensor_msgs3ImuC1Ev+0x6c>
 8003668:	f04f 0000 	mov.w	r0, #0
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	e9c2 0100 	strd	r0, r1, [r2]
 8003674:	3208      	adds	r2, #8
 8003676:	3b01      	subs	r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	daf5      	bge.n	8003668 <_ZN11sensor_msgs3ImuC1Ev+0x5c>
      linear_acceleration(),
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	33f0      	adds	r3, #240	; 0xf0
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe f9d7 	bl	8001a34 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f503 7288 	add.w	r2, r3, #272	; 0x110
 800368c:	2308      	movs	r3, #8
 800368e:	e007      	b.n	80036a0 <_ZN11sensor_msgs3ImuC1Ev+0x94>
 8003690:	f04f 0000 	mov.w	r0, #0
 8003694:	f04f 0100 	mov.w	r1, #0
 8003698:	e9c2 0100 	strd	r0, r1, [r2]
 800369c:	3208      	adds	r2, #8
 800369e:	3b01      	subs	r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	daf5      	bge.n	8003690 <_ZN11sensor_msgs3ImuC1Ev+0x84>
    {
    }
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	0800852c 	.word	0x0800852c

080036b4 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	; 0x30
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	1d18      	adds	r0, r3, #4
 80036c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	f7fe ff6b 	bl	80025a8 <_ZNK8std_msgs6Header9serializeEPh>
 80036d2:	4602      	mov	r2, r0
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	4413      	add	r3, r2
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f103 0018 	add.w	r0, r3, #24
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	4413      	add	r3, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7ff f900 	bl	80028ec <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80036ec:	4602      	mov	r2, r0
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	4413      	add	r3, r2
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80036f4:	2300      	movs	r3, #0
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f8:	e07d      	b.n	80037f6 <_ZNK11sensor_msgs3Imu9serializeEPh+0x142>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	3308      	adds	r3, #8
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 800370c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003710:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	4401      	add	r1, r0
 8003716:	b2d3      	uxtb	r3, r2
 8003718:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 800371a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	0a02      	lsrs	r2, r0, #8
 8003728:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800372c:	0a0b      	lsrs	r3, r1, #8
 800372e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003730:	3101      	adds	r1, #1
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	4401      	add	r1, r0
 8003736:	b2d3      	uxtb	r3, r2
 8003738:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 800373a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	0c02      	lsrs	r2, r0, #16
 8003748:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800374c:	0c0b      	lsrs	r3, r1, #16
 800374e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003750:	3102      	adds	r1, #2
 8003752:	6838      	ldr	r0, [r7, #0]
 8003754:	4401      	add	r1, r0
 8003756:	b2d3      	uxtb	r3, r2
 8003758:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 800375a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	0e02      	lsrs	r2, r0, #24
 8003768:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800376c:	0e0b      	lsrs	r3, r1, #24
 800376e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003770:	3103      	adds	r1, #3
 8003772:	6838      	ldr	r0, [r7, #0]
 8003774:	4401      	add	r1, r0
 8003776:	b2d3      	uxtb	r3, r2
 8003778:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 800377a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	000a      	movs	r2, r1
 8003788:	2300      	movs	r3, #0
 800378a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800378c:	3104      	adds	r1, #4
 800378e:	6838      	ldr	r0, [r7, #0]
 8003790:	4401      	add	r1, r0
 8003792:	b2d3      	uxtb	r3, r2
 8003794:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8003796:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	0a0a      	lsrs	r2, r1, #8
 80037a4:	2300      	movs	r3, #0
 80037a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037a8:	3105      	adds	r1, #5
 80037aa:	6838      	ldr	r0, [r7, #0]
 80037ac:	4401      	add	r1, r0
 80037ae:	b2d3      	uxtb	r3, r2
 80037b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 80037b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	0c0a      	lsrs	r2, r1, #16
 80037c0:	2300      	movs	r3, #0
 80037c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037c4:	3106      	adds	r1, #6
 80037c6:	6838      	ldr	r0, [r7, #0]
 80037c8:	4401      	add	r1, r0
 80037ca:	b2d3      	uxtb	r3, r2
 80037cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 80037ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	0e0a      	lsrs	r2, r1, #24
 80037dc:	2300      	movs	r3, #0
 80037de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037e0:	3107      	adds	r1, #7
 80037e2:	6838      	ldr	r0, [r7, #0]
 80037e4:	4401      	add	r1, r0
 80037e6:	b2d3      	uxtb	r3, r2
 80037e8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	3308      	adds	r3, #8
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	3301      	adds	r3, #1
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	f67f af7e 	bls.w	80036fa <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	4413      	add	r3, r2
 800380a:	4619      	mov	r1, r3
 800380c:	f7fe f93a 	bl	8001a84 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003810:	4602      	mov	r2, r0
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	4413      	add	r3, r2
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
 800381c:	e07d      	b.n	800391a <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	3315      	adds	r3, #21
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8003830:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	4401      	add	r1, r0
 800383a:	b2d3      	uxtb	r3, r2
 800383c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 800383e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	0a02      	lsrs	r2, r0, #8
 800384c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003850:	0a0b      	lsrs	r3, r1, #8
 8003852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003854:	3101      	adds	r1, #1
 8003856:	6838      	ldr	r0, [r7, #0]
 8003858:	4401      	add	r1, r0
 800385a:	b2d3      	uxtb	r3, r2
 800385c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 800385e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	0c02      	lsrs	r2, r0, #16
 800386c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003870:	0c0b      	lsrs	r3, r1, #16
 8003872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003874:	3102      	adds	r1, #2
 8003876:	6838      	ldr	r0, [r7, #0]
 8003878:	4401      	add	r1, r0
 800387a:	b2d3      	uxtb	r3, r2
 800387c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 800387e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	0e02      	lsrs	r2, r0, #24
 800388c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003890:	0e0b      	lsrs	r3, r1, #24
 8003892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003894:	3103      	adds	r1, #3
 8003896:	6838      	ldr	r0, [r7, #0]
 8003898:	4401      	add	r1, r0
 800389a:	b2d3      	uxtb	r3, r2
 800389c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 800389e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	000a      	movs	r2, r1
 80038ac:	2300      	movs	r3, #0
 80038ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b0:	3104      	adds	r1, #4
 80038b2:	6838      	ldr	r0, [r7, #0]
 80038b4:	4401      	add	r1, r0
 80038b6:	b2d3      	uxtb	r3, r2
 80038b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 80038ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	0a0a      	lsrs	r2, r1, #8
 80038c8:	2300      	movs	r3, #0
 80038ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038cc:	3105      	adds	r1, #5
 80038ce:	6838      	ldr	r0, [r7, #0]
 80038d0:	4401      	add	r1, r0
 80038d2:	b2d3      	uxtb	r3, r2
 80038d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 80038d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	0c0a      	lsrs	r2, r1, #16
 80038e4:	2300      	movs	r3, #0
 80038e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038e8:	3106      	adds	r1, #6
 80038ea:	6838      	ldr	r0, [r7, #0]
 80038ec:	4401      	add	r1, r0
 80038ee:	b2d3      	uxtb	r3, r2
 80038f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 80038f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	0e0a      	lsrs	r2, r1, #24
 8003900:	2300      	movs	r3, #0
 8003902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003904:	3107      	adds	r1, #7
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	4401      	add	r1, r0
 800390a:	b2d3      	uxtb	r3, r2
 800390c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	3308      	adds	r3, #8
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	3301      	adds	r3, #1
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	2b08      	cmp	r3, #8
 800391e:	f67f af7e 	bls.w	800381e <_ZNK11sensor_msgs3Imu9serializeEPh+0x16a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8003928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	4413      	add	r3, r2
 800392e:	4619      	mov	r1, r3
 8003930:	f7fe f8a8 	bl	8001a84 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003934:	4602      	mov	r2, r0
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	4413      	add	r3, r2
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 800393c:	2300      	movs	r3, #0
 800393e:	623b      	str	r3, [r7, #32]
 8003940:	e07d      	b.n	8003a3e <_ZNK11sensor_msgs3Imu9serializeEPh+0x38a>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	3322      	adds	r3, #34	; 0x22
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8003954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800395a:	6838      	ldr	r0, [r7, #0]
 800395c:	4401      	add	r1, r0
 800395e:	b2d3      	uxtb	r3, r2
 8003960:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8003962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	0a02      	lsrs	r2, r0, #8
 8003970:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003974:	0a0b      	lsrs	r3, r1, #8
 8003976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003978:	3101      	adds	r1, #1
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	4401      	add	r1, r0
 800397e:	b2d3      	uxtb	r3, r2
 8003980:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8003982:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	0c02      	lsrs	r2, r0, #16
 8003990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003994:	0c0b      	lsrs	r3, r1, #16
 8003996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003998:	3102      	adds	r1, #2
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	4401      	add	r1, r0
 800399e:	b2d3      	uxtb	r3, r2
 80039a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 80039a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	0e02      	lsrs	r2, r0, #24
 80039b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039b4:	0e0b      	lsrs	r3, r1, #24
 80039b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039b8:	3103      	adds	r1, #3
 80039ba:	6838      	ldr	r0, [r7, #0]
 80039bc:	4401      	add	r1, r0
 80039be:	b2d3      	uxtb	r3, r2
 80039c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 80039c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	000a      	movs	r2, r1
 80039d0:	2300      	movs	r3, #0
 80039d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039d4:	3104      	adds	r1, #4
 80039d6:	6838      	ldr	r0, [r7, #0]
 80039d8:	4401      	add	r1, r0
 80039da:	b2d3      	uxtb	r3, r2
 80039dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 80039de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	0a0a      	lsrs	r2, r1, #8
 80039ec:	2300      	movs	r3, #0
 80039ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f0:	3105      	adds	r1, #5
 80039f2:	6838      	ldr	r0, [r7, #0]
 80039f4:	4401      	add	r1, r0
 80039f6:	b2d3      	uxtb	r3, r2
 80039f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 80039fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	0c0a      	lsrs	r2, r1, #16
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a0c:	3106      	adds	r1, #6
 8003a0e:	6838      	ldr	r0, [r7, #0]
 8003a10:	4401      	add	r1, r0
 8003a12:	b2d3      	uxtb	r3, r2
 8003a14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8003a16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	0e0a      	lsrs	r2, r1, #24
 8003a24:	2300      	movs	r3, #0
 8003a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a28:	3107      	adds	r1, #7
 8003a2a:	6838      	ldr	r0, [r7, #0]
 8003a2c:	4401      	add	r1, r0
 8003a2e:	b2d3      	uxtb	r3, r2
 8003a30:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	3308      	adds	r3, #8
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	623b      	str	r3, [r7, #32]
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	f67f af7e 	bls.w	8003942 <_ZNK11sensor_msgs3Imu9serializeEPh+0x28e>
      }
      return offset;
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3730      	adds	r7, #48	; 0x30
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a54:	b0ed      	sub	sp, #436	; 0x1b4
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8003a5c:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      offset += this->header.deserialize(inbuffer + offset);
 8003a66:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a6a:	1d18      	adds	r0, r3, #4
 8003a6c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003a70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a74:	4413      	add	r3, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	f7fe fe2e 	bl	80026d8 <_ZN8std_msgs6Header11deserializeEPh>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a82:	4413      	add	r3, r2
 8003a84:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      offset += this->orientation.deserialize(inbuffer + offset);
 8003a88:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a8c:	f103 0018 	add.w	r0, r3, #24
 8003a90:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a98:	4413      	add	r3, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f7ff f910 	bl	8002cc0 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8003aac:	2300      	movs	r3, #0
 8003aae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003ab2:	e123      	b.n	8003cfc <_ZN11sensor_msgs3Imu11deserializeEPh+0x2ac>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ac0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003ac4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003ac8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003acc:	4413      	add	r3, r2
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003ad8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003adc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003ae0:	4303      	orrs	r3, r0
 8003ae2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003ae6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003aea:	430b      	orrs	r3, r1
 8003aec:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003af0:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8003af4:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003af8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003afc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b06:	4413      	add	r3, r2
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	469a      	mov	sl, r3
 8003b10:	4693      	mov	fp, r2
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003b1e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003b22:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003b26:	ea40 0602 	orr.w	r6, r0, r2
 8003b2a:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003b34:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8003b38:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b3c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b40:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003b44:	1c9a      	adds	r2, r3, #2
 8003b46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b4a:	4413      	add	r3, r2
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2200      	movs	r2, #0
 8003b52:	4698      	mov	r8, r3
 8003b54:	4691      	mov	r9, r2
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003b62:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003b66:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003b6a:	ea40 0602 	orr.w	r6, r0, r2
 8003b6e:	f8c7 6158 	str.w	r6, [r7, #344]	; 0x158
 8003b72:	430b      	orrs	r3, r1
 8003b74:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003b78:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8003b7c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b80:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b84:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003b88:	1cda      	adds	r2, r3, #3
 8003b8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b8e:	4413      	add	r3, r2
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003b9a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003b9e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003ba2:	0a1d      	lsrs	r5, r3, #8
 8003ba4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003ba8:	061c      	lsls	r4, r3, #24
 8003baa:	ea40 0304 	orr.w	r3, r0, r4
 8003bae:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003bb2:	ea41 0305 	orr.w	r3, r1, r5
 8003bb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003bba:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8003bbe:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003bc2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003bc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003bca:	1d1a      	adds	r2, r3, #4
 8003bcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bd0:	4413      	add	r3, r2
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003bdc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8003bec:	0033      	movs	r3, r6
 8003bee:	2200      	movs	r2, #0
 8003bf0:	ea40 0602 	orr.w	r6, r0, r2
 8003bf4:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003bfe:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003c02:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c06:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003c0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c0e:	1d5a      	adds	r2, r3, #5
 8003c10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c14:	4413      	add	r3, r2
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003c20:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	f8d7 6138 	ldr.w	r6, [r7, #312]	; 0x138
 8003c30:	0233      	lsls	r3, r6, #8
 8003c32:	2200      	movs	r2, #0
 8003c34:	ea40 0602 	orr.w	r6, r0, r2
 8003c38:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003c42:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8003c46:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c4a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003c4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c52:	1d9a      	adds	r2, r3, #6
 8003c54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c58:	4413      	add	r3, r2
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003c64:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	f8d7 6128 	ldr.w	r6, [r7, #296]	; 0x128
 8003c74:	0433      	lsls	r3, r6, #16
 8003c76:	2200      	movs	r2, #0
 8003c78:	ea40 0602 	orr.w	r6, r0, r2
 8003c7c:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 8003c80:	430b      	orrs	r3, r1
 8003c82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c86:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003c8a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c8e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003c92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c96:	1dda      	adds	r2, r3, #7
 8003c98:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c9c:	4413      	add	r3, r2
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003ca8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	f8d7 6118 	ldr.w	r6, [r7, #280]	; 0x118
 8003cb8:	0633      	lsls	r3, r6, #24
 8003cba:	2200      	movs	r2, #0
 8003cbc:	ea40 0602 	orr.w	r6, r0, r2
 8003cc0:	f8c7 6110 	str.w	r6, [r7, #272]	; 0x110
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003cca:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003cce:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8003cd2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003cd6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8003cda:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003cde:	3308      	adds	r3, #8
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8003ce8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cec:	3308      	adds	r3, #8
 8003cee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8003cf2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003cfc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	f67f aed7 	bls.w	8003ab4 <_ZN11sensor_msgs3Imu11deserializeEPh+0x64>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8003d06:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003d0a:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8003d0e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003d12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d16:	4413      	add	r3, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fe f826 	bl	8001d6a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003d24:	4413      	add	r3, r2
 8003d26:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d30:	e133      	b.n	8003f9a <_ZN11sensor_msgs3Imu11deserializeEPh+0x54a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d3e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d42:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003d46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d4a:	4413      	add	r3, r2
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003d56:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003d5a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003d5e:	4623      	mov	r3, r4
 8003d60:	4303      	orrs	r3, r0
 8003d62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003d66:	462b      	mov	r3, r5
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003d6e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003d72:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d76:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d84:	4413      	add	r3, r2
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d90:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	; 0xf8
 8003da0:	4634      	mov	r4, r6
 8003da2:	0223      	lsls	r3, r4, #8
 8003da4:	462c      	mov	r4, r5
 8003da6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003daa:	462c      	mov	r4, r5
 8003dac:	0222      	lsls	r2, r4, #8
 8003dae:	ea40 0402 	orr.w	r4, r0, r2
 8003db2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003db6:	430b      	orrs	r3, r1
 8003db8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003dbc:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003dc0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003dc4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003dc8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003dcc:	1c9a      	adds	r2, r3, #2
 8003dce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dd2:	4413      	add	r3, r2
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	; 0xe8
 8003dee:	4634      	mov	r4, r6
 8003df0:	0423      	lsls	r3, r4, #16
 8003df2:	462c      	mov	r4, r5
 8003df4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003df8:	462c      	mov	r4, r5
 8003dfa:	0422      	lsls	r2, r4, #16
 8003dfc:	ea40 0402 	orr.w	r4, r0, r2
 8003e00:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003e04:	430b      	orrs	r3, r1
 8003e06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e0a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003e0e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e12:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003e16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003e1a:	1cda      	adds	r2, r3, #3
 8003e1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e20:	4413      	add	r3, r2
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e2c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e30:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003e34:	4623      	mov	r3, r4
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	061b      	lsls	r3, r3, #24
 8003e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e44:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003e48:	4623      	mov	r3, r4
 8003e4a:	4303      	orrs	r3, r0
 8003e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e50:	462b      	mov	r3, r5
 8003e52:	430b      	orrs	r3, r1
 8003e54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e58:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003e5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003e60:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003e64:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003e68:	1d1a      	adds	r2, r3, #4
 8003e6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e7a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003e8a:	0023      	movs	r3, r4
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	ea40 0402 	orr.w	r4, r0, r2
 8003e92:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003e96:	430b      	orrs	r3, r1
 8003e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e9c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003ea0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ea4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ea8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003eac:	1d5a      	adds	r2, r3, #5
 8003eae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ebe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003ece:	0223      	lsls	r3, r4, #8
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	ea40 0402 	orr.w	r4, r0, r2
 8003ed6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003eda:	430b      	orrs	r3, r1
 8003edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ee0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003ee4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ee8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003eec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003ef0:	1d9a      	adds	r2, r3, #6
 8003ef2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ef6:	4413      	add	r3, r2
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003f12:	0423      	lsls	r3, r4, #16
 8003f14:	2200      	movs	r2, #0
 8003f16:	ea40 0402 	orr.w	r4, r0, r2
 8003f1a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f24:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003f28:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003f2c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003f30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003f34:	1dda      	adds	r2, r3, #7
 8003f36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f3a:	4413      	add	r3, r2
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003f56:	0623      	lsls	r3, r4, #24
 8003f58:	2200      	movs	r2, #0
 8003f5a:	ea40 0402 	orr.w	r4, r0, r2
 8003f5e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003f62:	430b      	orrs	r3, r1
 8003f64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f68:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003f6c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8003f70:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003f74:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8003f78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f7c:	3315      	adds	r3, #21
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8003f86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8003f90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f94:	3301      	adds	r3, #1
 8003f96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003f9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	f67f aec7 	bls.w	8003d32 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2e2>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8003fa4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003fa8:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8003fac:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003fb0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003fb4:	4413      	add	r3, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f7fd fed7 	bl	8001d6a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003fce:	e10f      	b.n	80041f0 <_ZN11sensor_msgs3Imu11deserializeEPh+0x7a0>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003fdc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003fe0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003fe4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003fe8:	4413      	add	r3, r2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ff4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ff8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003ffc:	4623      	mov	r3, r4
 8003ffe:	4303      	orrs	r3, r0
 8004000:	67bb      	str	r3, [r7, #120]	; 0x78
 8004002:	462b      	mov	r3, r5
 8004004:	430b      	orrs	r3, r1
 8004006:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004008:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800400c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004010:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004014:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800401e:	4413      	add	r3, r2
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2200      	movs	r2, #0
 8004026:	673b      	str	r3, [r7, #112]	; 0x70
 8004028:	677a      	str	r2, [r7, #116]	; 0x74
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	; 0x70
 8004036:	4634      	mov	r4, r6
 8004038:	0223      	lsls	r3, r4, #8
 800403a:	462c      	mov	r4, r5
 800403c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004040:	462c      	mov	r4, r5
 8004042:	0222      	lsls	r2, r4, #8
 8004044:	ea40 0402 	orr.w	r4, r0, r2
 8004048:	66bc      	str	r4, [r7, #104]	; 0x68
 800404a:	430b      	orrs	r3, r1
 800404c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800404e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004052:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004056:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800405a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800405e:	1c9a      	adds	r2, r3, #2
 8004060:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004064:	4413      	add	r3, r2
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2200      	movs	r2, #0
 800406c:	663b      	str	r3, [r7, #96]	; 0x60
 800406e:	667a      	str	r2, [r7, #100]	; 0x64
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	; 0x60
 800407c:	4634      	mov	r4, r6
 800407e:	0423      	lsls	r3, r4, #16
 8004080:	462c      	mov	r4, r5
 8004082:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004086:	462c      	mov	r4, r5
 8004088:	0422      	lsls	r2, r4, #16
 800408a:	ea40 0402 	orr.w	r4, r0, r2
 800408e:	65bc      	str	r4, [r7, #88]	; 0x58
 8004090:	430b      	orrs	r3, r1
 8004092:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004094:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004098:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800409c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80040a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80040a4:	1cda      	adds	r2, r3, #3
 80040a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80040aa:	4413      	add	r3, r2
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2200      	movs	r2, #0
 80040b2:	653b      	str	r3, [r7, #80]	; 0x50
 80040b4:	657a      	str	r2, [r7, #84]	; 0x54
 80040b6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80040ba:	4623      	mov	r3, r4
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c0:	4623      	mov	r3, r4
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80040ca:	4623      	mov	r3, r4
 80040cc:	4303      	orrs	r3, r0
 80040ce:	643b      	str	r3, [r7, #64]	; 0x40
 80040d0:	462b      	mov	r3, r5
 80040d2:	430b      	orrs	r3, r1
 80040d4:	647b      	str	r3, [r7, #68]	; 0x44
 80040d6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80040da:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80040de:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80040e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80040e6:	1d1a      	adds	r2, r3, #4
 80040e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80040ec:	4413      	add	r3, r2
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2200      	movs	r2, #0
 80040f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8004102:	0023      	movs	r3, r4
 8004104:	2200      	movs	r2, #0
 8004106:	ea40 0402 	orr.w	r4, r0, r2
 800410a:	633c      	str	r4, [r7, #48]	; 0x30
 800410c:	430b      	orrs	r3, r1
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
 8004110:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004114:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004118:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800411c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004120:	1d5a      	adds	r2, r3, #5
 8004122:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004126:	4413      	add	r3, r2
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2200      	movs	r2, #0
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800413c:	0223      	lsls	r3, r4, #8
 800413e:	2200      	movs	r2, #0
 8004140:	ea40 0402 	orr.w	r4, r0, r2
 8004144:	623c      	str	r4, [r7, #32]
 8004146:	430b      	orrs	r3, r1
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
 800414a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800414e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004152:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004156:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800415a:	1d9a      	adds	r2, r3, #6
 800415c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004160:	4413      	add	r3, r2
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2200      	movs	r2, #0
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	61fa      	str	r2, [r7, #28]
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	69bc      	ldr	r4, [r7, #24]
 8004176:	0423      	lsls	r3, r4, #16
 8004178:	2200      	movs	r2, #0
 800417a:	ea40 0402 	orr.w	r4, r0, r2
 800417e:	613c      	str	r4, [r7, #16]
 8004180:	430b      	orrs	r3, r1
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004188:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800418c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004190:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004194:	1dda      	adds	r2, r3, #7
 8004196:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800419a:	4413      	add	r3, r2
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2200      	movs	r2, #0
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	60fa      	str	r2, [r7, #12]
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	68bc      	ldr	r4, [r7, #8]
 80041b0:	0623      	lsls	r3, r4, #24
 80041b2:	2200      	movs	r2, #0
 80041b4:	ea40 0402 	orr.w	r4, r0, r2
 80041b8:	603c      	str	r4, [r7, #0]
 80041ba:	430b      	orrs	r3, r1
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	e9d7 3400 	ldrd	r3, r4, [r7]
 80041c2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 80041c6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80041ca:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80041ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80041d2:	3322      	adds	r3, #34	; 0x22
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4413      	add	r3, r2
 80041d8:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80041dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80041e0:	3308      	adds	r3, #8
 80041e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 80041e6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80041ea:	3301      	adds	r3, #1
 80041ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80041f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	f67f aeeb 	bls.w	8003fd0 <_ZN11sensor_msgs3Imu11deserializeEPh+0x580>
      }
     return offset;
 80041fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
    }
 80041fe:	4618      	mov	r0, r3
 8004200:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8004204:	46bd      	mov	sp, r7
 8004206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800420c <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	4b03      	ldr	r3, [pc, #12]	; (8004224 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	08008448 	.word	0x08008448

08004228 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	08008458 	.word	0x08008458

08004244 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	08008604 	.word	0x08008604

08004264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ffe8 	bl	8004244 <_ZN3ros15NodeHandleBase_C1Ev>
 8004274:	4a36      	ldr	r2, [pc, #216]	; (8004350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd f92a 	bl	80014d8 <_ZN13STM32HardwareC1Ev>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80042aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f003 fe3e 	bl	8007f32 <memset>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80042bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f003 fe35 	bl	8007f32 <memset>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80042ce:	2264      	movs	r2, #100	; 0x64
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f003 fe2d 	bl	8007f32 <memset>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80042de:	2264      	movs	r2, #100	; 0x64
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f003 fe25 	bl	8007f32 <memset>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc fdb4 	bl	8000eac <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	08008518 	.word	0x08008518

08004354 <_Z6led_cbRKN8std_msgs5EmptyE>:

ros::Publisher imu_pub("imu", &imu);
char hello[]="Hello World";

//subscriber
void led_cb(const std_msgs::Empty &msg ){
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800435c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004360:	4803      	ldr	r0, [pc, #12]	; (8004370 <_Z6led_cbRKN8std_msgs5EmptyE+0x1c>)
 8004362:	f001 ff2c 	bl	80061be <HAL_GPIO_TogglePin>
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40020c00 	.word	0x40020c00

08004374 <HAL_UART_TxCpltCallback>:

ros::Subscriber<std_msgs::Empty>led_sub("toggle_led",&led_cb);
//ros::Subscriber<std_msgs::Float32>vel_sub("/set_velocity",&velocityCallback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART6){
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a06      	ldr	r2, [pc, #24]	; (800439c <HAL_UART_TxCpltCallback+0x28>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d106      	bne.n	8004394 <HAL_UART_TxCpltCallback+0x20>
		nh.getHardware()->flush();
 8004386:	4806      	ldr	r0, [pc, #24]	; (80043a0 <HAL_UART_TxCpltCallback+0x2c>)
 8004388:	f000 f8ce 	bl	8004528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800438c:	4603      	mov	r3, r0
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd f908 	bl	80015a4 <_ZN13STM32Hardware5flushEv>
	}
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40011400 	.word	0x40011400
 80043a0:	20000190 	.word	0x20000190

080043a4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART6){
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a06      	ldr	r2, [pc, #24]	; (80043cc <HAL_UART_RxCpltCallback+0x28>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d106      	bne.n	80043c4 <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 80043b6:	4806      	ldr	r0, [pc, #24]	; (80043d0 <HAL_UART_RxCpltCallback+0x2c>)
 80043b8:	f000 f8b6 	bl	8004528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80043bc:	4603      	mov	r3, r0
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd f8b1 	bl	8001526 <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40011400 	.word	0x40011400
 80043d0:	20000190 	.word	0x20000190

080043d4 <setup>:

void setup()
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
	nh.initNode();
 80043d8:	4806      	ldr	r0, [pc, #24]	; (80043f4 <setup+0x20>)
 80043da:	f000 f8b1 	bl	8004540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.advertise(chatter);
 80043de:	4906      	ldr	r1, [pc, #24]	; (80043f8 <setup+0x24>)
 80043e0:	4804      	ldr	r0, [pc, #16]	; (80043f4 <setup+0x20>)
 80043e2:	f000 f8ca 	bl	800457a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(led_sub);
 80043e6:	4905      	ldr	r1, [pc, #20]	; (80043fc <setup+0x28>)
 80043e8:	4802      	ldr	r0, [pc, #8]	; (80043f4 <setup+0x20>)
 80043ea:	f000 f8f6 	bl	80045da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>



}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000190 	.word	0x20000190
 80043f8:	20000c94 	.word	0x20000c94
 80043fc:	20000cd0 	.word	0x20000cd0

08004400 <loop>:
void loop()
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	//publish message

	str_msg.data=hello;
 8004404:	4b07      	ldr	r3, [pc, #28]	; (8004424 <loop+0x24>)
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <loop+0x28>)
 8004408:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 800440a:	4906      	ldr	r1, [pc, #24]	; (8004424 <loop+0x24>)
 800440c:	4807      	ldr	r0, [pc, #28]	; (800442c <loop+0x2c>)
 800440e:	f7fd f830 	bl	8001472 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
//
//		nowTick=pastTick;
//
//		num_test++;
//	}
	nh.spinOnce();
 8004412:	4807      	ldr	r0, [pc, #28]	; (8004430 <loop+0x30>)
 8004414:	f000 f90c 	bl	8004630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(1000);
 8004418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800441c:	f000 ffe2 	bl	80053e4 <HAL_Delay>
}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000ad4 	.word	0x20000ad4
 8004428:	20000000 	.word	0x20000000
 800442c:	20000c94 	.word	0x20000c94
 8004430:	20000190 	.word	0x20000190

08004434 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e00c      	b.n	800445e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	fa22 f103 	lsr.w	r1, r2, r3
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	b2ca      	uxtb	r2, r1
 8004456:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d9ef      	bls.n	8004444 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e010      	b.n	80044aa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6839      	ldr	r1, [r7, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	440a      	add	r2, r1
 8004492:	7812      	ldrb	r2, [r2, #0]
 8004494:	4611      	mov	r1, r2
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	00d2      	lsls	r2, r2, #3
 800449a:	fa01 f202 	lsl.w	r2, r1, r2
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3301      	adds	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d9eb      	bls.n	8004488 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	4a04      	ldr	r2, [pc, #16]	; (80044dc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	080085ec 	.word	0x080085ec

080044e0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ffe5 	bl	80044c0 <_ZN3ros11Subscriber_C1Ev>
 80044f6:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	330c      	adds	r3, #12
 8004500:	4618      	mov	r0, r3
 8004502:	f7fd f9b1 	bl	8001868 <_ZN8std_msgs5EmptyC1Ev>
    cb_(cb),
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	611a      	str	r2, [r3, #16]
    endpoint_(endpoint)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	615a      	str	r2, [r3, #20]
  {
    topic_ = topic_name;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]
  };
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	08008500 	.word	0x08008500

08004528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
  }
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	4618      	mov	r0, r3
 800454e:	f7fc ffdf 	bl	8001510 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e01d      	b.n	80045c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d111      	bne.n	80045c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	60da      	str	r2, [r3, #12]
        return true;
 80045bc:	2301      	movs	r3, #1
 80045be:	e006      	b.n	80045ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b18      	cmp	r3, #24
 80045ca:	ddde      	ble.n	800458a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80045cc:	2300      	movs	r3, #0
  }
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e018      	b.n	800461c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	f202 2222 	addw	r2, r2, #546	; 0x222
 80045f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10d      	bne.n	8004616 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	605a      	str	r2, [r3, #4]
        return true;
 8004612:	2301      	movs	r3, #1
 8004614:	e006      	b.n	8004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3301      	adds	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b18      	cmp	r3, #24
 8004620:	dde3      	ble.n	80045ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8004622:	2300      	movs	r3, #0
  }
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	4618      	mov	r0, r3
 800463e:	f7fd f86b 	bl	8001718 <_ZN13STM32Hardware4timeEv>
 8004642:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004652:	4293      	cmp	r3, r2
 8004654:	d903      	bls.n	800465e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004664:	2b00      	cmp	r3, #0
 8004666:	d009      	beq.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	429a      	cmp	r2, r3
 8004672:	d903      	bls.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004682:	2b00      	cmp	r3, #0
 8004684:	d014      	beq.n	80046b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f7fd f844 	bl	8001718 <_ZN13STM32Hardware4timeEv>
 8004690:	4602      	mov	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad2      	subs	r2, r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800469c:	429a      	cmp	r2, r3
 800469e:	bf8c      	ite	hi
 80046a0:	2301      	movhi	r3, #1
 80046a2:	2300      	movls	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80046aa:	f06f 0301 	mvn.w	r3, #1
 80046ae:	e194      	b.n	80049da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fc ff47 	bl	8001548 <_ZN13STM32Hardware4readEv>
 80046ba:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f2c0 8174 	blt.w	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046da:	2b07      	cmp	r3, #7
 80046dc:	d11e      	bne.n	800471c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80046e4:	1c59      	adds	r1, r3, #1
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	b2d1      	uxtb	r1, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	460a      	mov	r2, r1
 80046f6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004700:	1e5a      	subs	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1b4      	bne.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2208      	movs	r2, #8
 8004716:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800471a:	e7af      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004722:	2b00      	cmp	r3, #0
 8004724:	d128      	bne.n	8004778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2bff      	cmp	r3, #255	; 0xff
 800472a:	d10d      	bne.n	8004748 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f103 0214 	add.w	r2, r3, #20
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004746:	e799      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f7fc ffe3 	bl	8001718 <_ZN13STM32Hardware4timeEv>
 8004752:	4602      	mov	r2, r0
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f241 3288 	movw	r2, #5000	; 0x1388
 800475c:	4293      	cmp	r3, r2
 800475e:	bf8c      	ite	hi
 8004760:	2301      	movhi	r3, #1
 8004762:	2300      	movls	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d088      	beq.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8004772:	f06f 0301 	mvn.w	r3, #1
 8004776:	e130      	b.n	80049da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800477e:	2b01      	cmp	r3, #1
 8004780:	d118      	bne.n	80047b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2bfe      	cmp	r3, #254	; 0xfe
 8004786:	d107      	bne.n	8004798 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004796:	e771      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f47f af68 	bne.w	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f918 	bl	80049e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80047b2:	e763      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d113      	bne.n	80047e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80047e4:	e74a      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d110      	bne.n	8004812 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	441a      	add	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004810:	e734      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004818:	2b04      	cmp	r3, #4
 800481a:	d116      	bne.n	800484a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004822:	425a      	negs	r2, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	bf58      	it	pl
 800482a:	4253      	negpl	r3, r2
 800482c:	2bff      	cmp	r3, #255	; 0xff
 800482e:	d107      	bne.n	8004840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800483e:	e71d      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004848:	e718      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004850:	2b05      	cmp	r3, #5
 8004852:	d10f      	bne.n	8004874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004872:	e703      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800487a:	2b06      	cmp	r3, #6
 800487c:	d117      	bne.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2207      	movs	r2, #7
 8004894:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f47f aeec 	bne.w	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2208      	movs	r2, #8
 80048a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80048ac:	e6e6      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	f47f aee1 	bne.w	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80048c8:	425a      	negs	r2, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	bf58      	it	pl
 80048d0:	4253      	negpl	r3, r2
 80048d2:	2bff      	cmp	r3, #255	; 0xff
 80048d4:	f47f aed2 	bne.w	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d110      	bne.n	8004904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f87d 	bl	80049e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f898 	bl	8004a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80048fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004902:	e06a      	b.n	80049da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800490a:	2b0a      	cmp	r3, #10
 800490c:	d107      	bne.n	800491e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f960 	bl	8004bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800491c:	e6ae      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004924:	2b06      	cmp	r3, #6
 8004926:	d10e      	bne.n	8004946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f7fc fbf7 	bl	800112a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004944:	e69a      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800494c:	2b0b      	cmp	r3, #11
 800494e:	d104      	bne.n	800495a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004958:	e690      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004960:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f202 2222 	addw	r2, r2, #546	; 0x222
 800496a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f43f ae84 	beq.w	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800497a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004984:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800498e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80049a6:	4611      	mov	r1, r2
 80049a8:	4798      	blx	r3
    while (true)
 80049aa:	e667      	b.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80049ac:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00f      	beq.n	80049d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d906      	bls.n	80049d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f809 	bl	80049e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80049d8:	2300      	movs	r3, #0
  }
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b086      	sub	sp, #24
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80049ea:	f107 030c 	add.w	r3, r7, #12
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fb fef8 	bl	80007e4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f107 020c 	add.w	r2, r7, #12
 80049fe:	210a      	movs	r1, #10
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fc fe85 	bl	8001718 <_ZN13STM32Hardware4timeEv>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004a16:	bf00      	nop
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004a1e:	b590      	push	{r4, r7, lr}
 8004a20:	b08b      	sub	sp, #44	; 0x2c
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004a26:	f107 030c 	add.w	r3, r7, #12
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fb ffca 	bl	80009c4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
 8004a34:	e062      	b.n	8004afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d056      	beq.n	8004af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3308      	adds	r3, #8
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4608      	mov	r0, r1
 8004a96:	4798      	blx	r3
 8004a98:	4603      	mov	r3, r0
 8004a9a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4608      	mov	r0, r1
 8004ac4:	4798      	blx	r3
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ace:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681c      	ldr	r4, [r3, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fc fcd8 	bl	800149a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004aea:	4601      	mov	r1, r0
 8004aec:	f107 030c 	add.w	r3, r7, #12
 8004af0:	461a      	mov	r2, r3
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	3301      	adds	r3, #1
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	2b18      	cmp	r3, #24
 8004b00:	dd99      	ble.n	8004a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
 8004b06:	e05e      	b.n	8004bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d053      	beq.n	8004bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4798      	blx	r3
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b64:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b70:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4608      	mov	r0, r1
 8004b80:	4798      	blx	r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b8a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681c      	ldr	r4, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3304      	adds	r3, #4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	4798      	blx	r3
 8004bb4:	4601      	mov	r1, r0
 8004bb6:	f107 030c 	add.w	r3, r7, #12
 8004bba:	461a      	mov	r2, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	2b18      	cmp	r3, #24
 8004bca:	dd9d      	ble.n	8004b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004bd4:	bf00      	nop
 8004bd6:	372c      	adds	r7, #44	; 0x2c
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}

08004bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004be6:	f107 0308 	add.w	r3, r7, #8
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fb fdfa 	bl	80007e4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fc fd8f 	bl	8001718 <_ZN13STM32Hardware4timeEv>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c06:	f107 0308 	add.w	r3, r7, #8
 8004c0a:	6839      	ldr	r1, [r7, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb fe59 	bl	80008c4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4915      	ldr	r1, [pc, #84]	; (8004c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004c18:	fba1 1303 	umull	r1, r3, r1, r3
 8004c1c:	099b      	lsrs	r3, r3, #6
 8004c1e:	4413      	add	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004c22:	6939      	ldr	r1, [r7, #16]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004c28:	fba3 0302 	umull	r0, r3, r3, r2
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c32:	fb00 f303 	mul.w	r3, r0, r3
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	4a0d      	ldr	r2, [pc, #52]	; (8004c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	440b      	add	r3, r1
 8004c40:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004c42:	f107 0308 	add.w	r3, r7, #8
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8a6 	bl	8004d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fc fd5f 	bl	8001718 <_ZN13STM32Hardware4timeEv>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004c62:	bf00      	nop
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	10624dd3 	.word	0x10624dd3
 8004c70:	000f4240 	.word	0x000f4240

08004c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b63      	cmp	r3, #99	; 0x63
 8004c84:	dd09      	ble.n	8004c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004c8c:	f083 0301 	eor.w	r3, r3, #1
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e079      	b.n	8004d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004ca6:	3207      	adds	r2, #7
 8004ca8:	4611      	mov	r1, r2
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
 8004cae:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	22ff      	movs	r2, #255	; 0xff
 8004cb4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	22fe      	movs	r2, #254	; 0xfe
 8004cbc:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004ce6:	4413      	add	r3, r2
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	b21b      	sxth	r3, r3
 8004d02:	121b      	asrs	r3, r3, #8
 8004d04:	b21b      	sxth	r3, r3
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d12:	2305      	movs	r3, #5
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	e00c      	b.n	8004d32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	3306      	adds	r3, #6
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	dded      	ble.n	8004d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3307      	adds	r3, #7
 8004d40:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	425a      	negs	r2, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	bf58      	it	pl
 8004d4c:	4253      	negpl	r3, r2
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	6179      	str	r1, [r7, #20]
 8004d56:	43d2      	mvns	r2, r2
 8004d58:	b2d1      	uxtb	r1, r2
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	460a      	mov	r2, r1
 8004d60:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6a:	dc0a      	bgt.n	8004d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1d18      	adds	r0, r3, #4
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f7fc fc87 	bl	800168c <_ZN13STM32Hardware5writeEPKhi>
      return l;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	e005      	b.n	8004d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004d82:	4905      	ldr	r1, [pc, #20]	; (8004d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f849 	bl	8004e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	0800847c 	.word	0x0800847c

08004d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3304      	adds	r3, #4
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fc fcb4 	bl	8001718 <_ZN13STM32Hardware4timeEv>
 8004db0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4915      	ldr	r1, [pc, #84]	; (8004e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004dba:	fba1 1303 	umull	r1, r3, r1, r3
 8004dbe:	099b      	lsrs	r3, r3, #6
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	1e5a      	subs	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6859      	ldr	r1, [r3, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ddc:	fb00 f303 	mul.w	r3, r0, r3
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004de4:	fb02 f303 	mul.w	r3, r2, r3
 8004de8:	1aca      	subs	r2, r1, r3
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8004dec:	4413      	add	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f7fb fb66 	bl	80004d4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	10624dd3 	.word	0x10624dd3
 8004e14:	000f4240 	.word	0x000f4240
 8004e18:	3b9aca00 	.word	0x3b9aca00

08004e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	2103      	movs	r1, #3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f804 	bl	8004e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	460b      	mov	r3, r1
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004e46:	f107 0314 	add.w	r3, r7, #20
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fb ff7e 	bl	8000d4c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004e50:	7afb      	ldrb	r3, [r7, #11]
 8004e52:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f107 0214 	add.w	r2, r7, #20
 8004e62:	2107      	movs	r1, #7
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	4798      	blx	r3
  }
 8004e68:	bf00      	nop
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <_Z41__static_initialization_and_destruction_0ii>:
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d131      	bne.n	8004ee4 <_Z41__static_initialization_and_destruction_0ii+0x74>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d12c      	bne.n	8004ee4 <_Z41__static_initialization_and_destruction_0ii+0x74>
ros::NodeHandle nh;
 8004e8a:	4818      	ldr	r0, [pc, #96]	; (8004eec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004e8c:	f7ff f9ea 	bl	8004264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int32 num_msg;
 8004e90:	4817      	ldr	r0, [pc, #92]	; (8004ef0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004e92:	f7fc fc4d 	bl	8001730 <_ZN8std_msgs5Int32C1Ev>
std_msgs::String str_msg;
 8004e96:	4817      	ldr	r0, [pc, #92]	; (8004ef4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004e98:	f7fc fd30 	bl	80018fc <_ZN8std_msgs6StringC1Ev>
sensor_msgs::Imu imu;
 8004e9c:	4816      	ldr	r0, [pc, #88]	; (8004ef8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004e9e:	f7fe fbb5 	bl	800360c <_ZN11sensor_msgs3ImuC1Ev>
geometry_msgs::Twist vel_msg;
 8004ea2:	4816      	ldr	r0, [pc, #88]	; (8004efc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004ea4:	f7fd fadc 	bl	8002460 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher num_pub("num", &num_msg);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004eac:	4914      	ldr	r1, [pc, #80]	; (8004f00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004eae:	4815      	ldr	r0, [pc, #84]	; (8004f04 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004eb0:	f7fc fac8 	bl	8001444 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher chatter("chatter",&str_msg);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004eb8:	4913      	ldr	r1, [pc, #76]	; (8004f08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004eba:	4814      	ldr	r0, [pc, #80]	; (8004f0c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004ebc:	f7fc fac2 	bl	8001444 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher vel_pub("vel_pub",&vel_msg);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4a0e      	ldr	r2, [pc, #56]	; (8004efc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004ec4:	4912      	ldr	r1, [pc, #72]	; (8004f10 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004ec6:	4813      	ldr	r0, [pc, #76]	; (8004f14 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004ec8:	f7fc fabc 	bl	8001444 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher imu_pub("imu", &imu);
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004ed0:	4911      	ldr	r1, [pc, #68]	; (8004f18 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004ed2:	4812      	ldr	r0, [pc, #72]	; (8004f1c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004ed4:	f7fc fab6 	bl	8001444 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Empty>led_sub("toggle_led",&led_cb);
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004edc:	4911      	ldr	r1, [pc, #68]	; (8004f24 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004ede:	4812      	ldr	r0, [pc, #72]	; (8004f28 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004ee0:	f7ff fafe 	bl	80044e0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20000190 	.word	0x20000190
 8004ef0:	20000acc 	.word	0x20000acc
 8004ef4:	20000ad4 	.word	0x20000ad4
 8004ef8:	20000ae0 	.word	0x20000ae0
 8004efc:	20000c38 	.word	0x20000c38
 8004f00:	080084b8 	.word	0x080084b8
 8004f04:	20000c80 	.word	0x20000c80
 8004f08:	080084bc 	.word	0x080084bc
 8004f0c:	20000c94 	.word	0x20000c94
 8004f10:	080084c4 	.word	0x080084c4
 8004f14:	20000ca8 	.word	0x20000ca8
 8004f18:	080084cc 	.word	0x080084cc
 8004f1c:	20000cbc 	.word	0x20000cbc
 8004f20:	08004355 	.word	0x08004355
 8004f24:	080084d0 	.word	0x080084d0
 8004f28:	20000cd0 	.word	0x20000cd0

08004f2c <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fc fcb3 	bl	80018a8 <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	320c      	adds	r2, #12
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4798      	blx	r3
  }
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
  }
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fc fca2 	bl	80018c4 <_ZN8std_msgs5Empty7getTypeEv>
 8004f80:	4603      	mov	r3, r0
  }
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	330c      	adds	r3, #12
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fc fca2 	bl	80018e0 <_ZN8std_msgs5Empty6getMD5Ev>
 8004f9c:	4603      	mov	r3, r0
  }
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
    return configured_;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <_GLOBAL__sub_I_nh>:
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fc8:	2001      	movs	r0, #1
 8004fca:	f7ff ff51 	bl	8004e70 <_Z41__static_initialization_and_destruction_0ii>
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	4b10      	ldr	r3, [pc, #64]	; (800501c <HAL_MspInit+0x4c>)
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	4a0f      	ldr	r2, [pc, #60]	; (800501c <HAL_MspInit+0x4c>)
 8004fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	; (800501c <HAL_MspInit+0x4c>)
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fee:	607b      	str	r3, [r7, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	4b09      	ldr	r3, [pc, #36]	; (800501c <HAL_MspInit+0x4c>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	4a08      	ldr	r2, [pc, #32]	; (800501c <HAL_MspInit+0x4c>)
 8004ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005000:	6413      	str	r3, [r2, #64]	; 0x40
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_MspInit+0x4c>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800

08005020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005028:	f107 0314 	add.w	r3, r7, #20
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	605a      	str	r2, [r3, #4]
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a4c      	ldr	r2, [pc, #304]	; (8005170 <HAL_UART_MspInit+0x150>)
 800503e:	4293      	cmp	r3, r2
 8005040:	f040 8091 	bne.w	8005166 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	4b4a      	ldr	r3, [pc, #296]	; (8005174 <HAL_UART_MspInit+0x154>)
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	4a49      	ldr	r2, [pc, #292]	; (8005174 <HAL_UART_MspInit+0x154>)
 800504e:	f043 0320 	orr.w	r3, r3, #32
 8005052:	6453      	str	r3, [r2, #68]	; 0x44
 8005054:	4b47      	ldr	r3, [pc, #284]	; (8005174 <HAL_UART_MspInit+0x154>)
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	4b43      	ldr	r3, [pc, #268]	; (8005174 <HAL_UART_MspInit+0x154>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	4a42      	ldr	r2, [pc, #264]	; (8005174 <HAL_UART_MspInit+0x154>)
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	6313      	str	r3, [r2, #48]	; 0x30
 8005070:	4b40      	ldr	r3, [pc, #256]	; (8005174 <HAL_UART_MspInit+0x154>)
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800507c:	23c0      	movs	r3, #192	; 0xc0
 800507e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005080:	2302      	movs	r3, #2
 8005082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005084:	2300      	movs	r3, #0
 8005086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005088:	2303      	movs	r3, #3
 800508a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800508c:	2308      	movs	r3, #8
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005090:	f107 0314 	add.w	r3, r7, #20
 8005094:	4619      	mov	r1, r3
 8005096:	4838      	ldr	r0, [pc, #224]	; (8005178 <HAL_UART_MspInit+0x158>)
 8005098:	f000 fedc 	bl	8005e54 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800509c:	4b37      	ldr	r3, [pc, #220]	; (800517c <HAL_UART_MspInit+0x15c>)
 800509e:	4a38      	ldr	r2, [pc, #224]	; (8005180 <HAL_UART_MspInit+0x160>)
 80050a0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80050a2:	4b36      	ldr	r3, [pc, #216]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050a4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80050a8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050aa:	4b34      	ldr	r3, [pc, #208]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050b6:	4b31      	ldr	r3, [pc, #196]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050bc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050be:	4b2f      	ldr	r3, [pc, #188]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050c4:	4b2d      	ldr	r3, [pc, #180]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80050ca:	4b2c      	ldr	r3, [pc, #176]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050d0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050d2:	4b2a      	ldr	r3, [pc, #168]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050d8:	4b28      	ldr	r3, [pc, #160]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050da:	2200      	movs	r2, #0
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80050de:	4827      	ldr	r0, [pc, #156]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050e0:	f000 fab6 	bl	8005650 <HAL_DMA_Init>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80050ea:	f7fb fb55 	bl	8000798 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a22      	ldr	r2, [pc, #136]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80050f4:	4a21      	ldr	r2, [pc, #132]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80050fa:	4b22      	ldr	r3, [pc, #136]	; (8005184 <HAL_UART_MspInit+0x164>)
 80050fc:	4a22      	ldr	r2, [pc, #136]	; (8005188 <HAL_UART_MspInit+0x168>)
 80050fe:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8005100:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_UART_MspInit+0x164>)
 8005102:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005106:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005108:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <HAL_UART_MspInit+0x164>)
 800510a:	2240      	movs	r2, #64	; 0x40
 800510c:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800510e:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <HAL_UART_MspInit+0x164>)
 8005110:	2200      	movs	r2, #0
 8005112:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005114:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <HAL_UART_MspInit+0x164>)
 8005116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800511a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_UART_MspInit+0x164>)
 800511e:	2200      	movs	r2, #0
 8005120:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005122:	4b18      	ldr	r3, [pc, #96]	; (8005184 <HAL_UART_MspInit+0x164>)
 8005124:	2200      	movs	r2, #0
 8005126:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8005128:	4b16      	ldr	r3, [pc, #88]	; (8005184 <HAL_UART_MspInit+0x164>)
 800512a:	2200      	movs	r2, #0
 800512c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800512e:	4b15      	ldr	r3, [pc, #84]	; (8005184 <HAL_UART_MspInit+0x164>)
 8005130:	2200      	movs	r2, #0
 8005132:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005134:	4b13      	ldr	r3, [pc, #76]	; (8005184 <HAL_UART_MspInit+0x164>)
 8005136:	2200      	movs	r2, #0
 8005138:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800513a:	4812      	ldr	r0, [pc, #72]	; (8005184 <HAL_UART_MspInit+0x164>)
 800513c:	f000 fa88 	bl	8005650 <HAL_DMA_Init>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8005146:	f7fb fb27 	bl	8000798 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a0d      	ldr	r2, [pc, #52]	; (8005184 <HAL_UART_MspInit+0x164>)
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
 8005150:	4a0c      	ldr	r2, [pc, #48]	; (8005184 <HAL_UART_MspInit+0x164>)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005156:	2200      	movs	r2, #0
 8005158:	2100      	movs	r1, #0
 800515a:	2047      	movs	r0, #71	; 0x47
 800515c:	f000 fa41 	bl	80055e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005160:	2047      	movs	r0, #71	; 0x47
 8005162:	f000 fa5a 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005166:	bf00      	nop
 8005168:	3728      	adds	r7, #40	; 0x28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40011400 	.word	0x40011400
 8005174:	40023800 	.word	0x40023800
 8005178:	40020800 	.word	0x40020800
 800517c:	200000cc 	.word	0x200000cc
 8005180:	40026428 	.word	0x40026428
 8005184:	2000012c 	.word	0x2000012c
 8005188:	400264a0 	.word	0x400264a0

0800518c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005190:	e7fe      	b.n	8005190 <NMI_Handler+0x4>

08005192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005192:	b480      	push	{r7}
 8005194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005196:	e7fe      	b.n	8005196 <HardFault_Handler+0x4>

08005198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800519c:	e7fe      	b.n	800519c <MemManage_Handler+0x4>

0800519e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051a2:	e7fe      	b.n	80051a2 <BusFault_Handler+0x4>

080051a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051a8:	e7fe      	b.n	80051a8 <UsageFault_Handler+0x4>

080051aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051ae:	bf00      	nop
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051bc:	bf00      	nop
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051c6:	b480      	push	{r7}
 80051c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ca:	bf00      	nop
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051d8:	f000 f8e4 	bl	80053a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051dc:	bf00      	nop
 80051de:	bd80      	pop	{r7, pc}

080051e0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80051e4:	4802      	ldr	r0, [pc, #8]	; (80051f0 <DMA2_Stream1_IRQHandler+0x10>)
 80051e6:	f000 fbcb 	bl	8005980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80051ea:	bf00      	nop
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	200000cc 	.word	0x200000cc

080051f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80051f8:	4802      	ldr	r0, [pc, #8]	; (8005204 <DMA2_Stream6_IRQHandler+0x10>)
 80051fa:	f000 fbc1 	bl	8005980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	2000012c 	.word	0x2000012c

08005208 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800520c:	4802      	ldr	r0, [pc, #8]	; (8005218 <USART6_IRQHandler+0x10>)
 800520e:	f001 fd6f 	bl	8006cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005212:	bf00      	nop
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000084 	.word	0x20000084

0800521c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005224:	4a14      	ldr	r2, [pc, #80]	; (8005278 <_sbrk+0x5c>)
 8005226:	4b15      	ldr	r3, [pc, #84]	; (800527c <_sbrk+0x60>)
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <_sbrk+0x64>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005238:	4b11      	ldr	r3, [pc, #68]	; (8005280 <_sbrk+0x64>)
 800523a:	4a12      	ldr	r2, [pc, #72]	; (8005284 <_sbrk+0x68>)
 800523c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800523e:	4b10      	ldr	r3, [pc, #64]	; (8005280 <_sbrk+0x64>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4413      	add	r3, r2
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d207      	bcs.n	800525c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800524c:	f002 fe7a 	bl	8007f44 <__errno>
 8005250:	4603      	mov	r3, r0
 8005252:	220c      	movs	r2, #12
 8005254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	e009      	b.n	8005270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <_sbrk+0x64>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005262:	4b07      	ldr	r3, [pc, #28]	; (8005280 <_sbrk+0x64>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4413      	add	r3, r2
 800526a:	4a05      	ldr	r2, [pc, #20]	; (8005280 <_sbrk+0x64>)
 800526c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20020000 	.word	0x20020000
 800527c:	00000400 	.word	0x00000400
 8005280:	20000ce8 	.word	0x20000ce8
 8005284:	20000e38 	.word	0x20000e38

08005288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <SystemInit+0x20>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	4a05      	ldr	r2, [pc, #20]	; (80052a8 <SystemInit+0x20>)
 8005294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80052ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80052b0:	f7ff ffea 	bl	8005288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052b4:	480c      	ldr	r0, [pc, #48]	; (80052e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80052b6:	490d      	ldr	r1, [pc, #52]	; (80052ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80052b8:	4a0d      	ldr	r2, [pc, #52]	; (80052f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80052ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052bc:	e002      	b.n	80052c4 <LoopCopyDataInit>

080052be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052c2:	3304      	adds	r3, #4

080052c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052c8:	d3f9      	bcc.n	80052be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052ca:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80052cc:	4c0a      	ldr	r4, [pc, #40]	; (80052f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80052ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052d0:	e001      	b.n	80052d6 <LoopFillZerobss>

080052d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052d4:	3204      	adds	r2, #4

080052d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052d8:	d3fb      	bcc.n	80052d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80052da:	f002 fe39 	bl	8007f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052de:	f7fb f925 	bl	800052c <main>
  bx  lr    
 80052e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80052e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80052e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80052f0:	080086bc 	.word	0x080086bc
  ldr r2, =_sbss
 80052f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80052f8:	20000e38 	.word	0x20000e38

080052fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052fc:	e7fe      	b.n	80052fc <ADC_IRQHandler>
	...

08005300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <HAL_Init+0x40>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <HAL_Init+0x40>)
 800530a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800530e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_Init+0x40>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <HAL_Init+0x40>)
 8005316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800531a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800531c:	4b08      	ldr	r3, [pc, #32]	; (8005340 <HAL_Init+0x40>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a07      	ldr	r2, [pc, #28]	; (8005340 <HAL_Init+0x40>)
 8005322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005328:	2003      	movs	r0, #3
 800532a:	f000 f94f 	bl	80055cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800532e:	200f      	movs	r0, #15
 8005330:	f000 f808 	bl	8005344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005334:	f7ff fe4c 	bl	8004fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40023c00 	.word	0x40023c00

08005344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800534c:	4b12      	ldr	r3, [pc, #72]	; (8005398 <HAL_InitTick+0x54>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	4b12      	ldr	r3, [pc, #72]	; (800539c <HAL_InitTick+0x58>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	4619      	mov	r1, r3
 8005356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800535a:	fbb3 f3f1 	udiv	r3, r3, r1
 800535e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f967 	bl	8005636 <HAL_SYSTICK_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e00e      	b.n	8005390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b0f      	cmp	r3, #15
 8005376:	d80a      	bhi.n	800538e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005378:	2200      	movs	r2, #0
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	f000 f92f 	bl	80055e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005384:	4a06      	ldr	r2, [pc, #24]	; (80053a0 <HAL_InitTick+0x5c>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e000      	b.n	8005390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	2000000c 	.word	0x2000000c
 800539c:	20000014 	.word	0x20000014
 80053a0:	20000010 	.word	0x20000010

080053a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_IncTick+0x20>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_IncTick+0x24>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4413      	add	r3, r2
 80053b4:	4a04      	ldr	r2, [pc, #16]	; (80053c8 <HAL_IncTick+0x24>)
 80053b6:	6013      	str	r3, [r2, #0]
}
 80053b8:	bf00      	nop
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000014 	.word	0x20000014
 80053c8:	20000cec 	.word	0x20000cec

080053cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  return uwTick;
 80053d0:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <HAL_GetTick+0x14>)
 80053d2:	681b      	ldr	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20000cec 	.word	0x20000cec

080053e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053ec:	f7ff ffee 	bl	80053cc <HAL_GetTick>
 80053f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d005      	beq.n	800540a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <HAL_Delay+0x44>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800540a:	bf00      	nop
 800540c:	f7ff ffde 	bl	80053cc <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	429a      	cmp	r2, r3
 800541a:	d8f7      	bhi.n	800540c <HAL_Delay+0x28>
  {
  }
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000014 	.word	0x20000014

0800542c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800543c:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <__NVIC_SetPriorityGrouping+0x44>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005448:	4013      	ands	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800545c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800545e:	4a04      	ldr	r2, [pc, #16]	; (8005470 <__NVIC_SetPriorityGrouping+0x44>)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	60d3      	str	r3, [r2, #12]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	e000ed00 	.word	0xe000ed00

08005474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <__NVIC_GetPriorityGrouping+0x18>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	0a1b      	lsrs	r3, r3, #8
 800547e:	f003 0307 	and.w	r3, r3, #7
}
 8005482:	4618      	mov	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800549a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	db0b      	blt.n	80054ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	f003 021f 	and.w	r2, r3, #31
 80054a8:	4907      	ldr	r1, [pc, #28]	; (80054c8 <__NVIC_EnableIRQ+0x38>)
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	2001      	movs	r0, #1
 80054b2:	fa00 f202 	lsl.w	r2, r0, r2
 80054b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	e000e100 	.word	0xe000e100

080054cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	6039      	str	r1, [r7, #0]
 80054d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	db0a      	blt.n	80054f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	490c      	ldr	r1, [pc, #48]	; (8005518 <__NVIC_SetPriority+0x4c>)
 80054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ea:	0112      	lsls	r2, r2, #4
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	440b      	add	r3, r1
 80054f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054f4:	e00a      	b.n	800550c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	4908      	ldr	r1, [pc, #32]	; (800551c <__NVIC_SetPriority+0x50>)
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	3b04      	subs	r3, #4
 8005504:	0112      	lsls	r2, r2, #4
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	440b      	add	r3, r1
 800550a:	761a      	strb	r2, [r3, #24]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	e000e100 	.word	0xe000e100
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	; 0x24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f1c3 0307 	rsb	r3, r3, #7
 800553a:	2b04      	cmp	r3, #4
 800553c:	bf28      	it	cs
 800553e:	2304      	movcs	r3, #4
 8005540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3304      	adds	r3, #4
 8005546:	2b06      	cmp	r3, #6
 8005548:	d902      	bls.n	8005550 <NVIC_EncodePriority+0x30>
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3b03      	subs	r3, #3
 800554e:	e000      	b.n	8005552 <NVIC_EncodePriority+0x32>
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005554:	f04f 32ff 	mov.w	r2, #4294967295
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43da      	mvns	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	401a      	ands	r2, r3
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005568:	f04f 31ff 	mov.w	r1, #4294967295
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	43d9      	mvns	r1, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005578:	4313      	orrs	r3, r2
         );
}
 800557a:	4618      	mov	r0, r3
 800557c:	3724      	adds	r7, #36	; 0x24
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3b01      	subs	r3, #1
 8005594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005598:	d301      	bcc.n	800559e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800559a:	2301      	movs	r3, #1
 800559c:	e00f      	b.n	80055be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <SysTick_Config+0x40>)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055a6:	210f      	movs	r1, #15
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	f7ff ff8e 	bl	80054cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <SysTick_Config+0x40>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055b6:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <SysTick_Config+0x40>)
 80055b8:	2207      	movs	r2, #7
 80055ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	e000e010 	.word	0xe000e010

080055cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ff29 	bl	800542c <__NVIC_SetPriorityGrouping>
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b086      	sub	sp, #24
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	4603      	mov	r3, r0
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055f4:	f7ff ff3e 	bl	8005474 <__NVIC_GetPriorityGrouping>
 80055f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	6978      	ldr	r0, [r7, #20]
 8005600:	f7ff ff8e 	bl	8005520 <NVIC_EncodePriority>
 8005604:	4602      	mov	r2, r0
 8005606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800560a:	4611      	mov	r1, r2
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff ff5d 	bl	80054cc <__NVIC_SetPriority>
}
 8005612:	bf00      	nop
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b082      	sub	sp, #8
 800561e:	af00      	add	r7, sp, #0
 8005620:	4603      	mov	r3, r0
 8005622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ff31 	bl	8005490 <__NVIC_EnableIRQ>
}
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff ffa2 	bl	8005588 <SysTick_Config>
 8005644:	4603      	mov	r3, r0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800565c:	f7ff feb6 	bl	80053cc <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e099      	b.n	80057a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800568c:	e00f      	b.n	80056ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800568e:	f7ff fe9d 	bl	80053cc <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b05      	cmp	r3, #5
 800569a:	d908      	bls.n	80056ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2203      	movs	r2, #3
 80056a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e078      	b.n	80057a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e8      	bne.n	800568e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4b38      	ldr	r3, [pc, #224]	; (80057a8 <HAL_DMA_Init+0x158>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b04      	cmp	r3, #4
 8005706:	d107      	bne.n	8005718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	4313      	orrs	r3, r2
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	2b04      	cmp	r3, #4
 8005740:	d117      	bne.n	8005772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00e      	beq.n	8005772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fb01 	bl	8005d5c <DMA_CheckFifoParam>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2240      	movs	r2, #64	; 0x40
 8005764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800576e:	2301      	movs	r3, #1
 8005770:	e016      	b.n	80057a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fab8 	bl	8005cf0 <DMA_CalcBaseAndBitshift>
 8005780:	4603      	mov	r3, r0
 8005782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005788:	223f      	movs	r2, #63	; 0x3f
 800578a:	409a      	lsls	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	f010803f 	.word	0xf010803f

080057ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_DMA_Start_IT+0x26>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e040      	b.n	8005854 <HAL_DMA_Start_IT+0xa8>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d12f      	bne.n	8005846 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fa4a 	bl	8005c94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005804:	223f      	movs	r2, #63	; 0x3f
 8005806:	409a      	lsls	r2, r3
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0216 	orr.w	r2, r2, #22
 800581a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0208 	orr.w	r2, r2, #8
 8005832:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e005      	b.n	8005852 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800584e:	2302      	movs	r3, #2
 8005850:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005868:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800586a:	f7ff fdaf 	bl	80053cc <HAL_GetTick>
 800586e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d008      	beq.n	800588e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2280      	movs	r2, #128	; 0x80
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e052      	b.n	8005934 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0216 	bic.w	r2, r2, #22
 800589c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <HAL_DMA_Abort+0x62>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0208 	bic.w	r2, r2, #8
 80058cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058de:	e013      	b.n	8005908 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058e0:	f7ff fd74 	bl	80053cc <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d90c      	bls.n	8005908 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2203      	movs	r2, #3
 80058f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e015      	b.n	8005934 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e4      	bne.n	80058e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591a:	223f      	movs	r2, #63	; 0x3f
 800591c:	409a      	lsls	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d004      	beq.n	800595a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2280      	movs	r2, #128	; 0x80
 8005954:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e00c      	b.n	8005974 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2205      	movs	r2, #5
 800595e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0201 	bic.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800598c:	4b8e      	ldr	r3, [pc, #568]	; (8005bc8 <HAL_DMA_IRQHandler+0x248>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a8e      	ldr	r2, [pc, #568]	; (8005bcc <HAL_DMA_IRQHandler+0x24c>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	0a9b      	lsrs	r3, r3, #10
 8005998:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	2208      	movs	r2, #8
 80059ac:	409a      	lsls	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01a      	beq.n	80059ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d013      	beq.n	80059ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0204 	bic.w	r2, r2, #4
 80059d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d8:	2208      	movs	r2, #8
 80059da:	409a      	lsls	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	f043 0201 	orr.w	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f0:	2201      	movs	r2, #1
 80059f2:	409a      	lsls	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d012      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	2201      	movs	r2, #1
 8005a10:	409a      	lsls	r2, r3
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f043 0202 	orr.w	r2, r3, #2
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a26:	2204      	movs	r2, #4
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d012      	beq.n	8005a58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a44:	2204      	movs	r2, #4
 8005a46:	409a      	lsls	r2, r3
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	f043 0204 	orr.w	r2, r3, #4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	409a      	lsls	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4013      	ands	r3, r2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d043      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d03c      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	409a      	lsls	r2, r3
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d018      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d024      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
 8005aae:	e01f      	b.n	8005af0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01b      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	4798      	blx	r3
 8005ac0:	e016      	b.n	8005af0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d107      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0208 	bic.w	r2, r2, #8
 8005ade:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af4:	2220      	movs	r2, #32
 8005af6:	409a      	lsls	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 808f 	beq.w	8005c20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8087 	beq.w	8005c20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b16:	2220      	movs	r2, #32
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d136      	bne.n	8005b98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0216 	bic.w	r2, r2, #22
 8005b38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_DMA_IRQHandler+0x1da>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0208 	bic.w	r2, r2, #8
 8005b68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6e:	223f      	movs	r2, #63	; 0x3f
 8005b70:	409a      	lsls	r2, r3
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d07e      	beq.n	8005c8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
        }
        return;
 8005b96:	e079      	b.n	8005c8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01d      	beq.n	8005be2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10d      	bne.n	8005bd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d031      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
 8005bc4:	e02c      	b.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
 8005bc6:	bf00      	nop
 8005bc8:	2000000c 	.word	0x2000000c
 8005bcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d023      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
 8005be0:	e01e      	b.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10f      	bne.n	8005c10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0210 	bic.w	r2, r2, #16
 8005bfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d032      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d022      	beq.n	8005c7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2205      	movs	r2, #5
 8005c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d307      	bcc.n	8005c68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1f2      	bne.n	8005c4c <HAL_DMA_IRQHandler+0x2cc>
 8005c66:	e000      	b.n	8005c6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
 8005c8a:	e000      	b.n	8005c8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c8c:	bf00      	nop
    }
  }
}
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b40      	cmp	r3, #64	; 0x40
 8005cc0:	d108      	bne.n	8005cd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005cd2:	e007      	b.n	8005ce4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	3b10      	subs	r3, #16
 8005d00:	4a14      	ldr	r2, [pc, #80]	; (8005d54 <DMA_CalcBaseAndBitshift+0x64>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	091b      	lsrs	r3, r3, #4
 8005d08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d0a:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <DMA_CalcBaseAndBitshift+0x68>)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d909      	bls.n	8005d32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	1d1a      	adds	r2, r3, #4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8005d30:	e007      	b.n	8005d42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	aaaaaaab 	.word	0xaaaaaaab
 8005d58:	080086a0 	.word	0x080086a0

08005d5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d11f      	bne.n	8005db6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d856      	bhi.n	8005e2a <DMA_CheckFifoParam+0xce>
 8005d7c:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <DMA_CheckFifoParam+0x28>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005d95 	.word	0x08005d95
 8005d88:	08005da7 	.word	0x08005da7
 8005d8c:	08005d95 	.word	0x08005d95
 8005d90:	08005e2b 	.word	0x08005e2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d046      	beq.n	8005e2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005da4:	e043      	b.n	8005e2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dae:	d140      	bne.n	8005e32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005db4:	e03d      	b.n	8005e32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dbe:	d121      	bne.n	8005e04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d837      	bhi.n	8005e36 <DMA_CheckFifoParam+0xda>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <DMA_CheckFifoParam+0x70>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005ddd 	.word	0x08005ddd
 8005dd0:	08005de3 	.word	0x08005de3
 8005dd4:	08005ddd 	.word	0x08005ddd
 8005dd8:	08005df5 	.word	0x08005df5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	e030      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d025      	beq.n	8005e3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df2:	e022      	b.n	8005e3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dfc:	d11f      	bne.n	8005e3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e02:	e01c      	b.n	8005e3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d903      	bls.n	8005e12 <DMA_CheckFifoParam+0xb6>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d003      	beq.n	8005e18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e10:	e018      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	73fb      	strb	r3, [r7, #15]
      break;
 8005e16:	e015      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00e      	beq.n	8005e42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
      break;
 8005e28:	e00b      	b.n	8005e42 <DMA_CheckFifoParam+0xe6>
      break;
 8005e2a:	bf00      	nop
 8005e2c:	e00a      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e008      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;
 8005e32:	bf00      	nop
 8005e34:	e006      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;
 8005e36:	bf00      	nop
 8005e38:	e004      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e002      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;
 8005e42:	bf00      	nop
    }
  } 
  
  return status; 
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop

08005e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b089      	sub	sp, #36	; 0x24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
 8005e6e:	e16b      	b.n	8006148 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e70:	2201      	movs	r2, #1
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	f040 815a 	bne.w	8006142 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d005      	beq.n	8005ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d130      	bne.n	8005f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005edc:	2201      	movs	r2, #1
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	091b      	lsrs	r3, r3, #4
 8005ef2:	f003 0201 	and.w	r2, r3, #1
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d017      	beq.n	8005f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	2203      	movs	r2, #3
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d123      	bne.n	8005f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	08da      	lsrs	r2, r3, #3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3208      	adds	r2, #8
 8005f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	220f      	movs	r2, #15
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4013      	ands	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	08da      	lsrs	r2, r3, #3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3208      	adds	r2, #8
 8005f92:	69b9      	ldr	r1, [r7, #24]
 8005f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4013      	ands	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f003 0203 	and.w	r2, r3, #3
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80b4 	beq.w	8006142 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	4b60      	ldr	r3, [pc, #384]	; (8006160 <HAL_GPIO_Init+0x30c>)
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	4a5f      	ldr	r2, [pc, #380]	; (8006160 <HAL_GPIO_Init+0x30c>)
 8005fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8005fea:	4b5d      	ldr	r3, [pc, #372]	; (8006160 <HAL_GPIO_Init+0x30c>)
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ff6:	4a5b      	ldr	r2, [pc, #364]	; (8006164 <HAL_GPIO_Init+0x310>)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	089b      	lsrs	r3, r3, #2
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	220f      	movs	r2, #15
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	43db      	mvns	r3, r3
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	4013      	ands	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a52      	ldr	r2, [pc, #328]	; (8006168 <HAL_GPIO_Init+0x314>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d02b      	beq.n	800607a <HAL_GPIO_Init+0x226>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a51      	ldr	r2, [pc, #324]	; (800616c <HAL_GPIO_Init+0x318>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d025      	beq.n	8006076 <HAL_GPIO_Init+0x222>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a50      	ldr	r2, [pc, #320]	; (8006170 <HAL_GPIO_Init+0x31c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01f      	beq.n	8006072 <HAL_GPIO_Init+0x21e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a4f      	ldr	r2, [pc, #316]	; (8006174 <HAL_GPIO_Init+0x320>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d019      	beq.n	800606e <HAL_GPIO_Init+0x21a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a4e      	ldr	r2, [pc, #312]	; (8006178 <HAL_GPIO_Init+0x324>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_GPIO_Init+0x216>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a4d      	ldr	r2, [pc, #308]	; (800617c <HAL_GPIO_Init+0x328>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00d      	beq.n	8006066 <HAL_GPIO_Init+0x212>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a4c      	ldr	r2, [pc, #304]	; (8006180 <HAL_GPIO_Init+0x32c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <HAL_GPIO_Init+0x20e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a4b      	ldr	r2, [pc, #300]	; (8006184 <HAL_GPIO_Init+0x330>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d101      	bne.n	800605e <HAL_GPIO_Init+0x20a>
 800605a:	2307      	movs	r3, #7
 800605c:	e00e      	b.n	800607c <HAL_GPIO_Init+0x228>
 800605e:	2308      	movs	r3, #8
 8006060:	e00c      	b.n	800607c <HAL_GPIO_Init+0x228>
 8006062:	2306      	movs	r3, #6
 8006064:	e00a      	b.n	800607c <HAL_GPIO_Init+0x228>
 8006066:	2305      	movs	r3, #5
 8006068:	e008      	b.n	800607c <HAL_GPIO_Init+0x228>
 800606a:	2304      	movs	r3, #4
 800606c:	e006      	b.n	800607c <HAL_GPIO_Init+0x228>
 800606e:	2303      	movs	r3, #3
 8006070:	e004      	b.n	800607c <HAL_GPIO_Init+0x228>
 8006072:	2302      	movs	r3, #2
 8006074:	e002      	b.n	800607c <HAL_GPIO_Init+0x228>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <HAL_GPIO_Init+0x228>
 800607a:	2300      	movs	r3, #0
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	f002 0203 	and.w	r2, r2, #3
 8006082:	0092      	lsls	r2, r2, #2
 8006084:	4093      	lsls	r3, r2
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	4313      	orrs	r3, r2
 800608a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800608c:	4935      	ldr	r1, [pc, #212]	; (8006164 <HAL_GPIO_Init+0x310>)
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	089b      	lsrs	r3, r3, #2
 8006092:	3302      	adds	r3, #2
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800609a:	4b3b      	ldr	r3, [pc, #236]	; (8006188 <HAL_GPIO_Init+0x334>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4013      	ands	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060be:	4a32      	ldr	r2, [pc, #200]	; (8006188 <HAL_GPIO_Init+0x334>)
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060c4:	4b30      	ldr	r3, [pc, #192]	; (8006188 <HAL_GPIO_Init+0x334>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4013      	ands	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060e8:	4a27      	ldr	r2, [pc, #156]	; (8006188 <HAL_GPIO_Init+0x334>)
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060ee:	4b26      	ldr	r3, [pc, #152]	; (8006188 <HAL_GPIO_Init+0x334>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	43db      	mvns	r3, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4013      	ands	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006112:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <HAL_GPIO_Init+0x334>)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <HAL_GPIO_Init+0x334>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800613c:	4a12      	ldr	r2, [pc, #72]	; (8006188 <HAL_GPIO_Init+0x334>)
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	3301      	adds	r3, #1
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2b0f      	cmp	r3, #15
 800614c:	f67f ae90 	bls.w	8005e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	3724      	adds	r7, #36	; 0x24
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40023800 	.word	0x40023800
 8006164:	40013800 	.word	0x40013800
 8006168:	40020000 	.word	0x40020000
 800616c:	40020400 	.word	0x40020400
 8006170:	40020800 	.word	0x40020800
 8006174:	40020c00 	.word	0x40020c00
 8006178:	40021000 	.word	0x40021000
 800617c:	40021400 	.word	0x40021400
 8006180:	40021800 	.word	0x40021800
 8006184:	40021c00 	.word	0x40021c00
 8006188:	40013c00 	.word	0x40013c00

0800618c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	807b      	strh	r3, [r7, #2]
 8006198:	4613      	mov	r3, r2
 800619a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800619c:	787b      	ldrb	r3, [r7, #1]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061a2:	887a      	ldrh	r2, [r7, #2]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061a8:	e003      	b.n	80061b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061aa:	887b      	ldrh	r3, [r7, #2]
 80061ac:	041a      	lsls	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	619a      	str	r2, [r3, #24]
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061d0:	887a      	ldrh	r2, [r7, #2]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4013      	ands	r3, r2
 80061d6:	041a      	lsls	r2, r3, #16
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	43d9      	mvns	r1, r3
 80061dc:	887b      	ldrh	r3, [r7, #2]
 80061de:	400b      	ands	r3, r1
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	619a      	str	r2, [r3, #24]
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e267      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d075      	beq.n	80062fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006212:	4b88      	ldr	r3, [pc, #544]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 030c 	and.w	r3, r3, #12
 800621a:	2b04      	cmp	r3, #4
 800621c:	d00c      	beq.n	8006238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800621e:	4b85      	ldr	r3, [pc, #532]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006226:	2b08      	cmp	r3, #8
 8006228:	d112      	bne.n	8006250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622a:	4b82      	ldr	r3, [pc, #520]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006236:	d10b      	bne.n	8006250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006238:	4b7e      	ldr	r3, [pc, #504]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d05b      	beq.n	80062fc <HAL_RCC_OscConfig+0x108>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d157      	bne.n	80062fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e242      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006258:	d106      	bne.n	8006268 <HAL_RCC_OscConfig+0x74>
 800625a:	4b76      	ldr	r3, [pc, #472]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a75      	ldr	r2, [pc, #468]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e01d      	b.n	80062a4 <HAL_RCC_OscConfig+0xb0>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0x98>
 8006272:	4b70      	ldr	r3, [pc, #448]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a6f      	ldr	r2, [pc, #444]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	4b6d      	ldr	r3, [pc, #436]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6c      	ldr	r2, [pc, #432]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0xb0>
 800628c:	4b69      	ldr	r3, [pc, #420]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a68      	ldr	r2, [pc, #416]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	4b66      	ldr	r3, [pc, #408]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a65      	ldr	r2, [pc, #404]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 800629e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d013      	beq.n	80062d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ac:	f7ff f88e 	bl	80053cc <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b4:	f7ff f88a 	bl	80053cc <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e207      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	4b5b      	ldr	r3, [pc, #364]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0xc0>
 80062d2:	e014      	b.n	80062fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d4:	f7ff f87a 	bl	80053cc <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062dc:	f7ff f876 	bl	80053cc <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e1f3      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ee:	4b51      	ldr	r3, [pc, #324]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0xe8>
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d063      	beq.n	80063d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800630a:	4b4a      	ldr	r3, [pc, #296]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006316:	4b47      	ldr	r3, [pc, #284]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800631e:	2b08      	cmp	r3, #8
 8006320:	d11c      	bne.n	800635c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006322:	4b44      	ldr	r3, [pc, #272]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d116      	bne.n	800635c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632e:	4b41      	ldr	r3, [pc, #260]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <HAL_RCC_OscConfig+0x152>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d001      	beq.n	8006346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e1c7      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006346:	4b3b      	ldr	r3, [pc, #236]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4937      	ldr	r1, [pc, #220]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006356:	4313      	orrs	r3, r2
 8006358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800635a:	e03a      	b.n	80063d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d020      	beq.n	80063a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006364:	4b34      	ldr	r3, [pc, #208]	; (8006438 <HAL_RCC_OscConfig+0x244>)
 8006366:	2201      	movs	r2, #1
 8006368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636a:	f7ff f82f 	bl	80053cc <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006372:	f7ff f82b 	bl	80053cc <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e1a8      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006384:	4b2b      	ldr	r3, [pc, #172]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006390:	4b28      	ldr	r3, [pc, #160]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4925      	ldr	r1, [pc, #148]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	600b      	str	r3, [r1, #0]
 80063a4:	e015      	b.n	80063d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063a6:	4b24      	ldr	r3, [pc, #144]	; (8006438 <HAL_RCC_OscConfig+0x244>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7ff f80e 	bl	80053cc <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063b4:	f7ff f80a 	bl	80053cc <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e187      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c6:	4b1b      	ldr	r3, [pc, #108]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d036      	beq.n	800644c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d016      	beq.n	8006414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e6:	4b15      	ldr	r3, [pc, #84]	; (800643c <HAL_RCC_OscConfig+0x248>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ec:	f7fe ffee 	bl	80053cc <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f4:	f7fe ffea 	bl	80053cc <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e167      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006406:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <HAL_RCC_OscConfig+0x240>)
 8006408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <HAL_RCC_OscConfig+0x200>
 8006412:	e01b      	b.n	800644c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006414:	4b09      	ldr	r3, [pc, #36]	; (800643c <HAL_RCC_OscConfig+0x248>)
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800641a:	f7fe ffd7 	bl	80053cc <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006420:	e00e      	b.n	8006440 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006422:	f7fe ffd3 	bl	80053cc <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d907      	bls.n	8006440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e150      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
 8006434:	40023800 	.word	0x40023800
 8006438:	42470000 	.word	0x42470000
 800643c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006440:	4b88      	ldr	r3, [pc, #544]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 8006442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1ea      	bne.n	8006422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8097 	beq.w	8006588 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800645a:	2300      	movs	r3, #0
 800645c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800645e:	4b81      	ldr	r3, [pc, #516]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10f      	bne.n	800648a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800646a:	2300      	movs	r3, #0
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	4b7d      	ldr	r3, [pc, #500]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	4a7c      	ldr	r2, [pc, #496]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 8006474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006478:	6413      	str	r3, [r2, #64]	; 0x40
 800647a:	4b7a      	ldr	r3, [pc, #488]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006482:	60bb      	str	r3, [r7, #8]
 8006484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006486:	2301      	movs	r3, #1
 8006488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648a:	4b77      	ldr	r3, [pc, #476]	; (8006668 <HAL_RCC_OscConfig+0x474>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006492:	2b00      	cmp	r3, #0
 8006494:	d118      	bne.n	80064c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006496:	4b74      	ldr	r3, [pc, #464]	; (8006668 <HAL_RCC_OscConfig+0x474>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a73      	ldr	r2, [pc, #460]	; (8006668 <HAL_RCC_OscConfig+0x474>)
 800649c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a2:	f7fe ff93 	bl	80053cc <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064aa:	f7fe ff8f 	bl	80053cc <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e10c      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064bc:	4b6a      	ldr	r3, [pc, #424]	; (8006668 <HAL_RCC_OscConfig+0x474>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0f0      	beq.n	80064aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d106      	bne.n	80064de <HAL_RCC_OscConfig+0x2ea>
 80064d0:	4b64      	ldr	r3, [pc, #400]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d4:	4a63      	ldr	r2, [pc, #396]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	6713      	str	r3, [r2, #112]	; 0x70
 80064dc:	e01c      	b.n	8006518 <HAL_RCC_OscConfig+0x324>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b05      	cmp	r3, #5
 80064e4:	d10c      	bne.n	8006500 <HAL_RCC_OscConfig+0x30c>
 80064e6:	4b5f      	ldr	r3, [pc, #380]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	4a5e      	ldr	r2, [pc, #376]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 80064ec:	f043 0304 	orr.w	r3, r3, #4
 80064f0:	6713      	str	r3, [r2, #112]	; 0x70
 80064f2:	4b5c      	ldr	r3, [pc, #368]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	4a5b      	ldr	r2, [pc, #364]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 80064f8:	f043 0301 	orr.w	r3, r3, #1
 80064fc:	6713      	str	r3, [r2, #112]	; 0x70
 80064fe:	e00b      	b.n	8006518 <HAL_RCC_OscConfig+0x324>
 8006500:	4b58      	ldr	r3, [pc, #352]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 8006502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006504:	4a57      	ldr	r2, [pc, #348]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 8006506:	f023 0301 	bic.w	r3, r3, #1
 800650a:	6713      	str	r3, [r2, #112]	; 0x70
 800650c:	4b55      	ldr	r3, [pc, #340]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4a54      	ldr	r2, [pc, #336]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 8006512:	f023 0304 	bic.w	r3, r3, #4
 8006516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d015      	beq.n	800654c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006520:	f7fe ff54 	bl	80053cc <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006526:	e00a      	b.n	800653e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006528:	f7fe ff50 	bl	80053cc <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	f241 3288 	movw	r2, #5000	; 0x1388
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e0cb      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653e:	4b49      	ldr	r3, [pc, #292]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0ee      	beq.n	8006528 <HAL_RCC_OscConfig+0x334>
 800654a:	e014      	b.n	8006576 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800654c:	f7fe ff3e 	bl	80053cc <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006552:	e00a      	b.n	800656a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006554:	f7fe ff3a 	bl	80053cc <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006562:	4293      	cmp	r3, r2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e0b5      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800656a:	4b3e      	ldr	r3, [pc, #248]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1ee      	bne.n	8006554 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d105      	bne.n	8006588 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800657c:	4b39      	ldr	r3, [pc, #228]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	4a38      	ldr	r2, [pc, #224]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 8006582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80a1 	beq.w	80066d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006592:	4b34      	ldr	r3, [pc, #208]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 030c 	and.w	r3, r3, #12
 800659a:	2b08      	cmp	r3, #8
 800659c:	d05c      	beq.n	8006658 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d141      	bne.n	800662a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a6:	4b31      	ldr	r3, [pc, #196]	; (800666c <HAL_RCC_OscConfig+0x478>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ac:	f7fe ff0e 	bl	80053cc <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b4:	f7fe ff0a 	bl	80053cc <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e087      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c6:	4b27      	ldr	r3, [pc, #156]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f0      	bne.n	80065b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69da      	ldr	r2, [r3, #28]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	019b      	lsls	r3, r3, #6
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	085b      	lsrs	r3, r3, #1
 80065ea:	3b01      	subs	r3, #1
 80065ec:	041b      	lsls	r3, r3, #16
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	061b      	lsls	r3, r3, #24
 80065f6:	491b      	ldr	r1, [pc, #108]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065fc:	4b1b      	ldr	r3, [pc, #108]	; (800666c <HAL_RCC_OscConfig+0x478>)
 80065fe:	2201      	movs	r2, #1
 8006600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006602:	f7fe fee3 	bl	80053cc <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006608:	e008      	b.n	800661c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800660a:	f7fe fedf 	bl	80053cc <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e05c      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800661c:	4b11      	ldr	r3, [pc, #68]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0f0      	beq.n	800660a <HAL_RCC_OscConfig+0x416>
 8006628:	e054      	b.n	80066d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662a:	4b10      	ldr	r3, [pc, #64]	; (800666c <HAL_RCC_OscConfig+0x478>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006630:	f7fe fecc 	bl	80053cc <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006638:	f7fe fec8 	bl	80053cc <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e045      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	4b06      	ldr	r3, [pc, #24]	; (8006664 <HAL_RCC_OscConfig+0x470>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0x444>
 8006656:	e03d      	b.n	80066d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d107      	bne.n	8006670 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e038      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
 8006664:	40023800 	.word	0x40023800
 8006668:	40007000 	.word	0x40007000
 800666c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006670:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <HAL_RCC_OscConfig+0x4ec>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d028      	beq.n	80066d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006688:	429a      	cmp	r2, r3
 800668a:	d121      	bne.n	80066d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006696:	429a      	cmp	r2, r3
 8006698:	d11a      	bne.n	80066d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066a0:	4013      	ands	r3, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d111      	bne.n	80066d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	085b      	lsrs	r3, r3, #1
 80066b8:	3b01      	subs	r3, #1
 80066ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066bc:	429a      	cmp	r2, r3
 80066be:	d107      	bne.n	80066d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e000      	b.n	80066d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800

080066e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0cc      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066f8:	4b68      	ldr	r3, [pc, #416]	; (800689c <HAL_RCC_ClockConfig+0x1b8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d90c      	bls.n	8006720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006706:	4b65      	ldr	r3, [pc, #404]	; (800689c <HAL_RCC_ClockConfig+0x1b8>)
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800670e:	4b63      	ldr	r3, [pc, #396]	; (800689c <HAL_RCC_ClockConfig+0x1b8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d001      	beq.n	8006720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0b8      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d020      	beq.n	800676e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006738:	4b59      	ldr	r3, [pc, #356]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4a58      	ldr	r2, [pc, #352]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006750:	4b53      	ldr	r3, [pc, #332]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	4a52      	ldr	r2, [pc, #328]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800675a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800675c:	4b50      	ldr	r3, [pc, #320]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	494d      	ldr	r1, [pc, #308]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	4313      	orrs	r3, r2
 800676c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d044      	beq.n	8006804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d107      	bne.n	8006792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006782:	4b47      	ldr	r3, [pc, #284]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d119      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e07f      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d003      	beq.n	80067a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d107      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a2:	4b3f      	ldr	r3, [pc, #252]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e06f      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067b2:	4b3b      	ldr	r3, [pc, #236]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e067      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067c2:	4b37      	ldr	r3, [pc, #220]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f023 0203 	bic.w	r2, r3, #3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	4934      	ldr	r1, [pc, #208]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067d4:	f7fe fdfa 	bl	80053cc <HAL_GetTick>
 80067d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067da:	e00a      	b.n	80067f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067dc:	f7fe fdf6 	bl	80053cc <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e04f      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f2:	4b2b      	ldr	r3, [pc, #172]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 020c 	and.w	r2, r3, #12
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	429a      	cmp	r2, r3
 8006802:	d1eb      	bne.n	80067dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006804:	4b25      	ldr	r3, [pc, #148]	; (800689c <HAL_RCC_ClockConfig+0x1b8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d20c      	bcs.n	800682c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006812:	4b22      	ldr	r3, [pc, #136]	; (800689c <HAL_RCC_ClockConfig+0x1b8>)
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800681a:	4b20      	ldr	r3, [pc, #128]	; (800689c <HAL_RCC_ClockConfig+0x1b8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e032      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006838:	4b19      	ldr	r3, [pc, #100]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4916      	ldr	r1, [pc, #88]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	4313      	orrs	r3, r2
 8006848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d009      	beq.n	800686a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006856:	4b12      	ldr	r3, [pc, #72]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	490e      	ldr	r1, [pc, #56]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006866:	4313      	orrs	r3, r2
 8006868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800686a:	f000 f821 	bl	80068b0 <HAL_RCC_GetSysClockFreq>
 800686e:	4602      	mov	r2, r0
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	091b      	lsrs	r3, r3, #4
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	490a      	ldr	r1, [pc, #40]	; (80068a4 <HAL_RCC_ClockConfig+0x1c0>)
 800687c:	5ccb      	ldrb	r3, [r1, r3]
 800687e:	fa22 f303 	lsr.w	r3, r2, r3
 8006882:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006886:	4b09      	ldr	r3, [pc, #36]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe fd5a 	bl	8005344 <HAL_InitTick>

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40023c00 	.word	0x40023c00
 80068a0:	40023800 	.word	0x40023800
 80068a4:	08008688 	.word	0x08008688
 80068a8:	2000000c 	.word	0x2000000c
 80068ac:	20000010 	.word	0x20000010

080068b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b4:	b094      	sub	sp, #80	; 0x50
 80068b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	647b      	str	r3, [r7, #68]	; 0x44
 80068bc:	2300      	movs	r3, #0
 80068be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c0:	2300      	movs	r3, #0
 80068c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068c8:	4b79      	ldr	r3, [pc, #484]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 030c 	and.w	r3, r3, #12
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d00d      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x40>
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	f200 80e1 	bhi.w	8006a9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_RCC_GetSysClockFreq+0x34>
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d003      	beq.n	80068ea <HAL_RCC_GetSysClockFreq+0x3a>
 80068e2:	e0db      	b.n	8006a9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068e4:	4b73      	ldr	r3, [pc, #460]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 80068e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80068e8:	e0db      	b.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ea:	4b73      	ldr	r3, [pc, #460]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x208>)
 80068ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068ee:	e0d8      	b.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068f0:	4b6f      	ldr	r3, [pc, #444]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068fa:	4b6d      	ldr	r3, [pc, #436]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d063      	beq.n	80069ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006906:	4b6a      	ldr	r3, [pc, #424]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	099b      	lsrs	r3, r3, #6
 800690c:	2200      	movs	r2, #0
 800690e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006910:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006918:	633b      	str	r3, [r7, #48]	; 0x30
 800691a:	2300      	movs	r3, #0
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
 800691e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006922:	4622      	mov	r2, r4
 8006924:	462b      	mov	r3, r5
 8006926:	f04f 0000 	mov.w	r0, #0
 800692a:	f04f 0100 	mov.w	r1, #0
 800692e:	0159      	lsls	r1, r3, #5
 8006930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006934:	0150      	lsls	r0, r2, #5
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4621      	mov	r1, r4
 800693c:	1a51      	subs	r1, r2, r1
 800693e:	6139      	str	r1, [r7, #16]
 8006940:	4629      	mov	r1, r5
 8006942:	eb63 0301 	sbc.w	r3, r3, r1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006954:	4659      	mov	r1, fp
 8006956:	018b      	lsls	r3, r1, #6
 8006958:	4651      	mov	r1, sl
 800695a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800695e:	4651      	mov	r1, sl
 8006960:	018a      	lsls	r2, r1, #6
 8006962:	4651      	mov	r1, sl
 8006964:	ebb2 0801 	subs.w	r8, r2, r1
 8006968:	4659      	mov	r1, fp
 800696a:	eb63 0901 	sbc.w	r9, r3, r1
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	f04f 0300 	mov.w	r3, #0
 8006976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800697a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800697e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006982:	4690      	mov	r8, r2
 8006984:	4699      	mov	r9, r3
 8006986:	4623      	mov	r3, r4
 8006988:	eb18 0303 	adds.w	r3, r8, r3
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	462b      	mov	r3, r5
 8006990:	eb49 0303 	adc.w	r3, r9, r3
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069a2:	4629      	mov	r1, r5
 80069a4:	024b      	lsls	r3, r1, #9
 80069a6:	4621      	mov	r1, r4
 80069a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069ac:	4621      	mov	r1, r4
 80069ae:	024a      	lsls	r2, r1, #9
 80069b0:	4610      	mov	r0, r2
 80069b2:	4619      	mov	r1, r3
 80069b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b6:	2200      	movs	r2, #0
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069c0:	f7f9 fc0a 	bl	80001d8 <__aeabi_uldivmod>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4613      	mov	r3, r2
 80069ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069cc:	e058      	b.n	8006a80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ce:	4b38      	ldr	r3, [pc, #224]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	099b      	lsrs	r3, r3, #6
 80069d4:	2200      	movs	r2, #0
 80069d6:	4618      	mov	r0, r3
 80069d8:	4611      	mov	r1, r2
 80069da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069de:	623b      	str	r3, [r7, #32]
 80069e0:	2300      	movs	r3, #0
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
 80069e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069e8:	4642      	mov	r2, r8
 80069ea:	464b      	mov	r3, r9
 80069ec:	f04f 0000 	mov.w	r0, #0
 80069f0:	f04f 0100 	mov.w	r1, #0
 80069f4:	0159      	lsls	r1, r3, #5
 80069f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069fa:	0150      	lsls	r0, r2, #5
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4641      	mov	r1, r8
 8006a02:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a06:	4649      	mov	r1, r9
 8006a08:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a20:	ebb2 040a 	subs.w	r4, r2, sl
 8006a24:	eb63 050b 	sbc.w	r5, r3, fp
 8006a28:	f04f 0200 	mov.w	r2, #0
 8006a2c:	f04f 0300 	mov.w	r3, #0
 8006a30:	00eb      	lsls	r3, r5, #3
 8006a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a36:	00e2      	lsls	r2, r4, #3
 8006a38:	4614      	mov	r4, r2
 8006a3a:	461d      	mov	r5, r3
 8006a3c:	4643      	mov	r3, r8
 8006a3e:	18e3      	adds	r3, r4, r3
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	464b      	mov	r3, r9
 8006a44:	eb45 0303 	adc.w	r3, r5, r3
 8006a48:	607b      	str	r3, [r7, #4]
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a56:	4629      	mov	r1, r5
 8006a58:	028b      	lsls	r3, r1, #10
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a60:	4621      	mov	r1, r4
 8006a62:	028a      	lsls	r2, r1, #10
 8006a64:	4610      	mov	r0, r2
 8006a66:	4619      	mov	r1, r3
 8006a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	61fa      	str	r2, [r7, #28]
 8006a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a74:	f7f9 fbb0 	bl	80001d8 <__aeabi_uldivmod>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a80:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a9a:	e002      	b.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3750      	adds	r7, #80	; 0x50
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aae:	bf00      	nop
 8006ab0:	40023800 	.word	0x40023800
 8006ab4:	00f42400 	.word	0x00f42400
 8006ab8:	007a1200 	.word	0x007a1200

08006abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ac0:	4b03      	ldr	r3, [pc, #12]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	2000000c 	.word	0x2000000c

08006ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ad8:	f7ff fff0 	bl	8006abc <HAL_RCC_GetHCLKFreq>
 8006adc:	4602      	mov	r2, r0
 8006ade:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	0a9b      	lsrs	r3, r3, #10
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	4903      	ldr	r1, [pc, #12]	; (8006af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aea:	5ccb      	ldrb	r3, [r1, r3]
 8006aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40023800 	.word	0x40023800
 8006af8:	08008698 	.word	0x08008698

08006afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b00:	f7ff ffdc 	bl	8006abc <HAL_RCC_GetHCLKFreq>
 8006b04:	4602      	mov	r2, r0
 8006b06:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	0b5b      	lsrs	r3, r3, #13
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	4903      	ldr	r1, [pc, #12]	; (8006b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b12:	5ccb      	ldrb	r3, [r1, r3]
 8006b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	08008698 	.word	0x08008698

08006b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e042      	b.n	8006bbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fe fa68 	bl	8005020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2224      	movs	r2, #36	; 0x24
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 ff37 	bl	80079dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695a      	ldr	r2, [r3, #20]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08c      	sub	sp, #48	; 0x30
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d156      	bne.n	8006c8c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_UART_Transmit_DMA+0x26>
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e04f      	b.n	8006c8e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	88fa      	ldrh	r2, [r7, #6]
 8006bf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	88fa      	ldrh	r2, [r7, #6]
 8006bfe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2221      	movs	r2, #33	; 0x21
 8006c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	4a21      	ldr	r2, [pc, #132]	; (8006c98 <HAL_UART_Transmit_DMA+0xd4>)
 8006c14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	4a20      	ldr	r2, [pc, #128]	; (8006c9c <HAL_UART_Transmit_DMA+0xd8>)
 8006c1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	4a1f      	ldr	r2, [pc, #124]	; (8006ca0 <HAL_UART_Transmit_DMA+0xdc>)
 8006c24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006c2e:	f107 0308 	add.w	r3, r7, #8
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	6819      	ldr	r1, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3304      	adds	r3, #4
 8006c42:	461a      	mov	r2, r3
 8006c44:	88fb      	ldrh	r3, [r7, #6]
 8006c46:	f7fe fdb1 	bl	80057ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c52:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3314      	adds	r3, #20
 8006c5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	617b      	str	r3, [r7, #20]
   return(result);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3314      	adds	r3, #20
 8006c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c74:	627a      	str	r2, [r7, #36]	; 0x24
 8006c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	6a39      	ldr	r1, [r7, #32]
 8006c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e5      	bne.n	8006c54 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	e000      	b.n	8006c8e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006c8c:	2302      	movs	r3, #2
  }
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3730      	adds	r7, #48	; 0x30
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	08007269 	.word	0x08007269
 8006c9c:	08007303 	.word	0x08007303
 8006ca0:	08007487 	.word	0x08007487

08006ca4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d112      	bne.n	8006ce4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_UART_Receive_DMA+0x26>
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e00b      	b.n	8006ce6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006cd4:	88fb      	ldrh	r3, [r7, #6]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fc1e 	bl	800751c <UART_Start_Receive_DMA>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	e000      	b.n	8006ce6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ce4:	2302      	movs	r3, #2
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b0ba      	sub	sp, #232	; 0xe8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10f      	bne.n	8006d56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <HAL_UART_IRQHandler+0x66>
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fd85 	bl	800785e <UART_Receive_IT>
      return;
 8006d54:	e25b      	b.n	800720e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80de 	beq.w	8006f1c <HAL_UART_IRQHandler+0x22c>
 8006d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d106      	bne.n	8006d7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80d1 	beq.w	8006f1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <HAL_UART_IRQHandler+0xae>
 8006d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	f043 0201 	orr.w	r2, r3, #1
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xd2>
 8006daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dba:	f043 0202 	orr.w	r2, r3, #2
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <HAL_UART_IRQHandler+0xf6>
 8006dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	f043 0204 	orr.w	r2, r3, #4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d011      	beq.n	8006e16 <HAL_UART_IRQHandler+0x126>
 8006df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d105      	bne.n	8006e0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	f043 0208 	orr.w	r2, r3, #8
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 81f2 	beq.w	8007204 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d008      	beq.n	8006e3e <HAL_UART_IRQHandler+0x14e>
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fd10 	bl	800785e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b40      	cmp	r3, #64	; 0x40
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d103      	bne.n	8006e6a <HAL_UART_IRQHandler+0x17a>
 8006e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d04f      	beq.n	8006f0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc18 	bl	80076a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7a:	2b40      	cmp	r3, #64	; 0x40
 8006e7c:	d141      	bne.n	8006f02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3314      	adds	r3, #20
 8006e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3314      	adds	r3, #20
 8006ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1d9      	bne.n	8006e7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d013      	beq.n	8006efa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed6:	4a7e      	ldr	r2, [pc, #504]	; (80070d0 <HAL_UART_IRQHandler+0x3e0>)
 8006ed8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fd2c 	bl	800593c <HAL_DMA_Abort_IT>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d016      	beq.n	8006f18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef8:	e00e      	b.n	8006f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f99e 	bl	800723c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	e00a      	b.n	8006f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f99a 	bl	800723c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	e006      	b.n	8006f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f996 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006f16:	e175      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f18:	bf00      	nop
    return;
 8006f1a:	e173      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	f040 814f 	bne.w	80071c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8148 	beq.w	80071c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 8141 	beq.w	80071c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	60bb      	str	r3, [r7, #8]
 8006f56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	f040 80b6 	bne.w	80070d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 8145 	beq.w	8007208 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f86:	429a      	cmp	r2, r3
 8006f88:	f080 813e 	bcs.w	8007208 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9e:	f000 8088 	beq.w	80070b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1d9      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3314      	adds	r3, #20
 8006ff4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007000:	f023 0301 	bic.w	r3, r3, #1
 8007004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3314      	adds	r3, #20
 800700e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007012:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007016:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800701a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e1      	bne.n	8006fee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3314      	adds	r3, #20
 8007030:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800703a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3314      	adds	r3, #20
 800704a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800704e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007050:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007054:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800705c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e3      	bne.n	800702a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007082:	f023 0310 	bic.w	r3, r3, #16
 8007086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007094:	65ba      	str	r2, [r7, #88]	; 0x58
 8007096:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800709a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e3      	bne.n	8007070 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe fbd5 	bl	800585c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2202      	movs	r2, #2
 80070b6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f8c1 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070ce:	e09b      	b.n	8007208 <HAL_UART_IRQHandler+0x518>
 80070d0:	08007767 	.word	0x08007767
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 808e 	beq.w	800720c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80070f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 8089 	beq.w	800720c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	330c      	adds	r3, #12
 8007100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800710a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	330c      	adds	r3, #12
 800711a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800711e:	647a      	str	r2, [r7, #68]	; 0x44
 8007120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800712c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e3      	bne.n	80070fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3314      	adds	r3, #20
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	623b      	str	r3, [r7, #32]
   return(result);
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3314      	adds	r3, #20
 8007152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007156:	633a      	str	r2, [r7, #48]	; 0x30
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800715c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e3      	bne.n	8007132 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	60fb      	str	r3, [r7, #12]
   return(result);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800719c:	61fa      	str	r2, [r7, #28]
 800719e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	69b9      	ldr	r1, [r7, #24]
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	617b      	str	r3, [r7, #20]
   return(result);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e3      	bne.n	8007178 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f847 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071c2:	e023      	b.n	800720c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <HAL_UART_IRQHandler+0x4f4>
 80071d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fad6 	bl	800778e <UART_Transmit_IT>
    return;
 80071e2:	e014      	b.n	800720e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00e      	beq.n	800720e <HAL_UART_IRQHandler+0x51e>
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fb16 	bl	800782e <UART_EndTransmit_IT>
    return;
 8007202:	e004      	b.n	800720e <HAL_UART_IRQHandler+0x51e>
    return;
 8007204:	bf00      	nop
 8007206:	e002      	b.n	800720e <HAL_UART_IRQHandler+0x51e>
      return;
 8007208:	bf00      	nop
 800720a:	e000      	b.n	800720e <HAL_UART_IRQHandler+0x51e>
      return;
 800720c:	bf00      	nop
  }
}
 800720e:	37e8      	adds	r7, #232	; 0xe8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b090      	sub	sp, #64	; 0x40
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d137      	bne.n	80072f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007286:	2200      	movs	r2, #0
 8007288:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800728a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3314      	adds	r3, #20
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	623b      	str	r3, [r7, #32]
   return(result);
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80072a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3314      	adds	r3, #20
 80072a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072aa:	633a      	str	r2, [r7, #48]	; 0x30
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e5      	bne.n	800728a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34
 80072d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	330c      	adds	r3, #12
 80072dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072de:	61fa      	str	r2, [r7, #28]
 80072e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	69b9      	ldr	r1, [r7, #24]
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	617b      	str	r3, [r7, #20]
   return(result);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e5      	bne.n	80072be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072f2:	e002      	b.n	80072fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80072f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072f6:	f7fd f83d 	bl	8004374 <HAL_UART_TxCpltCallback>
}
 80072fa:	bf00      	nop
 80072fc:	3740      	adds	r7, #64	; 0x40
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff ff7f 	bl	8007214 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007316:	bf00      	nop
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b09c      	sub	sp, #112	; 0x70
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007336:	2b00      	cmp	r3, #0
 8007338:	d172      	bne.n	8007420 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800733a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733c:	2200      	movs	r2, #0
 800733e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	330c      	adds	r3, #12
 8007346:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007356:	66bb      	str	r3, [r7, #104]	; 0x68
 8007358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007360:	65ba      	str	r2, [r7, #88]	; 0x58
 8007362:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007366:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800736e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e5      	bne.n	8007340 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3314      	adds	r3, #20
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	667b      	str	r3, [r7, #100]	; 0x64
 800738c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3314      	adds	r3, #20
 8007392:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007394:	647a      	str	r2, [r7, #68]	; 0x44
 8007396:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800739a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e5      	bne.n	8007374 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3314      	adds	r3, #20
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	623b      	str	r3, [r7, #32]
   return(result);
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073be:	663b      	str	r3, [r7, #96]	; 0x60
 80073c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3314      	adds	r3, #20
 80073c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073c8:	633a      	str	r2, [r7, #48]	; 0x30
 80073ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e5      	bne.n	80073a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d119      	bne.n	8007420 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0310 	bic.w	r3, r3, #16
 8007402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	330c      	adds	r3, #12
 800740a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800740c:	61fa      	str	r2, [r7, #28]
 800740e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	69b9      	ldr	r1, [r7, #24]
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	617b      	str	r3, [r7, #20]
   return(result);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e5      	bne.n	80073ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007422:	2200      	movs	r2, #0
 8007424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	2b01      	cmp	r3, #1
 800742c:	d106      	bne.n	800743c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800742e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007432:	4619      	mov	r1, r3
 8007434:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007436:	f7ff ff0b 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800743a:	e002      	b.n	8007442 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800743c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800743e:	f7fc ffb1 	bl	80043a4 <HAL_UART_RxCpltCallback>
}
 8007442:	bf00      	nop
 8007444:	3770      	adds	r7, #112	; 0x70
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	2b01      	cmp	r3, #1
 8007464:	d108      	bne.n	8007478 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800746a:	085b      	lsrs	r3, r3, #1
 800746c:	b29b      	uxth	r3, r3
 800746e:	4619      	mov	r1, r3
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f7ff feed 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007476:	e002      	b.n	800747e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f7ff fed5 	bl	8007228 <HAL_UART_RxHalfCpltCallback>
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	bf0c      	ite	eq
 80074a6:	2301      	moveq	r3, #1
 80074a8:	2300      	movne	r3, #0
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b21      	cmp	r3, #33	; 0x21
 80074b8:	d108      	bne.n	80074cc <UART_DMAError+0x46>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2200      	movs	r2, #0
 80074c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80074c6:	68b8      	ldr	r0, [r7, #8]
 80074c8:	f000 f8c2 	bl	8007650 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d6:	2b40      	cmp	r3, #64	; 0x40
 80074d8:	bf0c      	ite	eq
 80074da:	2301      	moveq	r3, #1
 80074dc:	2300      	movne	r3, #0
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b22      	cmp	r3, #34	; 0x22
 80074ec:	d108      	bne.n	8007500 <UART_DMAError+0x7a>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80074fa:	68b8      	ldr	r0, [r7, #8]
 80074fc:	f000 f8d0 	bl	80076a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007504:	f043 0210 	orr.w	r2, r3, #16
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800750c:	68b8      	ldr	r0, [r7, #8]
 800750e:	f7ff fe95 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b098      	sub	sp, #96	; 0x60
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2222      	movs	r2, #34	; 0x22
 8007540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007548:	4a3e      	ldr	r2, [pc, #248]	; (8007644 <UART_Start_Receive_DMA+0x128>)
 800754a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007550:	4a3d      	ldr	r2, [pc, #244]	; (8007648 <UART_Start_Receive_DMA+0x12c>)
 8007552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007558:	4a3c      	ldr	r2, [pc, #240]	; (800764c <UART_Start_Receive_DMA+0x130>)
 800755a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007560:	2200      	movs	r2, #0
 8007562:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007564:	f107 0308 	add.w	r3, r7, #8
 8007568:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3304      	adds	r3, #4
 8007574:	4619      	mov	r1, r3
 8007576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	f7fe f916 	bl	80057ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007580:	2300      	movs	r3, #0
 8007582:	613b      	str	r3, [r7, #16]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	613b      	str	r3, [r7, #16]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	613b      	str	r3, [r7, #16]
 8007594:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d019      	beq.n	80075d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	330c      	adds	r3, #12
 80075a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	330c      	adds	r3, #12
 80075bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80075c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80075c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3314      	adds	r3, #20
 80075d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	f043 0301 	orr.w	r3, r3, #1
 80075e8:	657b      	str	r3, [r7, #84]	; 0x54
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3314      	adds	r3, #20
 80075f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e5      	bne.n	80075d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3314      	adds	r3, #20
 800760c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	617b      	str	r3, [r7, #20]
   return(result);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800761c:	653b      	str	r3, [r7, #80]	; 0x50
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3314      	adds	r3, #20
 8007624:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007626:	627a      	str	r2, [r7, #36]	; 0x24
 8007628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	6a39      	ldr	r1, [r7, #32]
 800762c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	61fb      	str	r3, [r7, #28]
   return(result);
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e5      	bne.n	8007606 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3760      	adds	r7, #96	; 0x60
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	0800731f 	.word	0x0800731f
 8007648:	0800744b 	.word	0x0800744b
 800764c:	08007487 	.word	0x08007487

08007650 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007650:	b480      	push	{r7}
 8007652:	b089      	sub	sp, #36	; 0x24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	330c      	adds	r3, #12
 800765e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	60bb      	str	r3, [r7, #8]
   return(result);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	330c      	adds	r3, #12
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	61ba      	str	r2, [r7, #24]
 800767a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	6979      	ldr	r1, [r7, #20]
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	e841 2300 	strex	r3, r2, [r1]
 8007684:	613b      	str	r3, [r7, #16]
   return(result);
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e5      	bne.n	8007658 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007694:	bf00      	nop
 8007696:	3724      	adds	r7, #36	; 0x24
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b095      	sub	sp, #84	; 0x54
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	330c      	adds	r3, #12
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	330c      	adds	r3, #12
 80076c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076c8:	643a      	str	r2, [r7, #64]	; 0x40
 80076ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e5      	bne.n	80076a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3314      	adds	r3, #20
 80076e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f023 0301 	bic.w	r3, r3, #1
 80076f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3314      	adds	r3, #20
 80076fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e5      	bne.n	80076dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	2b01      	cmp	r3, #1
 8007716:	d119      	bne.n	800774c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	330c      	adds	r3, #12
 800771e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	60bb      	str	r3, [r7, #8]
   return(result);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f023 0310 	bic.w	r3, r3, #16
 800772e:	647b      	str	r3, [r7, #68]	; 0x44
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	330c      	adds	r3, #12
 8007736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007738:	61ba      	str	r2, [r7, #24]
 800773a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6979      	ldr	r1, [r7, #20]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	613b      	str	r3, [r7, #16]
   return(result);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e5      	bne.n	8007718 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	631a      	str	r2, [r3, #48]	; 0x30
}
 800775a:	bf00      	nop
 800775c:	3754      	adds	r7, #84	; 0x54
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff fd5b 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b21      	cmp	r3, #33	; 0x21
 80077a0:	d13e      	bne.n	8007820 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077aa:	d114      	bne.n	80077d6 <UART_Transmit_IT+0x48>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d110      	bne.n	80077d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	1c9a      	adds	r2, r3, #2
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	621a      	str	r2, [r3, #32]
 80077d4:	e008      	b.n	80077e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	1c59      	adds	r1, r3, #1
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6211      	str	r1, [r2, #32]
 80077e0:	781a      	ldrb	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	4619      	mov	r1, r3
 80077f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10f      	bne.n	800781c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800780a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800781a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e000      	b.n	8007822 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007820:	2302      	movs	r3, #2
  }
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007844:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fc fd90 	bl	8004374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b08c      	sub	sp, #48	; 0x30
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b22      	cmp	r3, #34	; 0x22
 8007870:	f040 80ae 	bne.w	80079d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787c:	d117      	bne.n	80078ae <UART_Receive_IT+0x50>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d113      	bne.n	80078ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	b29b      	uxth	r3, r3
 8007898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789c:	b29a      	uxth	r2, r3
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	1c9a      	adds	r2, r3, #2
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	629a      	str	r2, [r3, #40]	; 0x28
 80078ac:	e026      	b.n	80078fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c0:	d007      	beq.n	80078d2 <UART_Receive_IT+0x74>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <UART_Receive_IT+0x82>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	e008      	b.n	80078f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29b      	uxth	r3, r3
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	4619      	mov	r1, r3
 800790a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800790c:	2b00      	cmp	r3, #0
 800790e:	d15d      	bne.n	80079cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0220 	bic.w	r2, r2, #32
 800791e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800792e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695a      	ldr	r2, [r3, #20]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0201 	bic.w	r2, r2, #1
 800793e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007952:	2b01      	cmp	r3, #1
 8007954:	d135      	bne.n	80079c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	613b      	str	r3, [r7, #16]
   return(result);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f023 0310 	bic.w	r3, r3, #16
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	330c      	adds	r3, #12
 800797a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797c:	623a      	str	r2, [r7, #32]
 800797e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	69f9      	ldr	r1, [r7, #28]
 8007982:	6a3a      	ldr	r2, [r7, #32]
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	61bb      	str	r3, [r7, #24]
   return(result);
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e5      	bne.n	800795c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0310 	and.w	r3, r3, #16
 800799a:	2b10      	cmp	r3, #16
 800799c:	d10a      	bne.n	80079b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fc48 	bl	8007250 <HAL_UARTEx_RxEventCallback>
 80079c0:	e002      	b.n	80079c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fc fcee 	bl	80043a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	e002      	b.n	80079d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3730      	adds	r7, #48	; 0x30
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079e0:	b0c0      	sub	sp, #256	; 0x100
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f8:	68d9      	ldr	r1, [r3, #12]
 80079fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	ea40 0301 	orr.w	r3, r0, r1
 8007a04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	431a      	orrs	r2, r3
 8007a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a34:	f021 010c 	bic.w	r1, r1, #12
 8007a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a42:	430b      	orrs	r3, r1
 8007a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a56:	6999      	ldr	r1, [r3, #24]
 8007a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	ea40 0301 	orr.w	r3, r0, r1
 8007a62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	4b8f      	ldr	r3, [pc, #572]	; (8007ca8 <UART_SetConfig+0x2cc>)
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d005      	beq.n	8007a7c <UART_SetConfig+0xa0>
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	4b8d      	ldr	r3, [pc, #564]	; (8007cac <UART_SetConfig+0x2d0>)
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d104      	bne.n	8007a86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a7c:	f7ff f83e 	bl	8006afc <HAL_RCC_GetPCLK2Freq>
 8007a80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a84:	e003      	b.n	8007a8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a86:	f7ff f825 	bl	8006ad4 <HAL_RCC_GetPCLK1Freq>
 8007a8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a98:	f040 810c 	bne.w	8007cb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007aa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007aaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007aae:	4622      	mov	r2, r4
 8007ab0:	462b      	mov	r3, r5
 8007ab2:	1891      	adds	r1, r2, r2
 8007ab4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ab6:	415b      	adcs	r3, r3
 8007ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007abe:	4621      	mov	r1, r4
 8007ac0:	eb12 0801 	adds.w	r8, r2, r1
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	eb43 0901 	adc.w	r9, r3, r1
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	f04f 0300 	mov.w	r3, #0
 8007ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ade:	4690      	mov	r8, r2
 8007ae0:	4699      	mov	r9, r3
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	eb18 0303 	adds.w	r3, r8, r3
 8007ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007aec:	462b      	mov	r3, r5
 8007aee:	eb49 0303 	adc.w	r3, r9, r3
 8007af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	18db      	adds	r3, r3, r3
 8007b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8007b10:	4613      	mov	r3, r2
 8007b12:	eb42 0303 	adc.w	r3, r2, r3
 8007b16:	657b      	str	r3, [r7, #84]	; 0x54
 8007b18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b20:	f7f8 fb5a 	bl	80001d8 <__aeabi_uldivmod>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4b61      	ldr	r3, [pc, #388]	; (8007cb0 <UART_SetConfig+0x2d4>)
 8007b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	011c      	lsls	r4, r3, #4
 8007b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b44:	4642      	mov	r2, r8
 8007b46:	464b      	mov	r3, r9
 8007b48:	1891      	adds	r1, r2, r2
 8007b4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b4c:	415b      	adcs	r3, r3
 8007b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b54:	4641      	mov	r1, r8
 8007b56:	eb12 0a01 	adds.w	sl, r2, r1
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	eb43 0b01 	adc.w	fp, r3, r1
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b74:	4692      	mov	sl, r2
 8007b76:	469b      	mov	fp, r3
 8007b78:	4643      	mov	r3, r8
 8007b7a:	eb1a 0303 	adds.w	r3, sl, r3
 8007b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b82:	464b      	mov	r3, r9
 8007b84:	eb4b 0303 	adc.w	r3, fp, r3
 8007b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	18db      	adds	r3, r3, r3
 8007ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	eb42 0303 	adc.w	r3, r2, r3
 8007bac:	647b      	str	r3, [r7, #68]	; 0x44
 8007bae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007bb6:	f7f8 fb0f 	bl	80001d8 <__aeabi_uldivmod>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	4b3b      	ldr	r3, [pc, #236]	; (8007cb0 <UART_SetConfig+0x2d4>)
 8007bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	2264      	movs	r2, #100	; 0x64
 8007bca:	fb02 f303 	mul.w	r3, r2, r3
 8007bce:	1acb      	subs	r3, r1, r3
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007bd6:	4b36      	ldr	r3, [pc, #216]	; (8007cb0 <UART_SetConfig+0x2d4>)
 8007bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007be4:	441c      	add	r4, r3
 8007be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007bf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	464b      	mov	r3, r9
 8007bfc:	1891      	adds	r1, r2, r2
 8007bfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c00:	415b      	adcs	r3, r3
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c08:	4641      	mov	r1, r8
 8007c0a:	1851      	adds	r1, r2, r1
 8007c0c:	6339      	str	r1, [r7, #48]	; 0x30
 8007c0e:	4649      	mov	r1, r9
 8007c10:	414b      	adcs	r3, r1
 8007c12:	637b      	str	r3, [r7, #52]	; 0x34
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	f04f 0300 	mov.w	r3, #0
 8007c1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c20:	4659      	mov	r1, fp
 8007c22:	00cb      	lsls	r3, r1, #3
 8007c24:	4651      	mov	r1, sl
 8007c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c2a:	4651      	mov	r1, sl
 8007c2c:	00ca      	lsls	r2, r1, #3
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4619      	mov	r1, r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	4642      	mov	r2, r8
 8007c36:	189b      	adds	r3, r3, r2
 8007c38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c3c:	464b      	mov	r3, r9
 8007c3e:	460a      	mov	r2, r1
 8007c40:	eb42 0303 	adc.w	r3, r2, r3
 8007c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	18db      	adds	r3, r3, r3
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c62:	4613      	mov	r3, r2
 8007c64:	eb42 0303 	adc.w	r3, r2, r3
 8007c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007c72:	f7f8 fab1 	bl	80001d8 <__aeabi_uldivmod>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4b0d      	ldr	r3, [pc, #52]	; (8007cb0 <UART_SetConfig+0x2d4>)
 8007c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	2164      	movs	r1, #100	; 0x64
 8007c84:	fb01 f303 	mul.w	r3, r1, r3
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	3332      	adds	r3, #50	; 0x32
 8007c8e:	4a08      	ldr	r2, [pc, #32]	; (8007cb0 <UART_SetConfig+0x2d4>)
 8007c90:	fba2 2303 	umull	r2, r3, r2, r3
 8007c94:	095b      	lsrs	r3, r3, #5
 8007c96:	f003 0207 	and.w	r2, r3, #7
 8007c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4422      	add	r2, r4
 8007ca2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ca4:	e106      	b.n	8007eb4 <UART_SetConfig+0x4d8>
 8007ca6:	bf00      	nop
 8007ca8:	40011000 	.word	0x40011000
 8007cac:	40011400 	.word	0x40011400
 8007cb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007cc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007cc6:	4642      	mov	r2, r8
 8007cc8:	464b      	mov	r3, r9
 8007cca:	1891      	adds	r1, r2, r2
 8007ccc:	6239      	str	r1, [r7, #32]
 8007cce:	415b      	adcs	r3, r3
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cd6:	4641      	mov	r1, r8
 8007cd8:	1854      	adds	r4, r2, r1
 8007cda:	4649      	mov	r1, r9
 8007cdc:	eb43 0501 	adc.w	r5, r3, r1
 8007ce0:	f04f 0200 	mov.w	r2, #0
 8007ce4:	f04f 0300 	mov.w	r3, #0
 8007ce8:	00eb      	lsls	r3, r5, #3
 8007cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007cee:	00e2      	lsls	r2, r4, #3
 8007cf0:	4614      	mov	r4, r2
 8007cf2:	461d      	mov	r5, r3
 8007cf4:	4643      	mov	r3, r8
 8007cf6:	18e3      	adds	r3, r4, r3
 8007cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007cfc:	464b      	mov	r3, r9
 8007cfe:	eb45 0303 	adc.w	r3, r5, r3
 8007d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d22:	4629      	mov	r1, r5
 8007d24:	008b      	lsls	r3, r1, #2
 8007d26:	4621      	mov	r1, r4
 8007d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	008a      	lsls	r2, r1, #2
 8007d30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d34:	f7f8 fa50 	bl	80001d8 <__aeabi_uldivmod>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4b60      	ldr	r3, [pc, #384]	; (8007ec0 <UART_SetConfig+0x4e4>)
 8007d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d42:	095b      	lsrs	r3, r3, #5
 8007d44:	011c      	lsls	r4, r3, #4
 8007d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d58:	4642      	mov	r2, r8
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	1891      	adds	r1, r2, r2
 8007d5e:	61b9      	str	r1, [r7, #24]
 8007d60:	415b      	adcs	r3, r3
 8007d62:	61fb      	str	r3, [r7, #28]
 8007d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d68:	4641      	mov	r1, r8
 8007d6a:	1851      	adds	r1, r2, r1
 8007d6c:	6139      	str	r1, [r7, #16]
 8007d6e:	4649      	mov	r1, r9
 8007d70:	414b      	adcs	r3, r1
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	f04f 0200 	mov.w	r2, #0
 8007d78:	f04f 0300 	mov.w	r3, #0
 8007d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d80:	4659      	mov	r1, fp
 8007d82:	00cb      	lsls	r3, r1, #3
 8007d84:	4651      	mov	r1, sl
 8007d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d8a:	4651      	mov	r1, sl
 8007d8c:	00ca      	lsls	r2, r1, #3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	4619      	mov	r1, r3
 8007d92:	4603      	mov	r3, r0
 8007d94:	4642      	mov	r2, r8
 8007d96:	189b      	adds	r3, r3, r2
 8007d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d9c:	464b      	mov	r3, r9
 8007d9e:	460a      	mov	r2, r1
 8007da0:	eb42 0303 	adc.w	r3, r2, r3
 8007da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007db2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007db4:	f04f 0200 	mov.w	r2, #0
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	008b      	lsls	r3, r1, #2
 8007dc4:	4641      	mov	r1, r8
 8007dc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dca:	4641      	mov	r1, r8
 8007dcc:	008a      	lsls	r2, r1, #2
 8007dce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007dd2:	f7f8 fa01 	bl	80001d8 <__aeabi_uldivmod>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4b38      	ldr	r3, [pc, #224]	; (8007ec0 <UART_SetConfig+0x4e4>)
 8007dde:	fba3 2301 	umull	r2, r3, r3, r1
 8007de2:	095b      	lsrs	r3, r3, #5
 8007de4:	2264      	movs	r2, #100	; 0x64
 8007de6:	fb02 f303 	mul.w	r3, r2, r3
 8007dea:	1acb      	subs	r3, r1, r3
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	3332      	adds	r3, #50	; 0x32
 8007df0:	4a33      	ldr	r2, [pc, #204]	; (8007ec0 <UART_SetConfig+0x4e4>)
 8007df2:	fba2 2303 	umull	r2, r3, r2, r3
 8007df6:	095b      	lsrs	r3, r3, #5
 8007df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dfc:	441c      	add	r4, r3
 8007dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e02:	2200      	movs	r2, #0
 8007e04:	673b      	str	r3, [r7, #112]	; 0x70
 8007e06:	677a      	str	r2, [r7, #116]	; 0x74
 8007e08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	464b      	mov	r3, r9
 8007e10:	1891      	adds	r1, r2, r2
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	415b      	adcs	r3, r3
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	1851      	adds	r1, r2, r1
 8007e20:	6039      	str	r1, [r7, #0]
 8007e22:	4649      	mov	r1, r9
 8007e24:	414b      	adcs	r3, r1
 8007e26:	607b      	str	r3, [r7, #4]
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	f04f 0300 	mov.w	r3, #0
 8007e30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e34:	4659      	mov	r1, fp
 8007e36:	00cb      	lsls	r3, r1, #3
 8007e38:	4651      	mov	r1, sl
 8007e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e3e:	4651      	mov	r1, sl
 8007e40:	00ca      	lsls	r2, r1, #3
 8007e42:	4610      	mov	r0, r2
 8007e44:	4619      	mov	r1, r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	4642      	mov	r2, r8
 8007e4a:	189b      	adds	r3, r3, r2
 8007e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e4e:	464b      	mov	r3, r9
 8007e50:	460a      	mov	r2, r1
 8007e52:	eb42 0303 	adc.w	r3, r2, r3
 8007e56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	663b      	str	r3, [r7, #96]	; 0x60
 8007e62:	667a      	str	r2, [r7, #100]	; 0x64
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007e70:	4649      	mov	r1, r9
 8007e72:	008b      	lsls	r3, r1, #2
 8007e74:	4641      	mov	r1, r8
 8007e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e7a:	4641      	mov	r1, r8
 8007e7c:	008a      	lsls	r2, r1, #2
 8007e7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007e82:	f7f8 f9a9 	bl	80001d8 <__aeabi_uldivmod>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <UART_SetConfig+0x4e4>)
 8007e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e90:	095b      	lsrs	r3, r3, #5
 8007e92:	2164      	movs	r1, #100	; 0x64
 8007e94:	fb01 f303 	mul.w	r3, r1, r3
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	3332      	adds	r3, #50	; 0x32
 8007e9e:	4a08      	ldr	r2, [pc, #32]	; (8007ec0 <UART_SetConfig+0x4e4>)
 8007ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea4:	095b      	lsrs	r3, r3, #5
 8007ea6:	f003 020f 	and.w	r2, r3, #15
 8007eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4422      	add	r2, r4
 8007eb2:	609a      	str	r2, [r3, #8]
}
 8007eb4:	bf00      	nop
 8007eb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ec0:	51eb851f 	.word	0x51eb851f

08007ec4 <realloc>:
 8007ec4:	4b02      	ldr	r3, [pc, #8]	; (8007ed0 <realloc+0xc>)
 8007ec6:	460a      	mov	r2, r1
 8007ec8:	4601      	mov	r1, r0
 8007eca:	6818      	ldr	r0, [r3, #0]
 8007ecc:	f000 b802 	b.w	8007ed4 <_realloc_r>
 8007ed0:	20000064 	.word	0x20000064

08007ed4 <_realloc_r>:
 8007ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed8:	4680      	mov	r8, r0
 8007eda:	4614      	mov	r4, r2
 8007edc:	460e      	mov	r6, r1
 8007ede:	b921      	cbnz	r1, 8007eea <_realloc_r+0x16>
 8007ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	f000 b8d3 	b.w	8008090 <_malloc_r>
 8007eea:	b92a      	cbnz	r2, 8007ef8 <_realloc_r+0x24>
 8007eec:	f000 f864 	bl	8007fb8 <_free_r>
 8007ef0:	4625      	mov	r5, r4
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	f000 f956 	bl	80081a8 <_malloc_usable_size_r>
 8007efc:	4284      	cmp	r4, r0
 8007efe:	4607      	mov	r7, r0
 8007f00:	d802      	bhi.n	8007f08 <_realloc_r+0x34>
 8007f02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f06:	d812      	bhi.n	8007f2e <_realloc_r+0x5a>
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f000 f8c0 	bl	8008090 <_malloc_r>
 8007f10:	4605      	mov	r5, r0
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d0ed      	beq.n	8007ef2 <_realloc_r+0x1e>
 8007f16:	42bc      	cmp	r4, r7
 8007f18:	4622      	mov	r2, r4
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	bf28      	it	cs
 8007f1e:	463a      	movcs	r2, r7
 8007f20:	f000 f83c 	bl	8007f9c <memcpy>
 8007f24:	4631      	mov	r1, r6
 8007f26:	4640      	mov	r0, r8
 8007f28:	f000 f846 	bl	8007fb8 <_free_r>
 8007f2c:	e7e1      	b.n	8007ef2 <_realloc_r+0x1e>
 8007f2e:	4635      	mov	r5, r6
 8007f30:	e7df      	b.n	8007ef2 <_realloc_r+0x1e>

08007f32 <memset>:
 8007f32:	4402      	add	r2, r0
 8007f34:	4603      	mov	r3, r0
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d100      	bne.n	8007f3c <memset+0xa>
 8007f3a:	4770      	bx	lr
 8007f3c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f40:	e7f9      	b.n	8007f36 <memset+0x4>
	...

08007f44 <__errno>:
 8007f44:	4b01      	ldr	r3, [pc, #4]	; (8007f4c <__errno+0x8>)
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20000064 	.word	0x20000064

08007f50 <__libc_init_array>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	4d0d      	ldr	r5, [pc, #52]	; (8007f88 <__libc_init_array+0x38>)
 8007f54:	4c0d      	ldr	r4, [pc, #52]	; (8007f8c <__libc_init_array+0x3c>)
 8007f56:	1b64      	subs	r4, r4, r5
 8007f58:	10a4      	asrs	r4, r4, #2
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	42a6      	cmp	r6, r4
 8007f5e:	d109      	bne.n	8007f74 <__libc_init_array+0x24>
 8007f60:	4d0b      	ldr	r5, [pc, #44]	; (8007f90 <__libc_init_array+0x40>)
 8007f62:	4c0c      	ldr	r4, [pc, #48]	; (8007f94 <__libc_init_array+0x44>)
 8007f64:	f000 f938 	bl	80081d8 <_init>
 8007f68:	1b64      	subs	r4, r4, r5
 8007f6a:	10a4      	asrs	r4, r4, #2
 8007f6c:	2600      	movs	r6, #0
 8007f6e:	42a6      	cmp	r6, r4
 8007f70:	d105      	bne.n	8007f7e <__libc_init_array+0x2e>
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
 8007f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f78:	4798      	blx	r3
 8007f7a:	3601      	adds	r6, #1
 8007f7c:	e7ee      	b.n	8007f5c <__libc_init_array+0xc>
 8007f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f82:	4798      	blx	r3
 8007f84:	3601      	adds	r6, #1
 8007f86:	e7f2      	b.n	8007f6e <__libc_init_array+0x1e>
 8007f88:	080086b0 	.word	0x080086b0
 8007f8c:	080086b0 	.word	0x080086b0
 8007f90:	080086b0 	.word	0x080086b0
 8007f94:	080086b8 	.word	0x080086b8

08007f98 <__retarget_lock_acquire_recursive>:
 8007f98:	4770      	bx	lr

08007f9a <__retarget_lock_release_recursive>:
 8007f9a:	4770      	bx	lr

08007f9c <memcpy>:
 8007f9c:	440a      	add	r2, r1
 8007f9e:	4291      	cmp	r1, r2
 8007fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fa4:	d100      	bne.n	8007fa8 <memcpy+0xc>
 8007fa6:	4770      	bx	lr
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fb2:	4291      	cmp	r1, r2
 8007fb4:	d1f9      	bne.n	8007faa <memcpy+0xe>
 8007fb6:	bd10      	pop	{r4, pc}

08007fb8 <_free_r>:
 8007fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fba:	2900      	cmp	r1, #0
 8007fbc:	d044      	beq.n	8008048 <_free_r+0x90>
 8007fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc2:	9001      	str	r0, [sp, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8007fca:	bfb8      	it	lt
 8007fcc:	18e4      	addlt	r4, r4, r3
 8007fce:	f000 f8df 	bl	8008190 <__malloc_lock>
 8007fd2:	4a1e      	ldr	r2, [pc, #120]	; (800804c <_free_r+0x94>)
 8007fd4:	9801      	ldr	r0, [sp, #4]
 8007fd6:	6813      	ldr	r3, [r2, #0]
 8007fd8:	b933      	cbnz	r3, 8007fe8 <_free_r+0x30>
 8007fda:	6063      	str	r3, [r4, #4]
 8007fdc:	6014      	str	r4, [r2, #0]
 8007fde:	b003      	add	sp, #12
 8007fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fe4:	f000 b8da 	b.w	800819c <__malloc_unlock>
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	d908      	bls.n	8007ffe <_free_r+0x46>
 8007fec:	6825      	ldr	r5, [r4, #0]
 8007fee:	1961      	adds	r1, r4, r5
 8007ff0:	428b      	cmp	r3, r1
 8007ff2:	bf01      	itttt	eq
 8007ff4:	6819      	ldreq	r1, [r3, #0]
 8007ff6:	685b      	ldreq	r3, [r3, #4]
 8007ff8:	1949      	addeq	r1, r1, r5
 8007ffa:	6021      	streq	r1, [r4, #0]
 8007ffc:	e7ed      	b.n	8007fda <_free_r+0x22>
 8007ffe:	461a      	mov	r2, r3
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	b10b      	cbz	r3, 8008008 <_free_r+0x50>
 8008004:	42a3      	cmp	r3, r4
 8008006:	d9fa      	bls.n	8007ffe <_free_r+0x46>
 8008008:	6811      	ldr	r1, [r2, #0]
 800800a:	1855      	adds	r5, r2, r1
 800800c:	42a5      	cmp	r5, r4
 800800e:	d10b      	bne.n	8008028 <_free_r+0x70>
 8008010:	6824      	ldr	r4, [r4, #0]
 8008012:	4421      	add	r1, r4
 8008014:	1854      	adds	r4, r2, r1
 8008016:	42a3      	cmp	r3, r4
 8008018:	6011      	str	r1, [r2, #0]
 800801a:	d1e0      	bne.n	8007fde <_free_r+0x26>
 800801c:	681c      	ldr	r4, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	6053      	str	r3, [r2, #4]
 8008022:	440c      	add	r4, r1
 8008024:	6014      	str	r4, [r2, #0]
 8008026:	e7da      	b.n	8007fde <_free_r+0x26>
 8008028:	d902      	bls.n	8008030 <_free_r+0x78>
 800802a:	230c      	movs	r3, #12
 800802c:	6003      	str	r3, [r0, #0]
 800802e:	e7d6      	b.n	8007fde <_free_r+0x26>
 8008030:	6825      	ldr	r5, [r4, #0]
 8008032:	1961      	adds	r1, r4, r5
 8008034:	428b      	cmp	r3, r1
 8008036:	bf04      	itt	eq
 8008038:	6819      	ldreq	r1, [r3, #0]
 800803a:	685b      	ldreq	r3, [r3, #4]
 800803c:	6063      	str	r3, [r4, #4]
 800803e:	bf04      	itt	eq
 8008040:	1949      	addeq	r1, r1, r5
 8008042:	6021      	streq	r1, [r4, #0]
 8008044:	6054      	str	r4, [r2, #4]
 8008046:	e7ca      	b.n	8007fde <_free_r+0x26>
 8008048:	b003      	add	sp, #12
 800804a:	bd30      	pop	{r4, r5, pc}
 800804c:	20000e30 	.word	0x20000e30

08008050 <sbrk_aligned>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	4e0e      	ldr	r6, [pc, #56]	; (800808c <sbrk_aligned+0x3c>)
 8008054:	460c      	mov	r4, r1
 8008056:	6831      	ldr	r1, [r6, #0]
 8008058:	4605      	mov	r5, r0
 800805a:	b911      	cbnz	r1, 8008062 <sbrk_aligned+0x12>
 800805c:	f000 f8ac 	bl	80081b8 <_sbrk_r>
 8008060:	6030      	str	r0, [r6, #0]
 8008062:	4621      	mov	r1, r4
 8008064:	4628      	mov	r0, r5
 8008066:	f000 f8a7 	bl	80081b8 <_sbrk_r>
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	d00a      	beq.n	8008084 <sbrk_aligned+0x34>
 800806e:	1cc4      	adds	r4, r0, #3
 8008070:	f024 0403 	bic.w	r4, r4, #3
 8008074:	42a0      	cmp	r0, r4
 8008076:	d007      	beq.n	8008088 <sbrk_aligned+0x38>
 8008078:	1a21      	subs	r1, r4, r0
 800807a:	4628      	mov	r0, r5
 800807c:	f000 f89c 	bl	80081b8 <_sbrk_r>
 8008080:	3001      	adds	r0, #1
 8008082:	d101      	bne.n	8008088 <sbrk_aligned+0x38>
 8008084:	f04f 34ff 	mov.w	r4, #4294967295
 8008088:	4620      	mov	r0, r4
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	20000e34 	.word	0x20000e34

08008090 <_malloc_r>:
 8008090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008094:	1ccd      	adds	r5, r1, #3
 8008096:	f025 0503 	bic.w	r5, r5, #3
 800809a:	3508      	adds	r5, #8
 800809c:	2d0c      	cmp	r5, #12
 800809e:	bf38      	it	cc
 80080a0:	250c      	movcc	r5, #12
 80080a2:	2d00      	cmp	r5, #0
 80080a4:	4607      	mov	r7, r0
 80080a6:	db01      	blt.n	80080ac <_malloc_r+0x1c>
 80080a8:	42a9      	cmp	r1, r5
 80080aa:	d905      	bls.n	80080b8 <_malloc_r+0x28>
 80080ac:	230c      	movs	r3, #12
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	2600      	movs	r6, #0
 80080b2:	4630      	mov	r0, r6
 80080b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800818c <_malloc_r+0xfc>
 80080bc:	f000 f868 	bl	8008190 <__malloc_lock>
 80080c0:	f8d8 3000 	ldr.w	r3, [r8]
 80080c4:	461c      	mov	r4, r3
 80080c6:	bb5c      	cbnz	r4, 8008120 <_malloc_r+0x90>
 80080c8:	4629      	mov	r1, r5
 80080ca:	4638      	mov	r0, r7
 80080cc:	f7ff ffc0 	bl	8008050 <sbrk_aligned>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	4604      	mov	r4, r0
 80080d4:	d155      	bne.n	8008182 <_malloc_r+0xf2>
 80080d6:	f8d8 4000 	ldr.w	r4, [r8]
 80080da:	4626      	mov	r6, r4
 80080dc:	2e00      	cmp	r6, #0
 80080de:	d145      	bne.n	800816c <_malloc_r+0xdc>
 80080e0:	2c00      	cmp	r4, #0
 80080e2:	d048      	beq.n	8008176 <_malloc_r+0xe6>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	4631      	mov	r1, r6
 80080e8:	4638      	mov	r0, r7
 80080ea:	eb04 0903 	add.w	r9, r4, r3
 80080ee:	f000 f863 	bl	80081b8 <_sbrk_r>
 80080f2:	4581      	cmp	r9, r0
 80080f4:	d13f      	bne.n	8008176 <_malloc_r+0xe6>
 80080f6:	6821      	ldr	r1, [r4, #0]
 80080f8:	1a6d      	subs	r5, r5, r1
 80080fa:	4629      	mov	r1, r5
 80080fc:	4638      	mov	r0, r7
 80080fe:	f7ff ffa7 	bl	8008050 <sbrk_aligned>
 8008102:	3001      	adds	r0, #1
 8008104:	d037      	beq.n	8008176 <_malloc_r+0xe6>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	442b      	add	r3, r5
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	f8d8 3000 	ldr.w	r3, [r8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d038      	beq.n	8008186 <_malloc_r+0xf6>
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	42a2      	cmp	r2, r4
 8008118:	d12b      	bne.n	8008172 <_malloc_r+0xe2>
 800811a:	2200      	movs	r2, #0
 800811c:	605a      	str	r2, [r3, #4]
 800811e:	e00f      	b.n	8008140 <_malloc_r+0xb0>
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	1b52      	subs	r2, r2, r5
 8008124:	d41f      	bmi.n	8008166 <_malloc_r+0xd6>
 8008126:	2a0b      	cmp	r2, #11
 8008128:	d917      	bls.n	800815a <_malloc_r+0xca>
 800812a:	1961      	adds	r1, r4, r5
 800812c:	42a3      	cmp	r3, r4
 800812e:	6025      	str	r5, [r4, #0]
 8008130:	bf18      	it	ne
 8008132:	6059      	strne	r1, [r3, #4]
 8008134:	6863      	ldr	r3, [r4, #4]
 8008136:	bf08      	it	eq
 8008138:	f8c8 1000 	streq.w	r1, [r8]
 800813c:	5162      	str	r2, [r4, r5]
 800813e:	604b      	str	r3, [r1, #4]
 8008140:	4638      	mov	r0, r7
 8008142:	f104 060b 	add.w	r6, r4, #11
 8008146:	f000 f829 	bl	800819c <__malloc_unlock>
 800814a:	f026 0607 	bic.w	r6, r6, #7
 800814e:	1d23      	adds	r3, r4, #4
 8008150:	1af2      	subs	r2, r6, r3
 8008152:	d0ae      	beq.n	80080b2 <_malloc_r+0x22>
 8008154:	1b9b      	subs	r3, r3, r6
 8008156:	50a3      	str	r3, [r4, r2]
 8008158:	e7ab      	b.n	80080b2 <_malloc_r+0x22>
 800815a:	42a3      	cmp	r3, r4
 800815c:	6862      	ldr	r2, [r4, #4]
 800815e:	d1dd      	bne.n	800811c <_malloc_r+0x8c>
 8008160:	f8c8 2000 	str.w	r2, [r8]
 8008164:	e7ec      	b.n	8008140 <_malloc_r+0xb0>
 8008166:	4623      	mov	r3, r4
 8008168:	6864      	ldr	r4, [r4, #4]
 800816a:	e7ac      	b.n	80080c6 <_malloc_r+0x36>
 800816c:	4634      	mov	r4, r6
 800816e:	6876      	ldr	r6, [r6, #4]
 8008170:	e7b4      	b.n	80080dc <_malloc_r+0x4c>
 8008172:	4613      	mov	r3, r2
 8008174:	e7cc      	b.n	8008110 <_malloc_r+0x80>
 8008176:	230c      	movs	r3, #12
 8008178:	603b      	str	r3, [r7, #0]
 800817a:	4638      	mov	r0, r7
 800817c:	f000 f80e 	bl	800819c <__malloc_unlock>
 8008180:	e797      	b.n	80080b2 <_malloc_r+0x22>
 8008182:	6025      	str	r5, [r4, #0]
 8008184:	e7dc      	b.n	8008140 <_malloc_r+0xb0>
 8008186:	605b      	str	r3, [r3, #4]
 8008188:	deff      	udf	#255	; 0xff
 800818a:	bf00      	nop
 800818c:	20000e30 	.word	0x20000e30

08008190 <__malloc_lock>:
 8008190:	4801      	ldr	r0, [pc, #4]	; (8008198 <__malloc_lock+0x8>)
 8008192:	f7ff bf01 	b.w	8007f98 <__retarget_lock_acquire_recursive>
 8008196:	bf00      	nop
 8008198:	20000e2c 	.word	0x20000e2c

0800819c <__malloc_unlock>:
 800819c:	4801      	ldr	r0, [pc, #4]	; (80081a4 <__malloc_unlock+0x8>)
 800819e:	f7ff befc 	b.w	8007f9a <__retarget_lock_release_recursive>
 80081a2:	bf00      	nop
 80081a4:	20000e2c 	.word	0x20000e2c

080081a8 <_malloc_usable_size_r>:
 80081a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ac:	1f18      	subs	r0, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfbc      	itt	lt
 80081b2:	580b      	ldrlt	r3, [r1, r0]
 80081b4:	18c0      	addlt	r0, r0, r3
 80081b6:	4770      	bx	lr

080081b8 <_sbrk_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4d06      	ldr	r5, [pc, #24]	; (80081d4 <_sbrk_r+0x1c>)
 80081bc:	2300      	movs	r3, #0
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	f7fd f82a 	bl	800521c <_sbrk>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_sbrk_r+0x1a>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_sbrk_r+0x1a>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20000e28 	.word	0x20000e28

080081d8 <_init>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	bf00      	nop
 80081dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081de:	bc08      	pop	{r3}
 80081e0:	469e      	mov	lr, r3
 80081e2:	4770      	bx	lr

080081e4 <_fini>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	bf00      	nop
 80081e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ea:	bc08      	pop	{r3}
 80081ec:	469e      	mov	lr, r3
 80081ee:	4770      	bx	lr
