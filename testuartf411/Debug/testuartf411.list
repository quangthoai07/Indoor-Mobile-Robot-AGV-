
testuartf411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf30  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800d0c8  0800d0c8  0001d0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d500  0800d500  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800d500  0800d500  0001d500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d508  0800d508  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d508  0800d508  0001d508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d510  0800d510  0001d510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800d514  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001080  20000098  0800d5ac  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001118  0800d5ac  00021118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019096  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d02  00000000  00000000  000391a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  0003bea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f03  00000000  00000000  0003d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183b9  00000000  00000000  0003e093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f8d  00000000  00000000  0005644c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098eaf  00000000  00000000  0006d3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b1c  00000000  00000000  00106288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0010bda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d0b0 	.word	0x0800d0b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	0800d0b0 	.word	0x0800d0b0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_uldivmod>:
 8000b60:	b953      	cbnz	r3, 8000b78 <__aeabi_uldivmod+0x18>
 8000b62:	b94a      	cbnz	r2, 8000b78 <__aeabi_uldivmod+0x18>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	bf08      	it	eq
 8000b68:	2800      	cmpeq	r0, #0
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b70:	f04f 30ff 	movne.w	r0, #4294967295
 8000b74:	f000 b970 	b.w	8000e58 <__aeabi_idiv0>
 8000b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b80:	f000 f806 	bl	8000b90 <__udivmoddi4>
 8000b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8c:	b004      	add	sp, #16
 8000b8e:	4770      	bx	lr

08000b90 <__udivmoddi4>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	9e08      	ldr	r6, [sp, #32]
 8000b96:	460d      	mov	r5, r1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	460f      	mov	r7, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14a      	bne.n	8000c36 <__udivmoddi4+0xa6>
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	d965      	bls.n	8000c72 <__udivmoddi4+0xe2>
 8000ba6:	fab2 f382 	clz	r3, r2
 8000baa:	b143      	cbz	r3, 8000bbe <__udivmoddi4+0x2e>
 8000bac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb0:	f1c3 0220 	rsb	r2, r3, #32
 8000bb4:	409f      	lsls	r7, r3
 8000bb6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bba:	4317      	orrs	r7, r2
 8000bbc:	409c      	lsls	r4, r3
 8000bbe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc2:	fa1f f58c 	uxth.w	r5, ip
 8000bc6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bca:	0c22      	lsrs	r2, r4, #16
 8000bcc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd4:	fb01 f005 	mul.w	r0, r1, r5
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x62>
 8000bdc:	eb1c 0202 	adds.w	r2, ip, r2
 8000be0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be4:	f080 811c 	bcs.w	8000e20 <__udivmoddi4+0x290>
 8000be8:	4290      	cmp	r0, r2
 8000bea:	f240 8119 	bls.w	8000e20 <__udivmoddi4+0x290>
 8000bee:	3902      	subs	r1, #2
 8000bf0:	4462      	add	r2, ip
 8000bf2:	1a12      	subs	r2, r2, r0
 8000bf4:	b2a4      	uxth	r4, r4
 8000bf6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c02:	fb00 f505 	mul.w	r5, r0, r5
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x90>
 8000c0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x294>
 8000c16:	42a5      	cmp	r5, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x294>
 8000c1c:	4464      	add	r4, ip
 8000c1e:	3802      	subs	r0, #2
 8000c20:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	2100      	movs	r1, #0
 8000c28:	b11e      	cbz	r6, 8000c32 <__udivmoddi4+0xa2>
 8000c2a:	40dc      	lsrs	r4, r3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0xbc>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	f000 80ed 	beq.w	8000e1a <__udivmoddi4+0x28a>
 8000c40:	2100      	movs	r1, #0
 8000c42:	e9c6 0500 	strd	r0, r5, [r6]
 8000c46:	4608      	mov	r0, r1
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	fab3 f183 	clz	r1, r3
 8000c50:	2900      	cmp	r1, #0
 8000c52:	d149      	bne.n	8000ce8 <__udivmoddi4+0x158>
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d302      	bcc.n	8000c5e <__udivmoddi4+0xce>
 8000c58:	4282      	cmp	r2, r0
 8000c5a:	f200 80f8 	bhi.w	8000e4e <__udivmoddi4+0x2be>
 8000c5e:	1a84      	subs	r4, r0, r2
 8000c60:	eb65 0203 	sbc.w	r2, r5, r3
 8000c64:	2001      	movs	r0, #1
 8000c66:	4617      	mov	r7, r2
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d0e2      	beq.n	8000c32 <__udivmoddi4+0xa2>
 8000c6c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c70:	e7df      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000c72:	b902      	cbnz	r2, 8000c76 <__udivmoddi4+0xe6>
 8000c74:	deff      	udf	#255	; 0xff
 8000c76:	fab2 f382 	clz	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x210>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c90:	fb07 2015 	mls	r0, r7, r5, r2
 8000c94:	0c22      	lsrs	r2, r4, #16
 8000c96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9a:	fb0e f005 	mul.w	r0, lr, r5
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x124>
 8000ca2:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x122>
 8000cac:	4290      	cmp	r0, r2
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2b8>
 8000cb2:	4645      	mov	r5, r8
 8000cb4:	1a12      	subs	r2, r2, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cbc:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x14e>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x14c>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2c2>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce6:	e79f      	b.n	8000c28 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0720 	rsb	r7, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfa:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfe:	40fd      	lsrs	r5, r7
 8000d00:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d18:	fb08 f50e 	mul.w	r5, r8, lr
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	fa00 f001 	lsl.w	r0, r0, r1
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b0>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2b4>
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2b4>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4464      	add	r4, ip
 8000d40:	1b64      	subs	r4, r4, r5
 8000d42:	b29d      	uxth	r5, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d50:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1da>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2ac>
 8000d62:	45a6      	cmp	lr, r4
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2ac>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46ae      	mov	lr, r5
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x29c>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x298>
 8000d80:	b156      	cbz	r6, 8000d98 <__udivmoddi4+0x208>
 8000d82:	ebb0 0208 	subs.w	r2, r0, r8
 8000d86:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8e:	40ca      	lsrs	r2, r1
 8000d90:	40cc      	lsrs	r4, r1
 8000d92:	4317      	orrs	r7, r2
 8000d94:	e9c6 7400 	strd	r7, r4, [r6]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	f1c3 0120 	rsb	r1, r3, #32
 8000da4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da8:	fa20 f201 	lsr.w	r2, r0, r1
 8000dac:	fa25 f101 	lsr.w	r1, r5, r1
 8000db0:	409d      	lsls	r5, r3
 8000db2:	432a      	orrs	r2, r5
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc4:	0c11      	lsrs	r1, r2, #16
 8000dc6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dca:	fb00 f50e 	mul.w	r5, r0, lr
 8000dce:	428d      	cmp	r5, r1
 8000dd0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x258>
 8000dd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b0>
 8000de0:	428d      	cmp	r5, r1
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b0>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4461      	add	r1, ip
 8000de8:	1b49      	subs	r1, r1, r5
 8000dea:	b292      	uxth	r2, r2
 8000dec:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df0:	fb07 1115 	mls	r1, r7, r5, r1
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dfc:	4291      	cmp	r1, r2
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x282>
 8000e00:	eb1c 0202 	adds.w	r2, ip, r2
 8000e04:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2a8>
 8000e0a:	4291      	cmp	r1, r2
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2a8>
 8000e0e:	3d02      	subs	r5, #2
 8000e10:	4462      	add	r2, ip
 8000e12:	1a52      	subs	r2, r2, r1
 8000e14:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0xfc>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e708      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000e20:	4639      	mov	r1, r7
 8000e22:	e6e6      	b.n	8000bf2 <__udivmoddi4+0x62>
 8000e24:	4610      	mov	r0, r2
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x90>
 8000e28:	4548      	cmp	r0, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f0>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e34:	3b01      	subs	r3, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f0>
 8000e38:	4645      	mov	r5, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x282>
 8000e3c:	462b      	mov	r3, r5
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1da>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x258>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b0>
 8000e48:	3d02      	subs	r5, #2
 8000e4a:	4462      	add	r2, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x124>
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e70a      	b.n	8000c68 <__udivmoddi4+0xd8>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x14e>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	0a5a      	lsrs	r2, r3, #9
 8000e6c:	490f      	ldr	r1, [pc, #60]	; (8000eac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e6e:	fba1 1202 	umull	r1, r2, r1, r2
 8000e72:	09d2      	lsrs	r2, r2, #7
 8000e74:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000e76:	fb01 f202 	mul.w	r2, r1, r2
 8000e7a:	1a9b      	subs	r3, r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	0a5b      	lsrs	r3, r3, #9
 8000e84:	4a09      	ldr	r2, [pc, #36]	; (8000eac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e86:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8a:	09db      	lsrs	r3, r3, #7
 8000e8c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	441a      	add	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	00044b83 	.word	0x00044b83
 8000eb0:	3b9aca00 	.word	0x3b9aca00

08000eb4 <MPU9250_Read_Accel>:
		HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,GYRO_CONF_REG,I2C_MEMADD_SIZE_8BIT,&data,1,HAL_MAX_DELAY);

}

void MPU9250_Read_Accel(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af04      	add	r7, sp, #16
	uint8_t Rec_data[6];
	HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,ACCEL_XOUT_H_REG,1,Rec_data,6,1000);
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2306      	movs	r3, #6
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	223b      	movs	r2, #59	; 0x3b
 8000ecc:	21d0      	movs	r1, #208	; 0xd0
 8000ece:	482a      	ldr	r0, [pc, #168]	; (8000f78 <MPU9250_Read_Accel+0xc4>)
 8000ed0:	f007 fa0a 	bl	80082e8 <HAL_I2C_Mem_Read>

	int16_t Accel_X_RAW = (int16_t)(Rec_data[0] <<8 | Rec_data[1]);
 8000ed4:	793b      	ldrb	r3, [r7, #4]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	797b      	ldrb	r3, [r7, #5]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	81fb      	strh	r3, [r7, #14]
	int16_t Accel_Y_RAW = (int16_t)(Rec_data[2] <<8 | Rec_data[3]);
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	81bb      	strh	r3, [r7, #12]
	int16_t Accel_Z_RAW = (int16_t)(Rec_data[4] <<8 | Rec_data[5]);
 8000ef0:	7a3b      	ldrb	r3, [r7, #8]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	7a7b      	ldrb	r3, [r7, #9]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	817b      	strh	r3, [r7, #10]

	Ax=Accel_X_RAW/16384.0;
 8000efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fac2 	bl	800048c <__aeabi_i2d>
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MPU9250_Read_Accel+0xc8>)
 8000f0e:	f7ff fc51 	bl	80007b4 <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fdd1 	bl	8000ac0 <__aeabi_d2f>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <MPU9250_Read_Accel+0xcc>)
 8000f22:	6013      	str	r3, [r2, #0]
	Ay=Accel_Y_RAW/16384.0;
 8000f24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff faaf 	bl	800048c <__aeabi_i2d>
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MPU9250_Read_Accel+0xc8>)
 8000f34:	f7ff fc3e 	bl	80007b4 <__aeabi_ddiv>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fdbe 	bl	8000ac0 <__aeabi_d2f>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <MPU9250_Read_Accel+0xd0>)
 8000f48:	6013      	str	r3, [r2, #0]
	Az=Accel_Z_RAW/16384.0;
 8000f4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fa9c 	bl	800048c <__aeabi_i2d>
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MPU9250_Read_Accel+0xc8>)
 8000f5a:	f7ff fc2b 	bl	80007b4 <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fdab 	bl	8000ac0 <__aeabi_d2f>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <MPU9250_Read_Accel+0xd4>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000b4 	.word	0x200000b4
 8000f7c:	40d00000 	.word	0x40d00000
 8000f80:	20000340 	.word	0x20000340
 8000f84:	20000344 	.word	0x20000344
 8000f88:	20000348 	.word	0x20000348
 8000f8c:	00000000 	.word	0x00000000

08000f90 <MPU9250_Read_Gyro>:

void MPU9250_Read_Gyro(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af04      	add	r7, sp, #16
	uint8_t Rec_data[6];
	HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,GYRO_XOUT_H_REG,1,Rec_data,6,1000);
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	2306      	movs	r3, #6
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	2243      	movs	r2, #67	; 0x43
 8000fa8:	21d0      	movs	r1, #208	; 0xd0
 8000faa:	4831      	ldr	r0, [pc, #196]	; (8001070 <MPU9250_Read_Gyro+0xe0>)
 8000fac:	f007 f99c 	bl	80082e8 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_data[0] <<8 | Rec_data[1]);
 8000fb0:	783b      	ldrb	r3, [r7, #0]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	787b      	ldrb	r3, [r7, #1]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <MPU9250_Read_Gyro+0xe4>)
 8000fc0:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_data[2] <<8 | Rec_data[3]);
 8000fc2:	78bb      	ldrb	r3, [r7, #2]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <MPU9250_Read_Gyro+0xe8>)
 8000fd2:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_data[4] <<8 | Rec_data[5]);
 8000fd4:	793b      	ldrb	r3, [r7, #4]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	797b      	ldrb	r3, [r7, #5]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <MPU9250_Read_Gyro+0xec>)
 8000fe4:	801a      	strh	r2, [r3, #0]

	Gx=Gyro_X_RAW/131.0;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <MPU9250_Read_Gyro+0xe4>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa4d 	bl	800048c <__aeabi_i2d>
 8000ff2:	a31d      	add	r3, pc, #116	; (adr r3, 8001068 <MPU9250_Read_Gyro+0xd8>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fbdc 	bl	80007b4 <__aeabi_ddiv>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fd5c 	bl	8000ac0 <__aeabi_d2f>
 8001008:	4603      	mov	r3, r0
 800100a:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <MPU9250_Read_Gyro+0xf0>)
 800100c:	6013      	str	r3, [r2, #0]
	Gy=Gyro_Y_RAW/131.0;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MPU9250_Read_Gyro+0xe8>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa39 	bl	800048c <__aeabi_i2d>
 800101a:	a313      	add	r3, pc, #76	; (adr r3, 8001068 <MPU9250_Read_Gyro+0xd8>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff fbc8 	bl	80007b4 <__aeabi_ddiv>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	f7ff fd48 	bl	8000ac0 <__aeabi_d2f>
 8001030:	4603      	mov	r3, r0
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <MPU9250_Read_Gyro+0xf4>)
 8001034:	6013      	str	r3, [r2, #0]
	Gz=Gyro_Z_RAW/131.0;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MPU9250_Read_Gyro+0xec>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa25 	bl	800048c <__aeabi_i2d>
 8001042:	a309      	add	r3, pc, #36	; (adr r3, 8001068 <MPU9250_Read_Gyro+0xd8>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fbb4 	bl	80007b4 <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fd34 	bl	8000ac0 <__aeabi_d2f>
 8001058:	4603      	mov	r3, r0
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <MPU9250_Read_Gyro+0xf8>)
 800105c:	6013      	str	r3, [r2, #0]
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	00000000 	.word	0x00000000
 800106c:	40606000 	.word	0x40606000
 8001070:	200000b4 	.word	0x200000b4
 8001074:	20000338 	.word	0x20000338
 8001078:	2000033a 	.word	0x2000033a
 800107c:	2000033c 	.word	0x2000033c
 8001080:	2000034c 	.word	0x2000034c
 8001084:	20000350 	.word	0x20000350
 8001088:	20000354 	.word	0x20000354

0800108c <set_last_read_angle_data>:

void set_last_read_angle_data(unsigned long time, float x, float y, float z, float x_gyro, float y_gyro, float z_gyro) {
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	61f8      	str	r0, [r7, #28]
 8001094:	ed87 0a06 	vstr	s0, [r7, #24]
 8001098:	edc7 0a05 	vstr	s1, [r7, #20]
 800109c:	ed87 1a04 	vstr	s2, [r7, #16]
 80010a0:	edc7 1a03 	vstr	s3, [r7, #12]
 80010a4:	ed87 2a02 	vstr	s4, [r7, #8]
 80010a8:	edc7 2a01 	vstr	s5, [r7, #4]
  last_read_time = time;
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <set_last_read_angle_data+0x58>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	6013      	str	r3, [r2, #0]
  last_x_angle = x;
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <set_last_read_angle_data+0x5c>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6013      	str	r3, [r2, #0]
  last_y_angle = y;
 80010b8:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <set_last_read_angle_data+0x60>)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	6013      	str	r3, [r2, #0]
  last_z_angle = z;
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <set_last_read_angle_data+0x64>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6013      	str	r3, [r2, #0]
  last_gyro_x_angle = x_gyro;
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <set_last_read_angle_data+0x68>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6013      	str	r3, [r2, #0]
  last_gyro_y_angle = y_gyro;
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <set_last_read_angle_data+0x6c>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	6013      	str	r3, [r2, #0]
  last_gyro_z_angle = z_gyro;
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <set_last_read_angle_data+0x70>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000358 	.word	0x20000358
 80010e8:	2000035c 	.word	0x2000035c
 80010ec:	20000360 	.word	0x20000360
 80010f0:	20000364 	.word	0x20000364
 80010f4:	20000368 	.word	0x20000368
 80010f8:	2000036c 	.word	0x2000036c
 80010fc:	20000370 	.word	0x20000370

08001100 <get_last_time>:

unsigned long get_last_time() {return last_read_time;}
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <get_last_time+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000358 	.word	0x20000358

08001118 <get_last_x_angle>:
float get_last_x_angle() {return last_x_angle;}
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <get_last_x_angle+0x18>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb0 0a67 	vmov.f32	s0, s15
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	2000035c 	.word	0x2000035c

08001134 <get_last_y_angle>:
float get_last_y_angle() {return last_y_angle;}
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <get_last_y_angle+0x18>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb0 0a67 	vmov.f32	s0, s15
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20000360 	.word	0x20000360

08001150 <get_last_z_angle>:
float get_last_z_angle() {return last_z_angle;}
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <get_last_z_angle+0x18>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eeb0 0a67 	vmov.f32	s0, s15
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	20000364 	.word	0x20000364

0800116c <get_last_gyro_x_angle>:
float get_last_gyro_x_angle() {return last_gyro_x_angle;}
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <get_last_gyro_x_angle+0x18>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eeb0 0a67 	vmov.f32	s0, s15
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	20000368 	.word	0x20000368

08001188 <get_last_gyro_y_angle>:
float get_last_gyro_y_angle() {return last_gyro_y_angle;}
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <get_last_gyro_y_angle+0x18>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb0 0a67 	vmov.f32	s0, s15
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	2000036c 	.word	0x2000036c

080011a4 <get_last_gyro_z_angle>:
float get_last_gyro_z_angle() {return last_gyro_z_angle;}
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <get_last_gyro_z_angle+0x18>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000370 	.word	0x20000370

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f005 ffea 	bl	800719c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f846 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f000 fa8c 	bl	80016e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d0:	f000 fa62 	bl	8001698 <MX_DMA_Init>
  MX_USART6_UART_Init();
 80011d4:	f000 fa36 	bl	8001644 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80011d8:	f000 f8a8 	bl	800132c <MX_I2C1_Init>
  MX_TIM1_Init();
 80011dc:	f000 f8d4 	bl	8001388 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011e0:	f000 f92a 	bl	8001438 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011e4:	f000 f976 	bl	80014d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011e8:	f000 f9d8 	bl	800159c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim2);
 80011ec:	4815      	ldr	r0, [pc, #84]	; (8001244 <main+0x84>)
 80011ee:	f008 fa6b 	bl	80096c8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80011f2:	2104      	movs	r1, #4
 80011f4:	4814      	ldr	r0, [pc, #80]	; (8001248 <main+0x88>)
 80011f6:	f008 fc6f 	bl	8009ad8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80011fa:	2104      	movs	r1, #4
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <main+0x8c>)
 80011fe:	f008 fc6b 	bl	8009ad8 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001202:	2100      	movs	r1, #0
 8001204:	4812      	ldr	r0, [pc, #72]	; (8001250 <main+0x90>)
 8001206:	f008 fb11 	bl	800982c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800120a:	2104      	movs	r1, #4
 800120c:	4810      	ldr	r0, [pc, #64]	; (8001250 <main+0x90>)
 800120e:	f008 fb0d 	bl	800982c <HAL_TIM_PWM_Start>
  	  setup();
 8001212:	f004 fecf 	bl	8005fb4 <setup>


  	  // get_mpudata_average();

  	     set_last_read_angle_data( 0, 0, 0, 0, 0, 0, 0);
 8001216:	eddf 2a0f 	vldr	s5, [pc, #60]	; 8001254 <main+0x94>
 800121a:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8001254 <main+0x94>
 800121e:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8001254 <main+0x94>
 8001222:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8001254 <main+0x94>
 8001226:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001254 <main+0x94>
 800122a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001254 <main+0x94>
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ff2c 	bl	800108c <set_last_read_angle_data>

    /* USER CODE BEGIN 3 */
//	  HAL_Delay(1000);
//	  HAL_UART_Transmit(&huart6, tbuff, sizeof(tbuff), 100);

	  HAL_Delay(1000);
 8001234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001238:	f006 f822 	bl	8007280 <HAL_Delay>
	  loop();
 800123c:	f004 fed6 	bl	8005fec <loop>
	  HAL_Delay(1000);
 8001240:	e7f8      	b.n	8001234 <main+0x74>
 8001242:	bf00      	nop
 8001244:	20000150 	.word	0x20000150
 8001248:	20000108 	.word	0x20000108
 800124c:	200001e0 	.word	0x200001e0
 8001250:	20000198 	.word	0x20000198
 8001254:	00000000 	.word	0x00000000

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	; 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2230      	movs	r2, #48	; 0x30
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f00b fdcf 	bl	800ce0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <SystemClock_Config+0xcc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	4a27      	ldr	r2, [pc, #156]	; (8001324 <SystemClock_Config+0xcc>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	; 0x40
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <SystemClock_Config+0xcc>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <SystemClock_Config+0xd0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a21      	ldr	r2, [pc, #132]	; (8001328 <SystemClock_Config+0xd0>)
 80012a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <SystemClock_Config+0xd0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012d2:	2304      	movs	r3, #4
 80012d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d6:	2304      	movs	r3, #4
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fd0a 	bl	8008cf8 <HAL_RCC_OscConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ea:	f001 f9b9 	bl	8002660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2302      	movs	r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2102      	movs	r1, #2
 800130a:	4618      	mov	r0, r3
 800130c:	f007 ff6c 	bl	80091e8 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001316:	f001 f9a3 	bl	8002660 <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	; 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C1_Init+0x50>)
 8001332:	4a13      	ldr	r2, [pc, #76]	; (8001380 <MX_I2C1_Init+0x54>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C1_Init+0x50>)
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_I2C1_Init+0x58>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_I2C1_Init+0x50>)
 800134a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_I2C1_Init+0x50>)
 800136a:	f006 fe79 	bl	8008060 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001374:	f001 f974 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200000b4 	.word	0x200000b4
 8001380:	40005400 	.word	0x40005400
 8001384:	00061a80 	.word	0x00061a80

08001388 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2224      	movs	r2, #36	; 0x24
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f00b fd37 	bl	800ce0a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <MX_TIM1_Init+0xa8>)
 80013a6:	4a23      	ldr	r2, [pc, #140]	; (8001434 <MX_TIM1_Init+0xac>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <MX_TIM1_Init+0xa8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_TIM1_Init+0xa8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <MX_TIM1_Init+0xa8>)
 80013b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <MX_TIM1_Init+0xa8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_TIM1_Init+0xa8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_TIM1_Init+0xa8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d0:	2303      	movs	r3, #3
 80013d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d8:	2301      	movs	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e8:	2301      	movs	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_TIM1_Init+0xa8>)
 80013fc:	f008 fac6 	bl	800998c <HAL_TIM_Encoder_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001406:	f001 f92b 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <MX_TIM1_Init+0xa8>)
 8001418:	f009 f966 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001422:	f001 f91d 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3730      	adds	r7, #48	; 0x30
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000108 	.word	0x20000108
 8001434:	40010000 	.word	0x40010000

08001438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <MX_TIM2_Init+0x98>)
 8001456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_TIM2_Init+0x98>)
 800145e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001462:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_TIM2_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_TIM2_Init+0x98>)
 800146c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001470:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_TIM2_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_TIM2_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147e:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_TIM2_Init+0x98>)
 8001480:	f008 f8d2 	bl	8009628 <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800148a:	f001 f8e9 	bl	8002660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_TIM2_Init+0x98>)
 800149c:	f008 fd5c 	bl	8009f58 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014a6:	f001 f8db 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <MX_TIM2_Init+0x98>)
 80014b8:	f009 f916 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014c2:	f001 f8cd 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000150 	.word	0x20000150

080014d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <MX_TIM3_Init+0xc0>)
 80014f8:	4a27      	ldr	r2, [pc, #156]	; (8001598 <MX_TIM3_Init+0xc4>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <MX_TIM3_Init+0xc0>)
 80014fe:	2204      	movs	r2, #4
 8001500:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <MX_TIM3_Init+0xc0>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 839;
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <MX_TIM3_Init+0xc0>)
 800150a:	f240 3247 	movw	r2, #839	; 0x347
 800150e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <MX_TIM3_Init+0xc0>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <MX_TIM3_Init+0xc0>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800151c:	481d      	ldr	r0, [pc, #116]	; (8001594 <MX_TIM3_Init+0xc0>)
 800151e:	f008 f935 	bl	800978c <HAL_TIM_PWM_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001528:	f001 f89a 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001534:	f107 0320 	add.w	r3, r7, #32
 8001538:	4619      	mov	r1, r3
 800153a:	4816      	ldr	r0, [pc, #88]	; (8001594 <MX_TIM3_Init+0xc0>)
 800153c:	f009 f8d4 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001546:	f001 f88b 	bl	8002660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154a:	2360      	movs	r3, #96	; 0x60
 800154c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_TIM3_Init+0xc0>)
 8001562:	f008 fc37 	bl	8009dd4 <HAL_TIM_PWM_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800156c:	f001 f878 	bl	8002660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2204      	movs	r2, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4807      	ldr	r0, [pc, #28]	; (8001594 <MX_TIM3_Init+0xc0>)
 8001578:	f008 fc2c 	bl	8009dd4 <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001582:	f001 f86d 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001586:	4803      	ldr	r0, [pc, #12]	; (8001594 <MX_TIM3_Init+0xc0>)
 8001588:	f005 fc54 	bl	8006e34 <HAL_TIM_MspPostInit>

}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000198 	.word	0x20000198
 8001598:	40000400 	.word	0x40000400

0800159c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	2224      	movs	r2, #36	; 0x24
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f00b fc2d 	bl	800ce0a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <MX_TIM4_Init+0xa0>)
 80015ba:	4a21      	ldr	r2, [pc, #132]	; (8001640 <MX_TIM4_Init+0xa4>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_TIM4_Init+0xa0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_TIM4_Init+0xa0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_TIM4_Init+0xa0>)
 80015cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_TIM4_Init+0xa0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <MX_TIM4_Init+0xa0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015de:	2303      	movs	r3, #3
 80015e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015e6:	2301      	movs	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015f6:	2301      	movs	r3, #1
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <MX_TIM4_Init+0xa0>)
 800160a:	f008 f9bf 	bl	800998c <HAL_TIM_Encoder_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001614:	f001 f824 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_TIM4_Init+0xa0>)
 8001626:	f009 f85f 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001630:	f001 f816 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	; 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200001e0 	.word	0x200001e0
 8001640:	40000800 	.word	0x40000800

08001644 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART6_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART6_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART6_UART_Init+0x4c>)
 8001650:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001654:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART6_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART6_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART6_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART6_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART6_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART6_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART6_UART_Init+0x4c>)
 800167c:	f009 f8b6 	bl	800a7ec <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f000 ffeb 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000228 	.word	0x20000228
 8001694:	40011400 	.word	0x40011400

08001698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_DMA_Init+0x4c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <MX_DMA_Init+0x4c>)
 80016a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <MX_DMA_Init+0x4c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2039      	movs	r0, #57	; 0x39
 80016c0:	f005 fedd 	bl	800747e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80016c4:	2039      	movs	r0, #57	; 0x39
 80016c6:	f005 fef6 	bl	80074b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2045      	movs	r0, #69	; 0x45
 80016d0:	f005 fed5 	bl	800747e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016d4:	2045      	movs	r0, #69	; 0x45
 80016d6:	f005 feee 	bl	80074b6 <HAL_NVIC_EnableIRQ>

}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <MX_GPIO_Init+0x144>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a49      	ldr	r2, [pc, #292]	; (800182c <MX_GPIO_Init+0x144>)
 8001708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <MX_GPIO_Init+0x144>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	4b43      	ldr	r3, [pc, #268]	; (800182c <MX_GPIO_Init+0x144>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a42      	ldr	r2, [pc, #264]	; (800182c <MX_GPIO_Init+0x144>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b40      	ldr	r3, [pc, #256]	; (800182c <MX_GPIO_Init+0x144>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b3c      	ldr	r3, [pc, #240]	; (800182c <MX_GPIO_Init+0x144>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a3b      	ldr	r2, [pc, #236]	; (800182c <MX_GPIO_Init+0x144>)
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <MX_GPIO_Init+0x144>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b35      	ldr	r3, [pc, #212]	; (800182c <MX_GPIO_Init+0x144>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a34      	ldr	r2, [pc, #208]	; (800182c <MX_GPIO_Init+0x144>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <MX_GPIO_Init+0x144>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <MX_GPIO_Init+0x144>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a2d      	ldr	r2, [pc, #180]	; (800182c <MX_GPIO_Init+0x144>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <MX_GPIO_Init+0x144>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <MX_GPIO_Init+0x144>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a26      	ldr	r2, [pc, #152]	; (800182c <MX_GPIO_Init+0x144>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <MX_GPIO_Init+0x144>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80017ac:	4820      	ldr	r0, [pc, #128]	; (8001830 <MX_GPIO_Init+0x148>)
 80017ae:	f006 fc23 	bl	8007ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80017b8:	481e      	ldr	r0, [pc, #120]	; (8001834 <MX_GPIO_Init+0x14c>)
 80017ba:	f006 fc1d 	bl	8007ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80017c4:	481c      	ldr	r0, [pc, #112]	; (8001838 <MX_GPIO_Init+0x150>)
 80017c6:	f006 fc17 	bl	8007ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80017ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <MX_GPIO_Init+0x148>)
 80017e4:	f006 fa84 	bl	8007cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_GPIO_Init+0x14c>)
 8001802:	f006 fa75 	bl	8007cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001806:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	4806      	ldr	r0, [pc, #24]	; (8001838 <MX_GPIO_Init+0x150>)
 8001820:	f006 fa66 	bl	8007cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001824:	bf00      	nop
 8001826:	3730      	adds	r7, #48	; 0x30
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	40020c00 	.word	0x40020c00
 8001834:	40020000 	.word	0x40020000
 8001838:	40020800 	.word	0x40020800

0800183c <PID_Calculate1>:

/* USER CODE BEGIN 4 */
void PID_Calculate1(){
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

				encoder_cnt1=__HAL_TIM_GET_COUNTER(&htim1);
 8001840:	4bba      	ldr	r3, [pc, #744]	; (8001b2c <PID_Calculate1+0x2f0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184e:	4bb8      	ldr	r3, [pc, #736]	; (8001b30 <PID_Calculate1+0x2f4>)
 8001850:	edc3 7a00 	vstr	s15, [r3]
				delta_enc1=encoder_cnt1-pre_enc1;
 8001854:	4bb6      	ldr	r3, [pc, #728]	; (8001b30 <PID_Calculate1+0x2f4>)
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	4bb6      	ldr	r3, [pc, #728]	; (8001b34 <PID_Calculate1+0x2f8>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	4bb4      	ldr	r3, [pc, #720]	; (8001b38 <PID_Calculate1+0x2fc>)
 8001866:	edc3 7a00 	vstr	s15, [r3]

				if(delta_enc1>32768){
 800186a:	4bb3      	ldr	r3, [pc, #716]	; (8001b38 <PID_Calculate1+0x2fc>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001b3c <PID_Calculate1+0x300>
 8001874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	dd0a      	ble.n	8001894 <PID_Calculate1+0x58>
					delta_enc1 -= 65536;
 800187e:	4bae      	ldr	r3, [pc, #696]	; (8001b38 <PID_Calculate1+0x2fc>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001b40 <PID_Calculate1+0x304>
 8001888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800188c:	4baa      	ldr	r3, [pc, #680]	; (8001b38 <PID_Calculate1+0x2fc>)
 800188e:	edc3 7a00 	vstr	s15, [r3]
 8001892:	e013      	b.n	80018bc <PID_Calculate1+0x80>
				}
				else if(delta_enc1<-32768){
 8001894:	4ba8      	ldr	r3, [pc, #672]	; (8001b38 <PID_Calculate1+0x2fc>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001b44 <PID_Calculate1+0x308>
 800189e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	d509      	bpl.n	80018bc <PID_Calculate1+0x80>
					delta_enc1 += 65536;
 80018a8:	4ba3      	ldr	r3, [pc, #652]	; (8001b38 <PID_Calculate1+0x2fc>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001b40 <PID_Calculate1+0x304>
 80018b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018b6:	4ba0      	ldr	r3, [pc, #640]	; (8001b38 <PID_Calculate1+0x2fc>)
 80018b8:	edc3 7a00 	vstr	s15, [r3]
				}

				 vR_real=((delta_enc1/PPR1)/Ts)*(2*pi*wheelRadius);
 80018bc:	4b9e      	ldr	r3, [pc, #632]	; (8001b38 <PID_Calculate1+0x2fc>)
 80018be:	edd3 6a00 	vldr	s13, [r3]
 80018c2:	4ba1      	ldr	r3, [pc, #644]	; (8001b48 <PID_Calculate1+0x30c>)
 80018c4:	ed93 7a00 	vldr	s14, [r3]
 80018c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018cc:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8001b4c <PID_Calculate1+0x310>
 80018d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018d4:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8001b50 <PID_Calculate1+0x314>
 80018d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018dc:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8001b54 <PID_Calculate1+0x318>
 80018e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e8:	4b9b      	ldr	r3, [pc, #620]	; (8001b58 <PID_Calculate1+0x31c>)
 80018ea:	edc3 7a00 	vstr	s15, [r3]
				 vR_real_dot= (vR_real-pre_vR_real)/Ts;
 80018ee:	4b9a      	ldr	r3, [pc, #616]	; (8001b58 <PID_Calculate1+0x31c>)
 80018f0:	ed93 7a00 	vldr	s14, [r3]
 80018f4:	4b99      	ldr	r3, [pc, #612]	; (8001b5c <PID_Calculate1+0x320>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fe:	eddf 6a93 	vldr	s13, [pc, #588]	; 8001b4c <PID_Calculate1+0x310>
 8001902:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001906:	4b96      	ldr	r3, [pc, #600]	; (8001b60 <PID_Calculate1+0x324>)
 8001908:	edc3 7a00 	vstr	s15, [r3]
				 vR_set_dot=(vR_set-pre_vR_set)/Ts;
 800190c:	4b95      	ldr	r3, [pc, #596]	; (8001b64 <PID_Calculate1+0x328>)
 800190e:	ed93 7a00 	vldr	s14, [r3]
 8001912:	4b95      	ldr	r3, [pc, #596]	; (8001b68 <PID_Calculate1+0x32c>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ee37 7a67 	vsub.f32	s14, s14, s15
 800191c:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8001b4c <PID_Calculate1+0x310>
 8001920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001924:	4b91      	ldr	r3, [pc, #580]	; (8001b6c <PID_Calculate1+0x330>)
 8001926:	edc3 7a00 	vstr	s15, [r3]

				 Error1=vR_set-vR_real;
 800192a:	4b8e      	ldr	r3, [pc, #568]	; (8001b64 <PID_Calculate1+0x328>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <PID_Calculate1+0x31c>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193a:	4b8d      	ldr	r3, [pc, #564]	; (8001b70 <PID_Calculate1+0x334>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
				 Error1_dot=(Error1-pre_Error1)/Ts;
 8001940:	4b8b      	ldr	r3, [pc, #556]	; (8001b70 <PID_Calculate1+0x334>)
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <PID_Calculate1+0x338>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001950:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8001b4c <PID_Calculate1+0x310>
 8001954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001958:	4b87      	ldr	r3, [pc, #540]	; (8001b78 <PID_Calculate1+0x33c>)
 800195a:	edc3 7a00 	vstr	s15, [r3]
				 pre_enc1=encoder_cnt1;
 800195e:	4b74      	ldr	r3, [pc, #464]	; (8001b30 <PID_Calculate1+0x2f4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a74      	ldr	r2, [pc, #464]	; (8001b34 <PID_Calculate1+0x2f8>)
 8001964:	6013      	str	r3, [r2, #0]
				 pre_vR_real=vR_real;
 8001966:	4b7c      	ldr	r3, [pc, #496]	; (8001b58 <PID_Calculate1+0x31c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a7c      	ldr	r2, [pc, #496]	; (8001b5c <PID_Calculate1+0x320>)
 800196c:	6013      	str	r3, [r2, #0]
				 pre_vR_set=vR_set;
 800196e:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <PID_Calculate1+0x328>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a7d      	ldr	r2, [pc, #500]	; (8001b68 <PID_Calculate1+0x32c>)
 8001974:	6013      	str	r3, [r2, #0]
				 pre_Error1=Error1;
 8001976:	4b7e      	ldr	r3, [pc, #504]	; (8001b70 <PID_Calculate1+0x334>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7e      	ldr	r2, [pc, #504]	; (8001b74 <PID_Calculate1+0x338>)
 800197c:	6013      	str	r3, [r2, #0]

				 //Sliding Mode
				 S1_dot= Error1_dot+Beta*Error1;
 800197e:	4b7f      	ldr	r3, [pc, #508]	; (8001b7c <PID_Calculate1+0x340>)
 8001980:	ed93 7a00 	vldr	s14, [r3]
 8001984:	4b7a      	ldr	r3, [pc, #488]	; (8001b70 <PID_Calculate1+0x334>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198e:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <PID_Calculate1+0x33c>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001998:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <PID_Calculate1+0x344>)
 800199a:	edc3 7a00 	vstr	s15, [r3]
				 S1+= S1_dot*Ts;
 800199e:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <PID_Calculate1+0x344>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001b4c <PID_Calculate1+0x310>
 80019a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019ac:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <PID_Calculate1+0x348>)
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <PID_Calculate1+0x348>)
 80019b8:	edc3 7a00 	vstr	s15, [r3]

				 //Adative
				 gama_dot=-a*S1*(vR_real_dot+Beta*Error1);
 80019bc:	4b72      	ldr	r3, [pc, #456]	; (8001b88 <PID_Calculate1+0x34c>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	eeb1 7a67 	vneg.f32	s14, s15
 80019c6:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <PID_Calculate1+0x348>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d0:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <PID_Calculate1+0x340>)
 80019d2:	edd3 6a00 	vldr	s13, [r3]
 80019d6:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <PID_Calculate1+0x334>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019e0:	4b5f      	ldr	r3, [pc, #380]	; (8001b60 <PID_Calculate1+0x324>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ee:	4b67      	ldr	r3, [pc, #412]	; (8001b8c <PID_Calculate1+0x350>)
 80019f0:	edc3 7a00 	vstr	s15, [r3]
				 gama+= gama_dot*Ts;
 80019f4:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <PID_Calculate1+0x350>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b4c <PID_Calculate1+0x310>
 80019fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a02:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <PID_Calculate1+0x354>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	4b60      	ldr	r3, [pc, #384]	; (8001b90 <PID_Calculate1+0x354>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]

				 if(S1>=5)
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <PID_Calculate1+0x348>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a24:	db0d      	blt.n	8001a42 <PID_Calculate1+0x206>
				 {
					 muy1= Kp*fabs(S1);
 8001a26:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <PID_Calculate1+0x348>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a30:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <PID_Calculate1+0x358>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3a:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <PID_Calculate1+0x35c>)
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
 8001a40:	e016      	b.n	8001a70 <PID_Calculate1+0x234>
				 }
				 else if(S1<5)
 8001a42:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <PID_Calculate1+0x348>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	d50c      	bpl.n	8001a70 <PID_Calculate1+0x234>
				 {
					 muy1=Ki*fabs(S1);
 8001a56:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <PID_Calculate1+0x348>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a60:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <PID_Calculate1+0x360>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <PID_Calculate1+0x35c>)
 8001a6c:	edc3 7a00 	vstr	s15, [r3]
				 }

				 if(S1>0)
 8001a70:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <PID_Calculate1+0x348>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	dd04      	ble.n	8001a8a <PID_Calculate1+0x24e>
				 {
					 sign1=1;
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <PID_Calculate1+0x364>)
 8001a82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e00f      	b.n	8001aaa <PID_Calculate1+0x26e>
				 }
				 else if(S1==0)
 8001a8a:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <PID_Calculate1+0x348>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a98:	d104      	bne.n	8001aa4 <PID_Calculate1+0x268>
				 {
					 sign1=0;
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <PID_Calculate1+0x364>)
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e002      	b.n	8001aaa <PID_Calculate1+0x26e>
				 }
				 else
				 {
					 sign1=-1;
 8001aa4:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <PID_Calculate1+0x364>)
 8001aa6:	4a3f      	ldr	r2, [pc, #252]	; (8001ba4 <PID_Calculate1+0x368>)
 8001aa8:	601a      	str	r2, [r3, #0]
				 }

				 u_eq=gama*(vR_real_dot+Beta*Error1);
 8001aaa:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <PID_Calculate1+0x340>)
 8001aac:	ed93 7a00 	vldr	s14, [r3]
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <PID_Calculate1+0x334>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <PID_Calculate1+0x324>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <PID_Calculate1+0x354>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ace:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <PID_Calculate1+0x36c>)
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
				 u_w=K1*S1;
 8001ad4:	4b35      	ldr	r3, [pc, #212]	; (8001bac <PID_Calculate1+0x370>)
 8001ad6:	ed93 7a00 	vldr	s14, [r3]
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <PID_Calculate1+0x348>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <PID_Calculate1+0x374>)
 8001ae6:	edc3 7a00 	vstr	s15, [r3]
				 u_d=muy1*sign1;
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <PID_Calculate1+0x35c>)
 8001aec:	ed93 7a00 	vldr	s14, [r3]
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <PID_Calculate1+0x364>)
 8001af2:	edd3 7a00 	vldr	s15, [r3]
 8001af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afa:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <PID_Calculate1+0x378>)
 8001afc:	edc3 7a00 	vstr	s15, [r3]
				 udk1 = u_eq + u_w + u_d ;
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <PID_Calculate1+0x36c>)
 8001b02:	ed93 7a00 	vldr	s14, [r3]
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <PID_Calculate1+0x374>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <PID_Calculate1+0x378>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <PID_Calculate1+0x37c>)
 8001b1c:	edc3 7a00 	vstr	s15, [r3]

		}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000108 	.word	0x20000108
 8001b30:	20000384 	.word	0x20000384
 8001b34:	20000388 	.word	0x20000388
 8001b38:	2000038c 	.word	0x2000038c
 8001b3c:	47000000 	.word	0x47000000
 8001b40:	47800000 	.word	0x47800000
 8001b44:	c7000000 	.word	0xc7000000
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	3d4ccccd 	.word	0x3d4ccccd
 8001b50:	40490fdb 	.word	0x40490fdb
 8001b54:	3d9cac08 	.word	0x3d9cac08
 8001b58:	2000039c 	.word	0x2000039c
 8001b5c:	200003a4 	.word	0x200003a4
 8001b60:	200003a0 	.word	0x200003a0
 8001b64:	20000390 	.word	0x20000390
 8001b68:	20000398 	.word	0x20000398
 8001b6c:	20000394 	.word	0x20000394
 8001b70:	200003ac 	.word	0x200003ac
 8001b74:	200003b0 	.word	0x200003b0
 8001b78:	200003b4 	.word	0x200003b4
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	200003d4 	.word	0x200003d4
 8001b84:	200003d0 	.word	0x200003d0
 8001b88:	200003d8 	.word	0x200003d8
 8001b8c:	200003e0 	.word	0x200003e0
 8001b90:	200003dc 	.word	0x200003dc
 8001b94:	20000004 	.word	0x20000004
 8001b98:	200003b8 	.word	0x200003b8
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	200003bc 	.word	0x200003bc
 8001ba4:	bf800000 	.word	0xbf800000
 8001ba8:	200003c0 	.word	0x200003c0
 8001bac:	20000010 	.word	0x20000010
 8001bb0:	200003c4 	.word	0x200003c4
 8001bb4:	200003c8 	.word	0x200003c8
 8001bb8:	200003cc 	.word	0x200003cc

08001bbc <PID_Calculate2>:
void PID_Calculate2(){
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

				encoder_cnt2=__HAL_TIM_GET_COUNTER(&htim4);
 8001bc0:	4bba      	ldr	r3, [pc, #744]	; (8001eac <PID_Calculate2+0x2f0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bce:	4bb8      	ldr	r3, [pc, #736]	; (8001eb0 <PID_Calculate2+0x2f4>)
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
				delta_enc2=encoder_cnt2-pre_enc2;
 8001bd4:	4bb6      	ldr	r3, [pc, #728]	; (8001eb0 <PID_Calculate2+0x2f4>)
 8001bd6:	ed93 7a00 	vldr	s14, [r3]
 8001bda:	4bb6      	ldr	r3, [pc, #728]	; (8001eb4 <PID_Calculate2+0x2f8>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be4:	4bb4      	ldr	r3, [pc, #720]	; (8001eb8 <PID_Calculate2+0x2fc>)
 8001be6:	edc3 7a00 	vstr	s15, [r3]

				if(delta_enc2>32768){
 8001bea:	4bb3      	ldr	r3, [pc, #716]	; (8001eb8 <PID_Calculate2+0x2fc>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001ebc <PID_Calculate2+0x300>
 8001bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	dd0a      	ble.n	8001c14 <PID_Calculate2+0x58>
					delta_enc2 -= 65536;
 8001bfe:	4bae      	ldr	r3, [pc, #696]	; (8001eb8 <PID_Calculate2+0x2fc>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001ec0 <PID_Calculate2+0x304>
 8001c08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c0c:	4baa      	ldr	r3, [pc, #680]	; (8001eb8 <PID_Calculate2+0x2fc>)
 8001c0e:	edc3 7a00 	vstr	s15, [r3]
 8001c12:	e013      	b.n	8001c3c <PID_Calculate2+0x80>
				}
				else if(delta_enc2<-32768){
 8001c14:	4ba8      	ldr	r3, [pc, #672]	; (8001eb8 <PID_Calculate2+0x2fc>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001ec4 <PID_Calculate2+0x308>
 8001c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	d509      	bpl.n	8001c3c <PID_Calculate2+0x80>
					delta_enc2 += 65536;
 8001c28:	4ba3      	ldr	r3, [pc, #652]	; (8001eb8 <PID_Calculate2+0x2fc>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001ec0 <PID_Calculate2+0x304>
 8001c32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c36:	4ba0      	ldr	r3, [pc, #640]	; (8001eb8 <PID_Calculate2+0x2fc>)
 8001c38:	edc3 7a00 	vstr	s15, [r3]
				}

				 vL_real=((delta_enc2/PPR2)/Ts)*(2*pi*wheelRadius);
 8001c3c:	4b9e      	ldr	r3, [pc, #632]	; (8001eb8 <PID_Calculate2+0x2fc>)
 8001c3e:	edd3 6a00 	vldr	s13, [r3]
 8001c42:	4ba1      	ldr	r3, [pc, #644]	; (8001ec8 <PID_Calculate2+0x30c>)
 8001c44:	ed93 7a00 	vldr	s14, [r3]
 8001c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4c:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8001ecc <PID_Calculate2+0x310>
 8001c50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c54:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8001ed0 <PID_Calculate2+0x314>
 8001c58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c5c:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8001ed4 <PID_Calculate2+0x318>
 8001c60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c68:	4b9b      	ldr	r3, [pc, #620]	; (8001ed8 <PID_Calculate2+0x31c>)
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
				 vL_real_dot= (vL_real-pre_vL_real)/Ts;
 8001c6e:	4b9a      	ldr	r3, [pc, #616]	; (8001ed8 <PID_Calculate2+0x31c>)
 8001c70:	ed93 7a00 	vldr	s14, [r3]
 8001c74:	4b99      	ldr	r3, [pc, #612]	; (8001edc <PID_Calculate2+0x320>)
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c7e:	eddf 6a93 	vldr	s13, [pc, #588]	; 8001ecc <PID_Calculate2+0x310>
 8001c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c86:	4b96      	ldr	r3, [pc, #600]	; (8001ee0 <PID_Calculate2+0x324>)
 8001c88:	edc3 7a00 	vstr	s15, [r3]
				 vL_set_dot=(vL_set-pre_vL_set)/Ts;
 8001c8c:	4b95      	ldr	r3, [pc, #596]	; (8001ee4 <PID_Calculate2+0x328>)
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	4b95      	ldr	r3, [pc, #596]	; (8001ee8 <PID_Calculate2+0x32c>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c9c:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8001ecc <PID_Calculate2+0x310>
 8001ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca4:	4b91      	ldr	r3, [pc, #580]	; (8001eec <PID_Calculate2+0x330>)
 8001ca6:	edc3 7a00 	vstr	s15, [r3]

				 Error2=vL_set-vL_real;
 8001caa:	4b8e      	ldr	r3, [pc, #568]	; (8001ee4 <PID_Calculate2+0x328>)
 8001cac:	ed93 7a00 	vldr	s14, [r3]
 8001cb0:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <PID_Calculate2+0x31c>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	4b8d      	ldr	r3, [pc, #564]	; (8001ef0 <PID_Calculate2+0x334>)
 8001cbc:	edc3 7a00 	vstr	s15, [r3]
				 Error2_dot=(Error2-pre_Error2)/Ts;
 8001cc0:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <PID_Calculate2+0x334>)
 8001cc2:	ed93 7a00 	vldr	s14, [r3]
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <PID_Calculate2+0x338>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cd0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8001ecc <PID_Calculate2+0x310>
 8001cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd8:	4b87      	ldr	r3, [pc, #540]	; (8001ef8 <PID_Calculate2+0x33c>)
 8001cda:	edc3 7a00 	vstr	s15, [r3]
				 pre_enc2=encoder_cnt2;
 8001cde:	4b74      	ldr	r3, [pc, #464]	; (8001eb0 <PID_Calculate2+0x2f4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a74      	ldr	r2, [pc, #464]	; (8001eb4 <PID_Calculate2+0x2f8>)
 8001ce4:	6013      	str	r3, [r2, #0]
				 pre_vL_real=vL_real;
 8001ce6:	4b7c      	ldr	r3, [pc, #496]	; (8001ed8 <PID_Calculate2+0x31c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a7c      	ldr	r2, [pc, #496]	; (8001edc <PID_Calculate2+0x320>)
 8001cec:	6013      	str	r3, [r2, #0]
				 pre_vL_set=vL_set;
 8001cee:	4b7d      	ldr	r3, [pc, #500]	; (8001ee4 <PID_Calculate2+0x328>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7d      	ldr	r2, [pc, #500]	; (8001ee8 <PID_Calculate2+0x32c>)
 8001cf4:	6013      	str	r3, [r2, #0]
				 pre_Error2=Error2;
 8001cf6:	4b7e      	ldr	r3, [pc, #504]	; (8001ef0 <PID_Calculate2+0x334>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7e      	ldr	r2, [pc, #504]	; (8001ef4 <PID_Calculate2+0x338>)
 8001cfc:	6013      	str	r3, [r2, #0]

				 //Sliding Mode
				 S2_dot= Error2_dot+Beta2*Error2;
 8001cfe:	4b7f      	ldr	r3, [pc, #508]	; (8001efc <PID_Calculate2+0x340>)
 8001d00:	ed93 7a00 	vldr	s14, [r3]
 8001d04:	4b7a      	ldr	r3, [pc, #488]	; (8001ef0 <PID_Calculate2+0x334>)
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0e:	4b7a      	ldr	r3, [pc, #488]	; (8001ef8 <PID_Calculate2+0x33c>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d18:	4b79      	ldr	r3, [pc, #484]	; (8001f00 <PID_Calculate2+0x344>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
				 S2+= S2_dot*Ts;
 8001d1e:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <PID_Calculate2+0x344>)
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001ecc <PID_Calculate2+0x310>
 8001d28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d2c:	4b75      	ldr	r3, [pc, #468]	; (8001f04 <PID_Calculate2+0x348>)
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	4b73      	ldr	r3, [pc, #460]	; (8001f04 <PID_Calculate2+0x348>)
 8001d38:	edc3 7a00 	vstr	s15, [r3]

				 //Adative
				 gama2_dot=-a2*S1*(vL_real_dot+Beta2*Error2);
 8001d3c:	4b72      	ldr	r3, [pc, #456]	; (8001f08 <PID_Calculate2+0x34c>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eeb1 7a67 	vneg.f32	s14, s15
 8001d46:	4b71      	ldr	r3, [pc, #452]	; (8001f0c <PID_Calculate2+0x350>)
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d50:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <PID_Calculate2+0x340>)
 8001d52:	edd3 6a00 	vldr	s13, [r3]
 8001d56:	4b66      	ldr	r3, [pc, #408]	; (8001ef0 <PID_Calculate2+0x334>)
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d60:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <PID_Calculate2+0x324>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <PID_Calculate2+0x354>)
 8001d70:	edc3 7a00 	vstr	s15, [r3]
				 gama2+= gama2_dot*Ts;
 8001d74:	4b66      	ldr	r3, [pc, #408]	; (8001f10 <PID_Calculate2+0x354>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001ecc <PID_Calculate2+0x310>
 8001d7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d82:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <PID_Calculate2+0x358>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8c:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <PID_Calculate2+0x358>)
 8001d8e:	edc3 7a00 	vstr	s15, [r3]

				 if(S2>=5)
 8001d92:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <PID_Calculate2+0x348>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	db0d      	blt.n	8001dc2 <PID_Calculate2+0x206>
				 {
					 muy2= Kp2*fabs(S2);
 8001da6:	4b57      	ldr	r3, [pc, #348]	; (8001f04 <PID_Calculate2+0x348>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	eeb0 7ae7 	vabs.f32	s14, s15
 8001db0:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <PID_Calculate2+0x35c>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dba:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <PID_Calculate2+0x360>)
 8001dbc:	edc3 7a00 	vstr	s15, [r3]
 8001dc0:	e016      	b.n	8001df0 <PID_Calculate2+0x234>
				 }
				 else if(S2<5)
 8001dc2:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <PID_Calculate2+0x348>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd4:	d50c      	bpl.n	8001df0 <PID_Calculate2+0x234>
				 {
					 muy2=Ki2*fabs(S2);
 8001dd6:	4b4b      	ldr	r3, [pc, #300]	; (8001f04 <PID_Calculate2+0x348>)
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	eeb0 7ae7 	vabs.f32	s14, s15
 8001de0:	4b4f      	ldr	r3, [pc, #316]	; (8001f20 <PID_Calculate2+0x364>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <PID_Calculate2+0x360>)
 8001dec:	edc3 7a00 	vstr	s15, [r3]
				 }

				 if(S2>0)
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <PID_Calculate2+0x348>)
 8001df2:	edd3 7a00 	vldr	s15, [r3]
 8001df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	dd04      	ble.n	8001e0a <PID_Calculate2+0x24e>
				 {
					 sign2=1;
 8001e00:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <PID_Calculate2+0x368>)
 8001e02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e00f      	b.n	8001e2a <PID_Calculate2+0x26e>
				 }
				 else if(S1==0)
 8001e0a:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <PID_Calculate2+0x350>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	d104      	bne.n	8001e24 <PID_Calculate2+0x268>
				 {
					 sign2=0;
 8001e1a:	4b42      	ldr	r3, [pc, #264]	; (8001f24 <PID_Calculate2+0x368>)
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e002      	b.n	8001e2a <PID_Calculate2+0x26e>
				 }
				 else
				 {
					 sign2=-1;
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <PID_Calculate2+0x368>)
 8001e26:	4a40      	ldr	r2, [pc, #256]	; (8001f28 <PID_Calculate2+0x36c>)
 8001e28:	601a      	str	r2, [r3, #0]
				 }

				 u_eq2=gama*(vL_real_dot+Beta2*Error2);
 8001e2a:	4b34      	ldr	r3, [pc, #208]	; (8001efc <PID_Calculate2+0x340>)
 8001e2c:	ed93 7a00 	vldr	s14, [r3]
 8001e30:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <PID_Calculate2+0x334>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <PID_Calculate2+0x324>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e44:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <PID_Calculate2+0x370>)
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4e:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <PID_Calculate2+0x374>)
 8001e50:	edc3 7a00 	vstr	s15, [r3]
				 u_w2=K2*S2;
 8001e54:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <PID_Calculate2+0x378>)
 8001e56:	ed93 7a00 	vldr	s14, [r3]
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <PID_Calculate2+0x348>)
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <PID_Calculate2+0x37c>)
 8001e66:	edc3 7a00 	vstr	s15, [r3]
				 u_d2=muy1*sign1;
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <PID_Calculate2+0x380>)
 8001e6c:	ed93 7a00 	vldr	s14, [r3]
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <PID_Calculate2+0x384>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <PID_Calculate2+0x388>)
 8001e7c:	edc3 7a00 	vstr	s15, [r3]
				 udk2 = u_eq2 + u_w2 + u_d2 ;
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <PID_Calculate2+0x374>)
 8001e82:	ed93 7a00 	vldr	s14, [r3]
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <PID_Calculate2+0x37c>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e90:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <PID_Calculate2+0x388>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <PID_Calculate2+0x38c>)
 8001e9c:	edc3 7a00 	vstr	s15, [r3]

		}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	200001e0 	.word	0x200001e0
 8001eb0:	200003e4 	.word	0x200003e4
 8001eb4:	200003e8 	.word	0x200003e8
 8001eb8:	200003ec 	.word	0x200003ec
 8001ebc:	47000000 	.word	0x47000000
 8001ec0:	47800000 	.word	0x47800000
 8001ec4:	c7000000 	.word	0xc7000000
 8001ec8:	20000014 	.word	0x20000014
 8001ecc:	3d4ccccd 	.word	0x3d4ccccd
 8001ed0:	40490fdb 	.word	0x40490fdb
 8001ed4:	3d9cac08 	.word	0x3d9cac08
 8001ed8:	200003fc 	.word	0x200003fc
 8001edc:	20000404 	.word	0x20000404
 8001ee0:	20000400 	.word	0x20000400
 8001ee4:	200003f0 	.word	0x200003f0
 8001ee8:	200003f8 	.word	0x200003f8
 8001eec:	200003f4 	.word	0x200003f4
 8001ef0:	2000040c 	.word	0x2000040c
 8001ef4:	20000410 	.word	0x20000410
 8001ef8:	20000414 	.word	0x20000414
 8001efc:	20000020 	.word	0x20000020
 8001f00:	20000434 	.word	0x20000434
 8001f04:	20000430 	.word	0x20000430
 8001f08:	20000438 	.word	0x20000438
 8001f0c:	200003d0 	.word	0x200003d0
 8001f10:	20000440 	.word	0x20000440
 8001f14:	2000043c 	.word	0x2000043c
 8001f18:	20000018 	.word	0x20000018
 8001f1c:	20000418 	.word	0x20000418
 8001f20:	2000001c 	.word	0x2000001c
 8001f24:	2000041c 	.word	0x2000041c
 8001f28:	bf800000 	.word	0xbf800000
 8001f2c:	200003dc 	.word	0x200003dc
 8001f30:	20000420 	.word	0x20000420
 8001f34:	20000024 	.word	0x20000024
 8001f38:	20000424 	.word	0x20000424
 8001f3c:	200003b8 	.word	0x200003b8
 8001f40:	200003bc 	.word	0x200003bc
 8001f44:	20000428 	.word	0x20000428
 8001f48:	2000042c 	.word	0x2000042c

08001f4c <PWM_Calculate1>:
	void PWM_Calculate1()
		{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
			if(udk1>1000){
 8001f50:	4b34      	ldr	r3, [pc, #208]	; (8002024 <PWM_Calculate1+0xd8>)
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002028 <PWM_Calculate1+0xdc>
 8001f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	dd03      	ble.n	8001f6c <PWM_Calculate1+0x20>
				udk1=500;
 8001f64:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <PWM_Calculate1+0xd8>)
 8001f66:	4a31      	ldr	r2, [pc, #196]	; (800202c <PWM_Calculate1+0xe0>)
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e00c      	b.n	8001f86 <PWM_Calculate1+0x3a>

			}
			else if (udk1<-1000){
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <PWM_Calculate1+0xd8>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002030 <PWM_Calculate1+0xe4>
 8001f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	d502      	bpl.n	8001f86 <PWM_Calculate1+0x3a>
				udk1=-500;
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <PWM_Calculate1+0xd8>)
 8001f82:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <PWM_Calculate1+0xe8>)
 8001f84:	601a      	str	r2, [r3, #0]

			}


			if(udk1==0){
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <PWM_Calculate1+0xd8>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f94:	d10c      	bne.n	8001fb0 <PWM_Calculate1+0x64>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9c:	4826      	ldr	r0, [pc, #152]	; (8002038 <PWM_Calculate1+0xec>)
 8001f9e:	f006 f82b 	bl	8007ff8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_10, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa8:	4823      	ldr	r0, [pc, #140]	; (8002038 <PWM_Calculate1+0xec>)
 8001faa:	f006 f825 	bl	8007ff8 <HAL_GPIO_WritePin>
 8001fae:	e02c      	b.n	800200a <PWM_Calculate1+0xbe>

			}
			else if(udk1>0){
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <PWM_Calculate1+0xd8>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbe:	dd10      	ble.n	8001fe2 <PWM_Calculate1+0x96>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc6:	481c      	ldr	r0, [pc, #112]	; (8002038 <PWM_Calculate1+0xec>)
 8001fc8:	f006 f816 	bl	8007ff8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_10, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd2:	4819      	ldr	r0, [pc, #100]	; (8002038 <PWM_Calculate1+0xec>)
 8001fd4:	f006 f810 	bl	8007ff8 <HAL_GPIO_WritePin>

				duty_cycle1=udk1;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <PWM_Calculate1+0xd8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a17      	ldr	r2, [pc, #92]	; (800203c <PWM_Calculate1+0xf0>)
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e013      	b.n	800200a <PWM_Calculate1+0xbe>
			}

			else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe8:	4813      	ldr	r0, [pc, #76]	; (8002038 <PWM_Calculate1+0xec>)
 8001fea:	f006 f805 	bl	8007ff8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_10, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff4:	4810      	ldr	r0, [pc, #64]	; (8002038 <PWM_Calculate1+0xec>)
 8001ff6:	f005 ffff 	bl	8007ff8 <HAL_GPIO_WritePin>

				duty_cycle1=-udk1;
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <PWM_Calculate1+0xd8>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	eef1 7a67 	vneg.f32	s15, s15
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <PWM_Calculate1+0xf0>)
 8002006:	edc3 7a00 	vstr	s15, [r3]

			}

			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,duty_cycle1);
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <PWM_Calculate1+0xf0>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <PWM_Calculate1+0xf4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002018:	ee17 2a90 	vmov	r2, s15
 800201c:	635a      	str	r2, [r3, #52]	; 0x34

		}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200003cc 	.word	0x200003cc
 8002028:	447a0000 	.word	0x447a0000
 800202c:	43fa0000 	.word	0x43fa0000
 8002030:	c47a0000 	.word	0xc47a0000
 8002034:	c3fa0000 	.word	0xc3fa0000
 8002038:	40020000 	.word	0x40020000
 800203c:	200003a8 	.word	0x200003a8
 8002040:	20000198 	.word	0x20000198

08002044 <PWM_Calculate2>:
	void PWM_Calculate2()
				{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0

					if(udk2>1000){
 8002048:	4b34      	ldr	r3, [pc, #208]	; (800211c <PWM_Calculate2+0xd8>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002120 <PWM_Calculate2+0xdc>
 8002052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	dd03      	ble.n	8002064 <PWM_Calculate2+0x20>

						udk2=500;
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <PWM_Calculate2+0xd8>)
 800205e:	4a31      	ldr	r2, [pc, #196]	; (8002124 <PWM_Calculate2+0xe0>)
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e00c      	b.n	800207e <PWM_Calculate2+0x3a>
					}
					else if (udk2<-1000){
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <PWM_Calculate2+0xd8>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002128 <PWM_Calculate2+0xe4>
 800206e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002076:	d502      	bpl.n	800207e <PWM_Calculate2+0x3a>

						udk2=-500;
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <PWM_Calculate2+0xd8>)
 800207a:	4a2c      	ldr	r2, [pc, #176]	; (800212c <PWM_Calculate2+0xe8>)
 800207c:	601a      	str	r2, [r3, #0]
					}


					if(udk2==0){
 800207e:	4b27      	ldr	r3, [pc, #156]	; (800211c <PWM_Calculate2+0xd8>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208c:	d10c      	bne.n	80020a8 <PWM_Calculate2+0x64>

						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002094:	4826      	ldr	r0, [pc, #152]	; (8002130 <PWM_Calculate2+0xec>)
 8002096:	f005 ffaf 	bl	8007ff8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_12, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a0:	4823      	ldr	r0, [pc, #140]	; (8002130 <PWM_Calculate2+0xec>)
 80020a2:	f005 ffa9 	bl	8007ff8 <HAL_GPIO_WritePin>
 80020a6:	e02c      	b.n	8002102 <PWM_Calculate2+0xbe>
								}
					else if(udk2>0){
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <PWM_Calculate2+0xd8>)
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b6:	dd10      	ble.n	80020da <PWM_Calculate2+0x96>

						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020be:	481c      	ldr	r0, [pc, #112]	; (8002130 <PWM_Calculate2+0xec>)
 80020c0:	f005 ff9a 	bl	8007ff8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_12, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ca:	4819      	ldr	r0, [pc, #100]	; (8002130 <PWM_Calculate2+0xec>)
 80020cc:	f005 ff94 	bl	8007ff8 <HAL_GPIO_WritePin>

						duty_cycle2=udk2;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <PWM_Calculate2+0xd8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <PWM_Calculate2+0xf0>)
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e013      	b.n	8002102 <PWM_Calculate2+0xbe>

							}
					else{

						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e0:	4813      	ldr	r0, [pc, #76]	; (8002130 <PWM_Calculate2+0xec>)
 80020e2:	f005 ff89 	bl	8007ff8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_12, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ec:	4810      	ldr	r0, [pc, #64]	; (8002130 <PWM_Calculate2+0xec>)
 80020ee:	f005 ff83 	bl	8007ff8 <HAL_GPIO_WritePin>

						duty_cycle2=-udk2;
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <PWM_Calculate2+0xd8>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	eef1 7a67 	vneg.f32	s15, s15
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <PWM_Calculate2+0xf0>)
 80020fe:	edc3 7a00 	vstr	s15, [r3]
					}

					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,duty_cycle2);
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <PWM_Calculate2+0xf0>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <PWM_Calculate2+0xf4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002110:	ee17 2a90 	vmov	r2, s15
 8002114:	639a      	str	r2, [r3, #56]	; 0x38
				}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	2000042c 	.word	0x2000042c
 8002120:	447a0000 	.word	0x447a0000
 8002124:	43fa0000 	.word	0x43fa0000
 8002128:	c47a0000 	.word	0xc47a0000
 800212c:	c3fa0000 	.word	0xc3fa0000
 8002130:	40020800 	.word	0x40020800
 8002134:	20000408 	.word	0x20000408
 8002138:	20000198 	.word	0x20000198
 800213c:	00000000 	.word	0x00000000

08002140 <read_Imu>:

	void read_Imu(){
 8002140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002144:	ed2d 8b02 	vpush	{d8}
 8002148:	b092      	sub	sp, #72	; 0x48
 800214a:	af00      	add	r7, sp, #0
		//HAL_Delay(200);

			  	 t_last = HAL_GetTick();
 800214c:	f005 f88c 	bl	8007268 <HAL_GetTick>
 8002150:	4603      	mov	r3, r0
 8002152:	4adb      	ldr	r2, [pc, #876]	; (80024c0 <read_Imu+0x380>)
 8002154:	6013      	str	r3, [r2, #0]
			  	  MPU9250_Read_Accel();
 8002156:	f7fe fead 	bl	8000eb4 <MPU9250_Read_Accel>
			  	  MPU9250_Read_Gyro();
 800215a:	f7fe ff19 	bl	8000f90 <MPU9250_Read_Gyro>

			  	 t_now = HAL_GetTick();
 800215e:	f005 f883 	bl	8007268 <HAL_GetTick>
 8002162:	4603      	mov	r3, r0
 8002164:	4ad7      	ldr	r2, [pc, #860]	; (80024c4 <read_Imu+0x384>)
 8002166:	6013      	str	r3, [r2, #0]

			  	  float gyro_x = Gx;
 8002168:	4bd7      	ldr	r3, [pc, #860]	; (80024c8 <read_Imu+0x388>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	643b      	str	r3, [r7, #64]	; 0x40
			  	  float gyro_y = Gy;
 800216e:	4bd7      	ldr	r3, [pc, #860]	; (80024cc <read_Imu+0x38c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
			  	  float gyro_z = Gz;
 8002174:	4bd6      	ldr	r3, [pc, #856]	; (80024d0 <read_Imu+0x390>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	647b      	str	r3, [r7, #68]	; 0x44

			  	  float accel_x = Ax; // - base_x_accel;
 800217a:	4bd6      	ldr	r3, [pc, #856]	; (80024d4 <read_Imu+0x394>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
			  	  float accel_y = Ay; // - base_y_accel;
 8002180:	4bd5      	ldr	r3, [pc, #852]	; (80024d8 <read_Imu+0x398>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
			  	  float accel_z = Az; // - base_z_accel;
 8002186:	4bd5      	ldr	r3, [pc, #852]	; (80024dc <read_Imu+0x39c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	633b      	str	r3, [r7, #48]	; 0x30

			  	  float accel_angle_y = atan(-1*accel_x/sqrt(pow(accel_y,2) + pow(accel_z,2)))*RADIANS_TO_DEGREES;
 800218c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002190:	eef1 7a67 	vneg.f32	s15, s15
 8002194:	ee17 3a90 	vmov	r3, s15
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f989 	bl	80004b0 <__aeabi_f2d>
 800219e:	4604      	mov	r4, r0
 80021a0:	460d      	mov	r5, r1
 80021a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021a4:	f7fe f984 	bl	80004b0 <__aeabi_f2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 80024b8 <read_Imu+0x378>
 80021b0:	ec43 2b10 	vmov	d0, r2, r3
 80021b4:	f009 fcea 	bl	800bb8c <pow>
 80021b8:	ec59 8b10 	vmov	r8, r9, d0
 80021bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021be:	f7fe f977 	bl	80004b0 <__aeabi_f2d>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	ed9f 1bbc 	vldr	d1, [pc, #752]	; 80024b8 <read_Imu+0x378>
 80021ca:	ec43 2b10 	vmov	d0, r2, r3
 80021ce:	f009 fcdd 	bl	800bb8c <pow>
 80021d2:	ec53 2b10 	vmov	r2, r3, d0
 80021d6:	4640      	mov	r0, r8
 80021d8:	4649      	mov	r1, r9
 80021da:	f7fe f80b 	bl	80001f4 <__adddf3>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	ec43 2b17 	vmov	d7, r2, r3
 80021e6:	eeb0 0a47 	vmov.f32	s0, s14
 80021ea:	eef0 0a67 	vmov.f32	s1, s15
 80021ee:	f009 fd3d 	bl	800bc6c <sqrt>
 80021f2:	ec53 2b10 	vmov	r2, r3, d0
 80021f6:	4620      	mov	r0, r4
 80021f8:	4629      	mov	r1, r5
 80021fa:	f7fe fadb 	bl	80007b4 <__aeabi_ddiv>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	ec43 2b17 	vmov	d7, r2, r3
 8002206:	eeb0 0a47 	vmov.f32	s0, s14
 800220a:	eef0 0a67 	vmov.f32	s1, s15
 800220e:	f009 fd5b 	bl	800bcc8 <atan>
 8002212:	ec55 4b10 	vmov	r4, r5, d0
 8002216:	4bb2      	ldr	r3, [pc, #712]	; (80024e0 <read_Imu+0x3a0>)
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f949 	bl	80004b0 <__aeabi_f2d>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4620      	mov	r0, r4
 8002224:	4629      	mov	r1, r5
 8002226:	f7fe f99b 	bl	8000560 <__aeabi_dmul>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fc45 	bl	8000ac0 <__aeabi_d2f>
 8002236:	4603      	mov	r3, r0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
			        float accel_angle_x = atan(accel_y/sqrt(pow(accel_x,2) + pow(accel_z,2)))*RADIANS_TO_DEGREES;
 800223a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800223c:	f7fe f938 	bl	80004b0 <__aeabi_f2d>
 8002240:	4604      	mov	r4, r0
 8002242:	460d      	mov	r5, r1
 8002244:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002246:	f7fe f933 	bl	80004b0 <__aeabi_f2d>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 80024b8 <read_Imu+0x378>
 8002252:	ec43 2b10 	vmov	d0, r2, r3
 8002256:	f009 fc99 	bl	800bb8c <pow>
 800225a:	ec59 8b10 	vmov	r8, r9, d0
 800225e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002260:	f7fe f926 	bl	80004b0 <__aeabi_f2d>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	ed9f 1b93 	vldr	d1, [pc, #588]	; 80024b8 <read_Imu+0x378>
 800226c:	ec43 2b10 	vmov	d0, r2, r3
 8002270:	f009 fc8c 	bl	800bb8c <pow>
 8002274:	ec53 2b10 	vmov	r2, r3, d0
 8002278:	4640      	mov	r0, r8
 800227a:	4649      	mov	r1, r9
 800227c:	f7fd ffba 	bl	80001f4 <__adddf3>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	ec43 2b17 	vmov	d7, r2, r3
 8002288:	eeb0 0a47 	vmov.f32	s0, s14
 800228c:	eef0 0a67 	vmov.f32	s1, s15
 8002290:	f009 fcec 	bl	800bc6c <sqrt>
 8002294:	ec53 2b10 	vmov	r2, r3, d0
 8002298:	4620      	mov	r0, r4
 800229a:	4629      	mov	r1, r5
 800229c:	f7fe fa8a 	bl	80007b4 <__aeabi_ddiv>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	ec43 2b17 	vmov	d7, r2, r3
 80022a8:	eeb0 0a47 	vmov.f32	s0, s14
 80022ac:	eef0 0a67 	vmov.f32	s1, s15
 80022b0:	f009 fd0a 	bl	800bcc8 <atan>
 80022b4:	ec55 4b10 	vmov	r4, r5, d0
 80022b8:	4b89      	ldr	r3, [pc, #548]	; (80024e0 <read_Imu+0x3a0>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f8f8 	bl	80004b0 <__aeabi_f2d>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4620      	mov	r0, r4
 80022c6:	4629      	mov	r1, r5
 80022c8:	f7fe f94a 	bl	8000560 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fbf4 	bl	8000ac0 <__aeabi_d2f>
 80022d8:	4603      	mov	r3, r0
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
			  	  float accel_angle_z = 0;  //Accelerometer doesn't give z-angle
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24

			  	  // Compute the (filtered) gyro angles
			  	  dt =(t_now - get_last_time())/1000.0;
 80022e2:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <read_Imu+0x384>)
 80022e4:	681c      	ldr	r4, [r3, #0]
 80022e6:	f7fe ff0b 	bl	8001100 <get_last_time>
 80022ea:	4603      	mov	r3, r0
 80022ec:	1ae3      	subs	r3, r4, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f8bc 	bl	800046c <__aeabi_ui2d>
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	4b7a      	ldr	r3, [pc, #488]	; (80024e4 <read_Imu+0x3a4>)
 80022fa:	f7fe fa5b 	bl	80007b4 <__aeabi_ddiv>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f7fe fbdb 	bl	8000ac0 <__aeabi_d2f>
 800230a:	4603      	mov	r3, r0
 800230c:	4a76      	ldr	r2, [pc, #472]	; (80024e8 <read_Imu+0x3a8>)
 800230e:	6013      	str	r3, [r2, #0]

			  	  float gyro_angle_x = gyro_x*dt + get_last_x_angle();
 8002310:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <read_Imu+0x3a8>)
 8002312:	ed93 7a00 	vldr	s14, [r3]
 8002316:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800231a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800231e:	f7fe fefb 	bl	8001118 <get_last_x_angle>
 8002322:	eef0 7a40 	vmov.f32	s15, s0
 8002326:	ee78 7a27 	vadd.f32	s15, s16, s15
 800232a:	edc7 7a08 	vstr	s15, [r7, #32]
			  	  float gyro_angle_y = gyro_y*dt + get_last_y_angle();
 800232e:	4b6e      	ldr	r3, [pc, #440]	; (80024e8 <read_Imu+0x3a8>)
 8002330:	ed93 7a00 	vldr	s14, [r3]
 8002334:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002338:	ee27 8a27 	vmul.f32	s16, s14, s15
 800233c:	f7fe fefa 	bl	8001134 <get_last_y_angle>
 8002340:	eef0 7a40 	vmov.f32	s15, s0
 8002344:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002348:	edc7 7a07 	vstr	s15, [r7, #28]

			  	  int gz_threshold = 2; // gyro z raw data fluctuation threshold value when gyro doesn't move. It is up to your mpu6050. It is just a personal approach.
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
			  	  if(gyro_z < gz_threshold && gyro_z > -gz_threshold) // When gyro stands ignore the gyro z small fluctuations to prevent z angle irregular increments
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800235e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	d50f      	bpl.n	8002388 <read_Imu+0x248>
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	425b      	negs	r3, r3
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002374:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	dd02      	ble.n	8002388 <read_Imu+0x248>
			  		  gyro_z = 0;
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	647b      	str	r3, [r7, #68]	; 0x44

			  	  gyro_angle_z = gyro_z*dt + get_last_z_angle();
 8002388:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <read_Imu+0x3a8>)
 800238a:	ed93 7a00 	vldr	s14, [r3]
 800238e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002392:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002396:	f7fe fedb 	bl	8001150 <get_last_z_angle>
 800239a:	eef0 7a40 	vmov.f32	s15, s0
 800239e:	ee78 7a27 	vadd.f32	s15, s16, s15
 80023a2:	4b52      	ldr	r3, [pc, #328]	; (80024ec <read_Imu+0x3ac>)
 80023a4:	edc3 7a00 	vstr	s15, [r3]

			  	// Compute the drifting gyro angles
			  	float unfiltered_gyro_angle_x = gyro_x*dt + get_last_gyro_x_angle();
 80023a8:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <read_Imu+0x3a8>)
 80023aa:	ed93 7a00 	vldr	s14, [r3]
 80023ae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023b2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80023b6:	f7fe fed9 	bl	800116c <get_last_gyro_x_angle>
 80023ba:	eef0 7a40 	vmov.f32	s15, s0
 80023be:	ee78 7a27 	vadd.f32	s15, s16, s15
 80023c2:	edc7 7a05 	vstr	s15, [r7, #20]
			      float unfiltered_gyro_angle_y = gyro_y*dt + get_last_gyro_y_angle();
 80023c6:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <read_Imu+0x3a8>)
 80023c8:	ed93 7a00 	vldr	s14, [r3]
 80023cc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023d0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80023d4:	f7fe fed8 	bl	8001188 <get_last_gyro_y_angle>
 80023d8:	eef0 7a40 	vmov.f32	s15, s0
 80023dc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80023e0:	edc7 7a04 	vstr	s15, [r7, #16]
			      float unfiltered_gyro_angle_z = gyro_z*dt + get_last_gyro_z_angle();
 80023e4:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <read_Imu+0x3a8>)
 80023e6:	ed93 7a00 	vldr	s14, [r3]
 80023ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023ee:	ee27 8a27 	vmul.f32	s16, s14, s15
 80023f2:	f7fe fed7 	bl	80011a4 <get_last_gyro_z_angle>
 80023f6:	eef0 7a40 	vmov.f32	s15, s0
 80023fa:	ee78 7a27 	vadd.f32	s15, s16, s15
 80023fe:	edc7 7a03 	vstr	s15, [r7, #12]

			      // Apply the complementary filter to figure out the change in angle - choice of alpha is
			  	/* estimated now.  Alpha depends on the sampling rate... */
			      const float alpha = 0.96;
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <read_Imu+0x3b0>)
 8002404:	60bb      	str	r3, [r7, #8]
			      angle_x = alpha*gyro_angle_x + (1.0 - alpha)*accel_angle_x;
 8002406:	ed97 7a02 	vldr	s14, [r7, #8]
 800240a:	edd7 7a08 	vldr	s15, [r7, #32]
 800240e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002412:	ee17 0a90 	vmov	r0, s15
 8002416:	f7fe f84b 	bl	80004b0 <__aeabi_f2d>
 800241a:	4604      	mov	r4, r0
 800241c:	460d      	mov	r5, r1
 800241e:	68b8      	ldr	r0, [r7, #8]
 8002420:	f7fe f846 	bl	80004b0 <__aeabi_f2d>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	f04f 0000 	mov.w	r0, #0
 800242c:	4931      	ldr	r1, [pc, #196]	; (80024f4 <read_Imu+0x3b4>)
 800242e:	f7fd fedf 	bl	80001f0 <__aeabi_dsub>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4690      	mov	r8, r2
 8002438:	4699      	mov	r9, r3
 800243a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800243c:	f7fe f838 	bl	80004b0 <__aeabi_f2d>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4640      	mov	r0, r8
 8002446:	4649      	mov	r1, r9
 8002448:	f7fe f88a 	bl	8000560 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4620      	mov	r0, r4
 8002452:	4629      	mov	r1, r5
 8002454:	f7fd fece 	bl	80001f4 <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fb2e 	bl	8000ac0 <__aeabi_d2f>
 8002464:	4603      	mov	r3, r0
 8002466:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <read_Imu+0x3b8>)
 8002468:	6013      	str	r3, [r2, #0]
			  	float angle_y = alpha*gyro_angle_y + (1.0 - alpha)*accel_angle_y;
 800246a:	ed97 7a02 	vldr	s14, [r7, #8]
 800246e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	ee17 0a90 	vmov	r0, s15
 800247a:	f7fe f819 	bl	80004b0 <__aeabi_f2d>
 800247e:	4604      	mov	r4, r0
 8002480:	460d      	mov	r5, r1
 8002482:	68b8      	ldr	r0, [r7, #8]
 8002484:	f7fe f814 	bl	80004b0 <__aeabi_f2d>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	f04f 0000 	mov.w	r0, #0
 8002490:	4918      	ldr	r1, [pc, #96]	; (80024f4 <read_Imu+0x3b4>)
 8002492:	f7fd fead 	bl	80001f0 <__aeabi_dsub>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4690      	mov	r8, r2
 800249c:	4699      	mov	r9, r3
 800249e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024a0:	f7fe f806 	bl	80004b0 <__aeabi_f2d>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4640      	mov	r0, r8
 80024aa:	4649      	mov	r1, r9
 80024ac:	f7fe f858 	bl	8000560 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e022      	b.n	80024fc <read_Imu+0x3bc>
 80024b6:	bf00      	nop
 80024b8:	00000000 	.word	0x00000000
 80024bc:	40000000 	.word	0x40000000
 80024c0:	2000037c 	.word	0x2000037c
 80024c4:	20000378 	.word	0x20000378
 80024c8:	2000034c 	.word	0x2000034c
 80024cc:	20000350 	.word	0x20000350
 80024d0:	20000354 	.word	0x20000354
 80024d4:	20000340 	.word	0x20000340
 80024d8:	20000344 	.word	0x20000344
 80024dc:	20000348 	.word	0x20000348
 80024e0:	42652ee6 	.word	0x42652ee6
 80024e4:	408f4000 	.word	0x408f4000
 80024e8:	20000380 	.word	0x20000380
 80024ec:	20000374 	.word	0x20000374
 80024f0:	3f75c28f 	.word	0x3f75c28f
 80024f4:	3ff00000 	.word	0x3ff00000
 80024f8:	20000334 	.word	0x20000334
 80024fc:	4620      	mov	r0, r4
 80024fe:	4629      	mov	r1, r5
 8002500:	f7fd fe78 	bl	80001f4 <__adddf3>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f7fe fad8 	bl	8000ac0 <__aeabi_d2f>
 8002510:	4603      	mov	r3, r0
 8002512:	607b      	str	r3, [r7, #4]
			      angle_z = gyro_angle_z;  //Accelerometer doesn't give z-angle
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <read_Imu+0x418>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a10      	ldr	r2, [pc, #64]	; (800255c <read_Imu+0x41c>)
 800251a:	6013      	str	r3, [r2, #0]

			  	/* Update the saved data with the latest values */
			  set_last_read_angle_data(t_now, angle_x, angle_y, angle_z, unfiltered_gyro_angle_x, unfiltered_gyro_angle_y, unfiltered_gyro_angle_z);
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <read_Imu+0x420>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a10      	ldr	r2, [pc, #64]	; (8002564 <read_Imu+0x424>)
 8002522:	edd2 7a00 	vldr	s15, [r2]
 8002526:	4a0d      	ldr	r2, [pc, #52]	; (800255c <read_Imu+0x41c>)
 8002528:	ed92 7a00 	vldr	s14, [r2]
 800252c:	edd7 2a03 	vldr	s5, [r7, #12]
 8002530:	ed97 2a04 	vldr	s4, [r7, #16]
 8002534:	edd7 1a05 	vldr	s3, [r7, #20]
 8002538:	eeb0 1a47 	vmov.f32	s2, s14
 800253c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002540:	eeb0 0a67 	vmov.f32	s0, s15
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fda1 	bl	800108c <set_last_read_angle_data>


	}
 800254a:	bf00      	nop
 800254c:	3748      	adds	r7, #72	; 0x48
 800254e:	46bd      	mov	sp, r7
 8002550:	ecbd 8b02 	vpop	{d8}
 8002554:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002558:	20000374 	.word	0x20000374
 800255c:	20000330 	.word	0x20000330
 8002560:	20000378 	.word	0x20000378
 8002564:	20000334 	.word	0x20000334

08002568 <HAL_TIM_PeriodElapsedCallback>:


	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
		if(htim->Instance==htim2.Instance){
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d156      	bne.n	800262a <HAL_TIM_PeriodElapsedCallback+0xc2>
			  //setSpeed= vel_data_rx.v;
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800257c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002580:	482d      	ldr	r0, [pc, #180]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002582:	f005 fd52 	bl	800802a <HAL_GPIO_TogglePin>

			vR_set=vel_data_rx.v + vel_data_rx.w*wheelBase/2;//dong hoc nguoc
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002588:	ed93 7a00 	vldr	s14, [r3]
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800258e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002592:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002640 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8002596:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800259a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800259e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80025a8:	edc3 7a00 	vstr	s15, [r3]
			vL_set=vel_data_rx.v - vel_data_rx.w*wheelBase/2;
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80025ae:	ed93 7a00 	vldr	s14, [r3]
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80025b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80025b8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002640 <HAL_TIM_PeriodElapsedCallback+0xd8>
 80025bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025c0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80025c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80025ce:	edc3 7a00 	vstr	s15, [r3]

			PID_Calculate1();
 80025d2:	f7ff f933 	bl	800183c <PID_Calculate1>
			PWM_Calculate1();
 80025d6:	f7ff fcb9 	bl	8001f4c <PWM_Calculate1>
			PID_Calculate2();
 80025da:	f7ff faef 	bl	8001bbc <PID_Calculate2>
			PWM_Calculate2();
 80025de:	f7ff fd31 	bl	8002044 <PWM_Calculate2>
			read_Imu();
 80025e2:	f7ff fdad 	bl	8002140 <read_Imu>

			vel_data_tx.v=(vR_real+vL_real)/2;  //dong hoc nguoc
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80025e8:	ed93 7a00 	vldr	s14, [r3]
 80025ec:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002600:	edc3 7a00 	vstr	s15, [r3]
			vel_data_tx.w=(vR_real-vL_real)/wheelBase;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002606:	ed93 7a00 	vldr	s14, [r3]
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002614:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002640 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8002618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800261e:	edc3 7a01 	vstr	s15, [r3, #4]
//			imu_data_tx.x=angle_x;
//			imu_data_tx.y=angle_y;
			imu_data_tx.z=angle_z;
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a0d      	ldr	r2, [pc, #52]	; (800265c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002628:	6093      	str	r3, [r2, #8]



			}

	}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000150 	.word	0x20000150
 8002638:	40020c00 	.word	0x40020c00
 800263c:	20000444 	.word	0x20000444
 8002640:	3ee8f5c3 	.word	0x3ee8f5c3
 8002644:	20000390 	.word	0x20000390
 8002648:	200003f0 	.word	0x200003f0
 800264c:	2000039c 	.word	0x2000039c
 8002650:	200003fc 	.word	0x200003fc
 8002654:	2000044c 	.word	0x2000044c
 8002658:	20000330 	.word	0x20000330
 800265c:	20000458 	.word	0x20000458

08002660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002664:	b672      	cpsid	i
}
 8002666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002668:	e7fe      	b.n	8002668 <Error_Handler+0x8>

0800266a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <_ZN3ros3MsgC1Ev+0x1c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	0800d45c 	.word	0x0800d45c

080026ac <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
      data()
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ffe8 	bl	800268c <_ZN3ros3MsgC1Ev>
 80026bc:	4a06      	ldr	r2, [pc, #24]	; (80026d8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3304      	adds	r3, #4
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffcf 	bl	800266a <_ZN3ros4TimeC1Ev>
    {
    }
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800d444 	.word	0x0800d444

080026dc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	b2ca      	uxtb	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	0a19      	lsrs	r1, r3, #8
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3301      	adds	r3, #1
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	4413      	add	r3, r2
 8002706:	b2ca      	uxtb	r2, r1
 8002708:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0c19      	lsrs	r1, r3, #16
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3302      	adds	r3, #2
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	4413      	add	r3, r2
 8002718:	b2ca      	uxtb	r2, r1
 800271a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	0e19      	lsrs	r1, r3, #24
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3303      	adds	r3, #3
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	4413      	add	r3, r2
 800272a:	b2ca      	uxtb	r2, r1
 800272c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3304      	adds	r3, #4
 8002732:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6899      	ldr	r1, [r3, #8]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	4413      	add	r3, r2
 800273e:	b2ca      	uxtb	r2, r1
 8002740:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0a19      	lsrs	r1, r3, #8
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4413      	add	r3, r2
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	0c19      	lsrs	r1, r3, #16
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3302      	adds	r3, #2
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	4413      	add	r3, r2
 8002762:	b2ca      	uxtb	r2, r1
 8002764:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0e19      	lsrs	r1, r3, #24
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3303      	adds	r3, #3
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	4413      	add	r3, r2
 8002774:	b2ca      	uxtb	r2, r1
 8002776:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3304      	adds	r3, #4
 800277c:	60fb      	str	r3, [r7, #12]
      return offset;
 800277e:	68fb      	ldr	r3, [r7, #12]
    }
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3301      	adds	r3, #1
 80027b0:	6839      	ldr	r1, [r7, #0]
 80027b2:	440b      	add	r3, r1
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3302      	adds	r3, #2
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	440b      	add	r3, r1
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3303      	adds	r3, #3
 80027dc:	6839      	ldr	r1, [r7, #0]
 80027de:	440b      	add	r3, r1
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	061b      	lsls	r3, r3, #24
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3304      	adds	r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3301      	adds	r3, #1
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	440b      	add	r3, r1
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3302      	adds	r3, #2
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	440b      	add	r3, r1
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3303      	adds	r3, #3
 8002832:	6839      	ldr	r1, [r7, #0]
 8002834:	440b      	add	r3, r1
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3304      	adds	r3, #4
 8002844:	60fb      	str	r3, [r7, #12]
     return offset;
 8002846:	68fb      	ldr	r3, [r7, #12]
    }
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	0800d0c8 	.word	0x0800d0c8

08002870 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	0800d0d8 	.word	0x0800d0d8

0800288c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fef8 	bl	800268c <_ZN3ros3MsgC1Ev>
 800289c:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028ac:	609a      	str	r2, [r3, #8]
      message_type(""),
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028b2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028b8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	615a      	str	r2, [r3, #20]
    {
    }
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	0800d42c 	.word	0x0800d42c
 80028d0:	0800d0fc 	.word	0x0800d0fc

080028d4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8899      	ldrh	r1, [r3, #4]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	b2ca      	uxtb	r2, r1
 80028ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	889b      	ldrh	r3, [r3, #4]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	b299      	uxth	r1, r3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3301      	adds	r3, #1
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	b2ca      	uxtb	r2, r1
 8002902:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	3302      	adds	r3, #2
 8002908:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fc62 	bl	80001d8 <strlen>
 8002914:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	4413      	add	r3, r2
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	4618      	mov	r0, r3
 8002920:	f003 fba0 	bl	8006064 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	3304      	adds	r3, #4
 8002928:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	18d0      	adds	r0, r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4619      	mov	r1, r3
 8002938:	f00a fa9c 	bl	800ce74 <memcpy>
      offset += length_topic_name;
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4413      	add	r3, r2
 8002942:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fc45 	bl	80001d8 <strlen>
 800294e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4413      	add	r3, r2
 8002956:	6979      	ldr	r1, [r7, #20]
 8002958:	4618      	mov	r0, r3
 800295a:	f003 fb83 	bl	8006064 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3304      	adds	r3, #4
 8002962:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	18d0      	adds	r0, r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4619      	mov	r1, r3
 8002972:	f00a fa7f 	bl	800ce74 <memcpy>
      offset += length_message_type;
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	4413      	add	r3, r2
 800297c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fc28 	bl	80001d8 <strlen>
 8002988:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4413      	add	r3, r2
 8002990:	6939      	ldr	r1, [r7, #16]
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fb66 	bl	8006064 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	3304      	adds	r3, #4
 800299c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	18d0      	adds	r0, r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4619      	mov	r1, r3
 80029ac:	f00a fa62 	bl	800ce74 <memcpy>
      offset += length_md5sum;
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80029be:	68f9      	ldr	r1, [r7, #12]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	b2ca      	uxtb	r2, r1
 80029c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	0a19      	lsrs	r1, r3, #8
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	b2ca      	uxtb	r2, r1
 80029d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0c19      	lsrs	r1, r3, #16
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3302      	adds	r3, #2
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	b2ca      	uxtb	r2, r1
 80029e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	0e19      	lsrs	r1, r3, #24
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3303      	adds	r3, #3
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4413      	add	r3, r2
 80029f6:	b2ca      	uxtb	r2, r1
 80029f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	61fb      	str	r3, [r7, #28]
      return offset;
 8002a00:	69fb      	ldr	r3, [r7, #28]
    }
 8002a02:	4618      	mov	r0, r3
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b08a      	sub	sp, #40	; 0x28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	889b      	ldrh	r3, [r3, #4]
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	440b      	add	r3, r1
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	3302      	adds	r3, #2
 8002a48:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	441a      	add	r2, r3
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 fb23 	bl	80060a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
 8002a66:	e00b      	b.n	8002a80 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	441a      	add	r2, r3
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	3b01      	subs	r3, #1
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	440b      	add	r3, r1
 8002a76:	7812      	ldrb	r2, [r2, #0]
 8002a78:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	4413      	add	r3, r2
 8002a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3ed      	bcc.n	8002a68 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	4413      	add	r3, r2
 8002a92:	3b01      	subs	r3, #1
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	441a      	add	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4413      	add	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	441a      	add	r2, r3
 8002ab6:	f107 0310 	add.w	r3, r7, #16
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 faf0 	bl	80060a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	e00b      	b.n	8002ae6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	441a      	add	r2, r3
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	440b      	add	r3, r1
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	623b      	str	r3, [r7, #32]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d3ed      	bcc.n	8002ace <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	3b01      	subs	r3, #1
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	4413      	add	r3, r2
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	441a      	add	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	441a      	add	r2, r3
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 fabd 	bl	80060a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e00b      	b.n	8002b4c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	441a      	add	r2, r3
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	6839      	ldr	r1, [r7, #0]
 8002b40:	440b      	add	r3, r1
 8002b42:	7812      	ldrb	r2, [r2, #0]
 8002b44:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4413      	add	r3, r2
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3ed      	bcc.n	8002b34 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	441a      	add	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	440a      	add	r2, r1
 8002b88:	7812      	ldrb	r2, [r2, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	3301      	adds	r3, #1
 8002b94:	6839      	ldr	r1, [r7, #0]
 8002b96:	440b      	add	r3, r1
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	440b      	add	r3, r1
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	3303      	adds	r3, #3
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	440b      	add	r3, r1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	061b      	lsls	r3, r3, #24
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	61bb      	str	r3, [r7, #24]
     return offset;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
    }
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3728      	adds	r7, #40	; 0x28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	0800d100 	.word	0x0800d100

08002bf8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	0800d11c 	.word	0x0800d11c

08002c14 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fd34 	bl	800268c <_ZN3ros3MsgC1Ev>
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	601a      	str	r2, [r3, #0]
      level(0),
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	711a      	strb	r2, [r3, #4]
      msg("")
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002c34:	609a      	str	r2, [r3, #8]
    {
    }
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	0800d414 	.word	0x0800d414
 8002c44:	0800d0fc 	.word	0x0800d0fc

08002c48 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	7912      	ldrb	r2, [r2, #4]
 8002c60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3301      	adds	r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fab3 	bl	80001d8 <strlen>
 8002c72:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 f9f1 	bl	8006064 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3304      	adds	r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	18d0      	adds	r0, r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	4619      	mov	r1, r3
 8002c96:	f00a f8ed 	bl	800ce74 <memcpy>
      offset += length_msg;
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
    }
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 f9e2 	bl	80060a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e00b      	b.n	8002d02 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	441a      	add	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	440b      	add	r3, r1
 8002cf8:	7812      	ldrb	r2, [r2, #0]
 8002cfa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4413      	add	r3, r2
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d3ed      	bcc.n	8002cea <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	3b01      	subs	r3, #1
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	4413      	add	r3, r2
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	441a      	add	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4413      	add	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
     return offset;
 8002d32:	693b      	ldr	r3, [r7, #16]
    }
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	0800d140 	.word	0x0800d140

08002d58 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	0800d154 	.word	0x0800d154

08002d74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fc84 	bl	800268c <_ZN3ros3MsgC1Ev>
 8002d84:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	615a      	str	r2, [r3, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	0800d3fc 	.word	0x0800d3fc

08002dd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	4413      	add	r3, r2
 8002de8:	b2ca      	uxtb	r2, r1
 8002dea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0a19      	lsrs	r1, r3, #8
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	3301      	adds	r3, #1
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	b2ca      	uxtb	r2, r1
 8002dfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0c19      	lsrs	r1, r3, #16
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	3302      	adds	r3, #2
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	b2ca      	uxtb	r2, r1
 8002e0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	0e19      	lsrs	r1, r3, #24
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	3303      	adds	r3, #3
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	b2ca      	uxtb	r2, r1
 8002e20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	3304      	adds	r3, #4
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	e02a      	b.n	8002e84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002e3c:	6939      	ldr	r1, [r7, #16]
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	b2ca      	uxtb	r2, r1
 8002e46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	0a19      	lsrs	r1, r3, #8
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	3301      	adds	r3, #1
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	b2ca      	uxtb	r2, r1
 8002e56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	0c19      	lsrs	r1, r3, #16
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	3302      	adds	r3, #2
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	b2ca      	uxtb	r2, r1
 8002e66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	0e19      	lsrs	r1, r3, #24
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	3303      	adds	r3, #3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	b2ca      	uxtb	r2, r1
 8002e76:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	3301      	adds	r3, #1
 8002e82:	623b      	str	r3, [r7, #32]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d3cf      	bcc.n	8002e2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6919      	ldr	r1, [r3, #16]
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	b2ca      	uxtb	r2, r1
 8002e9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	0a19      	lsrs	r1, r3, #8
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b2ca      	uxtb	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	0c19      	lsrs	r1, r3, #16
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	b2ca      	uxtb	r2, r1
 8002ebe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	0e19      	lsrs	r1, r3, #24
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	3303      	adds	r3, #3
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	4413      	add	r3, r2
 8002ece:	b2ca      	uxtb	r2, r1
 8002ed0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	e02a      	b.n	8002f34 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002eec:	68f9      	ldr	r1, [r7, #12]
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	b2ca      	uxtb	r2, r1
 8002ef6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	0a19      	lsrs	r1, r3, #8
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	3301      	adds	r3, #1
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	b2ca      	uxtb	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	0c19      	lsrs	r1, r3, #16
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	3302      	adds	r3, #2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	b2ca      	uxtb	r2, r1
 8002f16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	0e19      	lsrs	r1, r3, #24
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	3303      	adds	r3, #3
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	b2ca      	uxtb	r2, r1
 8002f26:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3cf      	bcc.n	8002ede <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69d9      	ldr	r1, [r3, #28]
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	b2ca      	uxtb	r2, r1
 8002f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	0a19      	lsrs	r1, r3, #8
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	3301      	adds	r3, #1
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	4413      	add	r3, r2
 8002f5a:	b2ca      	uxtb	r2, r1
 8002f5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	0c19      	lsrs	r1, r3, #16
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	3302      	adds	r3, #2
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b2ca      	uxtb	r2, r1
 8002f6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	0e19      	lsrs	r1, r3, #24
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	3303      	adds	r3, #3
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	b2ca      	uxtb	r2, r1
 8002f80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	3304      	adds	r3, #4
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e027      	b.n	8002fde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd f91c 	bl	80001d8 <strlen>
 8002fa0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	6979      	ldr	r1, [r7, #20]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 f85a 	bl	8006064 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	18d0      	adds	r0, r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f009 ff52 	bl	800ce74 <memcpy>
      offset += length_stringsi;
 8002fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d3d2      	bcc.n	8002f8e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002fea:	4618      	mov	r0, r3
 8002fec:	3728      	adds	r7, #40	; 0x28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b08e      	sub	sp, #56	; 0x38
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	4413      	add	r3, r2
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	3301      	adds	r3, #1
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	4413      	add	r3, r2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	6a3a      	ldr	r2, [r7, #32]
 8003018:	4313      	orrs	r3, r2
 800301a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	3302      	adds	r3, #2
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	4413      	add	r3, r2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	6a3a      	ldr	r2, [r7, #32]
 800302a:	4313      	orrs	r3, r2
 800302c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	3303      	adds	r3, #3
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	4413      	add	r3, r2
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	6a3a      	ldr	r2, [r7, #32]
 800303c:	4313      	orrs	r3, r2
 800303e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	3304      	adds	r3, #4
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	6a3a      	ldr	r2, [r7, #32]
 800304c:	429a      	cmp	r2, r3
 800304e:	d90a      	bls.n	8003066 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f009 fe9e 	bl	800cd9c <realloc>
 8003060:	4602      	mov	r2, r0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a3a      	ldr	r2, [r7, #32]
 800306a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800306c:	2300      	movs	r3, #0
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
 8003070:	e035      	b.n	80030de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307a:	6839      	ldr	r1, [r7, #0]
 800307c:	440a      	add	r2, r1
 800307e:	7812      	ldrb	r2, [r2, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003088:	3301      	adds	r3, #1
 800308a:	6839      	ldr	r1, [r7, #0]
 800308c:	440b      	add	r3, r1
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	3302      	adds	r3, #2
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	440b      	add	r3, r1
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	3303      	adds	r3, #3
 80030ae:	6839      	ldr	r1, [r7, #0]
 80030b0:	440b      	add	r3, r1
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c2:	3304      	adds	r3, #4
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	3301      	adds	r3, #1
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3c4      	bcc.n	8003072 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80030e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	3301      	adds	r3, #1
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	4313      	orrs	r3, r2
 8003102:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	3302      	adds	r3, #2
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	4413      	add	r3, r2
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	4313      	orrs	r3, r2
 8003114:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003118:	3303      	adds	r3, #3
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	4313      	orrs	r3, r2
 8003126:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	3304      	adds	r3, #4
 800312c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	429a      	cmp	r2, r3
 8003136:	d90a      	bls.n	800314e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f009 fe2a 	bl	800cd9c <realloc>
 8003148:	4602      	mov	r2, r0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003154:	2300      	movs	r3, #0
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003158:	e035      	b.n	80031c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003162:	6839      	ldr	r1, [r7, #0]
 8003164:	440a      	add	r2, r1
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003170:	3301      	adds	r3, #1
 8003172:	6839      	ldr	r1, [r7, #0]
 8003174:	440b      	add	r3, r1
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003182:	3302      	adds	r3, #2
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	440b      	add	r3, r1
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003194:	3303      	adds	r3, #3
 8003196:	6839      	ldr	r1, [r7, #0]
 8003198:	440b      	add	r3, r1
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80031a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031aa:	3304      	adds	r3, #4
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	3214      	adds	r2, #20
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	3301      	adds	r3, #1
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d3c4      	bcc.n	800315a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	4413      	add	r3, r2
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	3301      	adds	r3, #1
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80031ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ee:	3302      	adds	r3, #2
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	041b      	lsls	r3, r3, #16
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003200:	3303      	adds	r3, #3
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	4413      	add	r3, r2
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	3304      	adds	r3, #4
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	429a      	cmp	r2, r3
 800321e:	d90a      	bls.n	8003236 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f009 fdb6 	bl	800cd9c <realloc>
 8003230:	4602      	mov	r2, r0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003240:	e03e      	b.n	80032c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	441a      	add	r2, r3
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f002 ff27 	bl	80060a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003256:	3304      	adds	r3, #4
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	e00b      	b.n	8003278 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	441a      	add	r2, r3
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	3b01      	subs	r3, #1
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	440b      	add	r3, r1
 800326e:	7812      	ldrb	r2, [r2, #0]
 8003270:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	3301      	adds	r3, #1
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
 8003278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	429a      	cmp	r2, r3
 8003282:	d3ed      	bcc.n	8003260 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	3b01      	subs	r3, #1
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	4413      	add	r3, r2
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003296:	3b01      	subs	r3, #1
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	441a      	add	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80032a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	3220      	adds	r2, #32
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	3301      	adds	r3, #1
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d3bb      	bcc.n	8003242 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80032cc:	4618      	mov	r0, r3
 80032ce:	3738      	adds	r7, #56	; 0x38
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	0800d308 	.word	0x0800d308

080032f0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	0800d178 	.word	0x0800d178

0800330c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	611a      	str	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68d8      	ldr	r0, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6891      	ldr	r1, [r2, #8]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	4798      	blx	r3
 8003358:	4603      	mov	r3, r0
  };
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
  }
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
      huart(&huart6), rind(0), twind(0), tfind(0){
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <_ZN13STM32HardwareC1Ev+0x34>)
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	20000228 	.word	0x20000228

080033d8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f804 	bl	80033ee <_ZN13STM32Hardware10reset_rbufEv>
    }
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003402:	4619      	mov	r1, r3
 8003404:	f007 fab2 	bl	800a96c <HAL_UART_Receive_DMA>
    }
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <_ZN13STM32Hardware4readEv>:

    int read(){
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003418:	f04f 33ff 	mov.w	r3, #4294967295
 800341c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff ffa8 	bl	800337a <_ZN13STM32Hardware10getRdmaIndEv>
 800342a:	4603      	mov	r3, r0
 800342c:	429c      	cmp	r4, r3
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d012      	beq.n	8003460 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003440:	1c59      	adds	r1, r3, #1
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	791b      	ldrb	r3, [r3, #4]
 800344e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8003460:	68fb      	ldr	r3, [r7, #12]
    }
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}
	...

0800346c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b20      	cmp	r3, #32
 8003480:	d108      	bne.n	8003494 <_ZN13STM32Hardware5flushEv+0x28>
 8003482:	4b33      	ldr	r3, [pc, #204]	; (8003550 <_ZN13STM32Hardware5flushEv+0xe4>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	f083 0301 	eor.w	r3, r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <_ZN13STM32Hardware5flushEv+0x28>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <_ZN13STM32Hardware5flushEv+0x2a>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d055      	beq.n	8003546 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 800349a:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <_ZN13STM32Hardware5flushEv+0xe4>)
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d047      	beq.n	8003540 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d217      	bcs.n	80034f4 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);//len
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80034e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	89fa      	ldrh	r2, [r7, #14]
 80034ec:	4619      	mov	r1, r3
 80034ee:	f007 f9cd 	bl	800a88c <HAL_UART_Transmit_DMA>
 80034f2:	e01f      	b.n	8003534 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003500:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800350c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	89fa      	ldrh	r2, [r7, #14]
 8003516:	4619      	mov	r1, r3
 8003518:	f007 f9b8 	bl	800a88c <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind); //lỗi ở đây, sửa &(tbuf) thành tbuf
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800352c:	b29b      	uxth	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	f007 f9ac 	bl	800a88c <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <_ZN13STM32Hardware5flushEv+0xe4>)
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
      }
    }
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000454 	.word	0x20000454

08003554 <_ZN13STM32Hardware5writeEPKhi>:

    void write(const uint8_t* data, int length){  //lỗi ở đây, sửa uint8_t* thành const uint8_t
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
      int n = length;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	bfa8      	it	ge
 800356c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8003570:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003578:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	4293      	cmp	r3, r2
 8003580:	bf28      	it	cs
 8003582:	4613      	movcs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800358c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	4618      	mov	r0, r3
 800359a:	f009 fc6b 	bl	800ce74 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	4413      	add	r3, r2
 80035a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d00b      	beq.n	80035d2 <_ZN13STM32Hardware5writeEPKhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	18d1      	adds	r1, r2, r3
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	f009 fc51 	bl	800ce74 <memcpy>
      }

      flush();
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff ff4a 	bl	800346c <_ZN13STM32Hardware5flushEv>
    }
 80035d8:	bf00      	nop
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	f003 fe3e 	bl	8007268 <HAL_GetTick>
 80035ec:	4603      	mov	r3, r0
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f842 	bl	800268c <_ZN3ros3MsgC1Ev>
 8003608:	4a0e      	ldr	r2, [pc, #56]	; (8003644 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
      x(0),
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	0800d3b8 	.word	0x0800d3b8

08003648 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003648:	b480      	push	{r7}
 800364a:	b08b      	sub	sp, #44	; 0x2c
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800365c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	4401      	add	r1, r0
 800366a:	b2d3      	uxtb	r3, r2
 800366c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800366e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	0a02      	lsrs	r2, r0, #8
 800367c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003680:	0a0b      	lsrs	r3, r1, #8
 8003682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003684:	3101      	adds	r1, #1
 8003686:	6838      	ldr	r0, [r7, #0]
 8003688:	4401      	add	r1, r0
 800368a:	b2d3      	uxtb	r3, r2
 800368c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800368e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	0c02      	lsrs	r2, r0, #16
 800369c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036a0:	0c0b      	lsrs	r3, r1, #16
 80036a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036a4:	3102      	adds	r1, #2
 80036a6:	6838      	ldr	r0, [r7, #0]
 80036a8:	4401      	add	r1, r0
 80036aa:	b2d3      	uxtb	r3, r2
 80036ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80036ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	0e02      	lsrs	r2, r0, #24
 80036bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036c0:	0e0b      	lsrs	r3, r1, #24
 80036c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036c4:	3103      	adds	r1, #3
 80036c6:	6838      	ldr	r0, [r7, #0]
 80036c8:	4401      	add	r1, r0
 80036ca:	b2d3      	uxtb	r3, r2
 80036cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80036ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	000a      	movs	r2, r1
 80036dc:	2300      	movs	r3, #0
 80036de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e0:	3104      	adds	r1, #4
 80036e2:	6838      	ldr	r0, [r7, #0]
 80036e4:	4401      	add	r1, r0
 80036e6:	b2d3      	uxtb	r3, r2
 80036e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80036ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	0a0a      	lsrs	r2, r1, #8
 80036f8:	2300      	movs	r3, #0
 80036fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036fc:	3105      	adds	r1, #5
 80036fe:	6838      	ldr	r0, [r7, #0]
 8003700:	4401      	add	r1, r0
 8003702:	b2d3      	uxtb	r3, r2
 8003704:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003706:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	0c0a      	lsrs	r2, r1, #16
 8003714:	2300      	movs	r3, #0
 8003716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003718:	3106      	adds	r1, #6
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	4401      	add	r1, r0
 800371e:	b2d3      	uxtb	r3, r2
 8003720:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003722:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	0e0a      	lsrs	r2, r1, #24
 8003730:	2300      	movs	r3, #0
 8003732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003734:	3107      	adds	r1, #7
 8003736:	6838      	ldr	r0, [r7, #0]
 8003738:	4401      	add	r1, r0
 800373a:	b2d3      	uxtb	r3, r2
 800373c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	3308      	adds	r3, #8
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800374a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800374e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003754:	6838      	ldr	r0, [r7, #0]
 8003756:	4401      	add	r1, r0
 8003758:	b2d3      	uxtb	r3, r2
 800375a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800375c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	0a02      	lsrs	r2, r0, #8
 800376a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800376e:	0a0b      	lsrs	r3, r1, #8
 8003770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003772:	3101      	adds	r1, #1
 8003774:	6838      	ldr	r0, [r7, #0]
 8003776:	4401      	add	r1, r0
 8003778:	b2d3      	uxtb	r3, r2
 800377a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800377c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	0c02      	lsrs	r2, r0, #16
 800378a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800378e:	0c0b      	lsrs	r3, r1, #16
 8003790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003792:	3102      	adds	r1, #2
 8003794:	6838      	ldr	r0, [r7, #0]
 8003796:	4401      	add	r1, r0
 8003798:	b2d3      	uxtb	r3, r2
 800379a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800379c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	0e02      	lsrs	r2, r0, #24
 80037aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037ae:	0e0b      	lsrs	r3, r1, #24
 80037b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b2:	3103      	adds	r1, #3
 80037b4:	6838      	ldr	r0, [r7, #0]
 80037b6:	4401      	add	r1, r0
 80037b8:	b2d3      	uxtb	r3, r2
 80037ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80037bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	000a      	movs	r2, r1
 80037ca:	2300      	movs	r3, #0
 80037cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ce:	3104      	adds	r1, #4
 80037d0:	6838      	ldr	r0, [r7, #0]
 80037d2:	4401      	add	r1, r0
 80037d4:	b2d3      	uxtb	r3, r2
 80037d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80037d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	0a0a      	lsrs	r2, r1, #8
 80037e6:	2300      	movs	r3, #0
 80037e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ea:	3105      	adds	r1, #5
 80037ec:	6838      	ldr	r0, [r7, #0]
 80037ee:	4401      	add	r1, r0
 80037f0:	b2d3      	uxtb	r3, r2
 80037f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80037f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	0c0a      	lsrs	r2, r1, #16
 8003802:	2300      	movs	r3, #0
 8003804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003806:	3106      	adds	r1, #6
 8003808:	6838      	ldr	r0, [r7, #0]
 800380a:	4401      	add	r1, r0
 800380c:	b2d3      	uxtb	r3, r2
 800380e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003810:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	0e0a      	lsrs	r2, r1, #24
 800381e:	2300      	movs	r3, #0
 8003820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003822:	3107      	adds	r1, #7
 8003824:	6838      	ldr	r0, [r7, #0]
 8003826:	4401      	add	r1, r0
 8003828:	b2d3      	uxtb	r3, r2
 800382a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	3308      	adds	r3, #8
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003838:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800383c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003842:	6838      	ldr	r0, [r7, #0]
 8003844:	4401      	add	r1, r0
 8003846:	b2d3      	uxtb	r3, r2
 8003848:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800384a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	0a02      	lsrs	r2, r0, #8
 8003858:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800385c:	0a0b      	lsrs	r3, r1, #8
 800385e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003860:	3101      	adds	r1, #1
 8003862:	6838      	ldr	r0, [r7, #0]
 8003864:	4401      	add	r1, r0
 8003866:	b2d3      	uxtb	r3, r2
 8003868:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800386a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	0c02      	lsrs	r2, r0, #16
 8003878:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800387c:	0c0b      	lsrs	r3, r1, #16
 800387e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003880:	3102      	adds	r1, #2
 8003882:	6838      	ldr	r0, [r7, #0]
 8003884:	4401      	add	r1, r0
 8003886:	b2d3      	uxtb	r3, r2
 8003888:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800388a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	0e02      	lsrs	r2, r0, #24
 8003898:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800389c:	0e0b      	lsrs	r3, r1, #24
 800389e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a0:	3103      	adds	r1, #3
 80038a2:	6838      	ldr	r0, [r7, #0]
 80038a4:	4401      	add	r1, r0
 80038a6:	b2d3      	uxtb	r3, r2
 80038a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80038aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	000a      	movs	r2, r1
 80038b8:	2300      	movs	r3, #0
 80038ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038bc:	3104      	adds	r1, #4
 80038be:	6838      	ldr	r0, [r7, #0]
 80038c0:	4401      	add	r1, r0
 80038c2:	b2d3      	uxtb	r3, r2
 80038c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80038c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	0a0a      	lsrs	r2, r1, #8
 80038d4:	2300      	movs	r3, #0
 80038d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d8:	3105      	adds	r1, #5
 80038da:	6838      	ldr	r0, [r7, #0]
 80038dc:	4401      	add	r1, r0
 80038de:	b2d3      	uxtb	r3, r2
 80038e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80038e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	0c0a      	lsrs	r2, r1, #16
 80038f0:	2300      	movs	r3, #0
 80038f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f4:	3106      	adds	r1, #6
 80038f6:	6838      	ldr	r0, [r7, #0]
 80038f8:	4401      	add	r1, r0
 80038fa:	b2d3      	uxtb	r3, r2
 80038fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80038fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	0e0a      	lsrs	r2, r1, #24
 800390c:	2300      	movs	r3, #0
 800390e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003910:	3107      	adds	r1, #7
 8003912:	6838      	ldr	r0, [r7, #0]
 8003914:	4401      	add	r1, r0
 8003916:	b2d3      	uxtb	r3, r2
 8003918:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	3308      	adds	r3, #8
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003922:	4618      	mov	r0, r3
 8003924:	372c      	adds	r7, #44	; 0x2c
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800392e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003932:	b0eb      	sub	sp, #428	; 0x1ac
 8003934:	af00      	add	r7, sp, #0
 8003936:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800393a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003950:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003954:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003958:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800395c:	4413      	add	r3, r2
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2200      	movs	r2, #0
 8003964:	461c      	mov	r4, r3
 8003966:	4615      	mov	r5, r2
 8003968:	ea40 0804 	orr.w	r8, r0, r4
 800396c:	ea41 0905 	orr.w	r9, r1, r5
 8003970:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003974:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003978:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2200      	movs	r2, #0
 800398a:	469a      	mov	sl, r3
 800398c:	4693      	mov	fp, r2
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800399a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800399e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80039a2:	ea40 0402 	orr.w	r4, r0, r2
 80039a6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80039aa:	430b      	orrs	r3, r1
 80039ac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80039b0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80039b4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039b8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039c6:	4413      	add	r3, r2
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80039d2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80039e2:	464c      	mov	r4, r9
 80039e4:	0423      	lsls	r3, r4, #16
 80039e6:	4644      	mov	r4, r8
 80039e8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80039ec:	4644      	mov	r4, r8
 80039ee:	0422      	lsls	r2, r4, #16
 80039f0:	ea40 0402 	orr.w	r4, r0, r2
 80039f4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80039f8:	430b      	orrs	r3, r1
 80039fa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80039fe:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003a02:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a06:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a0e:	1cda      	adds	r2, r3, #3
 8003a10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a14:	4413      	add	r3, r2
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003a20:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003a24:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003a28:	4623      	mov	r3, r4
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003a30:	4623      	mov	r3, r4
 8003a32:	061b      	lsls	r3, r3, #24
 8003a34:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003a38:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	4303      	orrs	r3, r0
 8003a40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a44:	462b      	mov	r3, r5
 8003a46:	430b      	orrs	r3, r1
 8003a48:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a4c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003a50:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a54:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a5c:	1d1a      	adds	r2, r3, #4
 8003a5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a62:	4413      	add	r3, r2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003a6e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003a7e:	0023      	movs	r3, r4
 8003a80:	2200      	movs	r2, #0
 8003a82:	ea40 0402 	orr.w	r4, r0, r2
 8003a86:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003a90:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003a94:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a98:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003aa0:	1d5a      	adds	r2, r3, #5
 8003aa2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aa6:	4413      	add	r3, r2
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003ab2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003ac2:	0223      	lsls	r3, r4, #8
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	ea40 0402 	orr.w	r4, r0, r2
 8003aca:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003ad4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003ad8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003adc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003ae0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ae4:	1d9a      	adds	r2, r3, #6
 8003ae6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aea:	4413      	add	r3, r2
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003af6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003b06:	0423      	lsls	r3, r4, #16
 8003b08:	2200      	movs	r2, #0
 8003b0a:	ea40 0402 	orr.w	r4, r0, r2
 8003b0e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003b12:	430b      	orrs	r3, r1
 8003b14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b18:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003b1c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b20:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b28:	1dda      	adds	r2, r3, #7
 8003b2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003b3a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003b4a:	0623      	lsls	r3, r4, #24
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	ea40 0402 	orr.w	r4, r0, r2
 8003b52:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003b56:	430b      	orrs	r3, r1
 8003b58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003b5c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003b60:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003b64:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003b6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003b70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b74:	3308      	adds	r3, #8
 8003b76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b86:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b8a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003b8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b92:	4413      	add	r3, r2
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b9e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003ba2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003ba6:	4623      	mov	r3, r4
 8003ba8:	4303      	orrs	r3, r0
 8003baa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003bae:	462b      	mov	r3, r5
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003bb6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003bba:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003bbe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003bc2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bcc:	4413      	add	r3, r2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003bd8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003be8:	464c      	mov	r4, r9
 8003bea:	0223      	lsls	r3, r4, #8
 8003bec:	4644      	mov	r4, r8
 8003bee:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bf2:	4644      	mov	r4, r8
 8003bf4:	0222      	lsls	r2, r4, #8
 8003bf6:	ea40 0402 	orr.w	r4, r0, r2
 8003bfa:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c04:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003c08:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c0c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c14:	1c9a      	adds	r2, r3, #2
 8003c16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c1a:	4413      	add	r3, r2
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003c36:	464c      	mov	r4, r9
 8003c38:	0423      	lsls	r3, r4, #16
 8003c3a:	4644      	mov	r4, r8
 8003c3c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003c40:	4644      	mov	r4, r8
 8003c42:	0422      	lsls	r2, r4, #16
 8003c44:	ea40 0402 	orr.w	r4, r0, r2
 8003c48:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c52:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003c56:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c5a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c62:	1cda      	adds	r2, r3, #3
 8003c64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c68:	4413      	add	r3, r2
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c74:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c78:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c84:	4623      	mov	r3, r4
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c8c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003c90:	4623      	mov	r3, r4
 8003c92:	4303      	orrs	r3, r0
 8003c94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c98:	462b      	mov	r3, r5
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ca0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003ca4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ca8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003cac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cb0:	1d1a      	adds	r2, r3, #4
 8003cb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cb6:	4413      	add	r3, r2
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cc2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003cd2:	0023      	movs	r3, r4
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	ea40 0402 	orr.w	r4, r0, r2
 8003cda:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ce4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003ce8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003cec:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003cf0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cf4:	1d5a      	adds	r2, r3, #5
 8003cf6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d06:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003d16:	0223      	lsls	r3, r4, #8
 8003d18:	2200      	movs	r2, #0
 8003d1a:	ea40 0402 	orr.w	r4, r0, r2
 8003d1e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003d22:	430b      	orrs	r3, r1
 8003d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d28:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003d2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d38:	1d9a      	adds	r2, r3, #6
 8003d3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d3e:	4413      	add	r3, r2
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003d5a:	0423      	lsls	r3, r4, #16
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	ea40 0402 	orr.w	r4, r0, r2
 8003d62:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003d66:	430b      	orrs	r3, r1
 8003d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d6c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003d70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d7c:	1dda      	adds	r2, r3, #7
 8003d7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d82:	4413      	add	r3, r2
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003d9e:	0623      	lsls	r3, r4, #24
 8003da0:	2200      	movs	r2, #0
 8003da2:	ea40 0402 	orr.w	r4, r0, r2
 8003da6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003daa:	430b      	orrs	r3, r1
 8003dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003db0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003db4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003db8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003dbc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003dc0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003dc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dc8:	3308      	adds	r3, #8
 8003dca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003dda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003dde:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003de2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003de6:	4413      	add	r3, r2
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003df2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003df6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	4303      	orrs	r3, r0
 8003dfe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e00:	462b      	mov	r3, r5
 8003e02:	430b      	orrs	r3, r1
 8003e04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e06:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003e0a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e0e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e1c:	4413      	add	r3, r2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2200      	movs	r2, #0
 8003e24:	673b      	str	r3, [r7, #112]	; 0x70
 8003e26:	677a      	str	r2, [r7, #116]	; 0x74
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e34:	464c      	mov	r4, r9
 8003e36:	0223      	lsls	r3, r4, #8
 8003e38:	4644      	mov	r4, r8
 8003e3a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e3e:	4644      	mov	r4, r8
 8003e40:	0222      	lsls	r2, r4, #8
 8003e42:	ea40 0402 	orr.w	r4, r0, r2
 8003e46:	66bc      	str	r4, [r7, #104]	; 0x68
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e4c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003e50:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e54:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e5c:	1c9a      	adds	r2, r3, #2
 8003e5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e62:	4413      	add	r3, r2
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2200      	movs	r2, #0
 8003e6a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e6c:	667a      	str	r2, [r7, #100]	; 0x64
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e7a:	464c      	mov	r4, r9
 8003e7c:	0423      	lsls	r3, r4, #16
 8003e7e:	4644      	mov	r4, r8
 8003e80:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003e84:	4644      	mov	r4, r8
 8003e86:	0422      	lsls	r2, r4, #16
 8003e88:	ea40 0402 	orr.w	r4, r0, r2
 8003e8c:	65bc      	str	r4, [r7, #88]	; 0x58
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e92:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003e96:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ea2:	1cda      	adds	r2, r3, #3
 8003ea4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ea8:	4413      	add	r3, r2
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2200      	movs	r2, #0
 8003eb0:	653b      	str	r3, [r7, #80]	; 0x50
 8003eb2:	657a      	str	r2, [r7, #84]	; 0x54
 8003eb4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003eb8:	4623      	mov	r3, r4
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003ec8:	4623      	mov	r3, r4
 8003eca:	4303      	orrs	r3, r0
 8003ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ece:	462b      	mov	r3, r5
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003ed8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003edc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ee0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ee4:	1d1a      	adds	r2, r3, #4
 8003ee6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003eea:	4413      	add	r3, r2
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003f00:	0023      	movs	r3, r4
 8003f02:	2200      	movs	r2, #0
 8003f04:	ea40 0402 	orr.w	r4, r0, r2
 8003f08:	633c      	str	r4, [r7, #48]	; 0x30
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003f12:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003f16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003f1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f1e:	1d5a      	adds	r2, r3, #5
 8003f20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f24:	4413      	add	r3, r2
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003f3a:	0223      	lsls	r3, r4, #8
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	ea40 0402 	orr.w	r4, r0, r2
 8003f42:	623c      	str	r4, [r7, #32]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
 8003f48:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003f4c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003f50:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003f54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f58:	3306      	adds	r3, #6
 8003f5a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003f5e:	4413      	add	r3, r2
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2200      	movs	r2, #0
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	61fa      	str	r2, [r7, #28]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	69bc      	ldr	r4, [r7, #24]
 8003f74:	0423      	lsls	r3, r4, #16
 8003f76:	2200      	movs	r2, #0
 8003f78:	ea40 0402 	orr.w	r4, r0, r2
 8003f7c:	613c      	str	r4, [r7, #16]
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f86:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003f8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003f8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f92:	3307      	adds	r3, #7
 8003f94:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003f98:	4413      	add	r3, r2
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	60fa      	str	r2, [r7, #12]
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	68bc      	ldr	r4, [r7, #8]
 8003fae:	0623      	lsls	r3, r4, #24
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	ea40 0402 	orr.w	r4, r0, r2
 8003fb6:	603c      	str	r4, [r7, #0]
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003fc0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003fc4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003fc8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003fcc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003fd0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003fda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003fea:	4770      	bx	lr

08003fec <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	0800d19c 	.word	0x0800d19c

08004008 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	0800d1b4 	.word	0x0800d1b4

08004024 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe fb2c 	bl	800268c <_ZN3ros3MsgC1Ev>
 8004034:	4a08      	ldr	r2, [pc, #32]	; (8004058 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]
      linear(),
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3308      	adds	r3, #8
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fada 	bl	80035f8 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3328      	adds	r3, #40	; 0x28
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fad5 	bl	80035f8 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	0800d3a0 	.word	0x0800d3a0

0800405c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f103 0008 	add.w	r0, r3, #8
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	4413      	add	r3, r2
 8004076:	4619      	mov	r1, r3
 8004078:	f7ff fae6 	bl	8003648 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	4413      	add	r3, r2
 8004090:	4619      	mov	r1, r3
 8004092:	f7ff fad9 	bl	8003648 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004096:	4602      	mov	r2, r0
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
      return offset;
 800409e:	68fb      	ldr	r3, [r7, #12]
    }
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f103 0008 	add.w	r0, r3, #8
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	4413      	add	r3, r2
 80040c2:	4619      	mov	r1, r3
 80040c4:	f7ff fc33 	bl	800392e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	4413      	add	r3, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	f7ff fc26 	bl	800392e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
     return offset;
 80040ea:	68fb      	ldr	r3, [r7, #12]
    }
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	0800d1d8 	.word	0x0800d1d8

08004110 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	0800d1ec 	.word	0x0800d1ec

0800412c <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe faa8 	bl	800268c <_ZN3ros3MsgC1Ev>
 800413c:	4a09      	ldr	r2, [pc, #36]	; (8004164 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	601a      	str	r2, [r3, #0]
      seq(0),
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	605a      	str	r2, [r3, #4]
      stamp(),
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3308      	adds	r3, #8
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe fa8c 	bl	800266a <_ZN3ros4TimeC1Ev>
      frame_id("")
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a04      	ldr	r2, [pc, #16]	; (8004168 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8004156:	611a      	str	r2, [r3, #16]
    {
    }
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	0800d388 	.word	0x0800d388
 8004168:	0800d0fc 	.word	0x0800d0fc

0800416c <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	4413      	add	r3, r2
 8004184:	b2ca      	uxtb	r2, r1
 8004186:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	0a19      	lsrs	r1, r3, #8
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3301      	adds	r3, #1
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	4413      	add	r3, r2
 8004196:	b2ca      	uxtb	r2, r1
 8004198:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	0c19      	lsrs	r1, r3, #16
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3302      	adds	r3, #2
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	4413      	add	r3, r2
 80041a8:	b2ca      	uxtb	r2, r1
 80041aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	0e19      	lsrs	r1, r3, #24
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3303      	adds	r3, #3
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	4413      	add	r3, r2
 80041ba:	b2ca      	uxtb	r2, r1
 80041bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3304      	adds	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6899      	ldr	r1, [r3, #8]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	b2ca      	uxtb	r2, r1
 80041d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	0a19      	lsrs	r1, r3, #8
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	4413      	add	r3, r2
 80041e0:	b2ca      	uxtb	r2, r1
 80041e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	0c19      	lsrs	r1, r3, #16
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3302      	adds	r3, #2
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	4413      	add	r3, r2
 80041f2:	b2ca      	uxtb	r2, r1
 80041f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	0e19      	lsrs	r1, r3, #24
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3303      	adds	r3, #3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	4413      	add	r3, r2
 8004204:	b2ca      	uxtb	r2, r1
 8004206:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3304      	adds	r3, #4
 800420c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68d9      	ldr	r1, [r3, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	4413      	add	r3, r2
 8004218:	b2ca      	uxtb	r2, r1
 800421a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	0a19      	lsrs	r1, r3, #8
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3301      	adds	r3, #1
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	4413      	add	r3, r2
 800422a:	b2ca      	uxtb	r2, r1
 800422c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	0c19      	lsrs	r1, r3, #16
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3302      	adds	r3, #2
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	4413      	add	r3, r2
 800423c:	b2ca      	uxtb	r2, r1
 800423e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	0e19      	lsrs	r1, r3, #24
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3303      	adds	r3, #3
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	4413      	add	r3, r2
 800424e:	b2ca      	uxtb	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3304      	adds	r3, #4
 8004256:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fb ffbb 	bl	80001d8 <strlen>
 8004262:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	4413      	add	r3, r2
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fef9 	bl	8006064 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3304      	adds	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	18d0      	adds	r0, r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	4619      	mov	r1, r3
 8004286:	f008 fdf5 	bl	800ce74 <memcpy>
      offset += length_frame_id;
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4413      	add	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
      return offset;
 8004292:	68fb      	ldr	r3, [r7, #12]
    }
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	4413      	add	r3, r2
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	3301      	adds	r3, #1
 80042c0:	6839      	ldr	r1, [r7, #0]
 80042c2:	440b      	add	r3, r1
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	3302      	adds	r3, #2
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	440b      	add	r3, r1
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	3303      	adds	r3, #3
 80042ec:	6839      	ldr	r1, [r7, #0]
 80042ee:	440b      	add	r3, r1
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	061b      	lsls	r3, r3, #24
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3304      	adds	r3, #4
 80042fe:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	4413      	add	r3, r2
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	3301      	adds	r3, #1
 8004316:	6839      	ldr	r1, [r7, #0]
 8004318:	440b      	add	r3, r1
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	3302      	adds	r3, #2
 800432c:	6839      	ldr	r1, [r7, #0]
 800432e:	440b      	add	r3, r1
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	3303      	adds	r3, #3
 8004342:	6839      	ldr	r1, [r7, #0]
 8004344:	440b      	add	r3, r1
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	3304      	adds	r3, #4
 8004354:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	4413      	add	r3, r2
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3301      	adds	r3, #1
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	440b      	add	r3, r1
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	3302      	adds	r3, #2
 8004382:	6839      	ldr	r1, [r7, #0]
 8004384:	440b      	add	r3, r1
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	3303      	adds	r3, #3
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	440b      	add	r3, r1
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	061b      	lsls	r3, r3, #24
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3304      	adds	r3, #4
 80043aa:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	441a      	add	r2, r3
 80043b2:	f107 030c 	add.w	r3, r7, #12
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f001 fe72 	bl	80060a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	3304      	adds	r3, #4
 80043c2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e00b      	b.n	80043e2 <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	441a      	add	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	6839      	ldr	r1, [r7, #0]
 80043d6:	440b      	add	r3, r1
 80043d8:	7812      	ldrb	r2, [r2, #0]
 80043da:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	3301      	adds	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d3ed      	bcc.n	80043ca <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	3b01      	subs	r3, #1
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	4413      	add	r3, r2
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3b01      	subs	r3, #1
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
     return offset;
 8004412:	693b      	ldr	r3, [r7, #16]
    }
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	0800d210 	.word	0x0800d210

08004438 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	4b03      	ldr	r3, [pc, #12]	; (8004450 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	0800d220 	.word	0x0800d220

08004454 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe f914 	bl	800268c <_ZN3ros3MsgC1Ev>
 8004464:	4a11      	ldr	r2, [pc, #68]	; (80044ac <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
      x(0),
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	0800d370 	.word	0x0800d370

080044b0 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80044b0:	b480      	push	{r7}
 80044b2:	b08d      	sub	sp, #52	; 0x34
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80044c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80044c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ce:	6838      	ldr	r0, [r7, #0]
 80044d0:	4401      	add	r1, r0
 80044d2:	b2d3      	uxtb	r3, r2
 80044d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80044d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	0a02      	lsrs	r2, r0, #8
 80044e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80044e8:	0a0b      	lsrs	r3, r1, #8
 80044ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ec:	3101      	adds	r1, #1
 80044ee:	6838      	ldr	r0, [r7, #0]
 80044f0:	4401      	add	r1, r0
 80044f2:	b2d3      	uxtb	r3, r2
 80044f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80044f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	0c02      	lsrs	r2, r0, #16
 8004504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004508:	0c0b      	lsrs	r3, r1, #16
 800450a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800450c:	3102      	adds	r1, #2
 800450e:	6838      	ldr	r0, [r7, #0]
 8004510:	4401      	add	r1, r0
 8004512:	b2d3      	uxtb	r3, r2
 8004514:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004516:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	0e02      	lsrs	r2, r0, #24
 8004524:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004528:	0e0b      	lsrs	r3, r1, #24
 800452a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800452c:	3103      	adds	r1, #3
 800452e:	6838      	ldr	r0, [r7, #0]
 8004530:	4401      	add	r1, r0
 8004532:	b2d3      	uxtb	r3, r2
 8004534:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004536:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	000a      	movs	r2, r1
 8004544:	2300      	movs	r3, #0
 8004546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004548:	3104      	adds	r1, #4
 800454a:	6838      	ldr	r0, [r7, #0]
 800454c:	4401      	add	r1, r0
 800454e:	b2d3      	uxtb	r3, r2
 8004550:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004552:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	0a0a      	lsrs	r2, r1, #8
 8004560:	2300      	movs	r3, #0
 8004562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004564:	3105      	adds	r1, #5
 8004566:	6838      	ldr	r0, [r7, #0]
 8004568:	4401      	add	r1, r0
 800456a:	b2d3      	uxtb	r3, r2
 800456c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800456e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	0c0a      	lsrs	r2, r1, #16
 800457c:	2300      	movs	r3, #0
 800457e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004580:	3106      	adds	r1, #6
 8004582:	6838      	ldr	r0, [r7, #0]
 8004584:	4401      	add	r1, r0
 8004586:	b2d3      	uxtb	r3, r2
 8004588:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800458a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	0e0a      	lsrs	r2, r1, #24
 8004598:	2300      	movs	r3, #0
 800459a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800459c:	3107      	adds	r1, #7
 800459e:	6838      	ldr	r0, [r7, #0]
 80045a0:	4401      	add	r1, r0
 80045a2:	b2d3      	uxtb	r3, r2
 80045a4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	3308      	adds	r3, #8
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80045b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80045b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045bc:	6838      	ldr	r0, [r7, #0]
 80045be:	4401      	add	r1, r0
 80045c0:	b2d3      	uxtb	r3, r2
 80045c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80045c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	0a02      	lsrs	r2, r0, #8
 80045d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80045d6:	0a0b      	lsrs	r3, r1, #8
 80045d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045da:	3101      	adds	r1, #1
 80045dc:	6838      	ldr	r0, [r7, #0]
 80045de:	4401      	add	r1, r0
 80045e0:	b2d3      	uxtb	r3, r2
 80045e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80045e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	0c02      	lsrs	r2, r0, #16
 80045f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80045f6:	0c0b      	lsrs	r3, r1, #16
 80045f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045fa:	3102      	adds	r1, #2
 80045fc:	6838      	ldr	r0, [r7, #0]
 80045fe:	4401      	add	r1, r0
 8004600:	b2d3      	uxtb	r3, r2
 8004602:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004604:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	0e02      	lsrs	r2, r0, #24
 8004612:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004616:	0e0b      	lsrs	r3, r1, #24
 8004618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800461a:	3103      	adds	r1, #3
 800461c:	6838      	ldr	r0, [r7, #0]
 800461e:	4401      	add	r1, r0
 8004620:	b2d3      	uxtb	r3, r2
 8004622:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004624:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	000a      	movs	r2, r1
 8004632:	2300      	movs	r3, #0
 8004634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004636:	3104      	adds	r1, #4
 8004638:	6838      	ldr	r0, [r7, #0]
 800463a:	4401      	add	r1, r0
 800463c:	b2d3      	uxtb	r3, r2
 800463e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004640:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	0a0a      	lsrs	r2, r1, #8
 800464e:	2300      	movs	r3, #0
 8004650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004652:	3105      	adds	r1, #5
 8004654:	6838      	ldr	r0, [r7, #0]
 8004656:	4401      	add	r1, r0
 8004658:	b2d3      	uxtb	r3, r2
 800465a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800465c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	0c0a      	lsrs	r2, r1, #16
 800466a:	2300      	movs	r3, #0
 800466c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800466e:	3106      	adds	r1, #6
 8004670:	6838      	ldr	r0, [r7, #0]
 8004672:	4401      	add	r1, r0
 8004674:	b2d3      	uxtb	r3, r2
 8004676:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004678:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	0e0a      	lsrs	r2, r1, #24
 8004686:	2300      	movs	r3, #0
 8004688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800468a:	3107      	adds	r1, #7
 800468c:	6838      	ldr	r0, [r7, #0]
 800468e:	4401      	add	r1, r0
 8004690:	b2d3      	uxtb	r3, r2
 8004692:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	3308      	adds	r3, #8
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80046a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80046a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046aa:	6838      	ldr	r0, [r7, #0]
 80046ac:	4401      	add	r1, r0
 80046ae:	b2d3      	uxtb	r3, r2
 80046b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80046b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	0a02      	lsrs	r2, r0, #8
 80046c0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80046c4:	0a0b      	lsrs	r3, r1, #8
 80046c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046c8:	3101      	adds	r1, #1
 80046ca:	6838      	ldr	r0, [r7, #0]
 80046cc:	4401      	add	r1, r0
 80046ce:	b2d3      	uxtb	r3, r2
 80046d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80046d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	0c02      	lsrs	r2, r0, #16
 80046e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80046e4:	0c0b      	lsrs	r3, r1, #16
 80046e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e8:	3102      	adds	r1, #2
 80046ea:	6838      	ldr	r0, [r7, #0]
 80046ec:	4401      	add	r1, r0
 80046ee:	b2d3      	uxtb	r3, r2
 80046f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80046f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	0e02      	lsrs	r2, r0, #24
 8004700:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004704:	0e0b      	lsrs	r3, r1, #24
 8004706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004708:	3103      	adds	r1, #3
 800470a:	6838      	ldr	r0, [r7, #0]
 800470c:	4401      	add	r1, r0
 800470e:	b2d3      	uxtb	r3, r2
 8004710:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004712:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	000a      	movs	r2, r1
 8004720:	2300      	movs	r3, #0
 8004722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004724:	3104      	adds	r1, #4
 8004726:	6838      	ldr	r0, [r7, #0]
 8004728:	4401      	add	r1, r0
 800472a:	b2d3      	uxtb	r3, r2
 800472c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800472e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	0a0a      	lsrs	r2, r1, #8
 800473c:	2300      	movs	r3, #0
 800473e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004740:	3105      	adds	r1, #5
 8004742:	6838      	ldr	r0, [r7, #0]
 8004744:	4401      	add	r1, r0
 8004746:	b2d3      	uxtb	r3, r2
 8004748:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800474a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	0c0a      	lsrs	r2, r1, #16
 8004758:	2300      	movs	r3, #0
 800475a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800475c:	3106      	adds	r1, #6
 800475e:	6838      	ldr	r0, [r7, #0]
 8004760:	4401      	add	r1, r0
 8004762:	b2d3      	uxtb	r3, r2
 8004764:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004766:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	0e0a      	lsrs	r2, r1, #24
 8004774:	2300      	movs	r3, #0
 8004776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004778:	3107      	adds	r1, #7
 800477a:	6838      	ldr	r0, [r7, #0]
 800477c:	4401      	add	r1, r0
 800477e:	b2d3      	uxtb	r3, r2
 8004780:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	3308      	adds	r3, #8
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800478e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8004792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004798:	6838      	ldr	r0, [r7, #0]
 800479a:	4401      	add	r1, r0
 800479c:	b2d3      	uxtb	r3, r2
 800479e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 80047a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	0a02      	lsrs	r2, r0, #8
 80047ae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80047b2:	0a0b      	lsrs	r3, r1, #8
 80047b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b6:	3101      	adds	r1, #1
 80047b8:	6838      	ldr	r0, [r7, #0]
 80047ba:	4401      	add	r1, r0
 80047bc:	b2d3      	uxtb	r3, r2
 80047be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 80047c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	0c02      	lsrs	r2, r0, #16
 80047ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80047d2:	0c0b      	lsrs	r3, r1, #16
 80047d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d6:	3102      	adds	r1, #2
 80047d8:	6838      	ldr	r0, [r7, #0]
 80047da:	4401      	add	r1, r0
 80047dc:	b2d3      	uxtb	r3, r2
 80047de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 80047e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	0e02      	lsrs	r2, r0, #24
 80047ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80047f2:	0e0b      	lsrs	r3, r1, #24
 80047f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047f6:	3103      	adds	r1, #3
 80047f8:	6838      	ldr	r0, [r7, #0]
 80047fa:	4401      	add	r1, r0
 80047fc:	b2d3      	uxtb	r3, r2
 80047fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004800:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	000a      	movs	r2, r1
 800480e:	2300      	movs	r3, #0
 8004810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004812:	3104      	adds	r1, #4
 8004814:	6838      	ldr	r0, [r7, #0]
 8004816:	4401      	add	r1, r0
 8004818:	b2d3      	uxtb	r3, r2
 800481a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 800481c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	0a0a      	lsrs	r2, r1, #8
 800482a:	2300      	movs	r3, #0
 800482c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800482e:	3105      	adds	r1, #5
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	4401      	add	r1, r0
 8004834:	b2d3      	uxtb	r3, r2
 8004836:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	0c0a      	lsrs	r2, r1, #16
 8004846:	2300      	movs	r3, #0
 8004848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800484a:	3106      	adds	r1, #6
 800484c:	6838      	ldr	r0, [r7, #0]
 800484e:	4401      	add	r1, r0
 8004850:	b2d3      	uxtb	r3, r2
 8004852:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8004854:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	0e0a      	lsrs	r2, r1, #24
 8004862:	2300      	movs	r3, #0
 8004864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004866:	3107      	adds	r1, #7
 8004868:	6838      	ldr	r0, [r7, #0]
 800486a:	4401      	add	r1, r0
 800486c:	b2d3      	uxtb	r3, r2
 800486e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	3308      	adds	r3, #8
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004878:	4618      	mov	r0, r3
 800487a:	3734      	adds	r7, #52	; 0x34
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004884:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004888:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800488c:	af00      	add	r7, sp, #0
 800488e:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 8004892:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    {
      int offset = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80048a8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80048ac:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80048b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80048b4:	4413      	add	r3, r2
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2200      	movs	r2, #0
 80048bc:	461c      	mov	r4, r3
 80048be:	4615      	mov	r5, r2
 80048c0:	ea40 0804 	orr.w	r8, r0, r4
 80048c4:	ea41 0905 	orr.w	r9, r1, r5
 80048c8:	e9c7 898a 	strd	r8, r9, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048cc:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80048d0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80048da:	4413      	add	r3, r2
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2200      	movs	r2, #0
 80048e2:	469a      	mov	sl, r3
 80048e4:	4693      	mov	fp, r2
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80048f2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80048f6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80048fa:	ea40 0402 	orr.w	r4, r0, r2
 80048fe:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8004902:	430b      	orrs	r3, r1
 8004904:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8004908:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 800490c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004910:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004914:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800491e:	4413      	add	r3, r2
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2200      	movs	r2, #0
 8004926:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800492a:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 800493a:	464c      	mov	r4, r9
 800493c:	0423      	lsls	r3, r4, #16
 800493e:	4644      	mov	r4, r8
 8004940:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004944:	4644      	mov	r4, r8
 8004946:	0422      	lsls	r2, r4, #16
 8004948:	ea40 0402 	orr.w	r4, r0, r2
 800494c:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8004950:	430b      	orrs	r3, r1
 8004952:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8004956:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800495a:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800495e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004962:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004966:	1cda      	adds	r2, r3, #3
 8004968:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800496c:	4413      	add	r3, r2
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004978:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 800497c:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8004980:	4623      	mov	r3, r4
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004988:	4623      	mov	r3, r4
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004990:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8004994:	4623      	mov	r3, r4
 8004996:	4303      	orrs	r3, r0
 8004998:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800499c:	462b      	mov	r3, r5
 800499e:	430b      	orrs	r3, r1
 80049a0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80049a4:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80049a8:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80049ac:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80049b0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80049b4:	1d1a      	adds	r2, r3, #4
 80049b6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80049ba:	4413      	add	r3, r2
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2200      	movs	r2, #0
 80049c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80049c6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 80049d6:	0023      	movs	r3, r4
 80049d8:	2200      	movs	r2, #0
 80049da:	ea40 0402 	orr.w	r4, r0, r2
 80049de:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 80049e2:	430b      	orrs	r3, r1
 80049e4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80049e8:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 80049ec:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80049f0:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80049f4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80049f8:	1d5a      	adds	r2, r3, #5
 80049fa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80049fe:	4413      	add	r3, r2
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004a0a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 8004a1a:	0223      	lsls	r3, r4, #8
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	ea40 0402 	orr.w	r4, r0, r2
 8004a22:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8004a26:	430b      	orrs	r3, r1
 8004a28:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004a2c:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8004a30:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004a34:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004a38:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004a3c:	1d9a      	adds	r2, r3, #6
 8004a3e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004a4e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 8004a5e:	0423      	lsls	r3, r4, #16
 8004a60:	2200      	movs	r2, #0
 8004a62:	ea40 0402 	orr.w	r4, r0, r2
 8004a66:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8004a70:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8004a74:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004a78:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004a7c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004a80:	1dda      	adds	r2, r3, #7
 8004a82:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004a86:	4413      	add	r3, r2
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a92:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 8004aa2:	0623      	lsls	r3, r4, #24
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	ea40 0402 	orr.w	r4, r0, r2
 8004aaa:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004ab4:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8004ab8:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      this->x = u_x.real;
 8004abc:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004ac0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004ac4:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8004ac8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004acc:	3308      	adds	r3, #8
 8004ace:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004ade:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004ae2:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004ae6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004aea:	4413      	add	r3, r2
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004af6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004afa:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8004afe:	4623      	mov	r3, r4
 8004b00:	4303      	orrs	r3, r0
 8004b02:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004b06:	462b      	mov	r3, r5
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004b0e:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8004b12:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004b16:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004b1a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004b24:	4413      	add	r3, r2
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b30:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8004b40:	464c      	mov	r4, r9
 8004b42:	0223      	lsls	r3, r4, #8
 8004b44:	4644      	mov	r4, r8
 8004b46:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b4a:	4644      	mov	r4, r8
 8004b4c:	0222      	lsls	r2, r4, #8
 8004b4e:	ea40 0402 	orr.w	r4, r0, r2
 8004b52:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8004b56:	430b      	orrs	r3, r1
 8004b58:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004b5c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004b60:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004b64:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004b68:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004b6c:	1c9a      	adds	r2, r3, #2
 8004b6e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004b72:	4413      	add	r3, r2
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004b7e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8004b8e:	464c      	mov	r4, r9
 8004b90:	0423      	lsls	r3, r4, #16
 8004b92:	4644      	mov	r4, r8
 8004b94:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004b98:	4644      	mov	r4, r8
 8004b9a:	0422      	lsls	r2, r4, #16
 8004b9c:	ea40 0402 	orr.w	r4, r0, r2
 8004ba0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004baa:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8004bae:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004bb2:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004bb6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004bba:	1cda      	adds	r2, r3, #3
 8004bbc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004bc0:	4413      	add	r3, r2
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004bcc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004bd0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004bd4:	4623      	mov	r3, r4
 8004bd6:	0a1b      	lsrs	r3, r3, #8
 8004bd8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004bdc:	4623      	mov	r3, r4
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004be4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8004be8:	4623      	mov	r3, r4
 8004bea:	4303      	orrs	r3, r0
 8004bec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004bf8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8004bfc:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004c00:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004c04:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004c08:	1d1a      	adds	r2, r3, #4
 8004c0a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004c0e:	4413      	add	r3, r2
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004c1a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8004c2a:	0023      	movs	r3, r4
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	ea40 0402 	orr.w	r4, r0, r2
 8004c32:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8004c36:	430b      	orrs	r3, r1
 8004c38:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004c3c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004c40:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004c44:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004c48:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004c4c:	1d5a      	adds	r2, r3, #5
 8004c4e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004c52:	4413      	add	r3, r2
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004c5e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8004c6e:	0223      	lsls	r3, r4, #8
 8004c70:	2200      	movs	r2, #0
 8004c72:	ea40 0402 	orr.w	r4, r0, r2
 8004c76:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004c80:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8004c84:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004c88:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004c8c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004c90:	1d9a      	adds	r2, r3, #6
 8004c92:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004c96:	4413      	add	r3, r2
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ca2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8004cb2:	0423      	lsls	r3, r4, #16
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	ea40 0402 	orr.w	r4, r0, r2
 8004cba:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004cc4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8004cc8:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004ccc:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004cd0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004cd4:	1dda      	adds	r2, r3, #7
 8004cd6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004cda:	4413      	add	r3, r2
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ce6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8004cf6:	0623      	lsls	r3, r4, #24
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	ea40 0402 	orr.w	r4, r0, r2
 8004cfe:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8004d02:	430b      	orrs	r3, r1
 8004d04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004d08:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8004d0c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      this->y = u_y.real;
 8004d10:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004d14:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004d18:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004d1c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004d20:	3308      	adds	r3, #8
 8004d22:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004d32:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004d36:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004d3a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004d3e:	4413      	add	r3, r2
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2200      	movs	r2, #0
 8004d46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d4a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004d4e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004d52:	4623      	mov	r3, r4
 8004d54:	4303      	orrs	r3, r0
 8004d56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d5a:	462b      	mov	r3, r5
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d62:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8004d66:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004d6a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004d6e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004d78:	4413      	add	r3, r2
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d84:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8004d94:	464c      	mov	r4, r9
 8004d96:	0223      	lsls	r3, r4, #8
 8004d98:	4644      	mov	r4, r8
 8004d9a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d9e:	4644      	mov	r4, r8
 8004da0:	0222      	lsls	r2, r4, #8
 8004da2:	ea40 0402 	orr.w	r4, r0, r2
 8004da6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8004daa:	430b      	orrs	r3, r1
 8004dac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004db0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8004db4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004db8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004dbc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004dc0:	1c9a      	adds	r2, r3, #2
 8004dc2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004dc6:	4413      	add	r3, r2
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004de2:	464c      	mov	r4, r9
 8004de4:	0423      	lsls	r3, r4, #16
 8004de6:	4644      	mov	r4, r8
 8004de8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004dec:	4644      	mov	r4, r8
 8004dee:	0422      	lsls	r2, r4, #16
 8004df0:	ea40 0402 	orr.w	r4, r0, r2
 8004df4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dfe:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8004e02:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004e06:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004e0a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004e0e:	1cda      	adds	r2, r3, #3
 8004e10:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004e14:	4413      	add	r3, r2
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e20:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e24:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004e28:	4623      	mov	r3, r4
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e30:	4623      	mov	r3, r4
 8004e32:	061b      	lsls	r3, r3, #24
 8004e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e38:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004e3c:	4623      	mov	r3, r4
 8004e3e:	4303      	orrs	r3, r0
 8004e40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e44:	462b      	mov	r3, r5
 8004e46:	430b      	orrs	r3, r1
 8004e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e4c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8004e50:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004e54:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004e58:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004e5c:	1d1a      	adds	r2, r3, #4
 8004e5e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004e62:	4413      	add	r3, r2
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e6e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8004e7e:	0023      	movs	r3, r4
 8004e80:	2200      	movs	r2, #0
 8004e82:	ea40 0402 	orr.w	r4, r0, r2
 8004e86:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e90:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004e94:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004e98:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004e9c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004ea0:	1d5a      	adds	r2, r3, #5
 8004ea2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004ea6:	4413      	add	r3, r2
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eb2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8004ec2:	0223      	lsls	r3, r4, #8
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	ea40 0402 	orr.w	r4, r0, r2
 8004eca:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ed4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004ed8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004edc:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004ee0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004ee4:	1d9a      	adds	r2, r3, #6
 8004ee6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004eea:	4413      	add	r3, r2
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ef6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8004f06:	0423      	lsls	r3, r4, #16
 8004f08:	2200      	movs	r2, #0
 8004f0a:	ea40 0402 	orr.w	r4, r0, r2
 8004f0e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004f12:	430b      	orrs	r3, r1
 8004f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f18:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004f1c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004f20:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004f24:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004f28:	1dda      	adds	r2, r3, #7
 8004f2a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f2e:	4413      	add	r3, r2
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8004f4a:	0623      	lsls	r3, r4, #24
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	ea40 0402 	orr.w	r4, r0, r2
 8004f52:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8004f56:	430b      	orrs	r3, r1
 8004f58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f5c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8004f60:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      this->z = u_z.real;
 8004f64:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004f68:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004f6c:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8004f70:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004f74:	3308      	adds	r3, #8
 8004f76:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004f86:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8004f8a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004f8e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f92:	4413      	add	r3, r2
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f9e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004fa2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8004fa6:	4623      	mov	r3, r4
 8004fa8:	4303      	orrs	r3, r0
 8004faa:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fac:	462b      	mov	r3, r5
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fb2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004fb6:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004fba:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8004fbe:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004fc8:	4413      	add	r3, r2
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2200      	movs	r2, #0
 8004fd0:	673b      	str	r3, [r7, #112]	; 0x70
 8004fd2:	677a      	str	r2, [r7, #116]	; 0x74
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fe0:	464c      	mov	r4, r9
 8004fe2:	0223      	lsls	r3, r4, #8
 8004fe4:	4644      	mov	r4, r8
 8004fe6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fea:	4644      	mov	r4, r8
 8004fec:	0222      	lsls	r2, r4, #8
 8004fee:	ea40 0402 	orr.w	r4, r0, r2
 8004ff2:	66bc      	str	r4, [r7, #104]	; 0x68
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ff8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004ffc:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005000:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005004:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005008:	1c9a      	adds	r2, r3, #2
 800500a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800500e:	4413      	add	r3, r2
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2200      	movs	r2, #0
 8005016:	663b      	str	r3, [r7, #96]	; 0x60
 8005018:	667a      	str	r2, [r7, #100]	; 0x64
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005026:	464c      	mov	r4, r9
 8005028:	0423      	lsls	r3, r4, #16
 800502a:	4644      	mov	r4, r8
 800502c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005030:	4644      	mov	r4, r8
 8005032:	0422      	lsls	r2, r4, #16
 8005034:	ea40 0402 	orr.w	r4, r0, r2
 8005038:	65bc      	str	r4, [r7, #88]	; 0x58
 800503a:	430b      	orrs	r3, r1
 800503c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800503e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005042:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005046:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800504a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800504e:	1cda      	adds	r2, r3, #3
 8005050:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005054:	4413      	add	r3, r2
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2200      	movs	r2, #0
 800505c:	653b      	str	r3, [r7, #80]	; 0x50
 800505e:	657a      	str	r2, [r7, #84]	; 0x54
 8005060:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005064:	4623      	mov	r3, r4
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800506a:	4623      	mov	r3, r4
 800506c:	061b      	lsls	r3, r3, #24
 800506e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005070:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005074:	4623      	mov	r3, r4
 8005076:	4303      	orrs	r3, r0
 8005078:	643b      	str	r3, [r7, #64]	; 0x40
 800507a:	462b      	mov	r3, r5
 800507c:	430b      	orrs	r3, r1
 800507e:	647b      	str	r3, [r7, #68]	; 0x44
 8005080:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005084:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005088:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800508c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005090:	1d1a      	adds	r2, r3, #4
 8005092:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005096:	4413      	add	r3, r2
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2200      	movs	r2, #0
 800509e:	63bb      	str	r3, [r7, #56]	; 0x38
 80050a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80050ac:	0023      	movs	r3, r4
 80050ae:	2200      	movs	r2, #0
 80050b0:	ea40 0402 	orr.w	r4, r0, r2
 80050b4:	633c      	str	r4, [r7, #48]	; 0x30
 80050b6:	430b      	orrs	r3, r1
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ba:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80050be:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80050c2:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80050c6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80050ca:	1d5a      	adds	r2, r3, #5
 80050cc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80050d0:	4413      	add	r3, r2
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2200      	movs	r2, #0
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80050e6:	0223      	lsls	r3, r4, #8
 80050e8:	2200      	movs	r2, #0
 80050ea:	ea40 0402 	orr.w	r4, r0, r2
 80050ee:	623c      	str	r4, [r7, #32]
 80050f0:	430b      	orrs	r3, r1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80050f8:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80050fc:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005100:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005104:	3306      	adds	r3, #6
 8005106:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800510a:	4413      	add	r3, r2
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2200      	movs	r2, #0
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	61fa      	str	r2, [r7, #28]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	69bc      	ldr	r4, [r7, #24]
 8005120:	0423      	lsls	r3, r4, #16
 8005122:	2200      	movs	r2, #0
 8005124:	ea40 0402 	orr.w	r4, r0, r2
 8005128:	613c      	str	r4, [r7, #16]
 800512a:	430b      	orrs	r3, r1
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005132:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005136:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800513a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800513e:	3307      	adds	r3, #7
 8005140:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8005144:	4413      	add	r3, r2
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2200      	movs	r2, #0
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	60fa      	str	r2, [r7, #12]
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	68bc      	ldr	r4, [r7, #8]
 800515a:	0623      	lsls	r3, r4, #24
 800515c:	2200      	movs	r2, #0
 800515e:	ea40 0402 	orr.w	r4, r0, r2
 8005162:	603c      	str	r4, [r7, #0]
 8005164:	430b      	orrs	r3, r1
 8005166:	607b      	str	r3, [r7, #4]
 8005168:	e9d7 3400 	ldrd	r3, r4, [r7]
 800516c:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      this->w = u_w.real;
 8005170:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8005174:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8005178:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 800517c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005180:	3308      	adds	r3, #8
 8005182:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
     return offset;
 8005186:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
    }
 800518a:	4618      	mov	r0, r3
 800518c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8005190:	46bd      	mov	sp, r7
 8005192:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005196:	4770      	bx	lr

08005198 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	4b03      	ldr	r3, [pc, #12]	; (80051b0 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	0800d244 	.word	0x0800d244

080051b4 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	4b03      	ldr	r3, [pc, #12]	; (80051cc <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	0800d260 	.word	0x0800d260

080051d0 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fd fa56 	bl	800268c <_ZN3ros3MsgC1Ev>
 80051e0:	4a24      	ldr	r2, [pc, #144]	; (8005274 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
      header(),
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe ff9e 	bl	800412c <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3318      	adds	r3, #24
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff f92d 	bl	8004454 <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005200:	2308      	movs	r3, #8
 8005202:	e007      	b.n	8005214 <_ZN11sensor_msgs3ImuC1Ev+0x44>
 8005204:	f04f 0000 	mov.w	r0, #0
 8005208:	f04f 0100 	mov.w	r1, #0
 800520c:	e9c2 0100 	strd	r0, r1, [r2]
 8005210:	3208      	adds	r2, #8
 8005212:	3b01      	subs	r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	daf5      	bge.n	8005204 <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3388      	adds	r3, #136	; 0x88
 800521c:	4618      	mov	r0, r3
 800521e:	f7fe f9eb 	bl	80035f8 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8005228:	2308      	movs	r3, #8
 800522a:	e007      	b.n	800523c <_ZN11sensor_msgs3ImuC1Ev+0x6c>
 800522c:	f04f 0000 	mov.w	r0, #0
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	e9c2 0100 	strd	r0, r1, [r2]
 8005238:	3208      	adds	r2, #8
 800523a:	3b01      	subs	r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	daf5      	bge.n	800522c <_ZN11sensor_msgs3ImuC1Ev+0x5c>
      linear_acceleration(),
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	33f0      	adds	r3, #240	; 0xf0
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe f9d7 	bl	80035f8 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8005250:	2308      	movs	r3, #8
 8005252:	e007      	b.n	8005264 <_ZN11sensor_msgs3ImuC1Ev+0x94>
 8005254:	f04f 0000 	mov.w	r0, #0
 8005258:	f04f 0100 	mov.w	r1, #0
 800525c:	e9c2 0100 	strd	r0, r1, [r2]
 8005260:	3208      	adds	r2, #8
 8005262:	3b01      	subs	r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	daf5      	bge.n	8005254 <_ZN11sensor_msgs3ImuC1Ev+0x84>
    {
    }
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	0800d358 	.word	0x0800d358

08005278 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	1d18      	adds	r0, r3, #4
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	4413      	add	r3, r2
 8005290:	4619      	mov	r1, r3
 8005292:	f7fe ff6b 	bl	800416c <_ZNK8std_msgs6Header9serializeEPh>
 8005296:	4602      	mov	r2, r0
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	4413      	add	r3, r2
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f103 0018 	add.w	r0, r3, #24
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	4413      	add	r3, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	f7ff f900 	bl	80044b0 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80052b0:	4602      	mov	r2, r0
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	4413      	add	r3, r2
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80052b8:	2300      	movs	r3, #0
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80052bc:	e07d      	b.n	80053ba <_ZNK11sensor_msgs3Imu9serializeEPh+0x142>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	3308      	adds	r3, #8
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4413      	add	r3, r2
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 80052d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052d6:	6838      	ldr	r0, [r7, #0]
 80052d8:	4401      	add	r1, r0
 80052da:	b2d3      	uxtb	r3, r2
 80052dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 80052de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	0a02      	lsrs	r2, r0, #8
 80052ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80052f0:	0a0b      	lsrs	r3, r1, #8
 80052f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052f4:	3101      	adds	r1, #1
 80052f6:	6838      	ldr	r0, [r7, #0]
 80052f8:	4401      	add	r1, r0
 80052fa:	b2d3      	uxtb	r3, r2
 80052fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 80052fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	0c02      	lsrs	r2, r0, #16
 800530c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005310:	0c0b      	lsrs	r3, r1, #16
 8005312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005314:	3102      	adds	r1, #2
 8005316:	6838      	ldr	r0, [r7, #0]
 8005318:	4401      	add	r1, r0
 800531a:	b2d3      	uxtb	r3, r2
 800531c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 800531e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	0e02      	lsrs	r2, r0, #24
 800532c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005330:	0e0b      	lsrs	r3, r1, #24
 8005332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005334:	3103      	adds	r1, #3
 8005336:	6838      	ldr	r0, [r7, #0]
 8005338:	4401      	add	r1, r0
 800533a:	b2d3      	uxtb	r3, r2
 800533c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 800533e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	000a      	movs	r2, r1
 800534c:	2300      	movs	r3, #0
 800534e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005350:	3104      	adds	r1, #4
 8005352:	6838      	ldr	r0, [r7, #0]
 8005354:	4401      	add	r1, r0
 8005356:	b2d3      	uxtb	r3, r2
 8005358:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 800535a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	0a0a      	lsrs	r2, r1, #8
 8005368:	2300      	movs	r3, #0
 800536a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800536c:	3105      	adds	r1, #5
 800536e:	6838      	ldr	r0, [r7, #0]
 8005370:	4401      	add	r1, r0
 8005372:	b2d3      	uxtb	r3, r2
 8005374:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8005376:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	0c0a      	lsrs	r2, r1, #16
 8005384:	2300      	movs	r3, #0
 8005386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005388:	3106      	adds	r1, #6
 800538a:	6838      	ldr	r0, [r7, #0]
 800538c:	4401      	add	r1, r0
 800538e:	b2d3      	uxtb	r3, r2
 8005390:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 8005392:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	0e0a      	lsrs	r2, r1, #24
 80053a0:	2300      	movs	r3, #0
 80053a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a4:	3107      	adds	r1, #7
 80053a6:	6838      	ldr	r0, [r7, #0]
 80053a8:	4401      	add	r1, r0
 80053aa:	b2d3      	uxtb	r3, r2
 80053ac:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	3308      	adds	r3, #8
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	3301      	adds	r3, #1
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2b08      	cmp	r3, #8
 80053be:	f67f af7e 	bls.w	80052be <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f103 0088 	add.w	r0, r3, #136	; 0x88
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	4413      	add	r3, r2
 80053ce:	4619      	mov	r1, r3
 80053d0:	f7fe f93a 	bl	8003648 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	4413      	add	r3, r2
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80053dc:	2300      	movs	r3, #0
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
 80053e0:	e07d      	b.n	80054de <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	3315      	adds	r3, #21
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	4413      	add	r3, r2
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 80053f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053fa:	6838      	ldr	r0, [r7, #0]
 80053fc:	4401      	add	r1, r0
 80053fe:	b2d3      	uxtb	r3, r2
 8005400:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8005402:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	0a02      	lsrs	r2, r0, #8
 8005410:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005414:	0a0b      	lsrs	r3, r1, #8
 8005416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005418:	3101      	adds	r1, #1
 800541a:	6838      	ldr	r0, [r7, #0]
 800541c:	4401      	add	r1, r0
 800541e:	b2d3      	uxtb	r3, r2
 8005420:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8005422:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	0c02      	lsrs	r2, r0, #16
 8005430:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005434:	0c0b      	lsrs	r3, r1, #16
 8005436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005438:	3102      	adds	r1, #2
 800543a:	6838      	ldr	r0, [r7, #0]
 800543c:	4401      	add	r1, r0
 800543e:	b2d3      	uxtb	r3, r2
 8005440:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8005442:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	0e02      	lsrs	r2, r0, #24
 8005450:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005454:	0e0b      	lsrs	r3, r1, #24
 8005456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005458:	3103      	adds	r1, #3
 800545a:	6838      	ldr	r0, [r7, #0]
 800545c:	4401      	add	r1, r0
 800545e:	b2d3      	uxtb	r3, r2
 8005460:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 8005462:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	000a      	movs	r2, r1
 8005470:	2300      	movs	r3, #0
 8005472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005474:	3104      	adds	r1, #4
 8005476:	6838      	ldr	r0, [r7, #0]
 8005478:	4401      	add	r1, r0
 800547a:	b2d3      	uxtb	r3, r2
 800547c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 800547e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	0a0a      	lsrs	r2, r1, #8
 800548c:	2300      	movs	r3, #0
 800548e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005490:	3105      	adds	r1, #5
 8005492:	6838      	ldr	r0, [r7, #0]
 8005494:	4401      	add	r1, r0
 8005496:	b2d3      	uxtb	r3, r2
 8005498:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 800549a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	0c0a      	lsrs	r2, r1, #16
 80054a8:	2300      	movs	r3, #0
 80054aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054ac:	3106      	adds	r1, #6
 80054ae:	6838      	ldr	r0, [r7, #0]
 80054b0:	4401      	add	r1, r0
 80054b2:	b2d3      	uxtb	r3, r2
 80054b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 80054b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	0e0a      	lsrs	r2, r1, #24
 80054c4:	2300      	movs	r3, #0
 80054c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054c8:	3107      	adds	r1, #7
 80054ca:	6838      	ldr	r0, [r7, #0]
 80054cc:	4401      	add	r1, r0
 80054ce:	b2d3      	uxtb	r3, r2
 80054d0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	3308      	adds	r3, #8
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	3301      	adds	r3, #1
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	f67f af7e 	bls.w	80053e2 <_ZNK11sensor_msgs3Imu9serializeEPh+0x16a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	4413      	add	r3, r2
 80054f2:	4619      	mov	r1, r3
 80054f4:	f7fe f8a8 	bl	8003648 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	4413      	add	r3, r2
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8005500:	2300      	movs	r3, #0
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	e07d      	b.n	8005602 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38a>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	3322      	adds	r3, #34	; 0x22
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8005518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800551c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800551e:	6838      	ldr	r0, [r7, #0]
 8005520:	4401      	add	r1, r0
 8005522:	b2d3      	uxtb	r3, r2
 8005524:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8005526:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	0a02      	lsrs	r2, r0, #8
 8005534:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005538:	0a0b      	lsrs	r3, r1, #8
 800553a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800553c:	3101      	adds	r1, #1
 800553e:	6838      	ldr	r0, [r7, #0]
 8005540:	4401      	add	r1, r0
 8005542:	b2d3      	uxtb	r3, r2
 8005544:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8005546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	0c02      	lsrs	r2, r0, #16
 8005554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005558:	0c0b      	lsrs	r3, r1, #16
 800555a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800555c:	3102      	adds	r1, #2
 800555e:	6838      	ldr	r0, [r7, #0]
 8005560:	4401      	add	r1, r0
 8005562:	b2d3      	uxtb	r3, r2
 8005564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8005566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	0e02      	lsrs	r2, r0, #24
 8005574:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005578:	0e0b      	lsrs	r3, r1, #24
 800557a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800557c:	3103      	adds	r1, #3
 800557e:	6838      	ldr	r0, [r7, #0]
 8005580:	4401      	add	r1, r0
 8005582:	b2d3      	uxtb	r3, r2
 8005584:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8005586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	000a      	movs	r2, r1
 8005594:	2300      	movs	r3, #0
 8005596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005598:	3104      	adds	r1, #4
 800559a:	6838      	ldr	r0, [r7, #0]
 800559c:	4401      	add	r1, r0
 800559e:	b2d3      	uxtb	r3, r2
 80055a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 80055a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	0a0a      	lsrs	r2, r1, #8
 80055b0:	2300      	movs	r3, #0
 80055b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055b4:	3105      	adds	r1, #5
 80055b6:	6838      	ldr	r0, [r7, #0]
 80055b8:	4401      	add	r1, r0
 80055ba:	b2d3      	uxtb	r3, r2
 80055bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 80055be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	0c0a      	lsrs	r2, r1, #16
 80055cc:	2300      	movs	r3, #0
 80055ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055d0:	3106      	adds	r1, #6
 80055d2:	6838      	ldr	r0, [r7, #0]
 80055d4:	4401      	add	r1, r0
 80055d6:	b2d3      	uxtb	r3, r2
 80055d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 80055da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	0e0a      	lsrs	r2, r1, #24
 80055e8:	2300      	movs	r3, #0
 80055ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ec:	3107      	adds	r1, #7
 80055ee:	6838      	ldr	r0, [r7, #0]
 80055f0:	4401      	add	r1, r0
 80055f2:	b2d3      	uxtb	r3, r2
 80055f4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	3308      	adds	r3, #8
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	3301      	adds	r3, #1
 8005600:	623b      	str	r3, [r7, #32]
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	2b08      	cmp	r3, #8
 8005606:	f67f af7e 	bls.w	8005506 <_ZNK11sensor_msgs3Imu9serializeEPh+0x28e>
      }
      return offset;
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800560c:	4618      	mov	r0, r3
 800560e:	3730      	adds	r7, #48	; 0x30
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005618:	b0ed      	sub	sp, #436	; 0x1b4
 800561a:	af00      	add	r7, sp, #0
 800561c:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8005620:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      offset += this->header.deserialize(inbuffer + offset);
 800562a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800562e:	1d18      	adds	r0, r3, #4
 8005630:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005634:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005638:	4413      	add	r3, r2
 800563a:	4619      	mov	r1, r3
 800563c:	f7fe fe2e 	bl	800429c <_ZN8std_msgs6Header11deserializeEPh>
 8005640:	4602      	mov	r2, r0
 8005642:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005646:	4413      	add	r3, r2
 8005648:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      offset += this->orientation.deserialize(inbuffer + offset);
 800564c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005650:	f103 0018 	add.w	r0, r3, #24
 8005654:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005658:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800565c:	4413      	add	r3, r2
 800565e:	4619      	mov	r1, r3
 8005660:	f7ff f910 	bl	8004884 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8005664:	4602      	mov	r2, r0
 8005666:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800566a:	4413      	add	r3, r2
 800566c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005670:	2300      	movs	r3, #0
 8005672:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005676:	e123      	b.n	80058c0 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2ac>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005684:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005688:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800568c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005690:	4413      	add	r3, r2
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2200      	movs	r2, #0
 8005698:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800569c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80056a0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80056a4:	4303      	orrs	r3, r0
 80056a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80056aa:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80056ae:	430b      	orrs	r3, r1
 80056b0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80056b4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80056b8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80056bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80056c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80056ca:	4413      	add	r3, r2
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2200      	movs	r2, #0
 80056d2:	469a      	mov	sl, r3
 80056d4:	4693      	mov	fp, r2
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80056e2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80056e6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80056ea:	ea40 0602 	orr.w	r6, r0, r2
 80056ee:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 80056f2:	430b      	orrs	r3, r1
 80056f4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80056f8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80056fc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005700:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005704:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800570e:	4413      	add	r3, r2
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2200      	movs	r2, #0
 8005716:	4698      	mov	r8, r3
 8005718:	4691      	mov	r9, r2
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8005726:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800572a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800572e:	ea40 0602 	orr.w	r6, r0, r2
 8005732:	f8c7 6158 	str.w	r6, [r7, #344]	; 0x158
 8005736:	430b      	orrs	r3, r1
 8005738:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800573c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8005740:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005744:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005748:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800574c:	1cda      	adds	r2, r3, #3
 800574e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005752:	4413      	add	r3, r2
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2200      	movs	r2, #0
 800575a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800575e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8005762:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8005766:	0a1d      	lsrs	r5, r3, #8
 8005768:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800576c:	061c      	lsls	r4, r3, #24
 800576e:	ea40 0304 	orr.w	r3, r0, r4
 8005772:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005776:	ea41 0305 	orr.w	r3, r1, r5
 800577a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800577e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8005782:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005786:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800578a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800578e:	1d1a      	adds	r2, r3, #4
 8005790:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005794:	4413      	add	r3, r2
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2200      	movs	r2, #0
 800579c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80057a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 80057b0:	0033      	movs	r3, r6
 80057b2:	2200      	movs	r2, #0
 80057b4:	ea40 0602 	orr.w	r6, r0, r2
 80057b8:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 80057bc:	430b      	orrs	r3, r1
 80057be:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80057c2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80057c6:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80057ca:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80057ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80057d2:	1d5a      	adds	r2, r3, #5
 80057d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80057d8:	4413      	add	r3, r2
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80057e4:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	f8d7 6138 	ldr.w	r6, [r7, #312]	; 0x138
 80057f4:	0233      	lsls	r3, r6, #8
 80057f6:	2200      	movs	r2, #0
 80057f8:	ea40 0602 	orr.w	r6, r0, r2
 80057fc:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 8005800:	430b      	orrs	r3, r1
 8005802:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005806:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800580a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800580e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005812:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005816:	1d9a      	adds	r2, r3, #6
 8005818:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800581c:	4413      	add	r3, r2
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2200      	movs	r2, #0
 8005824:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005828:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	f8d7 6128 	ldr.w	r6, [r7, #296]	; 0x128
 8005838:	0433      	lsls	r3, r6, #16
 800583a:	2200      	movs	r2, #0
 800583c:	ea40 0602 	orr.w	r6, r0, r2
 8005840:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 8005844:	430b      	orrs	r3, r1
 8005846:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800584a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800584e:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005852:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005856:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800585a:	1dda      	adds	r2, r3, #7
 800585c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005860:	4413      	add	r3, r2
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2200      	movs	r2, #0
 8005868:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800586c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	f8d7 6118 	ldr.w	r6, [r7, #280]	; 0x118
 800587c:	0633      	lsls	r3, r6, #24
 800587e:	2200      	movs	r2, #0
 8005880:	ea40 0602 	orr.w	r6, r0, r2
 8005884:	f8c7 6110 	str.w	r6, [r7, #272]	; 0x110
 8005888:	430b      	orrs	r3, r1
 800588a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800588e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005892:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8005896:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800589a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800589e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80058a2:	3308      	adds	r3, #8
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	4413      	add	r3, r2
 80058a8:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 80058ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80058b0:	3308      	adds	r3, #8
 80058b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 80058b6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80058ba:	3301      	adds	r3, #1
 80058bc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80058c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	f67f aed7 	bls.w	8005678 <_ZN11sensor_msgs3Imu11deserializeEPh+0x64>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 80058ca:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80058ce:	f103 0088 	add.w	r0, r3, #136	; 0x88
 80058d2:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80058d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80058da:	4413      	add	r3, r2
 80058dc:	4619      	mov	r1, r3
 80058de:	f7fe f826 	bl	800392e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80058e2:	4602      	mov	r2, r0
 80058e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80058e8:	4413      	add	r3, r2
 80058ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 80058ee:	2300      	movs	r3, #0
 80058f0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80058f4:	e133      	b.n	8005b5e <_ZN11sensor_msgs3Imu11deserializeEPh+0x54a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005902:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005906:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800590a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2200      	movs	r2, #0
 8005916:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800591a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800591e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005922:	4623      	mov	r3, r4
 8005924:	4303      	orrs	r3, r0
 8005926:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800592a:	462b      	mov	r3, r5
 800592c:	430b      	orrs	r3, r1
 800592e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005932:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8005936:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800593a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800593e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005948:	4413      	add	r3, r2
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005954:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	; 0xf8
 8005964:	4634      	mov	r4, r6
 8005966:	0223      	lsls	r3, r4, #8
 8005968:	462c      	mov	r4, r5
 800596a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800596e:	462c      	mov	r4, r5
 8005970:	0222      	lsls	r2, r4, #8
 8005972:	ea40 0402 	orr.w	r4, r0, r2
 8005976:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800597a:	430b      	orrs	r3, r1
 800597c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005980:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8005984:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005988:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800598c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005990:	1c9a      	adds	r2, r3, #2
 8005992:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005996:	4413      	add	r3, r2
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2200      	movs	r2, #0
 800599e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	; 0xe8
 80059b2:	4634      	mov	r4, r6
 80059b4:	0423      	lsls	r3, r4, #16
 80059b6:	462c      	mov	r4, r5
 80059b8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80059bc:	462c      	mov	r4, r5
 80059be:	0422      	lsls	r2, r4, #16
 80059c0:	ea40 0402 	orr.w	r4, r0, r2
 80059c4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80059c8:	430b      	orrs	r3, r1
 80059ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ce:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80059d2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80059d6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80059da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80059de:	1cda      	adds	r2, r3, #3
 80059e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80059e4:	4413      	add	r3, r2
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059f0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059f4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80059f8:	4623      	mov	r3, r4
 80059fa:	0a1b      	lsrs	r3, r3, #8
 80059fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a00:	4623      	mov	r3, r4
 8005a02:	061b      	lsls	r3, r3, #24
 8005a04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a08:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	4303      	orrs	r3, r0
 8005a10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a14:	462b      	mov	r3, r5
 8005a16:	430b      	orrs	r3, r1
 8005a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a1c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005a20:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005a24:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005a28:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005a2c:	1d1a      	adds	r2, r3, #4
 8005a2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005a32:	4413      	add	r3, r2
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a3e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8005a4e:	0023      	movs	r3, r4
 8005a50:	2200      	movs	r2, #0
 8005a52:	ea40 0402 	orr.w	r4, r0, r2
 8005a56:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a60:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005a64:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005a68:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005a6c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005a70:	1d5a      	adds	r2, r3, #5
 8005a72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005a76:	4413      	add	r3, r2
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a82:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8005a92:	0223      	lsls	r3, r4, #8
 8005a94:	2200      	movs	r2, #0
 8005a96:	ea40 0402 	orr.w	r4, r0, r2
 8005a9a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aa4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005aa8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005aac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005ab0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005ab4:	1d9a      	adds	r2, r3, #6
 8005ab6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005aba:	4413      	add	r3, r2
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005ad6:	0423      	lsls	r3, r4, #16
 8005ad8:	2200      	movs	r2, #0
 8005ada:	ea40 0402 	orr.w	r4, r0, r2
 8005ade:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ae8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005aec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005af0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005af4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005af8:	1dda      	adds	r2, r3, #7
 8005afa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005afe:	4413      	add	r3, r2
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8005b1a:	0623      	lsls	r3, r4, #24
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	ea40 0402 	orr.w	r4, r0, r2
 8005b22:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8005b26:	430b      	orrs	r3, r1
 8005b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b2c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005b30:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8005b34:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005b38:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8005b3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005b40:	3315      	adds	r3, #21
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4413      	add	r3, r2
 8005b46:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8005b4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005b4e:	3308      	adds	r3, #8
 8005b50:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005b54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005b5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	f67f aec7 	bls.w	80058f6 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2e2>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8005b68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005b6c:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8005b70:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005b74:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005b78:	4413      	add	r3, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	f7fd fed7 	bl	800392e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005b80:	4602      	mov	r2, r0
 8005b82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005b86:	4413      	add	r3, r2
 8005b88:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005b92:	e10f      	b.n	8005db4 <_ZN11sensor_msgs3Imu11deserializeEPh+0x7a0>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005ba0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005ba4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005ba8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005bac:	4413      	add	r3, r2
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bb8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005bbc:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	4303      	orrs	r3, r0
 8005bc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bc6:	462b      	mov	r3, r5
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bcc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005bd0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005bd4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005bd8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005be2:	4413      	add	r3, r2
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2200      	movs	r2, #0
 8005bea:	673b      	str	r3, [r7, #112]	; 0x70
 8005bec:	677a      	str	r2, [r7, #116]	; 0x74
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	; 0x70
 8005bfa:	4634      	mov	r4, r6
 8005bfc:	0223      	lsls	r3, r4, #8
 8005bfe:	462c      	mov	r4, r5
 8005c00:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c04:	462c      	mov	r4, r5
 8005c06:	0222      	lsls	r2, r4, #8
 8005c08:	ea40 0402 	orr.w	r4, r0, r2
 8005c0c:	66bc      	str	r4, [r7, #104]	; 0x68
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c12:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005c16:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005c1a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005c1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005c22:	1c9a      	adds	r2, r3, #2
 8005c24:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c28:	4413      	add	r3, r2
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2200      	movs	r2, #0
 8005c30:	663b      	str	r3, [r7, #96]	; 0x60
 8005c32:	667a      	str	r2, [r7, #100]	; 0x64
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	; 0x60
 8005c40:	4634      	mov	r4, r6
 8005c42:	0423      	lsls	r3, r4, #16
 8005c44:	462c      	mov	r4, r5
 8005c46:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005c4a:	462c      	mov	r4, r5
 8005c4c:	0422      	lsls	r2, r4, #16
 8005c4e:	ea40 0402 	orr.w	r4, r0, r2
 8005c52:	65bc      	str	r4, [r7, #88]	; 0x58
 8005c54:	430b      	orrs	r3, r1
 8005c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c58:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005c5c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005c60:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005c64:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005c68:	1cda      	adds	r2, r3, #3
 8005c6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c6e:	4413      	add	r3, r2
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2200      	movs	r2, #0
 8005c76:	653b      	str	r3, [r7, #80]	; 0x50
 8005c78:	657a      	str	r2, [r7, #84]	; 0x54
 8005c7a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005c7e:	4623      	mov	r3, r4
 8005c80:	0a1b      	lsrs	r3, r3, #8
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c84:	4623      	mov	r3, r4
 8005c86:	061b      	lsls	r3, r3, #24
 8005c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c8a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005c8e:	4623      	mov	r3, r4
 8005c90:	4303      	orrs	r3, r0
 8005c92:	643b      	str	r3, [r7, #64]	; 0x40
 8005c94:	462b      	mov	r3, r5
 8005c96:	430b      	orrs	r3, r1
 8005c98:	647b      	str	r3, [r7, #68]	; 0x44
 8005c9a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005c9e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005ca2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005ca6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005caa:	1d1a      	adds	r2, r3, #4
 8005cac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005cb0:	4413      	add	r3, r2
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cba:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8005cc6:	0023      	movs	r3, r4
 8005cc8:	2200      	movs	r2, #0
 8005cca:	ea40 0402 	orr.w	r4, r0, r2
 8005cce:	633c      	str	r4, [r7, #48]	; 0x30
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005cd8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005cdc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005ce0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005ce4:	1d5a      	adds	r2, r3, #5
 8005ce6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005cea:	4413      	add	r3, r2
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	f04f 0300 	mov.w	r3, #0
 8005cfe:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005d00:	0223      	lsls	r3, r4, #8
 8005d02:	2200      	movs	r2, #0
 8005d04:	ea40 0402 	orr.w	r4, r0, r2
 8005d08:	623c      	str	r4, [r7, #32]
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005d12:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005d16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005d1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005d1e:	1d9a      	adds	r2, r3, #6
 8005d20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d24:	4413      	add	r3, r2
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	61fa      	str	r2, [r7, #28]
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	69bc      	ldr	r4, [r7, #24]
 8005d3a:	0423      	lsls	r3, r4, #16
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	ea40 0402 	orr.w	r4, r0, r2
 8005d42:	613c      	str	r4, [r7, #16]
 8005d44:	430b      	orrs	r3, r1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005d4c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005d50:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005d54:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005d58:	1dda      	adds	r2, r3, #7
 8005d5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d5e:	4413      	add	r3, r2
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2200      	movs	r2, #0
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	60fa      	str	r2, [r7, #12]
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	68bc      	ldr	r4, [r7, #8]
 8005d74:	0623      	lsls	r3, r4, #24
 8005d76:	2200      	movs	r2, #0
 8005d78:	ea40 0402 	orr.w	r4, r0, r2
 8005d7c:	603c      	str	r4, [r7, #0]
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005d86:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8005d8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005d8e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8005d92:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005d96:	3322      	adds	r3, #34	; 0x22
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8005da0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005da4:	3308      	adds	r3, #8
 8005da6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005daa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005dae:	3301      	adds	r3, #1
 8005db0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005db4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	f67f aeeb 	bls.w	8005b94 <_ZN11sensor_msgs3Imu11deserializeEPh+0x580>
      }
     return offset;
 8005dbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
    }
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005dd0 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	4b03      	ldr	r3, [pc, #12]	; (8005de8 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	0800d284 	.word	0x0800d284

08005dec <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	4b03      	ldr	r3, [pc, #12]	; (8005e04 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	0800d294 	.word	0x0800d294

08005e08 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	0800d3e8 	.word	0x0800d3e8

08005e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff ffe8 	bl	8005e08 <_ZN3ros15NodeHandleBase_C1Ev>
 8005e38:	4a36      	ldr	r2, [pc, #216]	; (8005f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3304      	adds	r3, #4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fd faac 	bl	80033a0 <_ZN13STM32HardwareC1Ev>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f006 ffc8 	bl	800ce0a <memset>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f006 ffbf 	bl	800ce0a <memset>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8005e92:	2264      	movs	r2, #100	; 0x64
 8005e94:	2100      	movs	r1, #0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f006 ffb7 	bl	800ce0a <memset>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8005ea2:	2264      	movs	r2, #100	; 0x64
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f006 ffaf 	bl	800ce0a <memset>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fc ff36 	bl	8002d74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	0800d344 	.word	0x0800d344

08005f18 <_Z23subscriber_cmd_callbackRKN13geometry_msgs5TwistE>:
ros::Publisher vel_pub("vel_pub",&vel_msg);
ros::Publisher imu_pub("imu", &imu);

//subscriber

void subscriber_cmd_callback(const geometry_msgs::Twist& data){
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	vel_data_rx.v=data.linear.x;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f7fa fdc9 	bl	8000ac0 <__aeabi_d2f>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <_Z23subscriber_cmd_callbackRKN13geometry_msgs5TwistE+0x38>)
 8005f32:	6013      	str	r3, [r2, #0]
	vel_data_rx.w=data.angular.z;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f7fa fdbf 	bl	8000ac0 <__aeabi_d2f>
 8005f42:	4603      	mov	r3, r0
 8005f44:	4a02      	ldr	r2, [pc, #8]	; (8005f50 <_Z23subscriber_cmd_callbackRKN13geometry_msgs5TwistE+0x38>)
 8005f46:	6053      	str	r3, [r2, #4]
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000444 	.word	0x20000444

08005f54 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist>vel_sub("cmd_vel",&subscriber_cmd_callback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART6){
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a06      	ldr	r2, [pc, #24]	; (8005f7c <HAL_UART_TxCpltCallback+0x28>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d106      	bne.n	8005f74 <HAL_UART_TxCpltCallback+0x20>
		nh.getHardware()->flush();
 8005f66:	4806      	ldr	r0, [pc, #24]	; (8005f80 <HAL_UART_TxCpltCallback+0x2c>)
 8005f68:	f000 f8f6 	bl	8006158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fd fa7c 	bl	800346c <_ZN13STM32Hardware5flushEv>
	}
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40011400 	.word	0x40011400
 8005f80:	20000464 	.word	0x20000464

08005f84 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART6){
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a06      	ldr	r2, [pc, #24]	; (8005fac <HAL_UART_RxCpltCallback+0x28>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d106      	bne.n	8005fa4 <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 8005f96:	4806      	ldr	r0, [pc, #24]	; (8005fb0 <HAL_UART_RxCpltCallback+0x2c>)
 8005f98:	f000 f8de 	bl	8006158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fd fa25 	bl	80033ee <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40011400 	.word	0x40011400
 8005fb0:	20000464 	.word	0x20000464

08005fb4 <setup>:

void setup()
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
	nh.initNode();
 8005fb8:	4808      	ldr	r0, [pc, #32]	; (8005fdc <setup+0x28>)
 8005fba:	f000 f8d9 	bl	8006170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(vel_sub);
 8005fbe:	4908      	ldr	r1, [pc, #32]	; (8005fe0 <setup+0x2c>)
 8005fc0:	4806      	ldr	r0, [pc, #24]	; (8005fdc <setup+0x28>)
 8005fc2:	f000 f8f2 	bl	80061aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.advertise(vel_pub);
 8005fc6:	4907      	ldr	r1, [pc, #28]	; (8005fe4 <setup+0x30>)
 8005fc8:	4804      	ldr	r0, [pc, #16]	; (8005fdc <setup+0x28>)
 8005fca:	f000 f919 	bl	8006200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(imu_pub);
 8005fce:	4906      	ldr	r1, [pc, #24]	; (8005fe8 <setup+0x34>)
 8005fd0:	4802      	ldr	r0, [pc, #8]	; (8005fdc <setup+0x28>)
 8005fd2:	f000 f915 	bl	8006200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

}
 8005fd6:	bf00      	nop
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000464 	.word	0x20000464
 8005fe0:	20000f68 	.word	0x20000f68
 8005fe4:	20000f40 	.word	0x20000f40
 8005fe8:	20000f54 	.word	0x20000f54

08005fec <loop>:
void loop()
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
	//publish message
	vel_msg.linear.x=vel_data_tx.v;
 8005ff0:	4b15      	ldr	r3, [pc, #84]	; (8006048 <loop+0x5c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fa fa5b 	bl	80004b0 <__aeabi_f2d>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4913      	ldr	r1, [pc, #76]	; (800604c <loop+0x60>)
 8006000:	e9c1 2304 	strd	r2, r3, [r1, #16]
	vel_msg.angular.z=vel_data_tx.w;
 8006004:	4b10      	ldr	r3, [pc, #64]	; (8006048 <loop+0x5c>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	f7fa fa51 	bl	80004b0 <__aeabi_f2d>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	490e      	ldr	r1, [pc, #56]	; (800604c <loop+0x60>)
 8006014:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	//imu.orientation.x=imu_data_tx.x;
	//imu.orientation.y=imu_data_tx.y;
	imu.orientation.z=imu_data_tx.z;
 8006018:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <loop+0x64>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4618      	mov	r0, r3
 800601e:	f7fa fa47 	bl	80004b0 <__aeabi_f2d>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	490b      	ldr	r1, [pc, #44]	; (8006054 <loop+0x68>)
 8006028:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	imu_pub.publish(&imu);
 800602c:	4909      	ldr	r1, [pc, #36]	; (8006054 <loop+0x68>)
 800602e:	480a      	ldr	r0, [pc, #40]	; (8006058 <loop+0x6c>)
 8006030:	f7fd f983 	bl	800333a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	vel_pub.publish(&vel_msg);
 8006034:	4905      	ldr	r1, [pc, #20]	; (800604c <loop+0x60>)
 8006036:	4809      	ldr	r0, [pc, #36]	; (800605c <loop+0x70>)
 8006038:	f7fd f97f 	bl	800333a <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 800603c:	4808      	ldr	r0, [pc, #32]	; (8006060 <loop+0x74>)
 800603e:	f000 f90f 	bl	8006260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 8006042:	bf00      	nop
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	2000044c 	.word	0x2000044c
 800604c:	20000ef8 	.word	0x20000ef8
 8006050:	20000458 	.word	0x20000458
 8006054:	20000da0 	.word	0x20000da0
 8006058:	20000f54 	.word	0x20000f54
 800605c:	20000f40 	.word	0x20000f40
 8006060:	20000464 	.word	0x20000464

08006064 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	e00c      	b.n	800608e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	fa22 f103 	lsr.w	r1, r2, r3
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	b2ca      	uxtb	r2, r1
 8006086:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3301      	adds	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d9ef      	bls.n	8006074 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	e010      	b.n	80060da <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	440a      	add	r2, r1
 80060c2:	7812      	ldrb	r2, [r2, #0]
 80060c4:	4611      	mov	r1, r2
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	00d2      	lsls	r2, r2, #3
 80060ca:	fa01 f202 	lsl.w	r2, r1, r2
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d9eb      	bls.n	80060b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	4a04      	ldr	r2, [pc, #16]	; (800610c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	0800d3d0 	.word	0x0800d3d0

08006110 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff ffe5 	bl	80060f0 <_ZN3ros11Subscriber_C1Ev>
 8006126:	4a0b      	ldr	r2, [pc, #44]	; (8006154 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3310      	adds	r3, #16
 8006130:	4618      	mov	r0, r3
 8006132:	f7fd ff77 	bl	8004024 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	609a      	str	r2, [r3, #8]
  };
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	0800d32c 	.word	0x0800d32c

08006158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3304      	adds	r3, #4
  }
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	4618      	mov	r0, r3
 800617e:	f7fd f92b 	bl	80033d8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	e018      	b.n	80061ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80061c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10d      	bne.n	80061e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	f202 2222 	addw	r2, r2, #546	; 0x222
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	605a      	str	r2, [r3, #4]
        return true;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e006      	b.n	80061f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b18      	cmp	r3, #24
 80061f0:	dde3      	ble.n	80061ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80061f2:	2300      	movs	r3, #0
  }
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e01d      	b.n	800624c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d111      	bne.n	8006246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	60da      	str	r2, [r3, #12]
        return true;
 8006242:	2301      	movs	r3, #1
 8006244:	e006      	b.n	8006254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b18      	cmp	r3, #24
 8006250:	ddde      	ble.n	8006210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8006252:	2300      	movs	r3, #0
  }
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f7fd f9b7 	bl	80035e0 <_ZN13STM32Hardware4timeEv>
 8006272:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8006282:	4293      	cmp	r3, r2
 8006284:	d903      	bls.n	800628e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d903      	bls.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d014      	beq.n	80062e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fd f990 	bl	80035e0 <_ZN13STM32Hardware4timeEv>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1ad2      	subs	r2, r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bf8c      	ite	hi
 80062d0:	2301      	movhi	r3, #1
 80062d2:	2300      	movls	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80062da:	f06f 0301 	mvn.w	r3, #1
 80062de:	e194      	b.n	800660a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fd f893 	bl	8003410 <_ZN13STM32Hardware4readEv>
 80062ea:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f2c0 8174 	blt.w	80065dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	441a      	add	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800630a:	2b07      	cmp	r3, #7
 800630c:	d11e      	bne.n	800634c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8006314:	1c59      	adds	r1, r3, #1
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	b2d1      	uxtb	r1, r2
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4413      	add	r3, r2
 8006324:	460a      	mov	r2, r1
 8006326:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8006330:	1e5a      	subs	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1b4      	bne.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2208      	movs	r2, #8
 8006346:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800634a:	e7af      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006352:	2b00      	cmp	r3, #0
 8006354:	d128      	bne.n	80063a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2bff      	cmp	r3, #255	; 0xff
 800635a:	d10d      	bne.n	8006378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f103 0214 	add.w	r2, r3, #20
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8006376:	e799      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	4618      	mov	r0, r3
 800637e:	f7fd f92f 	bl	80035e0 <_ZN13STM32Hardware4timeEv>
 8006382:	4602      	mov	r2, r0
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	f241 3288 	movw	r2, #5000	; 0x1388
 800638c:	4293      	cmp	r3, r2
 800638e:	bf8c      	ite	hi
 8006390:	2301      	movhi	r3, #1
 8006392:	2300      	movls	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d088      	beq.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80063a2:	f06f 0301 	mvn.w	r3, #1
 80063a6:	e130      	b.n	800660a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d118      	bne.n	80063e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2bfe      	cmp	r3, #254	; 0xfe
 80063b6:	d107      	bne.n	80063c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80063c6:	e771      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f47f af68 	bne.w	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f918 	bl	8006612 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80063e2:	e763      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d113      	bne.n	8006416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8006414:	e74a      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800641c:	2b03      	cmp	r3, #3
 800641e:	d110      	bne.n	8006442 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	441a      	add	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006440:	e734      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006448:	2b04      	cmp	r3, #4
 800644a:	d116      	bne.n	800647a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8006452:	425a      	negs	r2, r3
 8006454:	b2db      	uxtb	r3, r3
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	bf58      	it	pl
 800645a:	4253      	negpl	r3, r2
 800645c:	2bff      	cmp	r3, #255	; 0xff
 800645e:	d107      	bne.n	8006470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800646e:	e71d      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006478:	e718      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006480:	2b05      	cmp	r3, #5
 8006482:	d10f      	bne.n	80064a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80064a2:	e703      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80064aa:	2b06      	cmp	r3, #6
 80064ac:	d117      	bne.n	80064de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	441a      	add	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2207      	movs	r2, #7
 80064c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f47f aeec 	bne.w	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2208      	movs	r2, #8
 80064d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80064dc:	e6e6      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	f47f aee1 	bne.w	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80064f8:	425a      	negs	r2, r3
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	bf58      	it	pl
 8006500:	4253      	negpl	r3, r2
 8006502:	2bff      	cmp	r3, #255	; 0xff
 8006504:	f47f aed2 	bne.w	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d110      	bne.n	8006534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f87d 	bl	8006612 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f898 	bl	800664e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800652e:	f04f 33ff 	mov.w	r3, #4294967295
 8006532:	e06a      	b.n	800660a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800653a:	2b0a      	cmp	r3, #10
 800653c:	d107      	bne.n	800654e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f960 	bl	800680c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800654c:	e6ae      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006554:	2b06      	cmp	r3, #6
 8006556:	d10e      	bne.n	8006576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f7fc fd43 	bl	8002ff2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8006574:	e69a      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800657c:	2b0b      	cmp	r3, #11
 800657e:	d104      	bne.n	800658a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8006588:	e690      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006590:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f202 2222 	addw	r2, r2, #546	; 0x222
 800659a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f43f ae84 	beq.w	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80065aa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80065b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80065be:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80065c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80065d6:	4611      	mov	r1, r2
 80065d8:	4798      	blx	r3
    while (true)
 80065da:	e667      	b.n	80062ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80065dc:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00f      	beq.n	8006608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d906      	bls.n	8006608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f809 	bl	8006612 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8006608:	2300      	movs	r3, #0
  }
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8006612:	b580      	push	{r7, lr}
 8006614:	b086      	sub	sp, #24
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800661a:	f107 030c 	add.w	r3, r7, #12
 800661e:	4618      	mov	r0, r3
 8006620:	f7fc f844 	bl	80026ac <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f107 020c 	add.w	r2, r7, #12
 800662e:	210a      	movs	r1, #10
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
    rt_time = hardware_.time();
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	4618      	mov	r0, r3
 800663a:	f7fc ffd1 	bl	80035e0 <_ZN13STM32Hardware4timeEv>
 800663e:	4602      	mov	r2, r0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8006646:	bf00      	nop
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800664e:	b590      	push	{r4, r7, lr}
 8006650:	b08b      	sub	sp, #44	; 0x2c
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8006656:	f107 030c 	add.w	r3, r7, #12
 800665a:	4618      	mov	r0, r3
 800665c:	f7fc f916 	bl	800288c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8006660:	2300      	movs	r3, #0
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
 8006664:	e062      	b.n	800672c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d056      	beq.n	8006726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	b29b      	uxth	r3, r3
 800668a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	6859      	ldr	r1, [r3, #4]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4608      	mov	r0, r1
 80066c6:	4798      	blx	r3
 80066c8:	4603      	mov	r3, r0
 80066ca:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	6859      	ldr	r1, [r3, #4]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	330c      	adds	r3, #12
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4608      	mov	r0, r1
 80066f4:	4798      	blx	r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80066fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066fe:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681c      	ldr	r4, [r3, #0]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4618      	mov	r0, r3
 8006716:	f7fc fe24 	bl	8003362 <_ZN3ros9Publisher15getEndpointTypeEv>
 800671a:	4601      	mov	r1, r0
 800671c:	f107 030c 	add.w	r3, r7, #12
 8006720:	461a      	mov	r2, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	3301      	adds	r3, #1
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	2b18      	cmp	r3, #24
 8006730:	dd99      	ble.n	8006666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8006732:	2300      	movs	r3, #0
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
 8006736:	e05e      	b.n	80067f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d053      	beq.n	80067f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	b29b      	uxth	r3, r3
 8006758:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006772:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800677e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3308      	adds	r3, #8
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4608      	mov	r0, r1
 800678a:	4798      	blx	r3
 800678c:	4603      	mov	r3, r0
 800678e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006794:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80067a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4608      	mov	r0, r1
 80067b0:	4798      	blx	r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80067b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ba:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681c      	ldr	r4, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80067ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80067d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3304      	adds	r3, #4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4608      	mov	r0, r1
 80067e2:	4798      	blx	r3
 80067e4:	4601      	mov	r1, r0
 80067e6:	f107 030c 	add.w	r3, r7, #12
 80067ea:	461a      	mov	r2, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	3301      	adds	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	2b18      	cmp	r3, #24
 80067fa:	dd9d      	ble.n	8006738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8006804:	bf00      	nop
 8006806:	372c      	adds	r7, #44	; 0x2c
 8006808:	46bd      	mov	sp, r7
 800680a:	bd90      	pop	{r4, r7, pc}

0800680c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8006816:	f107 0308 	add.w	r3, r7, #8
 800681a:	4618      	mov	r0, r3
 800681c:	f7fb ff46 	bl	80026ac <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	4618      	mov	r0, r3
 8006826:	f7fc fedb 	bl	80035e0 <_ZN13STM32Hardware4timeEv>
 800682a:	4602      	mov	r2, r0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8006836:	f107 0308 	add.w	r3, r7, #8
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f7fb ffa5 	bl	800278c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4915      	ldr	r1, [pc, #84]	; (800689c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8006848:	fba1 1303 	umull	r1, r3, r1, r3
 800684c:	099b      	lsrs	r3, r3, #6
 800684e:	4413      	add	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8006852:	6939      	ldr	r1, [r7, #16]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4b11      	ldr	r3, [pc, #68]	; (800689c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8006858:	fba3 0302 	umull	r0, r3, r3, r2
 800685c:	099b      	lsrs	r3, r3, #6
 800685e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006862:	fb00 f303 	mul.w	r3, r0, r3
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	4a0d      	ldr	r2, [pc, #52]	; (80068a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	440b      	add	r3, r1
 8006870:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8006872:	f107 0308 	add.w	r3, r7, #8
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f8a6 	bl	80069cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	4618      	mov	r0, r3
 8006886:	f7fc feab 	bl	80035e0 <_ZN13STM32Hardware4timeEv>
 800688a:	4602      	mov	r2, r0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8006892:	bf00      	nop
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	10624dd3 	.word	0x10624dd3
 80068a0:	000f4240 	.word	0x000f4240

080068a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b63      	cmp	r3, #99	; 0x63
 80068b4:	dd09      	ble.n	80068ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80068bc:	f083 0301 	eor.w	r3, r3, #1
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e079      	b.n	80069be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80068d6:	3207      	adds	r2, #7
 80068d8:	4611      	mov	r1, r2
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
 80068de:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	22ff      	movs	r2, #255	; 0xff
 80068e4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	22fe      	movs	r2, #254	; 0xfe
 80068ec:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	0a1b      	lsrs	r3, r3, #8
 8006900:	b29b      	uxth	r3, r3
 8006902:	b2da      	uxtb	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8006916:	4413      	add	r3, r2
 8006918:	b2db      	uxtb	r3, r3
 800691a:	43db      	mvns	r3, r3
 800691c:	b2da      	uxtb	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	b2da      	uxtb	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	b21b      	sxth	r3, r3
 8006932:	121b      	asrs	r3, r3, #8
 8006934:	b21b      	sxth	r3, r3
 8006936:	b2da      	uxtb	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8006942:	2305      	movs	r3, #5
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	e00c      	b.n	8006962 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	4413      	add	r3, r2
 800694e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	3301      	adds	r3, #1
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3306      	adds	r3, #6
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	429a      	cmp	r2, r3
 800696a:	dded      	ble.n	8006948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	3307      	adds	r3, #7
 8006970:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	425a      	negs	r2, r3
 8006976:	b2db      	uxtb	r3, r3
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	bf58      	it	pl
 800697c:	4253      	negpl	r3, r2
 800697e:	b2da      	uxtb	r2, r3
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	1c59      	adds	r1, r3, #1
 8006984:	6179      	str	r1, [r7, #20]
 8006986:	43d2      	mvns	r2, r2
 8006988:	b2d1      	uxtb	r1, r2
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4413      	add	r3, r2
 800698e:	460a      	mov	r2, r1
 8006990:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800699a:	dc0a      	bgt.n	80069b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	1d18      	adds	r0, r3, #4
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4619      	mov	r1, r3
 80069aa:	f7fc fdd3 	bl	8003554 <_ZN13STM32Hardware5writeEPKhi>
      return l;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	e005      	b.n	80069be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80069b2:	4905      	ldr	r1, [pc, #20]	; (80069c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f849 	bl	8006a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80069ba:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80069be:	4618      	mov	r0, r3
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	0800d2b8 	.word	0x0800d2b8

080069cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3304      	adds	r3, #4
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fc fe00 	bl	80035e0 <_ZN13STM32Hardware4timeEv>
 80069e0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4915      	ldr	r1, [pc, #84]	; (8006a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80069ea:	fba1 1303 	umull	r1, r3, r1, r3
 80069ee:	099b      	lsrs	r3, r3, #6
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	1e5a      	subs	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6859      	ldr	r1, [r3, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8006a02:	fba3 0302 	umull	r0, r3, r3, r2
 8006a06:	099b      	lsrs	r3, r3, #6
 8006a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a0c:	fb00 f303 	mul.w	r3, r0, r3
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8006a14:	fb02 f303 	mul.w	r3, r2, r3
 8006a18:	1aca      	subs	r2, r1, r3
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8006a1c:	4413      	add	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006a30:	4619      	mov	r1, r3
 8006a32:	4610      	mov	r0, r2
 8006a34:	f7fa fa12 	bl	8000e5c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	10624dd3 	.word	0x10624dd3
 8006a44:	000f4240 	.word	0x000f4240
 8006a48:	3b9aca00 	.word	0x3b9aca00

08006a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	2103      	movs	r1, #3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f804 	bl	8006a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	460b      	mov	r3, r1
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8006a76:	f107 0314 	add.w	r3, r7, #20
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fc f8ca 	bl	8002c14 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f107 0214 	add.w	r2, r7, #20
 8006a92:	2107      	movs	r1, #7
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	4798      	blx	r3
  }
 8006a98:	bf00      	nop
 8006a9a:	3720      	adds	r7, #32
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <_Z41__static_initialization_and_destruction_0ii>:
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d11f      	bne.n	8006af0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d11a      	bne.n	8006af0 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8006aba:	480f      	ldr	r0, [pc, #60]	; (8006af8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8006abc:	f7ff f9b4 	bl	8005e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
sensor_msgs::Imu imu;
 8006ac0:	480e      	ldr	r0, [pc, #56]	; (8006afc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8006ac2:	f7fe fb85 	bl	80051d0 <_ZN11sensor_msgs3ImuC1Ev>
geometry_msgs::Twist vel_msg;
 8006ac6:	480e      	ldr	r0, [pc, #56]	; (8006b00 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8006ac8:	f7fd faac 	bl	8004024 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher vel_pub("vel_pub",&vel_msg);
 8006acc:	2300      	movs	r3, #0
 8006ace:	4a0c      	ldr	r2, [pc, #48]	; (8006b00 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8006ad0:	490c      	ldr	r1, [pc, #48]	; (8006b04 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8006ad2:	480d      	ldr	r0, [pc, #52]	; (8006b08 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8006ad4:	f7fc fc1a 	bl	800330c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher imu_pub("imu", &imu);
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4a08      	ldr	r2, [pc, #32]	; (8006afc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8006adc:	490b      	ldr	r1, [pc, #44]	; (8006b0c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8006ade:	480c      	ldr	r0, [pc, #48]	; (8006b10 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8006ae0:	f7fc fc14 	bl	800330c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist>vel_sub("cmd_vel",&subscriber_cmd_callback);
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	4a0b      	ldr	r2, [pc, #44]	; (8006b14 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8006ae8:	490b      	ldr	r1, [pc, #44]	; (8006b18 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006aea:	480c      	ldr	r0, [pc, #48]	; (8006b1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006aec:	f7ff fb10 	bl	8006110 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000464 	.word	0x20000464
 8006afc:	20000da0 	.word	0x20000da0
 8006b00:	20000ef8 	.word	0x20000ef8
 8006b04:	0800d2f4 	.word	0x0800d2f4
 8006b08:	20000f40 	.word	0x20000f40
 8006b0c:	0800d2fc 	.word	0x0800d2fc
 8006b10:	20000f54 	.word	0x20000f54
 8006b14:	08005f19 	.word	0x08005f19
 8006b18:	0800d300 	.word	0x0800d300
 8006b1c:	20000f68 	.word	0x20000f68

08006b20 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3310      	adds	r3, #16
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fd fab9 	bl	80040a8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	3210      	adds	r2, #16
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4798      	blx	r3
  }
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3310      	adds	r3, #16
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fd fac0 	bl	80040f4 <_ZN13geometry_msgs5Twist7getTypeEv>
 8006b74:	4603      	mov	r3, r0
  }
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3310      	adds	r3, #16
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fd fac0 	bl	8004110 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8006b90:	4603      	mov	r3, r0
  }
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
    return configured_;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <_GLOBAL__sub_I_imu_data_tx>:
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	f7ff ff6f 	bl	8006aa0 <_Z41__static_initialization_and_destruction_0ii>
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd2:	4a0f      	ldr	r2, [pc, #60]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8006bda:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006be6:	2300      	movs	r3, #0
 8006be8:	603b      	str	r3, [r7, #0]
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40023800 	.word	0x40023800

08006c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	; 0x28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c1c:	f107 0314 	add.w	r3, r7, #20
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	609a      	str	r2, [r3, #8]
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a19      	ldr	r2, [pc, #100]	; (8006c98 <HAL_I2C_MspInit+0x84>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d12b      	bne.n	8006c8e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	4b18      	ldr	r3, [pc, #96]	; (8006c9c <HAL_I2C_MspInit+0x88>)
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3e:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <HAL_I2C_MspInit+0x88>)
 8006c40:	f043 0302 	orr.w	r3, r3, #2
 8006c44:	6313      	str	r3, [r2, #48]	; 0x30
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <HAL_I2C_MspInit+0x88>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c52:	23c0      	movs	r3, #192	; 0xc0
 8006c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c56:	2312      	movs	r3, #18
 8006c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c62:	2304      	movs	r3, #4
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c66:	f107 0314 	add.w	r3, r7, #20
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	480c      	ldr	r0, [pc, #48]	; (8006ca0 <HAL_I2C_MspInit+0x8c>)
 8006c6e:	f001 f83f 	bl	8007cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <HAL_I2C_MspInit+0x88>)
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	4a08      	ldr	r2, [pc, #32]	; (8006c9c <HAL_I2C_MspInit+0x88>)
 8006c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c80:	6413      	str	r3, [r2, #64]	; 0x40
 8006c82:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <HAL_I2C_MspInit+0x88>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006c8e:	bf00      	nop
 8006c90:	3728      	adds	r7, #40	; 0x28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40005400 	.word	0x40005400
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	40020400 	.word	0x40020400

08006ca4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08c      	sub	sp, #48	; 0x30
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cac:	f107 031c 	add.w	r3, r7, #28
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	605a      	str	r2, [r3, #4]
 8006cb6:	609a      	str	r2, [r3, #8]
 8006cb8:	60da      	str	r2, [r3, #12]
 8006cba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a33      	ldr	r2, [pc, #204]	; (8006d90 <HAL_TIM_Encoder_MspInit+0xec>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d12d      	bne.n	8006d22 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	4b32      	ldr	r3, [pc, #200]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cce:	4a31      	ldr	r2, [pc, #196]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006cd0:	f043 0301 	orr.w	r3, r3, #1
 8006cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8006cd6:	4b2f      	ldr	r3, [pc, #188]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	4a2a      	ldr	r2, [pc, #168]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006cec:	f043 0310 	orr.w	r3, r3, #16
 8006cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cf2:	4b28      	ldr	r3, [pc, #160]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	f003 0310 	and.w	r3, r3, #16
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006cfe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d04:	2302      	movs	r3, #2
 8006d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006d10:	2301      	movs	r3, #1
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d14:	f107 031c 	add.w	r3, r7, #28
 8006d18:	4619      	mov	r1, r3
 8006d1a:	481f      	ldr	r0, [pc, #124]	; (8006d98 <HAL_TIM_Encoder_MspInit+0xf4>)
 8006d1c:	f000 ffe8 	bl	8007cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006d20:	e031      	b.n	8006d86 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <HAL_TIM_Encoder_MspInit+0xf8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d12c      	bne.n	8006d86 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	4b18      	ldr	r3, [pc, #96]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	4a17      	ldr	r2, [pc, #92]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006d36:	f043 0304 	orr.w	r3, r3, #4
 8006d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d3c:	4b15      	ldr	r3, [pc, #84]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	4a10      	ldr	r2, [pc, #64]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006d52:	f043 0308 	orr.w	r3, r3, #8
 8006d56:	6313      	str	r3, [r2, #48]	; 0x30
 8006d58:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006d64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d72:	2300      	movs	r3, #0
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006d76:	2302      	movs	r3, #2
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d7a:	f107 031c 	add.w	r3, r7, #28
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4807      	ldr	r0, [pc, #28]	; (8006da0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8006d82:	f000 ffb5 	bl	8007cf0 <HAL_GPIO_Init>
}
 8006d86:	bf00      	nop
 8006d88:	3730      	adds	r7, #48	; 0x30
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40023800 	.word	0x40023800
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	40000800 	.word	0x40000800
 8006da0:	40020c00 	.word	0x40020c00

08006da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d115      	bne.n	8006de2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <HAL_TIM_Base_MspInit+0x48>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	4a0b      	ldr	r2, [pc, #44]	; (8006dec <HAL_TIM_Base_MspInit+0x48>)
 8006dc0:	f043 0301 	orr.w	r3, r3, #1
 8006dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <HAL_TIM_Base_MspInit+0x48>)
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	201c      	movs	r0, #28
 8006dd8:	f000 fb51 	bl	800747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006ddc:	201c      	movs	r0, #28
 8006dde:	f000 fb6a 	bl	80074b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	40023800 	.word	0x40023800

08006df0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a0b      	ldr	r2, [pc, #44]	; (8006e2c <HAL_TIM_PWM_MspInit+0x3c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d10d      	bne.n	8006e1e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	4b0a      	ldr	r3, [pc, #40]	; (8006e30 <HAL_TIM_PWM_MspInit+0x40>)
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <HAL_TIM_PWM_MspInit+0x40>)
 8006e0c:	f043 0302 	orr.w	r3, r3, #2
 8006e10:	6413      	str	r3, [r2, #64]	; 0x40
 8006e12:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <HAL_TIM_PWM_MspInit+0x40>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40023800 	.word	0x40023800

08006e34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e3c:	f107 030c 	add.w	r3, r7, #12
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	605a      	str	r2, [r3, #4]
 8006e46:	609a      	str	r2, [r3, #8]
 8006e48:	60da      	str	r2, [r3, #12]
 8006e4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a12      	ldr	r2, [pc, #72]	; (8006e9c <HAL_TIM_MspPostInit+0x68>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d11d      	bne.n	8006e92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e56:	2300      	movs	r3, #0
 8006e58:	60bb      	str	r3, [r7, #8]
 8006e5a:	4b11      	ldr	r3, [pc, #68]	; (8006ea0 <HAL_TIM_MspPostInit+0x6c>)
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5e:	4a10      	ldr	r2, [pc, #64]	; (8006ea0 <HAL_TIM_MspPostInit+0x6c>)
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	6313      	str	r3, [r2, #48]	; 0x30
 8006e66:	4b0e      	ldr	r3, [pc, #56]	; (8006ea0 <HAL_TIM_MspPostInit+0x6c>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	60bb      	str	r3, [r7, #8]
 8006e70:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e72:	23c0      	movs	r3, #192	; 0xc0
 8006e74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e76:	2302      	movs	r3, #2
 8006e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006e82:	2302      	movs	r3, #2
 8006e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e86:	f107 030c 	add.w	r3, r7, #12
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4805      	ldr	r0, [pc, #20]	; (8006ea4 <HAL_TIM_MspPostInit+0x70>)
 8006e8e:	f000 ff2f 	bl	8007cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006e92:	bf00      	nop
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40020000 	.word	0x40020000

08006ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb0:	f107 0314 	add.w	r3, r7, #20
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	609a      	str	r2, [r3, #8]
 8006ebc:	60da      	str	r2, [r3, #12]
 8006ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a4c      	ldr	r2, [pc, #304]	; (8006ff8 <HAL_UART_MspInit+0x150>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	f040 8091 	bne.w	8006fee <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	4b4a      	ldr	r3, [pc, #296]	; (8006ffc <HAL_UART_MspInit+0x154>)
 8006ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed4:	4a49      	ldr	r2, [pc, #292]	; (8006ffc <HAL_UART_MspInit+0x154>)
 8006ed6:	f043 0320 	orr.w	r3, r3, #32
 8006eda:	6453      	str	r3, [r2, #68]	; 0x44
 8006edc:	4b47      	ldr	r3, [pc, #284]	; (8006ffc <HAL_UART_MspInit+0x154>)
 8006ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	4b43      	ldr	r3, [pc, #268]	; (8006ffc <HAL_UART_MspInit+0x154>)
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	4a42      	ldr	r2, [pc, #264]	; (8006ffc <HAL_UART_MspInit+0x154>)
 8006ef2:	f043 0304 	orr.w	r3, r3, #4
 8006ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef8:	4b40      	ldr	r3, [pc, #256]	; (8006ffc <HAL_UART_MspInit+0x154>)
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f04:	23c0      	movs	r3, #192	; 0xc0
 8006f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f10:	2303      	movs	r3, #3
 8006f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006f14:	2308      	movs	r3, #8
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f18:	f107 0314 	add.w	r3, r7, #20
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4838      	ldr	r0, [pc, #224]	; (8007000 <HAL_UART_MspInit+0x158>)
 8006f20:	f000 fee6 	bl	8007cf0 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006f24:	4b37      	ldr	r3, [pc, #220]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f26:	4a38      	ldr	r2, [pc, #224]	; (8007008 <HAL_UART_MspInit+0x160>)
 8006f28:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006f2a:	4b36      	ldr	r3, [pc, #216]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f2c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006f30:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f32:	4b34      	ldr	r3, [pc, #208]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f38:	4b32      	ldr	r3, [pc, #200]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f3e:	4b31      	ldr	r3, [pc, #196]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f44:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f46:	4b2f      	ldr	r3, [pc, #188]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f4c:	4b2d      	ldr	r3, [pc, #180]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006f52:	4b2c      	ldr	r3, [pc, #176]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f58:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f5a:	4b2a      	ldr	r3, [pc, #168]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f60:	4b28      	ldr	r3, [pc, #160]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006f66:	4827      	ldr	r0, [pc, #156]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f68:	f000 fac0 	bl	80074ec <HAL_DMA_Init>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8006f72:	f7fb fb75 	bl	8002660 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a22      	ldr	r2, [pc, #136]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f7c:	4a21      	ldr	r2, [pc, #132]	; (8007004 <HAL_UART_MspInit+0x15c>)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006f82:	4b22      	ldr	r3, [pc, #136]	; (800700c <HAL_UART_MspInit+0x164>)
 8006f84:	4a22      	ldr	r2, [pc, #136]	; (8007010 <HAL_UART_MspInit+0x168>)
 8006f86:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006f88:	4b20      	ldr	r3, [pc, #128]	; (800700c <HAL_UART_MspInit+0x164>)
 8006f8a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006f8e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f90:	4b1e      	ldr	r3, [pc, #120]	; (800700c <HAL_UART_MspInit+0x164>)
 8006f92:	2240      	movs	r2, #64	; 0x40
 8006f94:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <HAL_UART_MspInit+0x164>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f9c:	4b1b      	ldr	r3, [pc, #108]	; (800700c <HAL_UART_MspInit+0x164>)
 8006f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fa2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006fa4:	4b19      	ldr	r3, [pc, #100]	; (800700c <HAL_UART_MspInit+0x164>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006faa:	4b18      	ldr	r3, [pc, #96]	; (800700c <HAL_UART_MspInit+0x164>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006fb0:	4b16      	ldr	r3, [pc, #88]	; (800700c <HAL_UART_MspInit+0x164>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006fb6:	4b15      	ldr	r3, [pc, #84]	; (800700c <HAL_UART_MspInit+0x164>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006fbc:	4b13      	ldr	r3, [pc, #76]	; (800700c <HAL_UART_MspInit+0x164>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006fc2:	4812      	ldr	r0, [pc, #72]	; (800700c <HAL_UART_MspInit+0x164>)
 8006fc4:	f000 fa92 	bl	80074ec <HAL_DMA_Init>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8006fce:	f7fb fb47 	bl	8002660 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a0d      	ldr	r2, [pc, #52]	; (800700c <HAL_UART_MspInit+0x164>)
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
 8006fd8:	4a0c      	ldr	r2, [pc, #48]	; (800700c <HAL_UART_MspInit+0x164>)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	2047      	movs	r0, #71	; 0x47
 8006fe4:	f000 fa4b 	bl	800747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006fe8:	2047      	movs	r0, #71	; 0x47
 8006fea:	f000 fa64 	bl	80074b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006fee:	bf00      	nop
 8006ff0:	3728      	adds	r7, #40	; 0x28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40011400 	.word	0x40011400
 8006ffc:	40023800 	.word	0x40023800
 8007000:	40020800 	.word	0x40020800
 8007004:	20000270 	.word	0x20000270
 8007008:	40026428 	.word	0x40026428
 800700c:	200002d0 	.word	0x200002d0
 8007010:	400264a0 	.word	0x400264a0

08007014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007018:	e7fe      	b.n	8007018 <NMI_Handler+0x4>

0800701a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800701a:	b480      	push	{r7}
 800701c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800701e:	e7fe      	b.n	800701e <HardFault_Handler+0x4>

08007020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007024:	e7fe      	b.n	8007024 <MemManage_Handler+0x4>

08007026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007026:	b480      	push	{r7}
 8007028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800702a:	e7fe      	b.n	800702a <BusFault_Handler+0x4>

0800702c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007030:	e7fe      	b.n	8007030 <UsageFault_Handler+0x4>

08007032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007032:	b480      	push	{r7}
 8007034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007036:	bf00      	nop
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007044:	bf00      	nop
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800704e:	b480      	push	{r7}
 8007050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007052:	bf00      	nop
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007060:	f000 f8ee 	bl	8007240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007064:	bf00      	nop
 8007066:	bd80      	pop	{r7, pc}

08007068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800706c:	4802      	ldr	r0, [pc, #8]	; (8007078 <TIM2_IRQHandler+0x10>)
 800706e:	f002 fdc1 	bl	8009bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007072:	bf00      	nop
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000150 	.word	0x20000150

0800707c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007080:	4802      	ldr	r0, [pc, #8]	; (800708c <DMA2_Stream1_IRQHandler+0x10>)
 8007082:	f000 fbcb 	bl	800781c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007086:	bf00      	nop
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000270 	.word	0x20000270

08007090 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8007094:	4802      	ldr	r0, [pc, #8]	; (80070a0 <DMA2_Stream6_IRQHandler+0x10>)
 8007096:	f000 fbc1 	bl	800781c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800709a:	bf00      	nop
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200002d0 	.word	0x200002d0

080070a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80070a8:	4802      	ldr	r0, [pc, #8]	; (80070b4 <USART6_IRQHandler+0x10>)
 80070aa:	f003 fc85 	bl	800a9b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80070ae:	bf00      	nop
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000228 	.word	0x20000228

080070b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070c0:	4a14      	ldr	r2, [pc, #80]	; (8007114 <_sbrk+0x5c>)
 80070c2:	4b15      	ldr	r3, [pc, #84]	; (8007118 <_sbrk+0x60>)
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80070cc:	4b13      	ldr	r3, [pc, #76]	; (800711c <_sbrk+0x64>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80070d4:	4b11      	ldr	r3, [pc, #68]	; (800711c <_sbrk+0x64>)
 80070d6:	4a12      	ldr	r2, [pc, #72]	; (8007120 <_sbrk+0x68>)
 80070d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80070da:	4b10      	ldr	r3, [pc, #64]	; (800711c <_sbrk+0x64>)
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d207      	bcs.n	80070f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80070e8:	f005 fe98 	bl	800ce1c <__errno>
 80070ec:	4603      	mov	r3, r0
 80070ee:	220c      	movs	r2, #12
 80070f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295
 80070f6:	e009      	b.n	800710c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80070f8:	4b08      	ldr	r3, [pc, #32]	; (800711c <_sbrk+0x64>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80070fe:	4b07      	ldr	r3, [pc, #28]	; (800711c <_sbrk+0x64>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4413      	add	r3, r2
 8007106:	4a05      	ldr	r2, [pc, #20]	; (800711c <_sbrk+0x64>)
 8007108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800710a:	68fb      	ldr	r3, [r7, #12]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	20020000 	.word	0x20020000
 8007118:	00000400 	.word	0x00000400
 800711c:	20000fc8 	.word	0x20000fc8
 8007120:	20001118 	.word	0x20001118

08007124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <SystemInit+0x20>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712e:	4a05      	ldr	r2, [pc, #20]	; (8007144 <SystemInit+0x20>)
 8007130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007138:	bf00      	nop
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	e000ed00 	.word	0xe000ed00

08007148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007180 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800714c:	f7ff ffea 	bl	8007124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007150:	480c      	ldr	r0, [pc, #48]	; (8007184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007152:	490d      	ldr	r1, [pc, #52]	; (8007188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007154:	4a0d      	ldr	r2, [pc, #52]	; (800718c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007158:	e002      	b.n	8007160 <LoopCopyDataInit>

0800715a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800715a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800715c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800715e:	3304      	adds	r3, #4

08007160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007164:	d3f9      	bcc.n	800715a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007166:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007168:	4c0a      	ldr	r4, [pc, #40]	; (8007194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800716a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800716c:	e001      	b.n	8007172 <LoopFillZerobss>

0800716e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800716e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007170:	3204      	adds	r2, #4

08007172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007174:	d3fb      	bcc.n	800716e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007176:	f005 fe57 	bl	800ce28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800717a:	f7fa f821 	bl	80011c0 <main>
  bx  lr    
 800717e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007188:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800718c:	0800d514 	.word	0x0800d514
  ldr r2, =_sbss
 8007190:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8007194:	20001118 	.word	0x20001118

08007198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007198:	e7fe      	b.n	8007198 <ADC_IRQHandler>
	...

0800719c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <HAL_Init+0x40>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a0d      	ldr	r2, [pc, #52]	; (80071dc <HAL_Init+0x40>)
 80071a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80071ac:	4b0b      	ldr	r3, [pc, #44]	; (80071dc <HAL_Init+0x40>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0a      	ldr	r2, [pc, #40]	; (80071dc <HAL_Init+0x40>)
 80071b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071b8:	4b08      	ldr	r3, [pc, #32]	; (80071dc <HAL_Init+0x40>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a07      	ldr	r2, [pc, #28]	; (80071dc <HAL_Init+0x40>)
 80071be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071c4:	2003      	movs	r0, #3
 80071c6:	f000 f94f 	bl	8007468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80071ca:	200f      	movs	r0, #15
 80071cc:	f000 f808 	bl	80071e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071d0:	f7ff fcf8 	bl	8006bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40023c00 	.word	0x40023c00

080071e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80071e8:	4b12      	ldr	r3, [pc, #72]	; (8007234 <HAL_InitTick+0x54>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	4b12      	ldr	r3, [pc, #72]	; (8007238 <HAL_InitTick+0x58>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	4619      	mov	r1, r3
 80071f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f967 	bl	80074d2 <HAL_SYSTICK_Config>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e00e      	b.n	800722c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b0f      	cmp	r3, #15
 8007212:	d80a      	bhi.n	800722a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007214:	2200      	movs	r2, #0
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	f000 f92f 	bl	800747e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007220:	4a06      	ldr	r2, [pc, #24]	; (800723c <HAL_InitTick+0x5c>)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	e000      	b.n	800722c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000028 	.word	0x20000028
 8007238:	20000030 	.word	0x20000030
 800723c:	2000002c 	.word	0x2000002c

08007240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007244:	4b06      	ldr	r3, [pc, #24]	; (8007260 <HAL_IncTick+0x20>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	4b06      	ldr	r3, [pc, #24]	; (8007264 <HAL_IncTick+0x24>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4413      	add	r3, r2
 8007250:	4a04      	ldr	r2, [pc, #16]	; (8007264 <HAL_IncTick+0x24>)
 8007252:	6013      	str	r3, [r2, #0]
}
 8007254:	bf00      	nop
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	20000030 	.word	0x20000030
 8007264:	20000fcc 	.word	0x20000fcc

08007268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  return uwTick;
 800726c:	4b03      	ldr	r3, [pc, #12]	; (800727c <HAL_GetTick+0x14>)
 800726e:	681b      	ldr	r3, [r3, #0]
}
 8007270:	4618      	mov	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	20000fcc 	.word	0x20000fcc

08007280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007288:	f7ff ffee 	bl	8007268 <HAL_GetTick>
 800728c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d005      	beq.n	80072a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800729a:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <HAL_Delay+0x44>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80072a6:	bf00      	nop
 80072a8:	f7ff ffde 	bl	8007268 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d8f7      	bhi.n	80072a8 <HAL_Delay+0x28>
  {
  }
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000030 	.word	0x20000030

080072c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <__NVIC_SetPriorityGrouping+0x44>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072e4:	4013      	ands	r3, r2
 80072e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80072f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072fa:	4a04      	ldr	r2, [pc, #16]	; (800730c <__NVIC_SetPriorityGrouping+0x44>)
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	60d3      	str	r3, [r2, #12]
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	e000ed00 	.word	0xe000ed00

08007310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007314:	4b04      	ldr	r3, [pc, #16]	; (8007328 <__NVIC_GetPriorityGrouping+0x18>)
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	f003 0307 	and.w	r3, r3, #7
}
 800731e:	4618      	mov	r0, r3
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	e000ed00 	.word	0xe000ed00

0800732c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800733a:	2b00      	cmp	r3, #0
 800733c:	db0b      	blt.n	8007356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	f003 021f 	and.w	r2, r3, #31
 8007344:	4907      	ldr	r1, [pc, #28]	; (8007364 <__NVIC_EnableIRQ+0x38>)
 8007346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	2001      	movs	r0, #1
 800734e:	fa00 f202 	lsl.w	r2, r0, r2
 8007352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	e000e100 	.word	0xe000e100

08007368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	6039      	str	r1, [r7, #0]
 8007372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007378:	2b00      	cmp	r3, #0
 800737a:	db0a      	blt.n	8007392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	490c      	ldr	r1, [pc, #48]	; (80073b4 <__NVIC_SetPriority+0x4c>)
 8007382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007386:	0112      	lsls	r2, r2, #4
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	440b      	add	r3, r1
 800738c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007390:	e00a      	b.n	80073a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	b2da      	uxtb	r2, r3
 8007396:	4908      	ldr	r1, [pc, #32]	; (80073b8 <__NVIC_SetPriority+0x50>)
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	3b04      	subs	r3, #4
 80073a0:	0112      	lsls	r2, r2, #4
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	440b      	add	r3, r1
 80073a6:	761a      	strb	r2, [r3, #24]
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	e000e100 	.word	0xe000e100
 80073b8:	e000ed00 	.word	0xe000ed00

080073bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073bc:	b480      	push	{r7}
 80073be:	b089      	sub	sp, #36	; 0x24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f1c3 0307 	rsb	r3, r3, #7
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	bf28      	it	cs
 80073da:	2304      	movcs	r3, #4
 80073dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	3304      	adds	r3, #4
 80073e2:	2b06      	cmp	r3, #6
 80073e4:	d902      	bls.n	80073ec <NVIC_EncodePriority+0x30>
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	3b03      	subs	r3, #3
 80073ea:	e000      	b.n	80073ee <NVIC_EncodePriority+0x32>
 80073ec:	2300      	movs	r3, #0
 80073ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f0:	f04f 32ff 	mov.w	r2, #4294967295
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	43da      	mvns	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	401a      	ands	r2, r3
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007404:	f04f 31ff 	mov.w	r1, #4294967295
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	fa01 f303 	lsl.w	r3, r1, r3
 800740e:	43d9      	mvns	r1, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007414:	4313      	orrs	r3, r2
         );
}
 8007416:	4618      	mov	r0, r3
 8007418:	3724      	adds	r7, #36	; 0x24
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3b01      	subs	r3, #1
 8007430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007434:	d301      	bcc.n	800743a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007436:	2301      	movs	r3, #1
 8007438:	e00f      	b.n	800745a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800743a:	4a0a      	ldr	r2, [pc, #40]	; (8007464 <SysTick_Config+0x40>)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3b01      	subs	r3, #1
 8007440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007442:	210f      	movs	r1, #15
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	f7ff ff8e 	bl	8007368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <SysTick_Config+0x40>)
 800744e:	2200      	movs	r2, #0
 8007450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007452:	4b04      	ldr	r3, [pc, #16]	; (8007464 <SysTick_Config+0x40>)
 8007454:	2207      	movs	r2, #7
 8007456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	e000e010 	.word	0xe000e010

08007468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff ff29 	bl	80072c8 <__NVIC_SetPriorityGrouping>
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800747e:	b580      	push	{r7, lr}
 8007480:	b086      	sub	sp, #24
 8007482:	af00      	add	r7, sp, #0
 8007484:	4603      	mov	r3, r0
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007490:	f7ff ff3e 	bl	8007310 <__NVIC_GetPriorityGrouping>
 8007494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	f7ff ff8e 	bl	80073bc <NVIC_EncodePriority>
 80074a0:	4602      	mov	r2, r0
 80074a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff ff5d 	bl	8007368 <__NVIC_SetPriority>
}
 80074ae:	bf00      	nop
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	4603      	mov	r3, r0
 80074be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff ff31 	bl	800732c <__NVIC_EnableIRQ>
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff ffa2 	bl	8007424 <SysTick_Config>
 80074e0:	4603      	mov	r3, r0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80074f8:	f7ff feb6 	bl	8007268 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e099      	b.n	800763c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0201 	bic.w	r2, r2, #1
 8007526:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007528:	e00f      	b.n	800754a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800752a:	f7ff fe9d 	bl	8007268 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b05      	cmp	r3, #5
 8007536:	d908      	bls.n	800754a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2203      	movs	r2, #3
 8007542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e078      	b.n	800763c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e8      	bne.n	800752a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4b38      	ldr	r3, [pc, #224]	; (8007644 <HAL_DMA_Init+0x158>)
 8007564:	4013      	ands	r3, r2
 8007566:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800758e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d107      	bne.n	80075b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	4313      	orrs	r3, r2
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d117      	bne.n	800760e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00e      	beq.n	800760e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fb01 	bl	8007bf8 <DMA_CheckFifoParam>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2240      	movs	r2, #64	; 0x40
 8007600:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800760a:	2301      	movs	r3, #1
 800760c:	e016      	b.n	800763c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fab8 	bl	8007b8c <DMA_CalcBaseAndBitshift>
 800761c:	4603      	mov	r3, r0
 800761e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007624:	223f      	movs	r2, #63	; 0x3f
 8007626:	409a      	lsls	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	f010803f 	.word	0xf010803f

08007648 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_DMA_Start_IT+0x26>
 800766a:	2302      	movs	r3, #2
 800766c:	e040      	b.n	80076f0 <HAL_DMA_Start_IT+0xa8>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b01      	cmp	r3, #1
 8007680:	d12f      	bne.n	80076e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2202      	movs	r2, #2
 8007686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fa4a 	bl	8007b30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	223f      	movs	r2, #63	; 0x3f
 80076a2:	409a      	lsls	r2, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0216 	orr.w	r2, r2, #22
 80076b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0208 	orr.w	r2, r2, #8
 80076ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0201 	orr.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	e005      	b.n	80076ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80076ea:	2302      	movs	r3, #2
 80076ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007706:	f7ff fdaf 	bl	8007268 <HAL_GetTick>
 800770a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d008      	beq.n	800772a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2280      	movs	r2, #128	; 0x80
 800771c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e052      	b.n	80077d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0216 	bic.w	r2, r2, #22
 8007738:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695a      	ldr	r2, [r3, #20]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007748:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <HAL_DMA_Abort+0x62>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0208 	bic.w	r2, r2, #8
 8007768:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0201 	bic.w	r2, r2, #1
 8007778:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800777a:	e013      	b.n	80077a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800777c:	f7ff fd74 	bl	8007268 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b05      	cmp	r3, #5
 8007788:	d90c      	bls.n	80077a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2203      	movs	r2, #3
 8007794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e015      	b.n	80077d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e4      	bne.n	800777c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b6:	223f      	movs	r2, #63	; 0x3f
 80077b8:	409a      	lsls	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d004      	beq.n	80077f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2280      	movs	r2, #128	; 0x80
 80077f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e00c      	b.n	8007810 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2205      	movs	r2, #5
 80077fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0201 	bic.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007828:	4b8e      	ldr	r3, [pc, #568]	; (8007a64 <HAL_DMA_IRQHandler+0x248>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a8e      	ldr	r2, [pc, #568]	; (8007a68 <HAL_DMA_IRQHandler+0x24c>)
 800782e:	fba2 2303 	umull	r2, r3, r2, r3
 8007832:	0a9b      	lsrs	r3, r3, #10
 8007834:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007846:	2208      	movs	r2, #8
 8007848:	409a      	lsls	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4013      	ands	r3, r2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01a      	beq.n	8007888 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d013      	beq.n	8007888 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0204 	bic.w	r2, r2, #4
 800786e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007874:	2208      	movs	r2, #8
 8007876:	409a      	lsls	r2, r3
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007880:	f043 0201 	orr.w	r2, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800788c:	2201      	movs	r2, #1
 800788e:	409a      	lsls	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4013      	ands	r3, r2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d012      	beq.n	80078be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078aa:	2201      	movs	r2, #1
 80078ac:	409a      	lsls	r2, r3
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	f043 0202 	orr.w	r2, r3, #2
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c2:	2204      	movs	r2, #4
 80078c4:	409a      	lsls	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4013      	ands	r3, r2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d012      	beq.n	80078f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e0:	2204      	movs	r2, #4
 80078e2:	409a      	lsls	r2, r3
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ec:	f043 0204 	orr.w	r2, r3, #4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f8:	2210      	movs	r2, #16
 80078fa:	409a      	lsls	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4013      	ands	r3, r2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d043      	beq.n	800798c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d03c      	beq.n	800798c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007916:	2210      	movs	r2, #16
 8007918:	409a      	lsls	r2, r3
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d018      	beq.n	800795e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d108      	bne.n	800794c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	d024      	beq.n	800798c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	4798      	blx	r3
 800794a:	e01f      	b.n	800798c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01b      	beq.n	800798c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4798      	blx	r3
 800795c:	e016      	b.n	800798c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007968:	2b00      	cmp	r3, #0
 800796a:	d107      	bne.n	800797c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0208 	bic.w	r2, r2, #8
 800797a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007990:	2220      	movs	r2, #32
 8007992:	409a      	lsls	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4013      	ands	r3, r2
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 808f 	beq.w	8007abc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8087 	beq.w	8007abc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b2:	2220      	movs	r2, #32
 80079b4:	409a      	lsls	r2, r3
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	d136      	bne.n	8007a34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0216 	bic.w	r2, r2, #22
 80079d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695a      	ldr	r2, [r3, #20]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d103      	bne.n	80079f6 <HAL_DMA_IRQHandler+0x1da>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0208 	bic.w	r2, r2, #8
 8007a04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0a:	223f      	movs	r2, #63	; 0x3f
 8007a0c:	409a      	lsls	r2, r3
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d07e      	beq.n	8007b28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
        }
        return;
 8007a32:	e079      	b.n	8007b28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d01d      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10d      	bne.n	8007a6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d031      	beq.n	8007abc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
 8007a60:	e02c      	b.n	8007abc <HAL_DMA_IRQHandler+0x2a0>
 8007a62:	bf00      	nop
 8007a64:	20000028 	.word	0x20000028
 8007a68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d023      	beq.n	8007abc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
 8007a7c:	e01e      	b.n	8007abc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10f      	bne.n	8007aac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0210 	bic.w	r2, r2, #16
 8007a9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d032      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d022      	beq.n	8007b16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2205      	movs	r2, #5
 8007ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0201 	bic.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d307      	bcc.n	8007b04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f2      	bne.n	8007ae8 <HAL_DMA_IRQHandler+0x2cc>
 8007b02:	e000      	b.n	8007b06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007b04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
 8007b26:	e000      	b.n	8007b2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007b28:	bf00      	nop
    }
  }
}
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d108      	bne.n	8007b70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007b6e:	e007      	b.n	8007b80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	60da      	str	r2, [r3, #12]
}
 8007b80:	bf00      	nop
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	3b10      	subs	r3, #16
 8007b9c:	4a14      	ldr	r2, [pc, #80]	; (8007bf0 <DMA_CalcBaseAndBitshift+0x64>)
 8007b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba2:	091b      	lsrs	r3, r3, #4
 8007ba4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007ba6:	4a13      	ldr	r2, [pc, #76]	; (8007bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d909      	bls.n	8007bce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007bc2:	f023 0303 	bic.w	r3, r3, #3
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	659a      	str	r2, [r3, #88]	; 0x58
 8007bcc:	e007      	b.n	8007bde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007bd6:	f023 0303 	bic.w	r3, r3, #3
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	aaaaaaab 	.word	0xaaaaaaab
 8007bf4:	0800d484 	.word	0x0800d484

08007bf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d11f      	bne.n	8007c52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d856      	bhi.n	8007cc6 <DMA_CheckFifoParam+0xce>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <DMA_CheckFifoParam+0x28>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c43 	.word	0x08007c43
 8007c28:	08007c31 	.word	0x08007c31
 8007c2c:	08007cc7 	.word	0x08007cc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d046      	beq.n	8007cca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c40:	e043      	b.n	8007cca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c4a:	d140      	bne.n	8007cce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c50:	e03d      	b.n	8007cce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5a:	d121      	bne.n	8007ca0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d837      	bhi.n	8007cd2 <DMA_CheckFifoParam+0xda>
 8007c62:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <DMA_CheckFifoParam+0x70>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007c7f 	.word	0x08007c7f
 8007c70:	08007c79 	.word	0x08007c79
 8007c74:	08007c91 	.word	0x08007c91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c7c:	e030      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d025      	beq.n	8007cd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c8e:	e022      	b.n	8007cd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c98:	d11f      	bne.n	8007cda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007c9e:	e01c      	b.n	8007cda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d903      	bls.n	8007cae <DMA_CheckFifoParam+0xb6>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d003      	beq.n	8007cb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007cac:	e018      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb2:	e015      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00e      	beq.n	8007cde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc4:	e00b      	b.n	8007cde <DMA_CheckFifoParam+0xe6>
      break;
 8007cc6:	bf00      	nop
 8007cc8:	e00a      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cca:	bf00      	nop
 8007ccc:	e008      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cce:	bf00      	nop
 8007cd0:	e006      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cd2:	bf00      	nop
 8007cd4:	e004      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cd6:	bf00      	nop
 8007cd8:	e002      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;   
 8007cda:	bf00      	nop
 8007cdc:	e000      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cde:	bf00      	nop
    }
  } 
  
  return status; 
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop

08007cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b089      	sub	sp, #36	; 0x24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d06:	2300      	movs	r3, #0
 8007d08:	61fb      	str	r3, [r7, #28]
 8007d0a:	e159      	b.n	8007fc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	f040 8148 	bne.w	8007fba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d005      	beq.n	8007d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d130      	bne.n	8007da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	2203      	movs	r2, #3
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	43db      	mvns	r3, r3
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	4013      	ands	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d78:	2201      	movs	r2, #1
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d80:	43db      	mvns	r3, r3
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	4013      	ands	r3, r2
 8007d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	091b      	lsrs	r3, r3, #4
 8007d8e:	f003 0201 	and.w	r2, r3, #1
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d017      	beq.n	8007de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	2203      	movs	r2, #3
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d123      	bne.n	8007e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	08da      	lsrs	r2, r3, #3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3208      	adds	r2, #8
 8007df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	220f      	movs	r2, #15
 8007e04:	fa02 f303 	lsl.w	r3, r2, r3
 8007e08:	43db      	mvns	r3, r3
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	691a      	ldr	r2, [r3, #16]
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	08da      	lsrs	r2, r3, #3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3208      	adds	r2, #8
 8007e2e:	69b9      	ldr	r1, [r7, #24]
 8007e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	2203      	movs	r2, #3
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	43db      	mvns	r3, r3
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f003 0203 	and.w	r2, r3, #3
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 80a2 	beq.w	8007fba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	4b57      	ldr	r3, [pc, #348]	; (8007fd8 <HAL_GPIO_Init+0x2e8>)
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7e:	4a56      	ldr	r2, [pc, #344]	; (8007fd8 <HAL_GPIO_Init+0x2e8>)
 8007e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e84:	6453      	str	r3, [r2, #68]	; 0x44
 8007e86:	4b54      	ldr	r3, [pc, #336]	; (8007fd8 <HAL_GPIO_Init+0x2e8>)
 8007e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e92:	4a52      	ldr	r2, [pc, #328]	; (8007fdc <HAL_GPIO_Init+0x2ec>)
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	089b      	lsrs	r3, r3, #2
 8007e98:	3302      	adds	r3, #2
 8007e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	220f      	movs	r2, #15
 8007eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007eae:	43db      	mvns	r3, r3
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a49      	ldr	r2, [pc, #292]	; (8007fe0 <HAL_GPIO_Init+0x2f0>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d019      	beq.n	8007ef2 <HAL_GPIO_Init+0x202>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a48      	ldr	r2, [pc, #288]	; (8007fe4 <HAL_GPIO_Init+0x2f4>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d013      	beq.n	8007eee <HAL_GPIO_Init+0x1fe>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a47      	ldr	r2, [pc, #284]	; (8007fe8 <HAL_GPIO_Init+0x2f8>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00d      	beq.n	8007eea <HAL_GPIO_Init+0x1fa>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a46      	ldr	r2, [pc, #280]	; (8007fec <HAL_GPIO_Init+0x2fc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d007      	beq.n	8007ee6 <HAL_GPIO_Init+0x1f6>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a45      	ldr	r2, [pc, #276]	; (8007ff0 <HAL_GPIO_Init+0x300>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d101      	bne.n	8007ee2 <HAL_GPIO_Init+0x1f2>
 8007ede:	2304      	movs	r3, #4
 8007ee0:	e008      	b.n	8007ef4 <HAL_GPIO_Init+0x204>
 8007ee2:	2307      	movs	r3, #7
 8007ee4:	e006      	b.n	8007ef4 <HAL_GPIO_Init+0x204>
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e004      	b.n	8007ef4 <HAL_GPIO_Init+0x204>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e002      	b.n	8007ef4 <HAL_GPIO_Init+0x204>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e000      	b.n	8007ef4 <HAL_GPIO_Init+0x204>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	f002 0203 	and.w	r2, r2, #3
 8007efa:	0092      	lsls	r2, r2, #2
 8007efc:	4093      	lsls	r3, r2
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f04:	4935      	ldr	r1, [pc, #212]	; (8007fdc <HAL_GPIO_Init+0x2ec>)
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	089b      	lsrs	r3, r3, #2
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f12:	4b38      	ldr	r3, [pc, #224]	; (8007ff4 <HAL_GPIO_Init+0x304>)
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	43db      	mvns	r3, r3
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f36:	4a2f      	ldr	r2, [pc, #188]	; (8007ff4 <HAL_GPIO_Init+0x304>)
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f3c:	4b2d      	ldr	r3, [pc, #180]	; (8007ff4 <HAL_GPIO_Init+0x304>)
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	43db      	mvns	r3, r3
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f60:	4a24      	ldr	r2, [pc, #144]	; (8007ff4 <HAL_GPIO_Init+0x304>)
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007f66:	4b23      	ldr	r3, [pc, #140]	; (8007ff4 <HAL_GPIO_Init+0x304>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	43db      	mvns	r3, r3
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	4013      	ands	r3, r2
 8007f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f8a:	4a1a      	ldr	r2, [pc, #104]	; (8007ff4 <HAL_GPIO_Init+0x304>)
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f90:	4b18      	ldr	r3, [pc, #96]	; (8007ff4 <HAL_GPIO_Init+0x304>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007fb4:	4a0f      	ldr	r2, [pc, #60]	; (8007ff4 <HAL_GPIO_Init+0x304>)
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	2b0f      	cmp	r3, #15
 8007fc4:	f67f aea2 	bls.w	8007d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	3724      	adds	r7, #36	; 0x24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	40013800 	.word	0x40013800
 8007fe0:	40020000 	.word	0x40020000
 8007fe4:	40020400 	.word	0x40020400
 8007fe8:	40020800 	.word	0x40020800
 8007fec:	40020c00 	.word	0x40020c00
 8007ff0:	40021000 	.word	0x40021000
 8007ff4:	40013c00 	.word	0x40013c00

08007ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	807b      	strh	r3, [r7, #2]
 8008004:	4613      	mov	r3, r2
 8008006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008008:	787b      	ldrb	r3, [r7, #1]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800800e:	887a      	ldrh	r2, [r7, #2]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008014:	e003      	b.n	800801e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008016:	887b      	ldrh	r3, [r7, #2]
 8008018:	041a      	lsls	r2, r3, #16
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	619a      	str	r2, [r3, #24]
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800802a:	b480      	push	{r7}
 800802c:	b085      	sub	sp, #20
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	460b      	mov	r3, r1
 8008034:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800803c:	887a      	ldrh	r2, [r7, #2]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4013      	ands	r3, r2
 8008042:	041a      	lsls	r2, r3, #16
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	43d9      	mvns	r1, r3
 8008048:	887b      	ldrh	r3, [r7, #2]
 800804a:	400b      	ands	r3, r1
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	619a      	str	r2, [r3, #24]
}
 8008052:	bf00      	nop
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
	...

08008060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e12b      	b.n	80082ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d106      	bne.n	800808c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7fe fdc4 	bl	8006c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2224      	movs	r2, #36	; 0x24
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 0201 	bic.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80080c4:	f001 fa88 	bl	80095d8 <HAL_RCC_GetPCLK1Freq>
 80080c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	4a81      	ldr	r2, [pc, #516]	; (80082d4 <HAL_I2C_Init+0x274>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d807      	bhi.n	80080e4 <HAL_I2C_Init+0x84>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4a80      	ldr	r2, [pc, #512]	; (80082d8 <HAL_I2C_Init+0x278>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	bf94      	ite	ls
 80080dc:	2301      	movls	r3, #1
 80080de:	2300      	movhi	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	e006      	b.n	80080f2 <HAL_I2C_Init+0x92>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4a7d      	ldr	r2, [pc, #500]	; (80082dc <HAL_I2C_Init+0x27c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	bf94      	ite	ls
 80080ec:	2301      	movls	r3, #1
 80080ee:	2300      	movhi	r3, #0
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e0e7      	b.n	80082ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	4a78      	ldr	r2, [pc, #480]	; (80082e0 <HAL_I2C_Init+0x280>)
 80080fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008102:	0c9b      	lsrs	r3, r3, #18
 8008104:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	430a      	orrs	r2, r1
 8008118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	4a6a      	ldr	r2, [pc, #424]	; (80082d4 <HAL_I2C_Init+0x274>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d802      	bhi.n	8008134 <HAL_I2C_Init+0xd4>
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	3301      	adds	r3, #1
 8008132:	e009      	b.n	8008148 <HAL_I2C_Init+0xe8>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800813a:	fb02 f303 	mul.w	r3, r2, r3
 800813e:	4a69      	ldr	r2, [pc, #420]	; (80082e4 <HAL_I2C_Init+0x284>)
 8008140:	fba2 2303 	umull	r2, r3, r2, r3
 8008144:	099b      	lsrs	r3, r3, #6
 8008146:	3301      	adds	r3, #1
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	6812      	ldr	r2, [r2, #0]
 800814c:	430b      	orrs	r3, r1
 800814e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800815a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	495c      	ldr	r1, [pc, #368]	; (80082d4 <HAL_I2C_Init+0x274>)
 8008164:	428b      	cmp	r3, r1
 8008166:	d819      	bhi.n	800819c <HAL_I2C_Init+0x13c>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	1e59      	subs	r1, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	fbb1 f3f3 	udiv	r3, r1, r3
 8008176:	1c59      	adds	r1, r3, #1
 8008178:	f640 73fc 	movw	r3, #4092	; 0xffc
 800817c:	400b      	ands	r3, r1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <HAL_I2C_Init+0x138>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1e59      	subs	r1, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008190:	3301      	adds	r3, #1
 8008192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008196:	e051      	b.n	800823c <HAL_I2C_Init+0x1dc>
 8008198:	2304      	movs	r3, #4
 800819a:	e04f      	b.n	800823c <HAL_I2C_Init+0x1dc>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d111      	bne.n	80081c8 <HAL_I2C_Init+0x168>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	1e58      	subs	r0, r3, #1
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6859      	ldr	r1, [r3, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	440b      	add	r3, r1
 80081b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80081b6:	3301      	adds	r3, #1
 80081b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081bc:	2b00      	cmp	r3, #0
 80081be:	bf0c      	ite	eq
 80081c0:	2301      	moveq	r3, #1
 80081c2:	2300      	movne	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	e012      	b.n	80081ee <HAL_I2C_Init+0x18e>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	1e58      	subs	r0, r3, #1
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6859      	ldr	r1, [r3, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	0099      	lsls	r1, r3, #2
 80081d8:	440b      	add	r3, r1
 80081da:	fbb0 f3f3 	udiv	r3, r0, r3
 80081de:	3301      	adds	r3, #1
 80081e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bf0c      	ite	eq
 80081e8:	2301      	moveq	r3, #1
 80081ea:	2300      	movne	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <HAL_I2C_Init+0x196>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e022      	b.n	800823c <HAL_I2C_Init+0x1dc>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10e      	bne.n	800821c <HAL_I2C_Init+0x1bc>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1e58      	subs	r0, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6859      	ldr	r1, [r3, #4]
 8008206:	460b      	mov	r3, r1
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	440b      	add	r3, r1
 800820c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008210:	3301      	adds	r3, #1
 8008212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800821a:	e00f      	b.n	800823c <HAL_I2C_Init+0x1dc>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1e58      	subs	r0, r3, #1
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6859      	ldr	r1, [r3, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	0099      	lsls	r1, r3, #2
 800822c:	440b      	add	r3, r1
 800822e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008232:	3301      	adds	r3, #1
 8008234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800823c:	6879      	ldr	r1, [r7, #4]
 800823e:	6809      	ldr	r1, [r1, #0]
 8008240:	4313      	orrs	r3, r2
 8008242:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69da      	ldr	r2, [r3, #28]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800826a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	6911      	ldr	r1, [r2, #16]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	68d2      	ldr	r2, [r2, #12]
 8008276:	4311      	orrs	r1, r2
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	430b      	orrs	r3, r1
 800827e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	695a      	ldr	r2, [r3, #20]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0201 	orr.w	r2, r2, #1
 80082aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	000186a0 	.word	0x000186a0
 80082d8:	001e847f 	.word	0x001e847f
 80082dc:	003d08ff 	.word	0x003d08ff
 80082e0:	431bde83 	.word	0x431bde83
 80082e4:	10624dd3 	.word	0x10624dd3

080082e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08c      	sub	sp, #48	; 0x30
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	4608      	mov	r0, r1
 80082f2:	4611      	mov	r1, r2
 80082f4:	461a      	mov	r2, r3
 80082f6:	4603      	mov	r3, r0
 80082f8:	817b      	strh	r3, [r7, #10]
 80082fa:	460b      	mov	r3, r1
 80082fc:	813b      	strh	r3, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008302:	f7fe ffb1 	bl	8007268 <HAL_GetTick>
 8008306:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b20      	cmp	r3, #32
 8008312:	f040 8214 	bne.w	800873e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	2319      	movs	r3, #25
 800831c:	2201      	movs	r2, #1
 800831e:	497b      	ldr	r1, [pc, #492]	; (800850c <HAL_I2C_Mem_Read+0x224>)
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 fafb 	bl	800891c <I2C_WaitOnFlagUntilTimeout>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800832c:	2302      	movs	r3, #2
 800832e:	e207      	b.n	8008740 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008336:	2b01      	cmp	r3, #1
 8008338:	d101      	bne.n	800833e <HAL_I2C_Mem_Read+0x56>
 800833a:	2302      	movs	r3, #2
 800833c:	e200      	b.n	8008740 <HAL_I2C_Mem_Read+0x458>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b01      	cmp	r3, #1
 8008352:	d007      	beq.n	8008364 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0201 	orr.w	r2, r2, #1
 8008362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2222      	movs	r2, #34	; 0x22
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2240      	movs	r2, #64	; 0x40
 8008380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800838e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008394:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4a5b      	ldr	r2, [pc, #364]	; (8008510 <HAL_I2C_Mem_Read+0x228>)
 80083a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083a6:	88f8      	ldrh	r0, [r7, #6]
 80083a8:	893a      	ldrh	r2, [r7, #8]
 80083aa:	8979      	ldrh	r1, [r7, #10]
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	4603      	mov	r3, r0
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f9c8 	bl	800874c <I2C_RequestMemoryRead>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e1bc      	b.n	8008740 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d113      	bne.n	80083f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083ce:	2300      	movs	r3, #0
 80083d0:	623b      	str	r3, [r7, #32]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	623b      	str	r3, [r7, #32]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	623b      	str	r3, [r7, #32]
 80083e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	e190      	b.n	8008718 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d11b      	bne.n	8008436 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800840c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800840e:	2300      	movs	r3, #0
 8008410:	61fb      	str	r3, [r7, #28]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	61fb      	str	r3, [r7, #28]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	61fb      	str	r3, [r7, #28]
 8008422:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	e170      	b.n	8008718 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800843a:	2b02      	cmp	r3, #2
 800843c:	d11b      	bne.n	8008476 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800844c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800845c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800845e:	2300      	movs	r3, #0
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	61bb      	str	r3, [r7, #24]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	61bb      	str	r3, [r7, #24]
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	e150      	b.n	8008718 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008476:	2300      	movs	r3, #0
 8008478:	617b      	str	r3, [r7, #20]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800848c:	e144      	b.n	8008718 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008492:	2b03      	cmp	r3, #3
 8008494:	f200 80f1 	bhi.w	800867a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800849c:	2b01      	cmp	r3, #1
 800849e:	d123      	bne.n	80084e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fb9b 	bl	8008be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e145      	b.n	8008740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691a      	ldr	r2, [r3, #16]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d0:	3b01      	subs	r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084e6:	e117      	b.n	8008718 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d14e      	bne.n	800858e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	2200      	movs	r2, #0
 80084f8:	4906      	ldr	r1, [pc, #24]	; (8008514 <HAL_I2C_Mem_Read+0x22c>)
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 fa0e 	bl	800891c <I2C_WaitOnFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d008      	beq.n	8008518 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e11a      	b.n	8008740 <HAL_I2C_Mem_Read+0x458>
 800850a:	bf00      	nop
 800850c:	00100002 	.word	0x00100002
 8008510:	ffff0000 	.word	0xffff0000
 8008514:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	691a      	ldr	r2, [r3, #16]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	b2d2      	uxtb	r2, r2
 8008534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008544:	3b01      	subs	r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008550:	b29b      	uxth	r3, r3
 8008552:	3b01      	subs	r3, #1
 8008554:	b29a      	uxth	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	691a      	ldr	r2, [r3, #16]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	b2d2      	uxtb	r2, r2
 8008566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008576:	3b01      	subs	r3, #1
 8008578:	b29a      	uxth	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008582:	b29b      	uxth	r3, r3
 8008584:	3b01      	subs	r3, #1
 8008586:	b29a      	uxth	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800858c:	e0c4      	b.n	8008718 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	2200      	movs	r2, #0
 8008596:	496c      	ldr	r1, [pc, #432]	; (8008748 <HAL_I2C_Mem_Read+0x460>)
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f9bf 	bl	800891c <I2C_WaitOnFlagUntilTimeout>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e0cb      	b.n	8008740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	691a      	ldr	r2, [r3, #16]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d4:	3b01      	subs	r3, #1
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	3b01      	subs	r3, #1
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	2200      	movs	r2, #0
 80085f2:	4955      	ldr	r1, [pc, #340]	; (8008748 <HAL_I2C_Mem_Read+0x460>)
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 f991 	bl	800891c <I2C_WaitOnFlagUntilTimeout>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e09d      	b.n	8008740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	691a      	ldr	r2, [r3, #16]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008630:	3b01      	subs	r3, #1
 8008632:	b29a      	uxth	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800863c:	b29b      	uxth	r3, r3
 800863e:	3b01      	subs	r3, #1
 8008640:	b29a      	uxth	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	691a      	ldr	r2, [r3, #16]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	b2d2      	uxtb	r2, r2
 8008652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008662:	3b01      	subs	r3, #1
 8008664:	b29a      	uxth	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800866e:	b29b      	uxth	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008678:	e04e      	b.n	8008718 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800867a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 faae 	bl	8008be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e058      	b.n	8008740 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691a      	ldr	r2, [r3, #16]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	b2d2      	uxtb	r2, r2
 800869a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086aa:	3b01      	subs	r3, #1
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d124      	bne.n	8008718 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d107      	bne.n	80086e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	691a      	ldr	r2, [r3, #16]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	b2d2      	uxtb	r2, r2
 80086f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870e:	b29b      	uxth	r3, r3
 8008710:	3b01      	subs	r3, #1
 8008712:	b29a      	uxth	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800871c:	2b00      	cmp	r3, #0
 800871e:	f47f aeb6 	bne.w	800848e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2220      	movs	r2, #32
 8008726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	e000      	b.n	8008740 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800873e:	2302      	movs	r3, #2
  }
}
 8008740:	4618      	mov	r0, r3
 8008742:	3728      	adds	r7, #40	; 0x28
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	00010004 	.word	0x00010004

0800874c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af02      	add	r7, sp, #8
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	4608      	mov	r0, r1
 8008756:	4611      	mov	r1, r2
 8008758:	461a      	mov	r2, r3
 800875a:	4603      	mov	r3, r0
 800875c:	817b      	strh	r3, [r7, #10]
 800875e:	460b      	mov	r3, r1
 8008760:	813b      	strh	r3, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008774:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008784:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	2200      	movs	r2, #0
 800878e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 f8c2 	bl	800891c <I2C_WaitOnFlagUntilTimeout>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00d      	beq.n	80087ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ac:	d103      	bne.n	80087b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e0aa      	b.n	8008910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087ba:	897b      	ldrh	r3, [r7, #10]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80087c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	6a3a      	ldr	r2, [r7, #32]
 80087ce:	4952      	ldr	r1, [pc, #328]	; (8008918 <I2C_RequestMemoryRead+0x1cc>)
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f91d 	bl	8008a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e097      	b.n	8008910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f8:	6a39      	ldr	r1, [r7, #32]
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 f9a8 	bl	8008b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00d      	beq.n	8008822 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	2b04      	cmp	r3, #4
 800880c:	d107      	bne.n	800881e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800881c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e076      	b.n	8008910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008822:	88fb      	ldrh	r3, [r7, #6]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d105      	bne.n	8008834 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008828:	893b      	ldrh	r3, [r7, #8]
 800882a:	b2da      	uxtb	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	611a      	str	r2, [r3, #16]
 8008832:	e021      	b.n	8008878 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008834:	893b      	ldrh	r3, [r7, #8]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	b29b      	uxth	r3, r3
 800883a:	b2da      	uxtb	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008844:	6a39      	ldr	r1, [r7, #32]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 f982 	bl	8008b50 <I2C_WaitOnTXEFlagUntilTimeout>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00d      	beq.n	800886e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	2b04      	cmp	r3, #4
 8008858:	d107      	bne.n	800886a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008868:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e050      	b.n	8008910 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800886e:	893b      	ldrh	r3, [r7, #8]
 8008870:	b2da      	uxtb	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	6a39      	ldr	r1, [r7, #32]
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 f967 	bl	8008b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00d      	beq.n	80088a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	2b04      	cmp	r3, #4
 800888e:	d107      	bne.n	80088a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800889e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e035      	b.n	8008910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 f82b 	bl	800891c <I2C_WaitOnFlagUntilTimeout>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00d      	beq.n	80088e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088da:	d103      	bne.n	80088e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e013      	b.n	8008910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80088e8:	897b      	ldrh	r3, [r7, #10]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f043 0301 	orr.w	r3, r3, #1
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	4906      	ldr	r1, [pc, #24]	; (8008918 <I2C_RequestMemoryRead+0x1cc>)
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 f886 	bl	8008a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e000      	b.n	8008910 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	00010002 	.word	0x00010002

0800891c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	4613      	mov	r3, r2
 800892a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800892c:	e048      	b.n	80089c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008934:	d044      	beq.n	80089c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008936:	f7fe fc97 	bl	8007268 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d302      	bcc.n	800894c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d139      	bne.n	80089c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	0c1b      	lsrs	r3, r3, #16
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b01      	cmp	r3, #1
 8008954:	d10d      	bne.n	8008972 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	43da      	mvns	r2, r3
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	4013      	ands	r3, r2
 8008962:	b29b      	uxth	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	bf0c      	ite	eq
 8008968:	2301      	moveq	r3, #1
 800896a:	2300      	movne	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	461a      	mov	r2, r3
 8008970:	e00c      	b.n	800898c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	43da      	mvns	r2, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4013      	ands	r3, r2
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	bf0c      	ite	eq
 8008984:	2301      	moveq	r3, #1
 8008986:	2300      	movne	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	461a      	mov	r2, r3
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	429a      	cmp	r2, r3
 8008990:	d116      	bne.n	80089c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ac:	f043 0220 	orr.w	r2, r3, #32
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e023      	b.n	8008a08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	0c1b      	lsrs	r3, r3, #16
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d10d      	bne.n	80089e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	43da      	mvns	r2, r3
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	4013      	ands	r3, r2
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bf0c      	ite	eq
 80089dc:	2301      	moveq	r3, #1
 80089de:	2300      	movne	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	461a      	mov	r2, r3
 80089e4:	e00c      	b.n	8008a00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	43da      	mvns	r2, r3
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	4013      	ands	r3, r2
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bf0c      	ite	eq
 80089f8:	2301      	moveq	r3, #1
 80089fa:	2300      	movne	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	461a      	mov	r2, r3
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d093      	beq.n	800892e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a1e:	e071      	b.n	8008b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a2e:	d123      	bne.n	8008a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2220      	movs	r2, #32
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a64:	f043 0204 	orr.w	r2, r3, #4
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e067      	b.n	8008b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7e:	d041      	beq.n	8008b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a80:	f7fe fbf2 	bl	8007268 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d302      	bcc.n	8008a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d136      	bne.n	8008b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	0c1b      	lsrs	r3, r3, #16
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d10c      	bne.n	8008aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	43da      	mvns	r2, r3
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bf14      	ite	ne
 8008ab2:	2301      	movne	r3, #1
 8008ab4:	2300      	moveq	r3, #0
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	e00b      	b.n	8008ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	43da      	mvns	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	bf14      	ite	ne
 8008acc:	2301      	movne	r3, #1
 8008ace:	2300      	moveq	r3, #0
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d016      	beq.n	8008b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af0:	f043 0220 	orr.w	r2, r3, #32
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e021      	b.n	8008b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	0c1b      	lsrs	r3, r3, #16
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d10c      	bne.n	8008b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	43da      	mvns	r2, r3
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	bf14      	ite	ne
 8008b20:	2301      	movne	r3, #1
 8008b22:	2300      	moveq	r3, #0
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	e00b      	b.n	8008b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	43da      	mvns	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4013      	ands	r3, r2
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bf14      	ite	ne
 8008b3a:	2301      	movne	r3, #1
 8008b3c:	2300      	moveq	r3, #0
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f47f af6d 	bne.w	8008a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b5c:	e034      	b.n	8008bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f000 f89b 	bl	8008c9a <I2C_IsAcknowledgeFailed>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e034      	b.n	8008bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d028      	beq.n	8008bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b76:	f7fe fb77 	bl	8007268 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d302      	bcc.n	8008b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d11d      	bne.n	8008bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b96:	2b80      	cmp	r3, #128	; 0x80
 8008b98:	d016      	beq.n	8008bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb4:	f043 0220 	orr.w	r2, r3, #32
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e007      	b.n	8008bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd2:	2b80      	cmp	r3, #128	; 0x80
 8008bd4:	d1c3      	bne.n	8008b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bec:	e049      	b.n	8008c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d119      	bne.n	8008c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f06f 0210 	mvn.w	r2, #16
 8008c04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e030      	b.n	8008c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c30:	f7fe fb1a 	bl	8007268 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d302      	bcc.n	8008c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d11d      	bne.n	8008c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c50:	2b40      	cmp	r3, #64	; 0x40
 8008c52:	d016      	beq.n	8008c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	f043 0220 	orr.w	r2, r3, #32
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e007      	b.n	8008c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8c:	2b40      	cmp	r3, #64	; 0x40
 8008c8e:	d1ae      	bne.n	8008bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b083      	sub	sp, #12
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cb0:	d11b      	bne.n	8008cea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	f043 0204 	orr.w	r2, r3, #4
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e000      	b.n	8008cec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e267      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d075      	beq.n	8008e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d16:	4b88      	ldr	r3, [pc, #544]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f003 030c 	and.w	r3, r3, #12
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d00c      	beq.n	8008d3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d22:	4b85      	ldr	r3, [pc, #532]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d2a:	2b08      	cmp	r3, #8
 8008d2c:	d112      	bne.n	8008d54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d2e:	4b82      	ldr	r3, [pc, #520]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d3a:	d10b      	bne.n	8008d54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d3c:	4b7e      	ldr	r3, [pc, #504]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d05b      	beq.n	8008e00 <HAL_RCC_OscConfig+0x108>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d157      	bne.n	8008e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e242      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d5c:	d106      	bne.n	8008d6c <HAL_RCC_OscConfig+0x74>
 8008d5e:	4b76      	ldr	r3, [pc, #472]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a75      	ldr	r2, [pc, #468]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d68:	6013      	str	r3, [r2, #0]
 8008d6a:	e01d      	b.n	8008da8 <HAL_RCC_OscConfig+0xb0>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d74:	d10c      	bne.n	8008d90 <HAL_RCC_OscConfig+0x98>
 8008d76:	4b70      	ldr	r3, [pc, #448]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a6f      	ldr	r2, [pc, #444]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	4b6d      	ldr	r3, [pc, #436]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a6c      	ldr	r2, [pc, #432]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d8c:	6013      	str	r3, [r2, #0]
 8008d8e:	e00b      	b.n	8008da8 <HAL_RCC_OscConfig+0xb0>
 8008d90:	4b69      	ldr	r3, [pc, #420]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a68      	ldr	r2, [pc, #416]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	4b66      	ldr	r3, [pc, #408]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a65      	ldr	r2, [pc, #404]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d013      	beq.n	8008dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008db0:	f7fe fa5a 	bl	8007268 <HAL_GetTick>
 8008db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008db6:	e008      	b.n	8008dca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008db8:	f7fe fa56 	bl	8007268 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b64      	cmp	r3, #100	; 0x64
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e207      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dca:	4b5b      	ldr	r3, [pc, #364]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0f0      	beq.n	8008db8 <HAL_RCC_OscConfig+0xc0>
 8008dd6:	e014      	b.n	8008e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dd8:	f7fe fa46 	bl	8007268 <HAL_GetTick>
 8008ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008de0:	f7fe fa42 	bl	8007268 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b64      	cmp	r3, #100	; 0x64
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e1f3      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008df2:	4b51      	ldr	r3, [pc, #324]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1f0      	bne.n	8008de0 <HAL_RCC_OscConfig+0xe8>
 8008dfe:	e000      	b.n	8008e02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0302 	and.w	r3, r3, #2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d063      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e0e:	4b4a      	ldr	r3, [pc, #296]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f003 030c 	and.w	r3, r3, #12
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00b      	beq.n	8008e32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e1a:	4b47      	ldr	r3, [pc, #284]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e22:	2b08      	cmp	r3, #8
 8008e24:	d11c      	bne.n	8008e60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e26:	4b44      	ldr	r3, [pc, #272]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d116      	bne.n	8008e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e32:	4b41      	ldr	r3, [pc, #260]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d005      	beq.n	8008e4a <HAL_RCC_OscConfig+0x152>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d001      	beq.n	8008e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e1c7      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e4a:	4b3b      	ldr	r3, [pc, #236]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4937      	ldr	r1, [pc, #220]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e5e:	e03a      	b.n	8008ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d020      	beq.n	8008eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e68:	4b34      	ldr	r3, [pc, #208]	; (8008f3c <HAL_RCC_OscConfig+0x244>)
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6e:	f7fe f9fb 	bl	8007268 <HAL_GetTick>
 8008e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e74:	e008      	b.n	8008e88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e76:	f7fe f9f7 	bl	8007268 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d901      	bls.n	8008e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e1a8      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e88:	4b2b      	ldr	r3, [pc, #172]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0f0      	beq.n	8008e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e94:	4b28      	ldr	r3, [pc, #160]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	4925      	ldr	r1, [pc, #148]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	600b      	str	r3, [r1, #0]
 8008ea8:	e015      	b.n	8008ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008eaa:	4b24      	ldr	r3, [pc, #144]	; (8008f3c <HAL_RCC_OscConfig+0x244>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb0:	f7fe f9da 	bl	8007268 <HAL_GetTick>
 8008eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eb6:	e008      	b.n	8008eca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008eb8:	f7fe f9d6 	bl	8007268 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e187      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eca:	4b1b      	ldr	r3, [pc, #108]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1f0      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0308 	and.w	r3, r3, #8
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d036      	beq.n	8008f50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d016      	beq.n	8008f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008eea:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <HAL_RCC_OscConfig+0x248>)
 8008eec:	2201      	movs	r2, #1
 8008eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ef0:	f7fe f9ba 	bl	8007268 <HAL_GetTick>
 8008ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ef6:	e008      	b.n	8008f0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ef8:	f7fe f9b6 	bl	8007268 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e167      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <HAL_RCC_OscConfig+0x240>)
 8008f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f0e:	f003 0302 	and.w	r3, r3, #2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0f0      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x200>
 8008f16:	e01b      	b.n	8008f50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f18:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <HAL_RCC_OscConfig+0x248>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f1e:	f7fe f9a3 	bl	8007268 <HAL_GetTick>
 8008f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f24:	e00e      	b.n	8008f44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f26:	f7fe f99f 	bl	8007268 <HAL_GetTick>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d907      	bls.n	8008f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e150      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	42470000 	.word	0x42470000
 8008f40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f44:	4b88      	ldr	r3, [pc, #544]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1ea      	bne.n	8008f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 8097 	beq.w	800908c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f62:	4b81      	ldr	r3, [pc, #516]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10f      	bne.n	8008f8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
 8008f72:	4b7d      	ldr	r3, [pc, #500]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f76:	4a7c      	ldr	r2, [pc, #496]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8008f7e:	4b7a      	ldr	r3, [pc, #488]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f86:	60bb      	str	r3, [r7, #8]
 8008f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f8e:	4b77      	ldr	r3, [pc, #476]	; (800916c <HAL_RCC_OscConfig+0x474>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d118      	bne.n	8008fcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f9a:	4b74      	ldr	r3, [pc, #464]	; (800916c <HAL_RCC_OscConfig+0x474>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a73      	ldr	r2, [pc, #460]	; (800916c <HAL_RCC_OscConfig+0x474>)
 8008fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fa6:	f7fe f95f 	bl	8007268 <HAL_GetTick>
 8008faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fac:	e008      	b.n	8008fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fae:	f7fe f95b 	bl	8007268 <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d901      	bls.n	8008fc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e10c      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fc0:	4b6a      	ldr	r3, [pc, #424]	; (800916c <HAL_RCC_OscConfig+0x474>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0f0      	beq.n	8008fae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d106      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x2ea>
 8008fd4:	4b64      	ldr	r3, [pc, #400]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd8:	4a63      	ldr	r2, [pc, #396]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008fda:	f043 0301 	orr.w	r3, r3, #1
 8008fde:	6713      	str	r3, [r2, #112]	; 0x70
 8008fe0:	e01c      	b.n	800901c <HAL_RCC_OscConfig+0x324>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	2b05      	cmp	r3, #5
 8008fe8:	d10c      	bne.n	8009004 <HAL_RCC_OscConfig+0x30c>
 8008fea:	4b5f      	ldr	r3, [pc, #380]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fee:	4a5e      	ldr	r2, [pc, #376]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008ff0:	f043 0304 	orr.w	r3, r3, #4
 8008ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ff6:	4b5c      	ldr	r3, [pc, #368]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffa:	4a5b      	ldr	r2, [pc, #364]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8008ffc:	f043 0301 	orr.w	r3, r3, #1
 8009000:	6713      	str	r3, [r2, #112]	; 0x70
 8009002:	e00b      	b.n	800901c <HAL_RCC_OscConfig+0x324>
 8009004:	4b58      	ldr	r3, [pc, #352]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8009006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009008:	4a57      	ldr	r2, [pc, #348]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 800900a:	f023 0301 	bic.w	r3, r3, #1
 800900e:	6713      	str	r3, [r2, #112]	; 0x70
 8009010:	4b55      	ldr	r3, [pc, #340]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8009012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009014:	4a54      	ldr	r2, [pc, #336]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8009016:	f023 0304 	bic.w	r3, r3, #4
 800901a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d015      	beq.n	8009050 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009024:	f7fe f920 	bl	8007268 <HAL_GetTick>
 8009028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800902a:	e00a      	b.n	8009042 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800902c:	f7fe f91c 	bl	8007268 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	f241 3288 	movw	r2, #5000	; 0x1388
 800903a:	4293      	cmp	r3, r2
 800903c:	d901      	bls.n	8009042 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e0cb      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009042:	4b49      	ldr	r3, [pc, #292]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8009044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0ee      	beq.n	800902c <HAL_RCC_OscConfig+0x334>
 800904e:	e014      	b.n	800907a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009050:	f7fe f90a 	bl	8007268 <HAL_GetTick>
 8009054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009056:	e00a      	b.n	800906e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009058:	f7fe f906 	bl	8007268 <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	f241 3288 	movw	r2, #5000	; 0x1388
 8009066:	4293      	cmp	r3, r2
 8009068:	d901      	bls.n	800906e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e0b5      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800906e:	4b3e      	ldr	r3, [pc, #248]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8009070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1ee      	bne.n	8009058 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800907a:	7dfb      	ldrb	r3, [r7, #23]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d105      	bne.n	800908c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009080:	4b39      	ldr	r3, [pc, #228]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8009082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009084:	4a38      	ldr	r2, [pc, #224]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8009086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800908a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 80a1 	beq.w	80091d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009096:	4b34      	ldr	r3, [pc, #208]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f003 030c 	and.w	r3, r3, #12
 800909e:	2b08      	cmp	r3, #8
 80090a0:	d05c      	beq.n	800915c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d141      	bne.n	800912e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090aa:	4b31      	ldr	r3, [pc, #196]	; (8009170 <HAL_RCC_OscConfig+0x478>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090b0:	f7fe f8da 	bl	8007268 <HAL_GetTick>
 80090b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090b6:	e008      	b.n	80090ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090b8:	f7fe f8d6 	bl	8007268 <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d901      	bls.n	80090ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e087      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090ca:	4b27      	ldr	r3, [pc, #156]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1f0      	bne.n	80090b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	69da      	ldr	r2, [r3, #28]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	431a      	orrs	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	019b      	lsls	r3, r3, #6
 80090e6:	431a      	orrs	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ec:	085b      	lsrs	r3, r3, #1
 80090ee:	3b01      	subs	r3, #1
 80090f0:	041b      	lsls	r3, r3, #16
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	061b      	lsls	r3, r3, #24
 80090fa:	491b      	ldr	r1, [pc, #108]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009100:	4b1b      	ldr	r3, [pc, #108]	; (8009170 <HAL_RCC_OscConfig+0x478>)
 8009102:	2201      	movs	r2, #1
 8009104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009106:	f7fe f8af 	bl	8007268 <HAL_GetTick>
 800910a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800910c:	e008      	b.n	8009120 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800910e:	f7fe f8ab 	bl	8007268 <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	2b02      	cmp	r3, #2
 800911a:	d901      	bls.n	8009120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e05c      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009120:	4b11      	ldr	r3, [pc, #68]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0f0      	beq.n	800910e <HAL_RCC_OscConfig+0x416>
 800912c:	e054      	b.n	80091d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800912e:	4b10      	ldr	r3, [pc, #64]	; (8009170 <HAL_RCC_OscConfig+0x478>)
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009134:	f7fe f898 	bl	8007268 <HAL_GetTick>
 8009138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800913a:	e008      	b.n	800914e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800913c:	f7fe f894 	bl	8007268 <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	2b02      	cmp	r3, #2
 8009148:	d901      	bls.n	800914e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800914a:	2303      	movs	r3, #3
 800914c:	e045      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800914e:	4b06      	ldr	r3, [pc, #24]	; (8009168 <HAL_RCC_OscConfig+0x470>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1f0      	bne.n	800913c <HAL_RCC_OscConfig+0x444>
 800915a:	e03d      	b.n	80091d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d107      	bne.n	8009174 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e038      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
 8009168:	40023800 	.word	0x40023800
 800916c:	40007000 	.word	0x40007000
 8009170:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009174:	4b1b      	ldr	r3, [pc, #108]	; (80091e4 <HAL_RCC_OscConfig+0x4ec>)
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d028      	beq.n	80091d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800918c:	429a      	cmp	r2, r3
 800918e:	d121      	bne.n	80091d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800919a:	429a      	cmp	r2, r3
 800919c:	d11a      	bne.n	80091d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80091a4:	4013      	ands	r3, r2
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d111      	bne.n	80091d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	3b01      	subs	r3, #1
 80091be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d107      	bne.n	80091d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d001      	beq.n	80091d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e000      	b.n	80091da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	40023800 	.word	0x40023800

080091e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e0cc      	b.n	8009396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80091fc:	4b68      	ldr	r3, [pc, #416]	; (80093a0 <HAL_RCC_ClockConfig+0x1b8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0307 	and.w	r3, r3, #7
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d90c      	bls.n	8009224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800920a:	4b65      	ldr	r3, [pc, #404]	; (80093a0 <HAL_RCC_ClockConfig+0x1b8>)
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009212:	4b63      	ldr	r3, [pc, #396]	; (80093a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d001      	beq.n	8009224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e0b8      	b.n	8009396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b00      	cmp	r3, #0
 800922e:	d020      	beq.n	8009272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800923c:	4b59      	ldr	r3, [pc, #356]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	4a58      	ldr	r2, [pc, #352]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0308 	and.w	r3, r3, #8
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009254:	4b53      	ldr	r3, [pc, #332]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	4a52      	ldr	r2, [pc, #328]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 800925a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800925e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009260:	4b50      	ldr	r3, [pc, #320]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	494d      	ldr	r1, [pc, #308]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 800926e:	4313      	orrs	r3, r2
 8009270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d044      	beq.n	8009308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d107      	bne.n	8009296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009286:	4b47      	ldr	r3, [pc, #284]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800928e:	2b00      	cmp	r3, #0
 8009290:	d119      	bne.n	80092c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e07f      	b.n	8009396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d003      	beq.n	80092a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d107      	bne.n	80092b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092a6:	4b3f      	ldr	r3, [pc, #252]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d109      	bne.n	80092c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e06f      	b.n	8009396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092b6:	4b3b      	ldr	r3, [pc, #236]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e067      	b.n	8009396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092c6:	4b37      	ldr	r3, [pc, #220]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f023 0203 	bic.w	r2, r3, #3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	4934      	ldr	r1, [pc, #208]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80092d8:	f7fd ffc6 	bl	8007268 <HAL_GetTick>
 80092dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092de:	e00a      	b.n	80092f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092e0:	f7fd ffc2 	bl	8007268 <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d901      	bls.n	80092f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e04f      	b.n	8009396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092f6:	4b2b      	ldr	r3, [pc, #172]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f003 020c 	and.w	r2, r3, #12
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	429a      	cmp	r2, r3
 8009306:	d1eb      	bne.n	80092e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009308:	4b25      	ldr	r3, [pc, #148]	; (80093a0 <HAL_RCC_ClockConfig+0x1b8>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0307 	and.w	r3, r3, #7
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d20c      	bcs.n	8009330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009316:	4b22      	ldr	r3, [pc, #136]	; (80093a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	b2d2      	uxtb	r2, r2
 800931c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800931e:	4b20      	ldr	r3, [pc, #128]	; (80093a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0307 	and.w	r3, r3, #7
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	429a      	cmp	r2, r3
 800932a:	d001      	beq.n	8009330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e032      	b.n	8009396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d008      	beq.n	800934e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800933c:	4b19      	ldr	r3, [pc, #100]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	4916      	ldr	r1, [pc, #88]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 800934a:	4313      	orrs	r3, r2
 800934c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0308 	and.w	r3, r3, #8
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800935a:	4b12      	ldr	r3, [pc, #72]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	490e      	ldr	r1, [pc, #56]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 800936a:	4313      	orrs	r3, r2
 800936c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800936e:	f000 f821 	bl	80093b4 <HAL_RCC_GetSysClockFreq>
 8009372:	4602      	mov	r2, r0
 8009374:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	091b      	lsrs	r3, r3, #4
 800937a:	f003 030f 	and.w	r3, r3, #15
 800937e:	490a      	ldr	r1, [pc, #40]	; (80093a8 <HAL_RCC_ClockConfig+0x1c0>)
 8009380:	5ccb      	ldrb	r3, [r1, r3]
 8009382:	fa22 f303 	lsr.w	r3, r2, r3
 8009386:	4a09      	ldr	r2, [pc, #36]	; (80093ac <HAL_RCC_ClockConfig+0x1c4>)
 8009388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800938a:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <HAL_RCC_ClockConfig+0x1c8>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4618      	mov	r0, r3
 8009390:	f7fd ff26 	bl	80071e0 <HAL_InitTick>

  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	40023c00 	.word	0x40023c00
 80093a4:	40023800 	.word	0x40023800
 80093a8:	0800d46c 	.word	0x0800d46c
 80093ac:	20000028 	.word	0x20000028
 80093b0:	2000002c 	.word	0x2000002c

080093b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093b8:	b094      	sub	sp, #80	; 0x50
 80093ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	647b      	str	r3, [r7, #68]	; 0x44
 80093c0:	2300      	movs	r3, #0
 80093c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093c4:	2300      	movs	r3, #0
 80093c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093cc:	4b79      	ldr	r3, [pc, #484]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f003 030c 	and.w	r3, r3, #12
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d00d      	beq.n	80093f4 <HAL_RCC_GetSysClockFreq+0x40>
 80093d8:	2b08      	cmp	r3, #8
 80093da:	f200 80e1 	bhi.w	80095a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <HAL_RCC_GetSysClockFreq+0x34>
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	d003      	beq.n	80093ee <HAL_RCC_GetSysClockFreq+0x3a>
 80093e6:	e0db      	b.n	80095a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80093e8:	4b73      	ldr	r3, [pc, #460]	; (80095b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80093ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80093ec:	e0db      	b.n	80095a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80093ee:	4b73      	ldr	r3, [pc, #460]	; (80095bc <HAL_RCC_GetSysClockFreq+0x208>)
 80093f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80093f2:	e0d8      	b.n	80095a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093f4:	4b6f      	ldr	r3, [pc, #444]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80093fe:	4b6d      	ldr	r3, [pc, #436]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d063      	beq.n	80094d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800940a:	4b6a      	ldr	r3, [pc, #424]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	099b      	lsrs	r3, r3, #6
 8009410:	2200      	movs	r2, #0
 8009412:	63bb      	str	r3, [r7, #56]	; 0x38
 8009414:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941c:	633b      	str	r3, [r7, #48]	; 0x30
 800941e:	2300      	movs	r3, #0
 8009420:	637b      	str	r3, [r7, #52]	; 0x34
 8009422:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009426:	4622      	mov	r2, r4
 8009428:	462b      	mov	r3, r5
 800942a:	f04f 0000 	mov.w	r0, #0
 800942e:	f04f 0100 	mov.w	r1, #0
 8009432:	0159      	lsls	r1, r3, #5
 8009434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009438:	0150      	lsls	r0, r2, #5
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4621      	mov	r1, r4
 8009440:	1a51      	subs	r1, r2, r1
 8009442:	6139      	str	r1, [r7, #16]
 8009444:	4629      	mov	r1, r5
 8009446:	eb63 0301 	sbc.w	r3, r3, r1
 800944a:	617b      	str	r3, [r7, #20]
 800944c:	f04f 0200 	mov.w	r2, #0
 8009450:	f04f 0300 	mov.w	r3, #0
 8009454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009458:	4659      	mov	r1, fp
 800945a:	018b      	lsls	r3, r1, #6
 800945c:	4651      	mov	r1, sl
 800945e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009462:	4651      	mov	r1, sl
 8009464:	018a      	lsls	r2, r1, #6
 8009466:	4651      	mov	r1, sl
 8009468:	ebb2 0801 	subs.w	r8, r2, r1
 800946c:	4659      	mov	r1, fp
 800946e:	eb63 0901 	sbc.w	r9, r3, r1
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	f04f 0300 	mov.w	r3, #0
 800947a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800947e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009486:	4690      	mov	r8, r2
 8009488:	4699      	mov	r9, r3
 800948a:	4623      	mov	r3, r4
 800948c:	eb18 0303 	adds.w	r3, r8, r3
 8009490:	60bb      	str	r3, [r7, #8]
 8009492:	462b      	mov	r3, r5
 8009494:	eb49 0303 	adc.w	r3, r9, r3
 8009498:	60fb      	str	r3, [r7, #12]
 800949a:	f04f 0200 	mov.w	r2, #0
 800949e:	f04f 0300 	mov.w	r3, #0
 80094a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80094a6:	4629      	mov	r1, r5
 80094a8:	024b      	lsls	r3, r1, #9
 80094aa:	4621      	mov	r1, r4
 80094ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80094b0:	4621      	mov	r1, r4
 80094b2:	024a      	lsls	r2, r1, #9
 80094b4:	4610      	mov	r0, r2
 80094b6:	4619      	mov	r1, r3
 80094b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ba:	2200      	movs	r2, #0
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80094be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094c4:	f7f7 fb4c 	bl	8000b60 <__aeabi_uldivmod>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4613      	mov	r3, r2
 80094ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094d0:	e058      	b.n	8009584 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094d2:	4b38      	ldr	r3, [pc, #224]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	099b      	lsrs	r3, r3, #6
 80094d8:	2200      	movs	r2, #0
 80094da:	4618      	mov	r0, r3
 80094dc:	4611      	mov	r1, r2
 80094de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80094e2:	623b      	str	r3, [r7, #32]
 80094e4:	2300      	movs	r3, #0
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24
 80094e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80094ec:	4642      	mov	r2, r8
 80094ee:	464b      	mov	r3, r9
 80094f0:	f04f 0000 	mov.w	r0, #0
 80094f4:	f04f 0100 	mov.w	r1, #0
 80094f8:	0159      	lsls	r1, r3, #5
 80094fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80094fe:	0150      	lsls	r0, r2, #5
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	4641      	mov	r1, r8
 8009506:	ebb2 0a01 	subs.w	sl, r2, r1
 800950a:	4649      	mov	r1, r9
 800950c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009510:	f04f 0200 	mov.w	r2, #0
 8009514:	f04f 0300 	mov.w	r3, #0
 8009518:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800951c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009520:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009524:	ebb2 040a 	subs.w	r4, r2, sl
 8009528:	eb63 050b 	sbc.w	r5, r3, fp
 800952c:	f04f 0200 	mov.w	r2, #0
 8009530:	f04f 0300 	mov.w	r3, #0
 8009534:	00eb      	lsls	r3, r5, #3
 8009536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800953a:	00e2      	lsls	r2, r4, #3
 800953c:	4614      	mov	r4, r2
 800953e:	461d      	mov	r5, r3
 8009540:	4643      	mov	r3, r8
 8009542:	18e3      	adds	r3, r4, r3
 8009544:	603b      	str	r3, [r7, #0]
 8009546:	464b      	mov	r3, r9
 8009548:	eb45 0303 	adc.w	r3, r5, r3
 800954c:	607b      	str	r3, [r7, #4]
 800954e:	f04f 0200 	mov.w	r2, #0
 8009552:	f04f 0300 	mov.w	r3, #0
 8009556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800955a:	4629      	mov	r1, r5
 800955c:	028b      	lsls	r3, r1, #10
 800955e:	4621      	mov	r1, r4
 8009560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009564:	4621      	mov	r1, r4
 8009566:	028a      	lsls	r2, r1, #10
 8009568:	4610      	mov	r0, r2
 800956a:	4619      	mov	r1, r3
 800956c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800956e:	2200      	movs	r2, #0
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	61fa      	str	r2, [r7, #28]
 8009574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009578:	f7f7 faf2 	bl	8000b60 <__aeabi_uldivmod>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	4613      	mov	r3, r2
 8009582:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009584:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	0c1b      	lsrs	r3, r3, #16
 800958a:	f003 0303 	and.w	r3, r3, #3
 800958e:	3301      	adds	r3, #1
 8009590:	005b      	lsls	r3, r3, #1
 8009592:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009598:	fbb2 f3f3 	udiv	r3, r2, r3
 800959c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800959e:	e002      	b.n	80095a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80095a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80095a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3750      	adds	r7, #80	; 0x50
 80095ac:	46bd      	mov	sp, r7
 80095ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095b2:	bf00      	nop
 80095b4:	40023800 	.word	0x40023800
 80095b8:	00f42400 	.word	0x00f42400
 80095bc:	007a1200 	.word	0x007a1200

080095c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095c0:	b480      	push	{r7}
 80095c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095c4:	4b03      	ldr	r3, [pc, #12]	; (80095d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80095c6:	681b      	ldr	r3, [r3, #0]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	20000028 	.word	0x20000028

080095d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80095dc:	f7ff fff0 	bl	80095c0 <HAL_RCC_GetHCLKFreq>
 80095e0:	4602      	mov	r2, r0
 80095e2:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	0a9b      	lsrs	r3, r3, #10
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	4903      	ldr	r1, [pc, #12]	; (80095fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80095ee:	5ccb      	ldrb	r3, [r1, r3]
 80095f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	40023800 	.word	0x40023800
 80095fc:	0800d47c 	.word	0x0800d47c

08009600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009604:	f7ff ffdc 	bl	80095c0 <HAL_RCC_GetHCLKFreq>
 8009608:	4602      	mov	r2, r0
 800960a:	4b05      	ldr	r3, [pc, #20]	; (8009620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	0b5b      	lsrs	r3, r3, #13
 8009610:	f003 0307 	and.w	r3, r3, #7
 8009614:	4903      	ldr	r1, [pc, #12]	; (8009624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009616:	5ccb      	ldrb	r3, [r1, r3]
 8009618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800961c:	4618      	mov	r0, r3
 800961e:	bd80      	pop	{r7, pc}
 8009620:	40023800 	.word	0x40023800
 8009624:	0800d47c 	.word	0x0800d47c

08009628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e041      	b.n	80096be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d106      	bne.n	8009654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7fd fba8 	bl	8006da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3304      	adds	r3, #4
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f000 fd66 	bl	800a138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d001      	beq.n	80096e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e044      	b.n	800976a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68da      	ldr	r2, [r3, #12]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0201 	orr.w	r2, r2, #1
 80096f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a1e      	ldr	r2, [pc, #120]	; (8009778 <HAL_TIM_Base_Start_IT+0xb0>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d018      	beq.n	8009734 <HAL_TIM_Base_Start_IT+0x6c>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970a:	d013      	beq.n	8009734 <HAL_TIM_Base_Start_IT+0x6c>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a1a      	ldr	r2, [pc, #104]	; (800977c <HAL_TIM_Base_Start_IT+0xb4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d00e      	beq.n	8009734 <HAL_TIM_Base_Start_IT+0x6c>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a19      	ldr	r2, [pc, #100]	; (8009780 <HAL_TIM_Base_Start_IT+0xb8>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d009      	beq.n	8009734 <HAL_TIM_Base_Start_IT+0x6c>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a17      	ldr	r2, [pc, #92]	; (8009784 <HAL_TIM_Base_Start_IT+0xbc>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d004      	beq.n	8009734 <HAL_TIM_Base_Start_IT+0x6c>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a16      	ldr	r2, [pc, #88]	; (8009788 <HAL_TIM_Base_Start_IT+0xc0>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d111      	bne.n	8009758 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f003 0307 	and.w	r3, r3, #7
 800973e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b06      	cmp	r3, #6
 8009744:	d010      	beq.n	8009768 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0201 	orr.w	r2, r2, #1
 8009754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009756:	e007      	b.n	8009768 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0201 	orr.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	40010000 	.word	0x40010000
 800977c:	40000400 	.word	0x40000400
 8009780:	40000800 	.word	0x40000800
 8009784:	40000c00 	.word	0x40000c00
 8009788:	40014000 	.word	0x40014000

0800978c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e041      	b.n	8009822 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7fd fb1c 	bl	8006df0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2202      	movs	r2, #2
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4610      	mov	r0, r2
 80097cc:	f000 fcb4 	bl	800a138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d109      	bne.n	8009850 <HAL_TIM_PWM_Start+0x24>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b01      	cmp	r3, #1
 8009846:	bf14      	ite	ne
 8009848:	2301      	movne	r3, #1
 800984a:	2300      	moveq	r3, #0
 800984c:	b2db      	uxtb	r3, r3
 800984e:	e022      	b.n	8009896 <HAL_TIM_PWM_Start+0x6a>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2b04      	cmp	r3, #4
 8009854:	d109      	bne.n	800986a <HAL_TIM_PWM_Start+0x3e>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b01      	cmp	r3, #1
 8009860:	bf14      	ite	ne
 8009862:	2301      	movne	r3, #1
 8009864:	2300      	moveq	r3, #0
 8009866:	b2db      	uxtb	r3, r3
 8009868:	e015      	b.n	8009896 <HAL_TIM_PWM_Start+0x6a>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b08      	cmp	r3, #8
 800986e:	d109      	bne.n	8009884 <HAL_TIM_PWM_Start+0x58>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b01      	cmp	r3, #1
 800987a:	bf14      	ite	ne
 800987c:	2301      	movne	r3, #1
 800987e:	2300      	moveq	r3, #0
 8009880:	b2db      	uxtb	r3, r3
 8009882:	e008      	b.n	8009896 <HAL_TIM_PWM_Start+0x6a>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b01      	cmp	r3, #1
 800988e:	bf14      	ite	ne
 8009890:	2301      	movne	r3, #1
 8009892:	2300      	moveq	r3, #0
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e068      	b.n	8009970 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <HAL_TIM_PWM_Start+0x82>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2202      	movs	r2, #2
 80098a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098ac:	e013      	b.n	80098d6 <HAL_TIM_PWM_Start+0xaa>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d104      	bne.n	80098be <HAL_TIM_PWM_Start+0x92>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098bc:	e00b      	b.n	80098d6 <HAL_TIM_PWM_Start+0xaa>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b08      	cmp	r3, #8
 80098c2:	d104      	bne.n	80098ce <HAL_TIM_PWM_Start+0xa2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2202      	movs	r2, #2
 80098c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098cc:	e003      	b.n	80098d6 <HAL_TIM_PWM_Start+0xaa>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2201      	movs	r2, #1
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fedc 	bl	800a69c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a23      	ldr	r2, [pc, #140]	; (8009978 <HAL_TIM_PWM_Start+0x14c>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d107      	bne.n	80098fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a1d      	ldr	r2, [pc, #116]	; (8009978 <HAL_TIM_PWM_Start+0x14c>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d018      	beq.n	800993a <HAL_TIM_PWM_Start+0x10e>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009910:	d013      	beq.n	800993a <HAL_TIM_PWM_Start+0x10e>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a19      	ldr	r2, [pc, #100]	; (800997c <HAL_TIM_PWM_Start+0x150>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d00e      	beq.n	800993a <HAL_TIM_PWM_Start+0x10e>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a17      	ldr	r2, [pc, #92]	; (8009980 <HAL_TIM_PWM_Start+0x154>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d009      	beq.n	800993a <HAL_TIM_PWM_Start+0x10e>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a16      	ldr	r2, [pc, #88]	; (8009984 <HAL_TIM_PWM_Start+0x158>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d004      	beq.n	800993a <HAL_TIM_PWM_Start+0x10e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a14      	ldr	r2, [pc, #80]	; (8009988 <HAL_TIM_PWM_Start+0x15c>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d111      	bne.n	800995e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f003 0307 	and.w	r3, r3, #7
 8009944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b06      	cmp	r3, #6
 800994a:	d010      	beq.n	800996e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f042 0201 	orr.w	r2, r2, #1
 800995a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800995c:	e007      	b.n	800996e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f042 0201 	orr.w	r2, r2, #1
 800996c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	40010000 	.word	0x40010000
 800997c:	40000400 	.word	0x40000400
 8009980:	40000800 	.word	0x40000800
 8009984:	40000c00 	.word	0x40000c00
 8009988:	40014000 	.word	0x40014000

0800998c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e097      	b.n	8009ad0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d106      	bne.n	80099ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7fd f975 	bl	8006ca4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2202      	movs	r2, #2
 80099be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	6812      	ldr	r2, [r2, #0]
 80099cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099d0:	f023 0307 	bic.w	r3, r3, #7
 80099d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3304      	adds	r3, #4
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f000 fba9 	bl	800a138 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6a1b      	ldr	r3, [r3, #32]
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a0e:	f023 0303 	bic.w	r3, r3, #3
 8009a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	689a      	ldr	r2, [r3, #8]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	021b      	lsls	r3, r3, #8
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009a2c:	f023 030c 	bic.w	r3, r3, #12
 8009a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	021b      	lsls	r3, r3, #8
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	011a      	lsls	r2, r3, #4
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	031b      	lsls	r3, r3, #12
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009a6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009a72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	011b      	lsls	r3, r3, #4
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ae8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009af0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009af8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d110      	bne.n	8009b2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d102      	bne.n	8009b14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b0e:	7b7b      	ldrb	r3, [r7, #13]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d001      	beq.n	8009b18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e069      	b.n	8009bec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b28:	e031      	b.n	8009b8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d110      	bne.n	8009b52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d102      	bne.n	8009b3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b36:	7b3b      	ldrb	r3, [r7, #12]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d001      	beq.n	8009b40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e055      	b.n	8009bec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b50:	e01d      	b.n	8009b8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d108      	bne.n	8009b6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d105      	bne.n	8009b6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b5e:	7b7b      	ldrb	r3, [r7, #13]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d102      	bne.n	8009b6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b64:	7b3b      	ldrb	r3, [r7, #12]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d001      	beq.n	8009b6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e03e      	b.n	8009bec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2202      	movs	r2, #2
 8009b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2202      	movs	r2, #2
 8009b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d003      	beq.n	8009b9c <HAL_TIM_Encoder_Start+0xc4>
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d008      	beq.n	8009bac <HAL_TIM_Encoder_Start+0xd4>
 8009b9a:	e00f      	b.n	8009bbc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f000 fd79 	bl	800a69c <TIM_CCxChannelCmd>
      break;
 8009baa:	e016      	b.n	8009bda <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	2104      	movs	r1, #4
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 fd71 	bl	800a69c <TIM_CCxChannelCmd>
      break;
 8009bba:	e00e      	b.n	8009bda <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 fd69 	bl	800a69c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	2104      	movs	r1, #4
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 fd62 	bl	800a69c <TIM_CCxChannelCmd>
      break;
 8009bd8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f042 0201 	orr.w	r2, r2, #1
 8009be8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d020      	beq.n	8009c58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d01b      	beq.n	8009c58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f06f 0202 	mvn.w	r2, #2
 8009c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	f003 0303 	and.w	r3, r3, #3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fa5b 	bl	800a0fa <HAL_TIM_IC_CaptureCallback>
 8009c44:	e005      	b.n	8009c52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa4d 	bl	800a0e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fa5e 	bl	800a10e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f003 0304 	and.w	r3, r3, #4
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d020      	beq.n	8009ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f003 0304 	and.w	r3, r3, #4
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01b      	beq.n	8009ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f06f 0204 	mvn.w	r2, #4
 8009c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fa35 	bl	800a0fa <HAL_TIM_IC_CaptureCallback>
 8009c90:	e005      	b.n	8009c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fa27 	bl	800a0e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fa38 	bl	800a10e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f003 0308 	and.w	r3, r3, #8
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d020      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01b      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0208 	mvn.w	r2, #8
 8009cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2204      	movs	r2, #4
 8009cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	69db      	ldr	r3, [r3, #28]
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fa0f 	bl	800a0fa <HAL_TIM_IC_CaptureCallback>
 8009cdc:	e005      	b.n	8009cea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fa01 	bl	800a0e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fa12 	bl	800a10e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f003 0310 	and.w	r3, r3, #16
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d020      	beq.n	8009d3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f003 0310 	and.w	r3, r3, #16
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01b      	beq.n	8009d3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f06f 0210 	mvn.w	r2, #16
 8009d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2208      	movs	r2, #8
 8009d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f9e9 	bl	800a0fa <HAL_TIM_IC_CaptureCallback>
 8009d28:	e005      	b.n	8009d36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f9db 	bl	800a0e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f9ec 	bl	800a10e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00c      	beq.n	8009d60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d007      	beq.n	8009d60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f06f 0201 	mvn.w	r2, #1
 8009d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7f8 fc04 	bl	8002568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00c      	beq.n	8009d84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d007      	beq.n	8009d84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fd2a 	bl	800a7d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00c      	beq.n	8009da8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d007      	beq.n	8009da8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f9bd 	bl	800a122 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00c      	beq.n	8009dcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f003 0320 	and.w	r3, r3, #32
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d007      	beq.n	8009dcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f06f 0220 	mvn.w	r2, #32
 8009dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fcfc 	bl	800a7c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dcc:	bf00      	nop
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e0ae      	b.n	8009f50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b0c      	cmp	r3, #12
 8009dfe:	f200 809f 	bhi.w	8009f40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e02:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e3d 	.word	0x08009e3d
 8009e0c:	08009f41 	.word	0x08009f41
 8009e10:	08009f41 	.word	0x08009f41
 8009e14:	08009f41 	.word	0x08009f41
 8009e18:	08009e7d 	.word	0x08009e7d
 8009e1c:	08009f41 	.word	0x08009f41
 8009e20:	08009f41 	.word	0x08009f41
 8009e24:	08009f41 	.word	0x08009f41
 8009e28:	08009ebf 	.word	0x08009ebf
 8009e2c:	08009f41 	.word	0x08009f41
 8009e30:	08009f41 	.word	0x08009f41
 8009e34:	08009f41 	.word	0x08009f41
 8009e38:	08009eff 	.word	0x08009eff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68b9      	ldr	r1, [r7, #8]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 fa04 	bl	800a250 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	699a      	ldr	r2, [r3, #24]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0208 	orr.w	r2, r2, #8
 8009e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	699a      	ldr	r2, [r3, #24]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 0204 	bic.w	r2, r2, #4
 8009e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6999      	ldr	r1, [r3, #24]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	691a      	ldr	r2, [r3, #16]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	619a      	str	r2, [r3, #24]
      break;
 8009e7a:	e064      	b.n	8009f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68b9      	ldr	r1, [r7, #8]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 fa4a 	bl	800a31c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	699a      	ldr	r2, [r3, #24]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	699a      	ldr	r2, [r3, #24]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6999      	ldr	r1, [r3, #24]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	021a      	lsls	r2, r3, #8
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	619a      	str	r2, [r3, #24]
      break;
 8009ebc:	e043      	b.n	8009f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68b9      	ldr	r1, [r7, #8]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 fa95 	bl	800a3f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	69da      	ldr	r2, [r3, #28]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f042 0208 	orr.w	r2, r2, #8
 8009ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	69da      	ldr	r2, [r3, #28]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 0204 	bic.w	r2, r2, #4
 8009ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	69d9      	ldr	r1, [r3, #28]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	691a      	ldr	r2, [r3, #16]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	430a      	orrs	r2, r1
 8009efa:	61da      	str	r2, [r3, #28]
      break;
 8009efc:	e023      	b.n	8009f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68b9      	ldr	r1, [r7, #8]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 fadf 	bl	800a4c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	69da      	ldr	r2, [r3, #28]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	69da      	ldr	r2, [r3, #28]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	69d9      	ldr	r1, [r3, #28]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	021a      	lsls	r2, r3, #8
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	61da      	str	r2, [r3, #28]
      break;
 8009f3e:	e002      	b.n	8009f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	75fb      	strb	r3, [r7, #23]
      break;
 8009f44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d101      	bne.n	8009f74 <HAL_TIM_ConfigClockSource+0x1c>
 8009f70:	2302      	movs	r3, #2
 8009f72:	e0b4      	b.n	800a0de <HAL_TIM_ConfigClockSource+0x186>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fac:	d03e      	beq.n	800a02c <HAL_TIM_ConfigClockSource+0xd4>
 8009fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb2:	f200 8087 	bhi.w	800a0c4 <HAL_TIM_ConfigClockSource+0x16c>
 8009fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fba:	f000 8086 	beq.w	800a0ca <HAL_TIM_ConfigClockSource+0x172>
 8009fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc2:	d87f      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x16c>
 8009fc4:	2b70      	cmp	r3, #112	; 0x70
 8009fc6:	d01a      	beq.n	8009ffe <HAL_TIM_ConfigClockSource+0xa6>
 8009fc8:	2b70      	cmp	r3, #112	; 0x70
 8009fca:	d87b      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x16c>
 8009fcc:	2b60      	cmp	r3, #96	; 0x60
 8009fce:	d050      	beq.n	800a072 <HAL_TIM_ConfigClockSource+0x11a>
 8009fd0:	2b60      	cmp	r3, #96	; 0x60
 8009fd2:	d877      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x16c>
 8009fd4:	2b50      	cmp	r3, #80	; 0x50
 8009fd6:	d03c      	beq.n	800a052 <HAL_TIM_ConfigClockSource+0xfa>
 8009fd8:	2b50      	cmp	r3, #80	; 0x50
 8009fda:	d873      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x16c>
 8009fdc:	2b40      	cmp	r3, #64	; 0x40
 8009fde:	d058      	beq.n	800a092 <HAL_TIM_ConfigClockSource+0x13a>
 8009fe0:	2b40      	cmp	r3, #64	; 0x40
 8009fe2:	d86f      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x16c>
 8009fe4:	2b30      	cmp	r3, #48	; 0x30
 8009fe6:	d064      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x15a>
 8009fe8:	2b30      	cmp	r3, #48	; 0x30
 8009fea:	d86b      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x16c>
 8009fec:	2b20      	cmp	r3, #32
 8009fee:	d060      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x15a>
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	d867      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d05c      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x15a>
 8009ff8:	2b10      	cmp	r3, #16
 8009ffa:	d05a      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x15a>
 8009ffc:	e062      	b.n	800a0c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a00e:	f000 fb25 	bl	800a65c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	609a      	str	r2, [r3, #8]
      break;
 800a02a:	e04f      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a03c:	f000 fb0e 	bl	800a65c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a04e:	609a      	str	r2, [r3, #8]
      break;
 800a050:	e03c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a05e:	461a      	mov	r2, r3
 800a060:	f000 fa82 	bl	800a568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2150      	movs	r1, #80	; 0x50
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fadb 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 800a070:	e02c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a07e:	461a      	mov	r2, r3
 800a080:	f000 faa1 	bl	800a5c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2160      	movs	r1, #96	; 0x60
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 facb 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 800a090:	e01c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a09e:	461a      	mov	r2, r3
 800a0a0:	f000 fa62 	bl	800a568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2140      	movs	r1, #64	; 0x40
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fabb 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 800a0b0:	e00c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4610      	mov	r0, r2
 800a0be:	f000 fab2 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 800a0c2:	e003      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c8:	e000      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a0ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0ee:	bf00      	nop
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a102:	bf00      	nop
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a116:	bf00      	nop
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a12a:	bf00      	nop
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
	...

0800a138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a3a      	ldr	r2, [pc, #232]	; (800a234 <TIM_Base_SetConfig+0xfc>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d00f      	beq.n	800a170 <TIM_Base_SetConfig+0x38>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a156:	d00b      	beq.n	800a170 <TIM_Base_SetConfig+0x38>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a37      	ldr	r2, [pc, #220]	; (800a238 <TIM_Base_SetConfig+0x100>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d007      	beq.n	800a170 <TIM_Base_SetConfig+0x38>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a36      	ldr	r2, [pc, #216]	; (800a23c <TIM_Base_SetConfig+0x104>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d003      	beq.n	800a170 <TIM_Base_SetConfig+0x38>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a35      	ldr	r2, [pc, #212]	; (800a240 <TIM_Base_SetConfig+0x108>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d108      	bne.n	800a182 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	4313      	orrs	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a2b      	ldr	r2, [pc, #172]	; (800a234 <TIM_Base_SetConfig+0xfc>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d01b      	beq.n	800a1c2 <TIM_Base_SetConfig+0x8a>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a190:	d017      	beq.n	800a1c2 <TIM_Base_SetConfig+0x8a>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a28      	ldr	r2, [pc, #160]	; (800a238 <TIM_Base_SetConfig+0x100>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d013      	beq.n	800a1c2 <TIM_Base_SetConfig+0x8a>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a27      	ldr	r2, [pc, #156]	; (800a23c <TIM_Base_SetConfig+0x104>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d00f      	beq.n	800a1c2 <TIM_Base_SetConfig+0x8a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a26      	ldr	r2, [pc, #152]	; (800a240 <TIM_Base_SetConfig+0x108>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d00b      	beq.n	800a1c2 <TIM_Base_SetConfig+0x8a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a25      	ldr	r2, [pc, #148]	; (800a244 <TIM_Base_SetConfig+0x10c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d007      	beq.n	800a1c2 <TIM_Base_SetConfig+0x8a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a24      	ldr	r2, [pc, #144]	; (800a248 <TIM_Base_SetConfig+0x110>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d003      	beq.n	800a1c2 <TIM_Base_SetConfig+0x8a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a23      	ldr	r2, [pc, #140]	; (800a24c <TIM_Base_SetConfig+0x114>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d108      	bne.n	800a1d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	689a      	ldr	r2, [r3, #8]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a0e      	ldr	r2, [pc, #56]	; (800a234 <TIM_Base_SetConfig+0xfc>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d103      	bne.n	800a208 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	691a      	ldr	r2, [r3, #16]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b01      	cmp	r3, #1
 800a218:	d105      	bne.n	800a226 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	f023 0201 	bic.w	r2, r3, #1
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	611a      	str	r2, [r3, #16]
  }
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40010000 	.word	0x40010000
 800a238:	40000400 	.word	0x40000400
 800a23c:	40000800 	.word	0x40000800
 800a240:	40000c00 	.word	0x40000c00
 800a244:	40014000 	.word	0x40014000
 800a248:	40014400 	.word	0x40014400
 800a24c:	40014800 	.word	0x40014800

0800a250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	f023 0201 	bic.w	r2, r3, #1
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f023 0303 	bic.w	r3, r3, #3
 800a286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f023 0302 	bic.w	r3, r3, #2
 800a298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a1c      	ldr	r2, [pc, #112]	; (800a318 <TIM_OC1_SetConfig+0xc8>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d10c      	bne.n	800a2c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	f023 0308 	bic.w	r3, r3, #8
 800a2b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f023 0304 	bic.w	r3, r3, #4
 800a2c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a13      	ldr	r2, [pc, #76]	; (800a318 <TIM_OC1_SetConfig+0xc8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d111      	bne.n	800a2f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	621a      	str	r2, [r3, #32]
}
 800a30c:	bf00      	nop
 800a30e:	371c      	adds	r7, #28
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	40010000 	.word	0x40010000

0800a31c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	f023 0210 	bic.w	r2, r3, #16
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	021b      	lsls	r3, r3, #8
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f023 0320 	bic.w	r3, r3, #32
 800a366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	011b      	lsls	r3, r3, #4
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	4313      	orrs	r3, r2
 800a372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a1e      	ldr	r2, [pc, #120]	; (800a3f0 <TIM_OC2_SetConfig+0xd4>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d10d      	bne.n	800a398 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	011b      	lsls	r3, r3, #4
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a15      	ldr	r2, [pc, #84]	; (800a3f0 <TIM_OC2_SetConfig+0xd4>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d113      	bne.n	800a3c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	621a      	str	r2, [r3, #32]
}
 800a3e2:	bf00      	nop
 800a3e4:	371c      	adds	r7, #28
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	40010000 	.word	0x40010000

0800a3f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f023 0303 	bic.w	r3, r3, #3
 800a42a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4313      	orrs	r3, r2
 800a434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a43c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	021b      	lsls	r3, r3, #8
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	4313      	orrs	r3, r2
 800a448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a1d      	ldr	r2, [pc, #116]	; (800a4c4 <TIM_OC3_SetConfig+0xd0>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d10d      	bne.n	800a46e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	021b      	lsls	r3, r3, #8
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	4313      	orrs	r3, r2
 800a464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a46c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a14      	ldr	r2, [pc, #80]	; (800a4c4 <TIM_OC3_SetConfig+0xd0>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d113      	bne.n	800a49e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a47c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	4313      	orrs	r3, r2
 800a490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	011b      	lsls	r3, r3, #4
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	621a      	str	r2, [r3, #32]
}
 800a4b8:	bf00      	nop
 800a4ba:	371c      	adds	r7, #28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	40010000 	.word	0x40010000

0800a4c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a1b      	ldr	r3, [r3, #32]
 800a4dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	4313      	orrs	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	031b      	lsls	r3, r3, #12
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a10      	ldr	r2, [pc, #64]	; (800a564 <TIM_OC4_SetConfig+0x9c>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d109      	bne.n	800a53c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a52e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	019b      	lsls	r3, r3, #6
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4313      	orrs	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	621a      	str	r2, [r3, #32]
}
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	40010000 	.word	0x40010000

0800a568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6a1b      	ldr	r3, [r3, #32]
 800a578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	f023 0201 	bic.w	r2, r3, #1
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	011b      	lsls	r3, r3, #4
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f023 030a 	bic.w	r3, r3, #10
 800a5a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	621a      	str	r2, [r3, #32]
}
 800a5ba:	bf00      	nop
 800a5bc:	371c      	adds	r7, #28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b087      	sub	sp, #28
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	60b9      	str	r1, [r7, #8]
 800a5d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	f023 0210 	bic.w	r2, r3, #16
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	031b      	lsls	r3, r3, #12
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a602:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	011b      	lsls	r3, r3, #4
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	621a      	str	r2, [r3, #32]
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a63c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4313      	orrs	r3, r2
 800a644:	f043 0307 	orr.w	r3, r3, #7
 800a648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	609a      	str	r2, [r3, #8]
}
 800a650:	bf00      	nop
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	021a      	lsls	r2, r3, #8
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	431a      	orrs	r2, r3
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4313      	orrs	r3, r2
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	4313      	orrs	r3, r2
 800a688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	609a      	str	r2, [r3, #8]
}
 800a690:	bf00      	nop
 800a692:	371c      	adds	r7, #28
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f003 031f 	and.w	r3, r3, #31
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6a1a      	ldr	r2, [r3, #32]
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	43db      	mvns	r3, r3
 800a6be:	401a      	ands	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6a1a      	ldr	r2, [r3, #32]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	f003 031f 	and.w	r3, r3, #31
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d4:	431a      	orrs	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	621a      	str	r2, [r3, #32]
}
 800a6da:	bf00      	nop
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d101      	bne.n	800a700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e050      	b.n	800a7a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1c      	ldr	r2, [pc, #112]	; (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d018      	beq.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a74c:	d013      	beq.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a18      	ldr	r2, [pc, #96]	; (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00e      	beq.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a16      	ldr	r2, [pc, #88]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d009      	beq.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a15      	ldr	r2, [pc, #84]	; (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d004      	beq.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a13      	ldr	r2, [pc, #76]	; (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d10c      	bne.n	800a790 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a77c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	4313      	orrs	r3, r2
 800a786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	40010000 	.word	0x40010000
 800a7b4:	40000400 	.word	0x40000400
 800a7b8:	40000800 	.word	0x40000800
 800a7bc:	40000c00 	.word	0x40000c00
 800a7c0:	40014000 	.word	0x40014000

0800a7c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e042      	b.n	800a884 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7fc fb48 	bl	8006ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2224      	movs	r2, #36	; 0x24
 800a81c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a82e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 ff37 	bl	800b6a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	691a      	ldr	r2, [r3, #16]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	695a      	ldr	r2, [r3, #20]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68da      	ldr	r2, [r3, #12]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2220      	movs	r2, #32
 800a870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2220      	movs	r2, #32
 800a878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08c      	sub	sp, #48	; 0x30
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	4613      	mov	r3, r2
 800a898:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	d156      	bne.n	800a954 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <HAL_UART_Transmit_DMA+0x26>
 800a8ac:	88fb      	ldrh	r3, [r7, #6]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e04f      	b.n	800a956 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	88fa      	ldrh	r2, [r7, #6]
 800a8c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	88fa      	ldrh	r2, [r7, #6]
 800a8c6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2221      	movs	r2, #33	; 0x21
 800a8d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8da:	4a21      	ldr	r2, [pc, #132]	; (800a960 <HAL_UART_Transmit_DMA+0xd4>)
 800a8dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e2:	4a20      	ldr	r2, [pc, #128]	; (800a964 <HAL_UART_Transmit_DMA+0xd8>)
 800a8e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ea:	4a1f      	ldr	r2, [pc, #124]	; (800a968 <HAL_UART_Transmit_DMA+0xdc>)
 800a8ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a8f6:	f107 0308 	add.w	r3, r7, #8
 800a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a902:	6819      	ldr	r1, [r3, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	3304      	adds	r3, #4
 800a90a:	461a      	mov	r2, r3
 800a90c:	88fb      	ldrh	r3, [r7, #6]
 800a90e:	f7fc fe9b 	bl	8007648 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a91a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3314      	adds	r3, #20
 800a922:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	617b      	str	r3, [r7, #20]
   return(result);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a932:	62bb      	str	r3, [r7, #40]	; 0x28
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3314      	adds	r3, #20
 800a93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a93c:	627a      	str	r2, [r7, #36]	; 0x24
 800a93e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a940:	6a39      	ldr	r1, [r7, #32]
 800a942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a944:	e841 2300 	strex	r3, r2, [r1]
 800a948:	61fb      	str	r3, [r7, #28]
   return(result);
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1e5      	bne.n	800a91c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	e000      	b.n	800a956 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a954:	2302      	movs	r3, #2
  }
}
 800a956:	4618      	mov	r0, r3
 800a958:	3730      	adds	r7, #48	; 0x30
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	0800af31 	.word	0x0800af31
 800a964:	0800afcb 	.word	0x0800afcb
 800a968:	0800b14f 	.word	0x0800b14f

0800a96c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4613      	mov	r3, r2
 800a978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a980:	b2db      	uxtb	r3, r3
 800a982:	2b20      	cmp	r3, #32
 800a984:	d112      	bne.n	800a9ac <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <HAL_UART_Receive_DMA+0x26>
 800a98c:	88fb      	ldrh	r3, [r7, #6]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e00b      	b.n	800a9ae <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a99c:	88fb      	ldrh	r3, [r7, #6]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	68b9      	ldr	r1, [r7, #8]
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 fc1e 	bl	800b1e4 <UART_Start_Receive_DMA>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	e000      	b.n	800a9ae <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a9ac:	2302      	movs	r3, #2
  }
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b0ba      	sub	sp, #232	; 0xe8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ee:	f003 030f 	and.w	r3, r3, #15
 800a9f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a9f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10f      	bne.n	800aa1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa02:	f003 0320 	and.w	r3, r3, #32
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d009      	beq.n	800aa1e <HAL_UART_IRQHandler+0x66>
 800aa0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa0e:	f003 0320 	and.w	r3, r3, #32
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d003      	beq.n	800aa1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fd85 	bl	800b526 <UART_Receive_IT>
      return;
 800aa1c:	e25b      	b.n	800aed6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aa1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 80de 	beq.w	800abe4 <HAL_UART_IRQHandler+0x22c>
 800aa28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d106      	bne.n	800aa42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aa34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 80d1 	beq.w	800abe4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aa42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00b      	beq.n	800aa66 <HAL_UART_IRQHandler+0xae>
 800aa4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d005      	beq.n	800aa66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5e:	f043 0201 	orr.w	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa6a:	f003 0304 	and.w	r3, r3, #4
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00b      	beq.n	800aa8a <HAL_UART_IRQHandler+0xd2>
 800aa72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d005      	beq.n	800aa8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa82:	f043 0202 	orr.w	r2, r3, #2
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa8e:	f003 0302 	and.w	r3, r3, #2
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <HAL_UART_IRQHandler+0xf6>
 800aa96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d005      	beq.n	800aaae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa6:	f043 0204 	orr.w	r2, r3, #4
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aaae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aab2:	f003 0308 	and.w	r3, r3, #8
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d011      	beq.n	800aade <HAL_UART_IRQHandler+0x126>
 800aaba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aabe:	f003 0320 	and.w	r3, r3, #32
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d105      	bne.n	800aad2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d005      	beq.n	800aade <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad6:	f043 0208 	orr.w	r2, r3, #8
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 81f2 	beq.w	800aecc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaec:	f003 0320 	and.w	r3, r3, #32
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d008      	beq.n	800ab06 <HAL_UART_IRQHandler+0x14e>
 800aaf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaf8:	f003 0320 	and.w	r3, r3, #32
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fd10 	bl	800b526 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	695b      	ldr	r3, [r3, #20]
 800ab0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab10:	2b40      	cmp	r3, #64	; 0x40
 800ab12:	bf0c      	ite	eq
 800ab14:	2301      	moveq	r3, #1
 800ab16:	2300      	movne	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab22:	f003 0308 	and.w	r3, r3, #8
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d103      	bne.n	800ab32 <HAL_UART_IRQHandler+0x17a>
 800ab2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d04f      	beq.n	800abd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fc18 	bl	800b368 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab42:	2b40      	cmp	r3, #64	; 0x40
 800ab44:	d141      	bne.n	800abca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3314      	adds	r3, #20
 800ab4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab54:	e853 3f00 	ldrex	r3, [r3]
 800ab58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	3314      	adds	r3, #20
 800ab6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab82:	e841 2300 	strex	r3, r2, [r1]
 800ab86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1d9      	bne.n	800ab46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d013      	beq.n	800abc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9e:	4a7e      	ldr	r2, [pc, #504]	; (800ad98 <HAL_UART_IRQHandler+0x3e0>)
 800aba0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fc fe16 	bl	80077d8 <HAL_DMA_Abort_IT>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d016      	beq.n	800abe0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800abbc:	4610      	mov	r0, r2
 800abbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abc0:	e00e      	b.n	800abe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f99e 	bl	800af04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abc8:	e00a      	b.n	800abe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f99a 	bl	800af04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abd0:	e006      	b.n	800abe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f996 	bl	800af04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800abde:	e175      	b.n	800aecc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe0:	bf00      	nop
    return;
 800abe2:	e173      	b.n	800aecc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe8:	2b01      	cmp	r3, #1
 800abea:	f040 814f 	bne.w	800ae8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800abee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abf2:	f003 0310 	and.w	r3, r3, #16
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f000 8148 	beq.w	800ae8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800abfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac00:	f003 0310 	and.w	r3, r3, #16
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 8141 	beq.w	800ae8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60bb      	str	r3, [r7, #8]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	60bb      	str	r3, [r7, #8]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	60bb      	str	r3, [r7, #8]
 800ac1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac2a:	2b40      	cmp	r3, #64	; 0x40
 800ac2c:	f040 80b6 	bne.w	800ad9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 8145 	beq.w	800aed0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	f080 813e 	bcs.w	800aed0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac66:	f000 8088 	beq.w	800ad7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	330c      	adds	r3, #12
 800ac70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac78:	e853 3f00 	ldrex	r3, [r3]
 800ac7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	330c      	adds	r3, #12
 800ac92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ac96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aca2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aca6:	e841 2300 	strex	r3, r2, [r1]
 800acaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800acae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1d9      	bne.n	800ac6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3314      	adds	r3, #20
 800acbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acc0:	e853 3f00 	ldrex	r3, [r3]
 800acc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800acc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acc8:	f023 0301 	bic.w	r3, r3, #1
 800accc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	3314      	adds	r3, #20
 800acd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800acda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800acde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ace2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800acec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e1      	bne.n	800acb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3314      	adds	r3, #20
 800acf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3314      	adds	r3, #20
 800ad12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad16:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad1e:	e841 2300 	strex	r3, r2, [r1]
 800ad22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1e3      	bne.n	800acf2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2220      	movs	r2, #32
 800ad2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	330c      	adds	r3, #12
 800ad3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad42:	e853 3f00 	ldrex	r3, [r3]
 800ad46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad4a:	f023 0310 	bic.w	r3, r3, #16
 800ad4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	330c      	adds	r3, #12
 800ad58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ad5c:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad64:	e841 2300 	strex	r3, r2, [r1]
 800ad68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1e3      	bne.n	800ad38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fc fcbf 	bl	80076f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2202      	movs	r2, #2
 800ad7e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f8c1 	bl	800af18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ad96:	e09b      	b.n	800aed0 <HAL_UART_IRQHandler+0x518>
 800ad98:	0800b42f 	.word	0x0800b42f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f000 808e 	beq.w	800aed4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800adb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 8089 	beq.w	800aed4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	330c      	adds	r3, #12
 800adc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	e853 3f00 	ldrex	r3, [r3]
 800add0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800add2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800add8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	330c      	adds	r3, #12
 800ade2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ade6:	647a      	str	r2, [r7, #68]	; 0x44
 800ade8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800adec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adee:	e841 2300 	strex	r3, r2, [r1]
 800adf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1e3      	bne.n	800adc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3314      	adds	r3, #20
 800ae00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	e853 3f00 	ldrex	r3, [r3]
 800ae08:	623b      	str	r3, [r7, #32]
   return(result);
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	f023 0301 	bic.w	r3, r3, #1
 800ae10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3314      	adds	r3, #20
 800ae1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae1e:	633a      	str	r2, [r7, #48]	; 0x30
 800ae20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e3      	bne.n	800adfa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2220      	movs	r2, #32
 800ae36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	330c      	adds	r3, #12
 800ae46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	e853 3f00 	ldrex	r3, [r3]
 800ae4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f023 0310 	bic.w	r3, r3, #16
 800ae56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	330c      	adds	r3, #12
 800ae60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ae64:	61fa      	str	r2, [r7, #28]
 800ae66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	69b9      	ldr	r1, [r7, #24]
 800ae6a:	69fa      	ldr	r2, [r7, #28]
 800ae6c:	e841 2300 	strex	r3, r2, [r1]
 800ae70:	617b      	str	r3, [r7, #20]
   return(result);
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e3      	bne.n	800ae40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f847 	bl	800af18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae8a:	e023      	b.n	800aed4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d009      	beq.n	800aeac <HAL_UART_IRQHandler+0x4f4>
 800ae98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fad6 	bl	800b456 <UART_Transmit_IT>
    return;
 800aeaa:	e014      	b.n	800aed6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aeac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00e      	beq.n	800aed6 <HAL_UART_IRQHandler+0x51e>
 800aeb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d008      	beq.n	800aed6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fb16 	bl	800b4f6 <UART_EndTransmit_IT>
    return;
 800aeca:	e004      	b.n	800aed6 <HAL_UART_IRQHandler+0x51e>
    return;
 800aecc:	bf00      	nop
 800aece:	e002      	b.n	800aed6 <HAL_UART_IRQHandler+0x51e>
      return;
 800aed0:	bf00      	nop
 800aed2:	e000      	b.n	800aed6 <HAL_UART_IRQHandler+0x51e>
      return;
 800aed4:	bf00      	nop
  }
}
 800aed6:	37e8      	adds	r7, #232	; 0xe8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aef8:	bf00      	nop
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b090      	sub	sp, #64	; 0x40
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d137      	bne.n	800afbc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800af4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af4e:	2200      	movs	r2, #0
 800af50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3314      	adds	r3, #20
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	e853 3f00 	ldrex	r3, [r3]
 800af60:	623b      	str	r3, [r7, #32]
   return(result);
 800af62:	6a3b      	ldr	r3, [r7, #32]
 800af64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af68:	63bb      	str	r3, [r7, #56]	; 0x38
 800af6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3314      	adds	r3, #20
 800af70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af72:	633a      	str	r2, [r7, #48]	; 0x30
 800af74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af7a:	e841 2300 	strex	r3, r2, [r1]
 800af7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1e5      	bne.n	800af52 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	330c      	adds	r3, #12
 800af8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	60fb      	str	r3, [r7, #12]
   return(result);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af9c:	637b      	str	r3, [r7, #52]	; 0x34
 800af9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	330c      	adds	r3, #12
 800afa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afa6:	61fa      	str	r2, [r7, #28]
 800afa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afaa:	69b9      	ldr	r1, [r7, #24]
 800afac:	69fa      	ldr	r2, [r7, #28]
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	617b      	str	r3, [r7, #20]
   return(result);
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1e5      	bne.n	800af86 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afba:	e002      	b.n	800afc2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800afbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800afbe:	f7fa ffc9 	bl	8005f54 <HAL_UART_TxCpltCallback>
}
 800afc2:	bf00      	nop
 800afc4:	3740      	adds	r7, #64	; 0x40
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b084      	sub	sp, #16
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f7ff ff7f 	bl	800aedc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afde:	bf00      	nop
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b09c      	sub	sp, #112	; 0x70
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800affe:	2b00      	cmp	r3, #0
 800b000:	d172      	bne.n	800b0e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b004:	2200      	movs	r2, #0
 800b006:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	330c      	adds	r3, #12
 800b00e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b012:	e853 3f00 	ldrex	r3, [r3]
 800b016:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b01a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b01e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	330c      	adds	r3, #12
 800b026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b028:	65ba      	str	r2, [r7, #88]	; 0x58
 800b02a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b02e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b030:	e841 2300 	strex	r3, r2, [r1]
 800b034:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1e5      	bne.n	800b008 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	3314      	adds	r3, #20
 800b042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b046:	e853 3f00 	ldrex	r3, [r3]
 800b04a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04e:	f023 0301 	bic.w	r3, r3, #1
 800b052:	667b      	str	r3, [r7, #100]	; 0x64
 800b054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3314      	adds	r3, #20
 800b05a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b05c:	647a      	str	r2, [r7, #68]	; 0x44
 800b05e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b064:	e841 2300 	strex	r3, r2, [r1]
 800b068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1e5      	bne.n	800b03c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3314      	adds	r3, #20
 800b076:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	e853 3f00 	ldrex	r3, [r3]
 800b07e:	623b      	str	r3, [r7, #32]
   return(result);
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b086:	663b      	str	r3, [r7, #96]	; 0x60
 800b088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3314      	adds	r3, #20
 800b08e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b090:	633a      	str	r2, [r7, #48]	; 0x30
 800b092:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b098:	e841 2300 	strex	r3, r2, [r1]
 800b09c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e5      	bne.n	800b070 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b0a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0a6:	2220      	movs	r2, #32
 800b0a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d119      	bne.n	800b0e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	330c      	adds	r3, #12
 800b0ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	e853 3f00 	ldrex	r3, [r3]
 800b0c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f023 0310 	bic.w	r3, r3, #16
 800b0ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0d4:	61fa      	str	r2, [r7, #28]
 800b0d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d8:	69b9      	ldr	r1, [r7, #24]
 800b0da:	69fa      	ldr	r2, [r7, #28]
 800b0dc:	e841 2300 	strex	r3, r2, [r1]
 800b0e0:	617b      	str	r3, [r7, #20]
   return(result);
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1e5      	bne.n	800b0b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d106      	bne.n	800b104 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b0fe:	f7ff ff0b 	bl	800af18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b102:	e002      	b.n	800b10a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b104:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b106:	f7fa ff3d 	bl	8005f84 <HAL_UART_RxCpltCallback>
}
 800b10a:	bf00      	nop
 800b10c:	3770      	adds	r7, #112	; 0x70
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2201      	movs	r2, #1
 800b124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d108      	bne.n	800b140 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b132:	085b      	lsrs	r3, r3, #1
 800b134:	b29b      	uxth	r3, r3
 800b136:	4619      	mov	r1, r3
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7ff feed 	bl	800af18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b13e:	e002      	b.n	800b146 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f7ff fed5 	bl	800aef0 <HAL_UART_RxHalfCpltCallback>
}
 800b146:	bf00      	nop
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b156:	2300      	movs	r3, #0
 800b158:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b16a:	2b80      	cmp	r3, #128	; 0x80
 800b16c:	bf0c      	ite	eq
 800b16e:	2301      	moveq	r3, #1
 800b170:	2300      	movne	r3, #0
 800b172:	b2db      	uxtb	r3, r3
 800b174:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b21      	cmp	r3, #33	; 0x21
 800b180:	d108      	bne.n	800b194 <UART_DMAError+0x46>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d005      	beq.n	800b194 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2200      	movs	r2, #0
 800b18c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b18e:	68b8      	ldr	r0, [r7, #8]
 800b190:	f000 f8c2 	bl	800b318 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19e:	2b40      	cmp	r3, #64	; 0x40
 800b1a0:	bf0c      	ite	eq
 800b1a2:	2301      	moveq	r3, #1
 800b1a4:	2300      	movne	r3, #0
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b22      	cmp	r3, #34	; 0x22
 800b1b4:	d108      	bne.n	800b1c8 <UART_DMAError+0x7a>
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d005      	beq.n	800b1c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b1c2:	68b8      	ldr	r0, [r7, #8]
 800b1c4:	f000 f8d0 	bl	800b368 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1cc:	f043 0210 	orr.w	r2, r3, #16
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1d4:	68b8      	ldr	r0, [r7, #8]
 800b1d6:	f7ff fe95 	bl	800af04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1da:	bf00      	nop
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
	...

0800b1e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b098      	sub	sp, #96	; 0x60
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	88fa      	ldrh	r2, [r7, #6]
 800b1fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2222      	movs	r2, #34	; 0x22
 800b208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b210:	4a3e      	ldr	r2, [pc, #248]	; (800b30c <UART_Start_Receive_DMA+0x128>)
 800b212:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b218:	4a3d      	ldr	r2, [pc, #244]	; (800b310 <UART_Start_Receive_DMA+0x12c>)
 800b21a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b220:	4a3c      	ldr	r2, [pc, #240]	; (800b314 <UART_Start_Receive_DMA+0x130>)
 800b222:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b228:	2200      	movs	r2, #0
 800b22a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b22c:	f107 0308 	add.w	r3, r7, #8
 800b230:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3304      	adds	r3, #4
 800b23c:	4619      	mov	r1, r3
 800b23e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	88fb      	ldrh	r3, [r7, #6]
 800b244:	f7fc fa00 	bl	8007648 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b248:	2300      	movs	r3, #0
 800b24a:	613b      	str	r3, [r7, #16]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	613b      	str	r3, [r7, #16]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	613b      	str	r3, [r7, #16]
 800b25c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d019      	beq.n	800b29a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	330c      	adds	r3, #12
 800b26c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b270:	e853 3f00 	ldrex	r3, [r3]
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b27c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	330c      	adds	r3, #12
 800b284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b286:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b288:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b28c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b28e:	e841 2300 	strex	r3, r2, [r1]
 800b292:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1e5      	bne.n	800b266 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3314      	adds	r3, #20
 800b2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ac:	f043 0301 	orr.w	r3, r3, #1
 800b2b0:	657b      	str	r3, [r7, #84]	; 0x54
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3314      	adds	r3, #20
 800b2b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2ba:	63ba      	str	r2, [r7, #56]	; 0x38
 800b2bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b2c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e5      	bne.n	800b29a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3314      	adds	r3, #20
 800b2d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e4:	653b      	str	r3, [r7, #80]	; 0x50
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3314      	adds	r3, #20
 800b2ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2ee:	627a      	str	r2, [r7, #36]	; 0x24
 800b2f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	6a39      	ldr	r1, [r7, #32]
 800b2f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e5      	bne.n	800b2ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3760      	adds	r7, #96	; 0x60
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	0800afe7 	.word	0x0800afe7
 800b310:	0800b113 	.word	0x0800b113
 800b314:	0800b14f 	.word	0x0800b14f

0800b318 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b318:	b480      	push	{r7}
 800b31a:	b089      	sub	sp, #36	; 0x24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	330c      	adds	r3, #12
 800b326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	e853 3f00 	ldrex	r3, [r3]
 800b32e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b336:	61fb      	str	r3, [r7, #28]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	330c      	adds	r3, #12
 800b33e:	69fa      	ldr	r2, [r7, #28]
 800b340:	61ba      	str	r2, [r7, #24]
 800b342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b344:	6979      	ldr	r1, [r7, #20]
 800b346:	69ba      	ldr	r2, [r7, #24]
 800b348:	e841 2300 	strex	r3, r2, [r1]
 800b34c:	613b      	str	r3, [r7, #16]
   return(result);
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1e5      	bne.n	800b320 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2220      	movs	r2, #32
 800b358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800b35c:	bf00      	nop
 800b35e:	3724      	adds	r7, #36	; 0x24
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b368:	b480      	push	{r7}
 800b36a:	b095      	sub	sp, #84	; 0x54
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	330c      	adds	r3, #12
 800b376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b37a:	e853 3f00 	ldrex	r3, [r3]
 800b37e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b386:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	330c      	adds	r3, #12
 800b38e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b390:	643a      	str	r2, [r7, #64]	; 0x40
 800b392:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b394:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b398:	e841 2300 	strex	r3, r2, [r1]
 800b39c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1e5      	bne.n	800b370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3314      	adds	r3, #20
 800b3aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	e853 3f00 	ldrex	r3, [r3]
 800b3b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	f023 0301 	bic.w	r3, r3, #1
 800b3ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3314      	adds	r3, #20
 800b3c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3cc:	e841 2300 	strex	r3, r2, [r1]
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1e5      	bne.n	800b3a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d119      	bne.n	800b414 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	330c      	adds	r3, #12
 800b3e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	e853 3f00 	ldrex	r3, [r3]
 800b3ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	f023 0310 	bic.w	r3, r3, #16
 800b3f6:	647b      	str	r3, [r7, #68]	; 0x44
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	330c      	adds	r3, #12
 800b3fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b400:	61ba      	str	r2, [r7, #24]
 800b402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b404:	6979      	ldr	r1, [r7, #20]
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	e841 2300 	strex	r3, r2, [r1]
 800b40c:	613b      	str	r3, [r7, #16]
   return(result);
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e5      	bne.n	800b3e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2220      	movs	r2, #32
 800b418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b422:	bf00      	nop
 800b424:	3754      	adds	r7, #84	; 0x54
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b084      	sub	sp, #16
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f7ff fd5b 	bl	800af04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b44e:	bf00      	nop
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b456:	b480      	push	{r7}
 800b458:	b085      	sub	sp, #20
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b21      	cmp	r3, #33	; 0x21
 800b468:	d13e      	bne.n	800b4e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b472:	d114      	bne.n	800b49e <UART_Transmit_IT+0x48>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d110      	bne.n	800b49e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a1b      	ldr	r3, [r3, #32]
 800b480:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b490:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	1c9a      	adds	r2, r3, #2
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	621a      	str	r2, [r3, #32]
 800b49c:	e008      	b.n	800b4b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	1c59      	adds	r1, r3, #1
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	6211      	str	r1, [r2, #32]
 800b4a8:	781a      	ldrb	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	4619      	mov	r1, r3
 800b4be:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10f      	bne.n	800b4e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68da      	ldr	r2, [r3, #12]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68da      	ldr	r2, [r3, #12]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	e000      	b.n	800b4ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4e8:	2302      	movs	r3, #2
  }
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b082      	sub	sp, #8
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68da      	ldr	r2, [r3, #12]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b50c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2220      	movs	r2, #32
 800b512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7fa fd1c 	bl	8005f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b08c      	sub	sp, #48	; 0x30
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b22      	cmp	r3, #34	; 0x22
 800b538:	f040 80ae 	bne.w	800b698 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b544:	d117      	bne.n	800b576 <UART_Receive_IT+0x50>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d113      	bne.n	800b576 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b556:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b564:	b29a      	uxth	r2, r3
 800b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b568:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56e:	1c9a      	adds	r2, r3, #2
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	629a      	str	r2, [r3, #40]	; 0x28
 800b574:	e026      	b.n	800b5c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b57c:	2300      	movs	r3, #0
 800b57e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b588:	d007      	beq.n	800b59a <UART_Receive_IT+0x74>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <UART_Receive_IT+0x82>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d106      	bne.n	800b5a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	701a      	strb	r2, [r3, #0]
 800b5a6:	e008      	b.n	800b5ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5be:	1c5a      	adds	r2, r3, #1
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d15d      	bne.n	800b694 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68da      	ldr	r2, [r3, #12]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f022 0220 	bic.w	r2, r2, #32
 800b5e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	68da      	ldr	r2, [r3, #12]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	695a      	ldr	r2, [r3, #20]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f022 0201 	bic.w	r2, r2, #1
 800b606:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2220      	movs	r2, #32
 800b60c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d135      	bne.n	800b68a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	330c      	adds	r3, #12
 800b62a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	e853 3f00 	ldrex	r3, [r3]
 800b632:	613b      	str	r3, [r7, #16]
   return(result);
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	f023 0310 	bic.w	r3, r3, #16
 800b63a:	627b      	str	r3, [r7, #36]	; 0x24
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	330c      	adds	r3, #12
 800b642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b644:	623a      	str	r2, [r7, #32]
 800b646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b648:	69f9      	ldr	r1, [r7, #28]
 800b64a:	6a3a      	ldr	r2, [r7, #32]
 800b64c:	e841 2300 	strex	r3, r2, [r1]
 800b650:	61bb      	str	r3, [r7, #24]
   return(result);
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1e5      	bne.n	800b624 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f003 0310 	and.w	r3, r3, #16
 800b662:	2b10      	cmp	r3, #16
 800b664:	d10a      	bne.n	800b67c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b666:	2300      	movs	r3, #0
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	60fb      	str	r3, [r7, #12]
 800b67a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff fc48 	bl	800af18 <HAL_UARTEx_RxEventCallback>
 800b688:	e002      	b.n	800b690 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7fa fc7a 	bl	8005f84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	e002      	b.n	800b69a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b694:	2300      	movs	r3, #0
 800b696:	e000      	b.n	800b69a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b698:	2302      	movs	r3, #2
  }
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3730      	adds	r7, #48	; 0x30
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6a8:	b0c0      	sub	sp, #256	; 0x100
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c0:	68d9      	ldr	r1, [r3, #12]
 800b6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	ea40 0301 	orr.w	r3, r0, r1
 800b6cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d2:	689a      	ldr	r2, [r3, #8]
 800b6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	431a      	orrs	r2, r3
 800b6dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	431a      	orrs	r2, r3
 800b6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b6fc:	f021 010c 	bic.w	r1, r1, #12
 800b700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b70a:	430b      	orrs	r3, r1
 800b70c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b71a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b71e:	6999      	ldr	r1, [r3, #24]
 800b720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	ea40 0301 	orr.w	r3, r0, r1
 800b72a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	4b8f      	ldr	r3, [pc, #572]	; (800b970 <UART_SetConfig+0x2cc>)
 800b734:	429a      	cmp	r2, r3
 800b736:	d005      	beq.n	800b744 <UART_SetConfig+0xa0>
 800b738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	4b8d      	ldr	r3, [pc, #564]	; (800b974 <UART_SetConfig+0x2d0>)
 800b740:	429a      	cmp	r2, r3
 800b742:	d104      	bne.n	800b74e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b744:	f7fd ff5c 	bl	8009600 <HAL_RCC_GetPCLK2Freq>
 800b748:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b74c:	e003      	b.n	800b756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b74e:	f7fd ff43 	bl	80095d8 <HAL_RCC_GetPCLK1Freq>
 800b752:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b75a:	69db      	ldr	r3, [r3, #28]
 800b75c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b760:	f040 810c 	bne.w	800b97c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b768:	2200      	movs	r2, #0
 800b76a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b76e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b776:	4622      	mov	r2, r4
 800b778:	462b      	mov	r3, r5
 800b77a:	1891      	adds	r1, r2, r2
 800b77c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b77e:	415b      	adcs	r3, r3
 800b780:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b786:	4621      	mov	r1, r4
 800b788:	eb12 0801 	adds.w	r8, r2, r1
 800b78c:	4629      	mov	r1, r5
 800b78e:	eb43 0901 	adc.w	r9, r3, r1
 800b792:	f04f 0200 	mov.w	r2, #0
 800b796:	f04f 0300 	mov.w	r3, #0
 800b79a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b79e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b7a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b7a6:	4690      	mov	r8, r2
 800b7a8:	4699      	mov	r9, r3
 800b7aa:	4623      	mov	r3, r4
 800b7ac:	eb18 0303 	adds.w	r3, r8, r3
 800b7b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b7b4:	462b      	mov	r3, r5
 800b7b6:	eb49 0303 	adc.w	r3, r9, r3
 800b7ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b7ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	18db      	adds	r3, r3, r3
 800b7d6:	653b      	str	r3, [r7, #80]	; 0x50
 800b7d8:	4613      	mov	r3, r2
 800b7da:	eb42 0303 	adc.w	r3, r2, r3
 800b7de:	657b      	str	r3, [r7, #84]	; 0x54
 800b7e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b7e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b7e8:	f7f5 f9ba 	bl	8000b60 <__aeabi_uldivmod>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4b61      	ldr	r3, [pc, #388]	; (800b978 <UART_SetConfig+0x2d4>)
 800b7f2:	fba3 2302 	umull	r2, r3, r3, r2
 800b7f6:	095b      	lsrs	r3, r3, #5
 800b7f8:	011c      	lsls	r4, r3, #4
 800b7fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7fe:	2200      	movs	r2, #0
 800b800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b804:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b80c:	4642      	mov	r2, r8
 800b80e:	464b      	mov	r3, r9
 800b810:	1891      	adds	r1, r2, r2
 800b812:	64b9      	str	r1, [r7, #72]	; 0x48
 800b814:	415b      	adcs	r3, r3
 800b816:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b81c:	4641      	mov	r1, r8
 800b81e:	eb12 0a01 	adds.w	sl, r2, r1
 800b822:	4649      	mov	r1, r9
 800b824:	eb43 0b01 	adc.w	fp, r3, r1
 800b828:	f04f 0200 	mov.w	r2, #0
 800b82c:	f04f 0300 	mov.w	r3, #0
 800b830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b83c:	4692      	mov	sl, r2
 800b83e:	469b      	mov	fp, r3
 800b840:	4643      	mov	r3, r8
 800b842:	eb1a 0303 	adds.w	r3, sl, r3
 800b846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b84a:	464b      	mov	r3, r9
 800b84c:	eb4b 0303 	adc.w	r3, fp, r3
 800b850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b860:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b868:	460b      	mov	r3, r1
 800b86a:	18db      	adds	r3, r3, r3
 800b86c:	643b      	str	r3, [r7, #64]	; 0x40
 800b86e:	4613      	mov	r3, r2
 800b870:	eb42 0303 	adc.w	r3, r2, r3
 800b874:	647b      	str	r3, [r7, #68]	; 0x44
 800b876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b87a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b87e:	f7f5 f96f 	bl	8000b60 <__aeabi_uldivmod>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4611      	mov	r1, r2
 800b888:	4b3b      	ldr	r3, [pc, #236]	; (800b978 <UART_SetConfig+0x2d4>)
 800b88a:	fba3 2301 	umull	r2, r3, r3, r1
 800b88e:	095b      	lsrs	r3, r3, #5
 800b890:	2264      	movs	r2, #100	; 0x64
 800b892:	fb02 f303 	mul.w	r3, r2, r3
 800b896:	1acb      	subs	r3, r1, r3
 800b898:	00db      	lsls	r3, r3, #3
 800b89a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b89e:	4b36      	ldr	r3, [pc, #216]	; (800b978 <UART_SetConfig+0x2d4>)
 800b8a0:	fba3 2302 	umull	r2, r3, r3, r2
 800b8a4:	095b      	lsrs	r3, r3, #5
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b8ac:	441c      	add	r4, r3
 800b8ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b8bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b8c0:	4642      	mov	r2, r8
 800b8c2:	464b      	mov	r3, r9
 800b8c4:	1891      	adds	r1, r2, r2
 800b8c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800b8c8:	415b      	adcs	r3, r3
 800b8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b8d0:	4641      	mov	r1, r8
 800b8d2:	1851      	adds	r1, r2, r1
 800b8d4:	6339      	str	r1, [r7, #48]	; 0x30
 800b8d6:	4649      	mov	r1, r9
 800b8d8:	414b      	adcs	r3, r1
 800b8da:	637b      	str	r3, [r7, #52]	; 0x34
 800b8dc:	f04f 0200 	mov.w	r2, #0
 800b8e0:	f04f 0300 	mov.w	r3, #0
 800b8e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b8e8:	4659      	mov	r1, fp
 800b8ea:	00cb      	lsls	r3, r1, #3
 800b8ec:	4651      	mov	r1, sl
 800b8ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8f2:	4651      	mov	r1, sl
 800b8f4:	00ca      	lsls	r2, r1, #3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	4642      	mov	r2, r8
 800b8fe:	189b      	adds	r3, r3, r2
 800b900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b904:	464b      	mov	r3, r9
 800b906:	460a      	mov	r2, r1
 800b908:	eb42 0303 	adc.w	r3, r2, r3
 800b90c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b91c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b924:	460b      	mov	r3, r1
 800b926:	18db      	adds	r3, r3, r3
 800b928:	62bb      	str	r3, [r7, #40]	; 0x28
 800b92a:	4613      	mov	r3, r2
 800b92c:	eb42 0303 	adc.w	r3, r2, r3
 800b930:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b93a:	f7f5 f911 	bl	8000b60 <__aeabi_uldivmod>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4b0d      	ldr	r3, [pc, #52]	; (800b978 <UART_SetConfig+0x2d4>)
 800b944:	fba3 1302 	umull	r1, r3, r3, r2
 800b948:	095b      	lsrs	r3, r3, #5
 800b94a:	2164      	movs	r1, #100	; 0x64
 800b94c:	fb01 f303 	mul.w	r3, r1, r3
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	00db      	lsls	r3, r3, #3
 800b954:	3332      	adds	r3, #50	; 0x32
 800b956:	4a08      	ldr	r2, [pc, #32]	; (800b978 <UART_SetConfig+0x2d4>)
 800b958:	fba2 2303 	umull	r2, r3, r2, r3
 800b95c:	095b      	lsrs	r3, r3, #5
 800b95e:	f003 0207 	and.w	r2, r3, #7
 800b962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4422      	add	r2, r4
 800b96a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b96c:	e106      	b.n	800bb7c <UART_SetConfig+0x4d8>
 800b96e:	bf00      	nop
 800b970:	40011000 	.word	0x40011000
 800b974:	40011400 	.word	0x40011400
 800b978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b97c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b980:	2200      	movs	r2, #0
 800b982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b986:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b98a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b98e:	4642      	mov	r2, r8
 800b990:	464b      	mov	r3, r9
 800b992:	1891      	adds	r1, r2, r2
 800b994:	6239      	str	r1, [r7, #32]
 800b996:	415b      	adcs	r3, r3
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
 800b99a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b99e:	4641      	mov	r1, r8
 800b9a0:	1854      	adds	r4, r2, r1
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	eb43 0501 	adc.w	r5, r3, r1
 800b9a8:	f04f 0200 	mov.w	r2, #0
 800b9ac:	f04f 0300 	mov.w	r3, #0
 800b9b0:	00eb      	lsls	r3, r5, #3
 800b9b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9b6:	00e2      	lsls	r2, r4, #3
 800b9b8:	4614      	mov	r4, r2
 800b9ba:	461d      	mov	r5, r3
 800b9bc:	4643      	mov	r3, r8
 800b9be:	18e3      	adds	r3, r4, r3
 800b9c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b9c4:	464b      	mov	r3, r9
 800b9c6:	eb45 0303 	adc.w	r3, r5, r3
 800b9ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b9de:	f04f 0200 	mov.w	r2, #0
 800b9e2:	f04f 0300 	mov.w	r3, #0
 800b9e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	008b      	lsls	r3, r1, #2
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	008a      	lsls	r2, r1, #2
 800b9f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b9fc:	f7f5 f8b0 	bl	8000b60 <__aeabi_uldivmod>
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4b60      	ldr	r3, [pc, #384]	; (800bb88 <UART_SetConfig+0x4e4>)
 800ba06:	fba3 2302 	umull	r2, r3, r3, r2
 800ba0a:	095b      	lsrs	r3, r3, #5
 800ba0c:	011c      	lsls	r4, r3, #4
 800ba0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ba1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ba20:	4642      	mov	r2, r8
 800ba22:	464b      	mov	r3, r9
 800ba24:	1891      	adds	r1, r2, r2
 800ba26:	61b9      	str	r1, [r7, #24]
 800ba28:	415b      	adcs	r3, r3
 800ba2a:	61fb      	str	r3, [r7, #28]
 800ba2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba30:	4641      	mov	r1, r8
 800ba32:	1851      	adds	r1, r2, r1
 800ba34:	6139      	str	r1, [r7, #16]
 800ba36:	4649      	mov	r1, r9
 800ba38:	414b      	adcs	r3, r1
 800ba3a:	617b      	str	r3, [r7, #20]
 800ba3c:	f04f 0200 	mov.w	r2, #0
 800ba40:	f04f 0300 	mov.w	r3, #0
 800ba44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba48:	4659      	mov	r1, fp
 800ba4a:	00cb      	lsls	r3, r1, #3
 800ba4c:	4651      	mov	r1, sl
 800ba4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba52:	4651      	mov	r1, sl
 800ba54:	00ca      	lsls	r2, r1, #3
 800ba56:	4610      	mov	r0, r2
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	4642      	mov	r2, r8
 800ba5e:	189b      	adds	r3, r3, r2
 800ba60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba64:	464b      	mov	r3, r9
 800ba66:	460a      	mov	r2, r1
 800ba68:	eb42 0303 	adc.w	r3, r2, r3
 800ba6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ba7c:	f04f 0200 	mov.w	r2, #0
 800ba80:	f04f 0300 	mov.w	r3, #0
 800ba84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba88:	4649      	mov	r1, r9
 800ba8a:	008b      	lsls	r3, r1, #2
 800ba8c:	4641      	mov	r1, r8
 800ba8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba92:	4641      	mov	r1, r8
 800ba94:	008a      	lsls	r2, r1, #2
 800ba96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba9a:	f7f5 f861 	bl	8000b60 <__aeabi_uldivmod>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4611      	mov	r1, r2
 800baa4:	4b38      	ldr	r3, [pc, #224]	; (800bb88 <UART_SetConfig+0x4e4>)
 800baa6:	fba3 2301 	umull	r2, r3, r3, r1
 800baaa:	095b      	lsrs	r3, r3, #5
 800baac:	2264      	movs	r2, #100	; 0x64
 800baae:	fb02 f303 	mul.w	r3, r2, r3
 800bab2:	1acb      	subs	r3, r1, r3
 800bab4:	011b      	lsls	r3, r3, #4
 800bab6:	3332      	adds	r3, #50	; 0x32
 800bab8:	4a33      	ldr	r2, [pc, #204]	; (800bb88 <UART_SetConfig+0x4e4>)
 800baba:	fba2 2303 	umull	r2, r3, r2, r3
 800babe:	095b      	lsrs	r3, r3, #5
 800bac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bac4:	441c      	add	r4, r3
 800bac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baca:	2200      	movs	r2, #0
 800bacc:	673b      	str	r3, [r7, #112]	; 0x70
 800bace:	677a      	str	r2, [r7, #116]	; 0x74
 800bad0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bad4:	4642      	mov	r2, r8
 800bad6:	464b      	mov	r3, r9
 800bad8:	1891      	adds	r1, r2, r2
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	415b      	adcs	r3, r3
 800bade:	60fb      	str	r3, [r7, #12]
 800bae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bae4:	4641      	mov	r1, r8
 800bae6:	1851      	adds	r1, r2, r1
 800bae8:	6039      	str	r1, [r7, #0]
 800baea:	4649      	mov	r1, r9
 800baec:	414b      	adcs	r3, r1
 800baee:	607b      	str	r3, [r7, #4]
 800baf0:	f04f 0200 	mov.w	r2, #0
 800baf4:	f04f 0300 	mov.w	r3, #0
 800baf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bafc:	4659      	mov	r1, fp
 800bafe:	00cb      	lsls	r3, r1, #3
 800bb00:	4651      	mov	r1, sl
 800bb02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb06:	4651      	mov	r1, sl
 800bb08:	00ca      	lsls	r2, r1, #3
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	4603      	mov	r3, r0
 800bb10:	4642      	mov	r2, r8
 800bb12:	189b      	adds	r3, r3, r2
 800bb14:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb16:	464b      	mov	r3, r9
 800bb18:	460a      	mov	r2, r1
 800bb1a:	eb42 0303 	adc.w	r3, r2, r3
 800bb1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	663b      	str	r3, [r7, #96]	; 0x60
 800bb2a:	667a      	str	r2, [r7, #100]	; 0x64
 800bb2c:	f04f 0200 	mov.w	r2, #0
 800bb30:	f04f 0300 	mov.w	r3, #0
 800bb34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bb38:	4649      	mov	r1, r9
 800bb3a:	008b      	lsls	r3, r1, #2
 800bb3c:	4641      	mov	r1, r8
 800bb3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb42:	4641      	mov	r1, r8
 800bb44:	008a      	lsls	r2, r1, #2
 800bb46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bb4a:	f7f5 f809 	bl	8000b60 <__aeabi_uldivmod>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	4b0d      	ldr	r3, [pc, #52]	; (800bb88 <UART_SetConfig+0x4e4>)
 800bb54:	fba3 1302 	umull	r1, r3, r3, r2
 800bb58:	095b      	lsrs	r3, r3, #5
 800bb5a:	2164      	movs	r1, #100	; 0x64
 800bb5c:	fb01 f303 	mul.w	r3, r1, r3
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	011b      	lsls	r3, r3, #4
 800bb64:	3332      	adds	r3, #50	; 0x32
 800bb66:	4a08      	ldr	r2, [pc, #32]	; (800bb88 <UART_SetConfig+0x4e4>)
 800bb68:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6c:	095b      	lsrs	r3, r3, #5
 800bb6e:	f003 020f 	and.w	r2, r3, #15
 800bb72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4422      	add	r2, r4
 800bb7a:	609a      	str	r2, [r3, #8]
}
 800bb7c:	bf00      	nop
 800bb7e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb82:	46bd      	mov	sp, r7
 800bb84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb88:	51eb851f 	.word	0x51eb851f

0800bb8c <pow>:
 800bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8e:	ed2d 8b02 	vpush	{d8}
 800bb92:	eeb0 8a40 	vmov.f32	s16, s0
 800bb96:	eef0 8a60 	vmov.f32	s17, s1
 800bb9a:	ec55 4b11 	vmov	r4, r5, d1
 800bb9e:	f000 fb23 	bl	800c1e8 <__ieee754_pow>
 800bba2:	4622      	mov	r2, r4
 800bba4:	462b      	mov	r3, r5
 800bba6:	4620      	mov	r0, r4
 800bba8:	4629      	mov	r1, r5
 800bbaa:	ec57 6b10 	vmov	r6, r7, d0
 800bbae:	f7f4 ff71 	bl	8000a94 <__aeabi_dcmpun>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d13b      	bne.n	800bc2e <pow+0xa2>
 800bbb6:	ec51 0b18 	vmov	r0, r1, d8
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f7f4 ff37 	bl	8000a30 <__aeabi_dcmpeq>
 800bbc2:	b1b8      	cbz	r0, 800bbf4 <pow+0x68>
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	4620      	mov	r0, r4
 800bbca:	4629      	mov	r1, r5
 800bbcc:	f7f4 ff30 	bl	8000a30 <__aeabi_dcmpeq>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d146      	bne.n	800bc62 <pow+0xd6>
 800bbd4:	ec45 4b10 	vmov	d0, r4, r5
 800bbd8:	f000 fa1f 	bl	800c01a <finite>
 800bbdc:	b338      	cbz	r0, 800bc2e <pow+0xa2>
 800bbde:	2200      	movs	r2, #0
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	f7f4 ff2d 	bl	8000a44 <__aeabi_dcmplt>
 800bbea:	b300      	cbz	r0, 800bc2e <pow+0xa2>
 800bbec:	f001 f916 	bl	800ce1c <__errno>
 800bbf0:	2322      	movs	r3, #34	; 0x22
 800bbf2:	e01b      	b.n	800bc2c <pow+0xa0>
 800bbf4:	ec47 6b10 	vmov	d0, r6, r7
 800bbf8:	f000 fa0f 	bl	800c01a <finite>
 800bbfc:	b9e0      	cbnz	r0, 800bc38 <pow+0xac>
 800bbfe:	eeb0 0a48 	vmov.f32	s0, s16
 800bc02:	eef0 0a68 	vmov.f32	s1, s17
 800bc06:	f000 fa08 	bl	800c01a <finite>
 800bc0a:	b1a8      	cbz	r0, 800bc38 <pow+0xac>
 800bc0c:	ec45 4b10 	vmov	d0, r4, r5
 800bc10:	f000 fa03 	bl	800c01a <finite>
 800bc14:	b180      	cbz	r0, 800bc38 <pow+0xac>
 800bc16:	4632      	mov	r2, r6
 800bc18:	463b      	mov	r3, r7
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	4639      	mov	r1, r7
 800bc1e:	f7f4 ff39 	bl	8000a94 <__aeabi_dcmpun>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d0e2      	beq.n	800bbec <pow+0x60>
 800bc26:	f001 f8f9 	bl	800ce1c <__errno>
 800bc2a:	2321      	movs	r3, #33	; 0x21
 800bc2c:	6003      	str	r3, [r0, #0]
 800bc2e:	ecbd 8b02 	vpop	{d8}
 800bc32:	ec47 6b10 	vmov	d0, r6, r7
 800bc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc38:	2200      	movs	r2, #0
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	4639      	mov	r1, r7
 800bc40:	f7f4 fef6 	bl	8000a30 <__aeabi_dcmpeq>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d0f2      	beq.n	800bc2e <pow+0xa2>
 800bc48:	eeb0 0a48 	vmov.f32	s0, s16
 800bc4c:	eef0 0a68 	vmov.f32	s1, s17
 800bc50:	f000 f9e3 	bl	800c01a <finite>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d0ea      	beq.n	800bc2e <pow+0xa2>
 800bc58:	ec45 4b10 	vmov	d0, r4, r5
 800bc5c:	f000 f9dd 	bl	800c01a <finite>
 800bc60:	e7c3      	b.n	800bbea <pow+0x5e>
 800bc62:	4f01      	ldr	r7, [pc, #4]	; (800bc68 <pow+0xdc>)
 800bc64:	2600      	movs	r6, #0
 800bc66:	e7e2      	b.n	800bc2e <pow+0xa2>
 800bc68:	3ff00000 	.word	0x3ff00000

0800bc6c <sqrt>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	ed2d 8b02 	vpush	{d8}
 800bc72:	ec55 4b10 	vmov	r4, r5, d0
 800bc76:	f000 f9db 	bl	800c030 <__ieee754_sqrt>
 800bc7a:	4622      	mov	r2, r4
 800bc7c:	462b      	mov	r3, r5
 800bc7e:	4620      	mov	r0, r4
 800bc80:	4629      	mov	r1, r5
 800bc82:	eeb0 8a40 	vmov.f32	s16, s0
 800bc86:	eef0 8a60 	vmov.f32	s17, s1
 800bc8a:	f7f4 ff03 	bl	8000a94 <__aeabi_dcmpun>
 800bc8e:	b990      	cbnz	r0, 800bcb6 <sqrt+0x4a>
 800bc90:	2200      	movs	r2, #0
 800bc92:	2300      	movs	r3, #0
 800bc94:	4620      	mov	r0, r4
 800bc96:	4629      	mov	r1, r5
 800bc98:	f7f4 fed4 	bl	8000a44 <__aeabi_dcmplt>
 800bc9c:	b158      	cbz	r0, 800bcb6 <sqrt+0x4a>
 800bc9e:	f001 f8bd 	bl	800ce1c <__errno>
 800bca2:	2321      	movs	r3, #33	; 0x21
 800bca4:	6003      	str	r3, [r0, #0]
 800bca6:	2200      	movs	r2, #0
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4619      	mov	r1, r3
 800bcae:	f7f4 fd81 	bl	80007b4 <__aeabi_ddiv>
 800bcb2:	ec41 0b18 	vmov	d8, r0, r1
 800bcb6:	eeb0 0a48 	vmov.f32	s0, s16
 800bcba:	eef0 0a68 	vmov.f32	s1, s17
 800bcbe:	ecbd 8b02 	vpop	{d8}
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	0000      	movs	r0, r0
	...

0800bcc8 <atan>:
 800bcc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	ec55 4b10 	vmov	r4, r5, d0
 800bcd0:	4bc3      	ldr	r3, [pc, #780]	; (800bfe0 <atan+0x318>)
 800bcd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bcd6:	429e      	cmp	r6, r3
 800bcd8:	46ab      	mov	fp, r5
 800bcda:	dd18      	ble.n	800bd0e <atan+0x46>
 800bcdc:	4bc1      	ldr	r3, [pc, #772]	; (800bfe4 <atan+0x31c>)
 800bcde:	429e      	cmp	r6, r3
 800bce0:	dc01      	bgt.n	800bce6 <atan+0x1e>
 800bce2:	d109      	bne.n	800bcf8 <atan+0x30>
 800bce4:	b144      	cbz	r4, 800bcf8 <atan+0x30>
 800bce6:	4622      	mov	r2, r4
 800bce8:	462b      	mov	r3, r5
 800bcea:	4620      	mov	r0, r4
 800bcec:	4629      	mov	r1, r5
 800bcee:	f7f4 fa81 	bl	80001f4 <__adddf3>
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	460d      	mov	r5, r1
 800bcf6:	e006      	b.n	800bd06 <atan+0x3e>
 800bcf8:	f1bb 0f00 	cmp.w	fp, #0
 800bcfc:	f300 8131 	bgt.w	800bf62 <atan+0x29a>
 800bd00:	a59b      	add	r5, pc, #620	; (adr r5, 800bf70 <atan+0x2a8>)
 800bd02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd06:	ec45 4b10 	vmov	d0, r4, r5
 800bd0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0e:	4bb6      	ldr	r3, [pc, #728]	; (800bfe8 <atan+0x320>)
 800bd10:	429e      	cmp	r6, r3
 800bd12:	dc14      	bgt.n	800bd3e <atan+0x76>
 800bd14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bd18:	429e      	cmp	r6, r3
 800bd1a:	dc0d      	bgt.n	800bd38 <atan+0x70>
 800bd1c:	a396      	add	r3, pc, #600	; (adr r3, 800bf78 <atan+0x2b0>)
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	ee10 0a10 	vmov	r0, s0
 800bd26:	4629      	mov	r1, r5
 800bd28:	f7f4 fa64 	bl	80001f4 <__adddf3>
 800bd2c:	4baf      	ldr	r3, [pc, #700]	; (800bfec <atan+0x324>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f7f4 fea6 	bl	8000a80 <__aeabi_dcmpgt>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d1e6      	bne.n	800bd06 <atan+0x3e>
 800bd38:	f04f 3aff 	mov.w	sl, #4294967295
 800bd3c:	e02b      	b.n	800bd96 <atan+0xce>
 800bd3e:	f000 f963 	bl	800c008 <fabs>
 800bd42:	4bab      	ldr	r3, [pc, #684]	; (800bff0 <atan+0x328>)
 800bd44:	429e      	cmp	r6, r3
 800bd46:	ec55 4b10 	vmov	r4, r5, d0
 800bd4a:	f300 80bf 	bgt.w	800becc <atan+0x204>
 800bd4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bd52:	429e      	cmp	r6, r3
 800bd54:	f300 80a0 	bgt.w	800be98 <atan+0x1d0>
 800bd58:	ee10 2a10 	vmov	r2, s0
 800bd5c:	ee10 0a10 	vmov	r0, s0
 800bd60:	462b      	mov	r3, r5
 800bd62:	4629      	mov	r1, r5
 800bd64:	f7f4 fa46 	bl	80001f4 <__adddf3>
 800bd68:	4ba0      	ldr	r3, [pc, #640]	; (800bfec <atan+0x324>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f7f4 fa40 	bl	80001f0 <__aeabi_dsub>
 800bd70:	2200      	movs	r2, #0
 800bd72:	4606      	mov	r6, r0
 800bd74:	460f      	mov	r7, r1
 800bd76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	f7f4 fa39 	bl	80001f4 <__adddf3>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	4630      	mov	r0, r6
 800bd88:	4639      	mov	r1, r7
 800bd8a:	f7f4 fd13 	bl	80007b4 <__aeabi_ddiv>
 800bd8e:	f04f 0a00 	mov.w	sl, #0
 800bd92:	4604      	mov	r4, r0
 800bd94:	460d      	mov	r5, r1
 800bd96:	4622      	mov	r2, r4
 800bd98:	462b      	mov	r3, r5
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	f7f4 fbdf 	bl	8000560 <__aeabi_dmul>
 800bda2:	4602      	mov	r2, r0
 800bda4:	460b      	mov	r3, r1
 800bda6:	4680      	mov	r8, r0
 800bda8:	4689      	mov	r9, r1
 800bdaa:	f7f4 fbd9 	bl	8000560 <__aeabi_dmul>
 800bdae:	a374      	add	r3, pc, #464	; (adr r3, 800bf80 <atan+0x2b8>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	460f      	mov	r7, r1
 800bdb8:	f7f4 fbd2 	bl	8000560 <__aeabi_dmul>
 800bdbc:	a372      	add	r3, pc, #456	; (adr r3, 800bf88 <atan+0x2c0>)
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	f7f4 fa17 	bl	80001f4 <__adddf3>
 800bdc6:	4632      	mov	r2, r6
 800bdc8:	463b      	mov	r3, r7
 800bdca:	f7f4 fbc9 	bl	8000560 <__aeabi_dmul>
 800bdce:	a370      	add	r3, pc, #448	; (adr r3, 800bf90 <atan+0x2c8>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f7f4 fa0e 	bl	80001f4 <__adddf3>
 800bdd8:	4632      	mov	r2, r6
 800bdda:	463b      	mov	r3, r7
 800bddc:	f7f4 fbc0 	bl	8000560 <__aeabi_dmul>
 800bde0:	a36d      	add	r3, pc, #436	; (adr r3, 800bf98 <atan+0x2d0>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f7f4 fa05 	bl	80001f4 <__adddf3>
 800bdea:	4632      	mov	r2, r6
 800bdec:	463b      	mov	r3, r7
 800bdee:	f7f4 fbb7 	bl	8000560 <__aeabi_dmul>
 800bdf2:	a36b      	add	r3, pc, #428	; (adr r3, 800bfa0 <atan+0x2d8>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f7f4 f9fc 	bl	80001f4 <__adddf3>
 800bdfc:	4632      	mov	r2, r6
 800bdfe:	463b      	mov	r3, r7
 800be00:	f7f4 fbae 	bl	8000560 <__aeabi_dmul>
 800be04:	a368      	add	r3, pc, #416	; (adr r3, 800bfa8 <atan+0x2e0>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	f7f4 f9f3 	bl	80001f4 <__adddf3>
 800be0e:	4642      	mov	r2, r8
 800be10:	464b      	mov	r3, r9
 800be12:	f7f4 fba5 	bl	8000560 <__aeabi_dmul>
 800be16:	a366      	add	r3, pc, #408	; (adr r3, 800bfb0 <atan+0x2e8>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	4680      	mov	r8, r0
 800be1e:	4689      	mov	r9, r1
 800be20:	4630      	mov	r0, r6
 800be22:	4639      	mov	r1, r7
 800be24:	f7f4 fb9c 	bl	8000560 <__aeabi_dmul>
 800be28:	a363      	add	r3, pc, #396	; (adr r3, 800bfb8 <atan+0x2f0>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	f7f4 f9df 	bl	80001f0 <__aeabi_dsub>
 800be32:	4632      	mov	r2, r6
 800be34:	463b      	mov	r3, r7
 800be36:	f7f4 fb93 	bl	8000560 <__aeabi_dmul>
 800be3a:	a361      	add	r3, pc, #388	; (adr r3, 800bfc0 <atan+0x2f8>)
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	f7f4 f9d6 	bl	80001f0 <__aeabi_dsub>
 800be44:	4632      	mov	r2, r6
 800be46:	463b      	mov	r3, r7
 800be48:	f7f4 fb8a 	bl	8000560 <__aeabi_dmul>
 800be4c:	a35e      	add	r3, pc, #376	; (adr r3, 800bfc8 <atan+0x300>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	f7f4 f9cd 	bl	80001f0 <__aeabi_dsub>
 800be56:	4632      	mov	r2, r6
 800be58:	463b      	mov	r3, r7
 800be5a:	f7f4 fb81 	bl	8000560 <__aeabi_dmul>
 800be5e:	a35c      	add	r3, pc, #368	; (adr r3, 800bfd0 <atan+0x308>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	f7f4 f9c4 	bl	80001f0 <__aeabi_dsub>
 800be68:	4632      	mov	r2, r6
 800be6a:	463b      	mov	r3, r7
 800be6c:	f7f4 fb78 	bl	8000560 <__aeabi_dmul>
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	4640      	mov	r0, r8
 800be76:	4649      	mov	r1, r9
 800be78:	f7f4 f9bc 	bl	80001f4 <__adddf3>
 800be7c:	4622      	mov	r2, r4
 800be7e:	462b      	mov	r3, r5
 800be80:	f7f4 fb6e 	bl	8000560 <__aeabi_dmul>
 800be84:	f1ba 3fff 	cmp.w	sl, #4294967295
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	d14b      	bne.n	800bf26 <atan+0x25e>
 800be8e:	4620      	mov	r0, r4
 800be90:	4629      	mov	r1, r5
 800be92:	f7f4 f9ad 	bl	80001f0 <__aeabi_dsub>
 800be96:	e72c      	b.n	800bcf2 <atan+0x2a>
 800be98:	ee10 0a10 	vmov	r0, s0
 800be9c:	4b53      	ldr	r3, [pc, #332]	; (800bfec <atan+0x324>)
 800be9e:	2200      	movs	r2, #0
 800bea0:	4629      	mov	r1, r5
 800bea2:	f7f4 f9a5 	bl	80001f0 <__aeabi_dsub>
 800bea6:	4b51      	ldr	r3, [pc, #324]	; (800bfec <atan+0x324>)
 800bea8:	4606      	mov	r6, r0
 800beaa:	460f      	mov	r7, r1
 800beac:	2200      	movs	r2, #0
 800beae:	4620      	mov	r0, r4
 800beb0:	4629      	mov	r1, r5
 800beb2:	f7f4 f99f 	bl	80001f4 <__adddf3>
 800beb6:	4602      	mov	r2, r0
 800beb8:	460b      	mov	r3, r1
 800beba:	4630      	mov	r0, r6
 800bebc:	4639      	mov	r1, r7
 800bebe:	f7f4 fc79 	bl	80007b4 <__aeabi_ddiv>
 800bec2:	f04f 0a01 	mov.w	sl, #1
 800bec6:	4604      	mov	r4, r0
 800bec8:	460d      	mov	r5, r1
 800beca:	e764      	b.n	800bd96 <atan+0xce>
 800becc:	4b49      	ldr	r3, [pc, #292]	; (800bff4 <atan+0x32c>)
 800bece:	429e      	cmp	r6, r3
 800bed0:	da1d      	bge.n	800bf0e <atan+0x246>
 800bed2:	ee10 0a10 	vmov	r0, s0
 800bed6:	4b48      	ldr	r3, [pc, #288]	; (800bff8 <atan+0x330>)
 800bed8:	2200      	movs	r2, #0
 800beda:	4629      	mov	r1, r5
 800bedc:	f7f4 f988 	bl	80001f0 <__aeabi_dsub>
 800bee0:	4b45      	ldr	r3, [pc, #276]	; (800bff8 <atan+0x330>)
 800bee2:	4606      	mov	r6, r0
 800bee4:	460f      	mov	r7, r1
 800bee6:	2200      	movs	r2, #0
 800bee8:	4620      	mov	r0, r4
 800beea:	4629      	mov	r1, r5
 800beec:	f7f4 fb38 	bl	8000560 <__aeabi_dmul>
 800bef0:	4b3e      	ldr	r3, [pc, #248]	; (800bfec <atan+0x324>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	f7f4 f97e 	bl	80001f4 <__adddf3>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4630      	mov	r0, r6
 800befe:	4639      	mov	r1, r7
 800bf00:	f7f4 fc58 	bl	80007b4 <__aeabi_ddiv>
 800bf04:	f04f 0a02 	mov.w	sl, #2
 800bf08:	4604      	mov	r4, r0
 800bf0a:	460d      	mov	r5, r1
 800bf0c:	e743      	b.n	800bd96 <atan+0xce>
 800bf0e:	462b      	mov	r3, r5
 800bf10:	ee10 2a10 	vmov	r2, s0
 800bf14:	4939      	ldr	r1, [pc, #228]	; (800bffc <atan+0x334>)
 800bf16:	2000      	movs	r0, #0
 800bf18:	f7f4 fc4c 	bl	80007b4 <__aeabi_ddiv>
 800bf1c:	f04f 0a03 	mov.w	sl, #3
 800bf20:	4604      	mov	r4, r0
 800bf22:	460d      	mov	r5, r1
 800bf24:	e737      	b.n	800bd96 <atan+0xce>
 800bf26:	4b36      	ldr	r3, [pc, #216]	; (800c000 <atan+0x338>)
 800bf28:	4e36      	ldr	r6, [pc, #216]	; (800c004 <atan+0x33c>)
 800bf2a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	f7f4 f95d 	bl	80001f0 <__aeabi_dsub>
 800bf36:	4622      	mov	r2, r4
 800bf38:	462b      	mov	r3, r5
 800bf3a:	f7f4 f959 	bl	80001f0 <__aeabi_dsub>
 800bf3e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bf4a:	f7f4 f951 	bl	80001f0 <__aeabi_dsub>
 800bf4e:	f1bb 0f00 	cmp.w	fp, #0
 800bf52:	4604      	mov	r4, r0
 800bf54:	460d      	mov	r5, r1
 800bf56:	f6bf aed6 	bge.w	800bd06 <atan+0x3e>
 800bf5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf5e:	461d      	mov	r5, r3
 800bf60:	e6d1      	b.n	800bd06 <atan+0x3e>
 800bf62:	a51d      	add	r5, pc, #116	; (adr r5, 800bfd8 <atan+0x310>)
 800bf64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf68:	e6cd      	b.n	800bd06 <atan+0x3e>
 800bf6a:	bf00      	nop
 800bf6c:	f3af 8000 	nop.w
 800bf70:	54442d18 	.word	0x54442d18
 800bf74:	bff921fb 	.word	0xbff921fb
 800bf78:	8800759c 	.word	0x8800759c
 800bf7c:	7e37e43c 	.word	0x7e37e43c
 800bf80:	e322da11 	.word	0xe322da11
 800bf84:	3f90ad3a 	.word	0x3f90ad3a
 800bf88:	24760deb 	.word	0x24760deb
 800bf8c:	3fa97b4b 	.word	0x3fa97b4b
 800bf90:	a0d03d51 	.word	0xa0d03d51
 800bf94:	3fb10d66 	.word	0x3fb10d66
 800bf98:	c54c206e 	.word	0xc54c206e
 800bf9c:	3fb745cd 	.word	0x3fb745cd
 800bfa0:	920083ff 	.word	0x920083ff
 800bfa4:	3fc24924 	.word	0x3fc24924
 800bfa8:	5555550d 	.word	0x5555550d
 800bfac:	3fd55555 	.word	0x3fd55555
 800bfb0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bfb4:	bfa2b444 	.word	0xbfa2b444
 800bfb8:	52defd9a 	.word	0x52defd9a
 800bfbc:	3fadde2d 	.word	0x3fadde2d
 800bfc0:	af749a6d 	.word	0xaf749a6d
 800bfc4:	3fb3b0f2 	.word	0x3fb3b0f2
 800bfc8:	fe231671 	.word	0xfe231671
 800bfcc:	3fbc71c6 	.word	0x3fbc71c6
 800bfd0:	9998ebc4 	.word	0x9998ebc4
 800bfd4:	3fc99999 	.word	0x3fc99999
 800bfd8:	54442d18 	.word	0x54442d18
 800bfdc:	3ff921fb 	.word	0x3ff921fb
 800bfe0:	440fffff 	.word	0x440fffff
 800bfe4:	7ff00000 	.word	0x7ff00000
 800bfe8:	3fdbffff 	.word	0x3fdbffff
 800bfec:	3ff00000 	.word	0x3ff00000
 800bff0:	3ff2ffff 	.word	0x3ff2ffff
 800bff4:	40038000 	.word	0x40038000
 800bff8:	3ff80000 	.word	0x3ff80000
 800bffc:	bff00000 	.word	0xbff00000
 800c000:	0800d4b0 	.word	0x0800d4b0
 800c004:	0800d490 	.word	0x0800d490

0800c008 <fabs>:
 800c008:	ec51 0b10 	vmov	r0, r1, d0
 800c00c:	ee10 2a10 	vmov	r2, s0
 800c010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c014:	ec43 2b10 	vmov	d0, r2, r3
 800c018:	4770      	bx	lr

0800c01a <finite>:
 800c01a:	b082      	sub	sp, #8
 800c01c:	ed8d 0b00 	vstr	d0, [sp]
 800c020:	9801      	ldr	r0, [sp, #4]
 800c022:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c026:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c02a:	0fc0      	lsrs	r0, r0, #31
 800c02c:	b002      	add	sp, #8
 800c02e:	4770      	bx	lr

0800c030 <__ieee754_sqrt>:
 800c030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c034:	ec55 4b10 	vmov	r4, r5, d0
 800c038:	4e67      	ldr	r6, [pc, #412]	; (800c1d8 <__ieee754_sqrt+0x1a8>)
 800c03a:	43ae      	bics	r6, r5
 800c03c:	ee10 0a10 	vmov	r0, s0
 800c040:	ee10 2a10 	vmov	r2, s0
 800c044:	4629      	mov	r1, r5
 800c046:	462b      	mov	r3, r5
 800c048:	d10d      	bne.n	800c066 <__ieee754_sqrt+0x36>
 800c04a:	f7f4 fa89 	bl	8000560 <__aeabi_dmul>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4620      	mov	r0, r4
 800c054:	4629      	mov	r1, r5
 800c056:	f7f4 f8cd 	bl	80001f4 <__adddf3>
 800c05a:	4604      	mov	r4, r0
 800c05c:	460d      	mov	r5, r1
 800c05e:	ec45 4b10 	vmov	d0, r4, r5
 800c062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c066:	2d00      	cmp	r5, #0
 800c068:	dc0b      	bgt.n	800c082 <__ieee754_sqrt+0x52>
 800c06a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c06e:	4326      	orrs	r6, r4
 800c070:	d0f5      	beq.n	800c05e <__ieee754_sqrt+0x2e>
 800c072:	b135      	cbz	r5, 800c082 <__ieee754_sqrt+0x52>
 800c074:	f7f4 f8bc 	bl	80001f0 <__aeabi_dsub>
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	f7f4 fb9a 	bl	80007b4 <__aeabi_ddiv>
 800c080:	e7eb      	b.n	800c05a <__ieee754_sqrt+0x2a>
 800c082:	1509      	asrs	r1, r1, #20
 800c084:	f000 808d 	beq.w	800c1a2 <__ieee754_sqrt+0x172>
 800c088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c08c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c094:	07c9      	lsls	r1, r1, #31
 800c096:	bf5c      	itt	pl
 800c098:	005b      	lslpl	r3, r3, #1
 800c09a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c09e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c0a2:	bf58      	it	pl
 800c0a4:	0052      	lslpl	r2, r2, #1
 800c0a6:	2500      	movs	r5, #0
 800c0a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c0ac:	1076      	asrs	r6, r6, #1
 800c0ae:	0052      	lsls	r2, r2, #1
 800c0b0:	f04f 0e16 	mov.w	lr, #22
 800c0b4:	46ac      	mov	ip, r5
 800c0b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c0ba:	eb0c 0001 	add.w	r0, ip, r1
 800c0be:	4298      	cmp	r0, r3
 800c0c0:	bfde      	ittt	le
 800c0c2:	1a1b      	suble	r3, r3, r0
 800c0c4:	eb00 0c01 	addle.w	ip, r0, r1
 800c0c8:	186d      	addle	r5, r5, r1
 800c0ca:	005b      	lsls	r3, r3, #1
 800c0cc:	f1be 0e01 	subs.w	lr, lr, #1
 800c0d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c0d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c0d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c0dc:	d1ed      	bne.n	800c0ba <__ieee754_sqrt+0x8a>
 800c0de:	4674      	mov	r4, lr
 800c0e0:	2720      	movs	r7, #32
 800c0e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c0e6:	4563      	cmp	r3, ip
 800c0e8:	eb01 000e 	add.w	r0, r1, lr
 800c0ec:	dc02      	bgt.n	800c0f4 <__ieee754_sqrt+0xc4>
 800c0ee:	d113      	bne.n	800c118 <__ieee754_sqrt+0xe8>
 800c0f0:	4290      	cmp	r0, r2
 800c0f2:	d811      	bhi.n	800c118 <__ieee754_sqrt+0xe8>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	eb00 0e01 	add.w	lr, r0, r1
 800c0fa:	da57      	bge.n	800c1ac <__ieee754_sqrt+0x17c>
 800c0fc:	f1be 0f00 	cmp.w	lr, #0
 800c100:	db54      	blt.n	800c1ac <__ieee754_sqrt+0x17c>
 800c102:	f10c 0801 	add.w	r8, ip, #1
 800c106:	eba3 030c 	sub.w	r3, r3, ip
 800c10a:	4290      	cmp	r0, r2
 800c10c:	bf88      	it	hi
 800c10e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c112:	1a12      	subs	r2, r2, r0
 800c114:	440c      	add	r4, r1
 800c116:	46c4      	mov	ip, r8
 800c118:	005b      	lsls	r3, r3, #1
 800c11a:	3f01      	subs	r7, #1
 800c11c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c120:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c124:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c128:	d1dd      	bne.n	800c0e6 <__ieee754_sqrt+0xb6>
 800c12a:	4313      	orrs	r3, r2
 800c12c:	d01b      	beq.n	800c166 <__ieee754_sqrt+0x136>
 800c12e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c1dc <__ieee754_sqrt+0x1ac>
 800c132:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c1e0 <__ieee754_sqrt+0x1b0>
 800c136:	e9da 0100 	ldrd	r0, r1, [sl]
 800c13a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c13e:	f7f4 f857 	bl	80001f0 <__aeabi_dsub>
 800c142:	e9da 8900 	ldrd	r8, r9, [sl]
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	4640      	mov	r0, r8
 800c14c:	4649      	mov	r1, r9
 800c14e:	f7f4 fc83 	bl	8000a58 <__aeabi_dcmple>
 800c152:	b140      	cbz	r0, 800c166 <__ieee754_sqrt+0x136>
 800c154:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c158:	e9da 0100 	ldrd	r0, r1, [sl]
 800c15c:	e9db 2300 	ldrd	r2, r3, [fp]
 800c160:	d126      	bne.n	800c1b0 <__ieee754_sqrt+0x180>
 800c162:	3501      	adds	r5, #1
 800c164:	463c      	mov	r4, r7
 800c166:	106a      	asrs	r2, r5, #1
 800c168:	0863      	lsrs	r3, r4, #1
 800c16a:	07e9      	lsls	r1, r5, #31
 800c16c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c170:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c174:	bf48      	it	mi
 800c176:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c17a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c17e:	461c      	mov	r4, r3
 800c180:	e76d      	b.n	800c05e <__ieee754_sqrt+0x2e>
 800c182:	0ad3      	lsrs	r3, r2, #11
 800c184:	3815      	subs	r0, #21
 800c186:	0552      	lsls	r2, r2, #21
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d0fa      	beq.n	800c182 <__ieee754_sqrt+0x152>
 800c18c:	02dc      	lsls	r4, r3, #11
 800c18e:	d50a      	bpl.n	800c1a6 <__ieee754_sqrt+0x176>
 800c190:	f1c1 0420 	rsb	r4, r1, #32
 800c194:	fa22 f404 	lsr.w	r4, r2, r4
 800c198:	1e4d      	subs	r5, r1, #1
 800c19a:	408a      	lsls	r2, r1
 800c19c:	4323      	orrs	r3, r4
 800c19e:	1b41      	subs	r1, r0, r5
 800c1a0:	e772      	b.n	800c088 <__ieee754_sqrt+0x58>
 800c1a2:	4608      	mov	r0, r1
 800c1a4:	e7f0      	b.n	800c188 <__ieee754_sqrt+0x158>
 800c1a6:	005b      	lsls	r3, r3, #1
 800c1a8:	3101      	adds	r1, #1
 800c1aa:	e7ef      	b.n	800c18c <__ieee754_sqrt+0x15c>
 800c1ac:	46e0      	mov	r8, ip
 800c1ae:	e7aa      	b.n	800c106 <__ieee754_sqrt+0xd6>
 800c1b0:	f7f4 f820 	bl	80001f4 <__adddf3>
 800c1b4:	e9da 8900 	ldrd	r8, r9, [sl]
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4640      	mov	r0, r8
 800c1be:	4649      	mov	r1, r9
 800c1c0:	f7f4 fc40 	bl	8000a44 <__aeabi_dcmplt>
 800c1c4:	b120      	cbz	r0, 800c1d0 <__ieee754_sqrt+0x1a0>
 800c1c6:	1ca0      	adds	r0, r4, #2
 800c1c8:	bf08      	it	eq
 800c1ca:	3501      	addeq	r5, #1
 800c1cc:	3402      	adds	r4, #2
 800c1ce:	e7ca      	b.n	800c166 <__ieee754_sqrt+0x136>
 800c1d0:	3401      	adds	r4, #1
 800c1d2:	f024 0401 	bic.w	r4, r4, #1
 800c1d6:	e7c6      	b.n	800c166 <__ieee754_sqrt+0x136>
 800c1d8:	7ff00000 	.word	0x7ff00000
 800c1dc:	20000038 	.word	0x20000038
 800c1e0:	20000040 	.word	0x20000040
 800c1e4:	00000000 	.word	0x00000000

0800c1e8 <__ieee754_pow>:
 800c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	ed2d 8b06 	vpush	{d8-d10}
 800c1f0:	b089      	sub	sp, #36	; 0x24
 800c1f2:	ed8d 1b00 	vstr	d1, [sp]
 800c1f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c1fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c1fe:	ea58 0102 	orrs.w	r1, r8, r2
 800c202:	ec57 6b10 	vmov	r6, r7, d0
 800c206:	d115      	bne.n	800c234 <__ieee754_pow+0x4c>
 800c208:	19b3      	adds	r3, r6, r6
 800c20a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c20e:	4152      	adcs	r2, r2
 800c210:	4299      	cmp	r1, r3
 800c212:	4b89      	ldr	r3, [pc, #548]	; (800c438 <__ieee754_pow+0x250>)
 800c214:	4193      	sbcs	r3, r2
 800c216:	f080 84d1 	bcs.w	800cbbc <__ieee754_pow+0x9d4>
 800c21a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c21e:	4630      	mov	r0, r6
 800c220:	4639      	mov	r1, r7
 800c222:	f7f3 ffe7 	bl	80001f4 <__adddf3>
 800c226:	ec41 0b10 	vmov	d0, r0, r1
 800c22a:	b009      	add	sp, #36	; 0x24
 800c22c:	ecbd 8b06 	vpop	{d8-d10}
 800c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c234:	4b81      	ldr	r3, [pc, #516]	; (800c43c <__ieee754_pow+0x254>)
 800c236:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c23a:	429c      	cmp	r4, r3
 800c23c:	ee10 aa10 	vmov	sl, s0
 800c240:	463d      	mov	r5, r7
 800c242:	dc06      	bgt.n	800c252 <__ieee754_pow+0x6a>
 800c244:	d101      	bne.n	800c24a <__ieee754_pow+0x62>
 800c246:	2e00      	cmp	r6, #0
 800c248:	d1e7      	bne.n	800c21a <__ieee754_pow+0x32>
 800c24a:	4598      	cmp	r8, r3
 800c24c:	dc01      	bgt.n	800c252 <__ieee754_pow+0x6a>
 800c24e:	d10f      	bne.n	800c270 <__ieee754_pow+0x88>
 800c250:	b172      	cbz	r2, 800c270 <__ieee754_pow+0x88>
 800c252:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c256:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c25a:	ea55 050a 	orrs.w	r5, r5, sl
 800c25e:	d1dc      	bne.n	800c21a <__ieee754_pow+0x32>
 800c260:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c264:	18db      	adds	r3, r3, r3
 800c266:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c26a:	4152      	adcs	r2, r2
 800c26c:	429d      	cmp	r5, r3
 800c26e:	e7d0      	b.n	800c212 <__ieee754_pow+0x2a>
 800c270:	2d00      	cmp	r5, #0
 800c272:	da3b      	bge.n	800c2ec <__ieee754_pow+0x104>
 800c274:	4b72      	ldr	r3, [pc, #456]	; (800c440 <__ieee754_pow+0x258>)
 800c276:	4598      	cmp	r8, r3
 800c278:	dc51      	bgt.n	800c31e <__ieee754_pow+0x136>
 800c27a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c27e:	4598      	cmp	r8, r3
 800c280:	f340 84ab 	ble.w	800cbda <__ieee754_pow+0x9f2>
 800c284:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c288:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c28c:	2b14      	cmp	r3, #20
 800c28e:	dd0f      	ble.n	800c2b0 <__ieee754_pow+0xc8>
 800c290:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c294:	fa22 f103 	lsr.w	r1, r2, r3
 800c298:	fa01 f303 	lsl.w	r3, r1, r3
 800c29c:	4293      	cmp	r3, r2
 800c29e:	f040 849c 	bne.w	800cbda <__ieee754_pow+0x9f2>
 800c2a2:	f001 0101 	and.w	r1, r1, #1
 800c2a6:	f1c1 0302 	rsb	r3, r1, #2
 800c2aa:	9304      	str	r3, [sp, #16]
 800c2ac:	b182      	cbz	r2, 800c2d0 <__ieee754_pow+0xe8>
 800c2ae:	e05f      	b.n	800c370 <__ieee754_pow+0x188>
 800c2b0:	2a00      	cmp	r2, #0
 800c2b2:	d15b      	bne.n	800c36c <__ieee754_pow+0x184>
 800c2b4:	f1c3 0314 	rsb	r3, r3, #20
 800c2b8:	fa48 f103 	asr.w	r1, r8, r3
 800c2bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c2c0:	4543      	cmp	r3, r8
 800c2c2:	f040 8487 	bne.w	800cbd4 <__ieee754_pow+0x9ec>
 800c2c6:	f001 0101 	and.w	r1, r1, #1
 800c2ca:	f1c1 0302 	rsb	r3, r1, #2
 800c2ce:	9304      	str	r3, [sp, #16]
 800c2d0:	4b5c      	ldr	r3, [pc, #368]	; (800c444 <__ieee754_pow+0x25c>)
 800c2d2:	4598      	cmp	r8, r3
 800c2d4:	d132      	bne.n	800c33c <__ieee754_pow+0x154>
 800c2d6:	f1b9 0f00 	cmp.w	r9, #0
 800c2da:	f280 8477 	bge.w	800cbcc <__ieee754_pow+0x9e4>
 800c2de:	4959      	ldr	r1, [pc, #356]	; (800c444 <__ieee754_pow+0x25c>)
 800c2e0:	4632      	mov	r2, r6
 800c2e2:	463b      	mov	r3, r7
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	f7f4 fa65 	bl	80007b4 <__aeabi_ddiv>
 800c2ea:	e79c      	b.n	800c226 <__ieee754_pow+0x3e>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9304      	str	r3, [sp, #16]
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	d13d      	bne.n	800c370 <__ieee754_pow+0x188>
 800c2f4:	4b51      	ldr	r3, [pc, #324]	; (800c43c <__ieee754_pow+0x254>)
 800c2f6:	4598      	cmp	r8, r3
 800c2f8:	d1ea      	bne.n	800c2d0 <__ieee754_pow+0xe8>
 800c2fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c2fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c302:	ea53 030a 	orrs.w	r3, r3, sl
 800c306:	f000 8459 	beq.w	800cbbc <__ieee754_pow+0x9d4>
 800c30a:	4b4f      	ldr	r3, [pc, #316]	; (800c448 <__ieee754_pow+0x260>)
 800c30c:	429c      	cmp	r4, r3
 800c30e:	dd08      	ble.n	800c322 <__ieee754_pow+0x13a>
 800c310:	f1b9 0f00 	cmp.w	r9, #0
 800c314:	f2c0 8456 	blt.w	800cbc4 <__ieee754_pow+0x9dc>
 800c318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c31c:	e783      	b.n	800c226 <__ieee754_pow+0x3e>
 800c31e:	2302      	movs	r3, #2
 800c320:	e7e5      	b.n	800c2ee <__ieee754_pow+0x106>
 800c322:	f1b9 0f00 	cmp.w	r9, #0
 800c326:	f04f 0000 	mov.w	r0, #0
 800c32a:	f04f 0100 	mov.w	r1, #0
 800c32e:	f6bf af7a 	bge.w	800c226 <__ieee754_pow+0x3e>
 800c332:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c336:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c33a:	e774      	b.n	800c226 <__ieee754_pow+0x3e>
 800c33c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c340:	d106      	bne.n	800c350 <__ieee754_pow+0x168>
 800c342:	4632      	mov	r2, r6
 800c344:	463b      	mov	r3, r7
 800c346:	4630      	mov	r0, r6
 800c348:	4639      	mov	r1, r7
 800c34a:	f7f4 f909 	bl	8000560 <__aeabi_dmul>
 800c34e:	e76a      	b.n	800c226 <__ieee754_pow+0x3e>
 800c350:	4b3e      	ldr	r3, [pc, #248]	; (800c44c <__ieee754_pow+0x264>)
 800c352:	4599      	cmp	r9, r3
 800c354:	d10c      	bne.n	800c370 <__ieee754_pow+0x188>
 800c356:	2d00      	cmp	r5, #0
 800c358:	db0a      	blt.n	800c370 <__ieee754_pow+0x188>
 800c35a:	ec47 6b10 	vmov	d0, r6, r7
 800c35e:	b009      	add	sp, #36	; 0x24
 800c360:	ecbd 8b06 	vpop	{d8-d10}
 800c364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c368:	f7ff be62 	b.w	800c030 <__ieee754_sqrt>
 800c36c:	2300      	movs	r3, #0
 800c36e:	9304      	str	r3, [sp, #16]
 800c370:	ec47 6b10 	vmov	d0, r6, r7
 800c374:	f7ff fe48 	bl	800c008 <fabs>
 800c378:	ec51 0b10 	vmov	r0, r1, d0
 800c37c:	f1ba 0f00 	cmp.w	sl, #0
 800c380:	d129      	bne.n	800c3d6 <__ieee754_pow+0x1ee>
 800c382:	b124      	cbz	r4, 800c38e <__ieee754_pow+0x1a6>
 800c384:	4b2f      	ldr	r3, [pc, #188]	; (800c444 <__ieee754_pow+0x25c>)
 800c386:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d123      	bne.n	800c3d6 <__ieee754_pow+0x1ee>
 800c38e:	f1b9 0f00 	cmp.w	r9, #0
 800c392:	da05      	bge.n	800c3a0 <__ieee754_pow+0x1b8>
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	2000      	movs	r0, #0
 800c39a:	492a      	ldr	r1, [pc, #168]	; (800c444 <__ieee754_pow+0x25c>)
 800c39c:	f7f4 fa0a 	bl	80007b4 <__aeabi_ddiv>
 800c3a0:	2d00      	cmp	r5, #0
 800c3a2:	f6bf af40 	bge.w	800c226 <__ieee754_pow+0x3e>
 800c3a6:	9b04      	ldr	r3, [sp, #16]
 800c3a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c3ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c3b0:	431c      	orrs	r4, r3
 800c3b2:	d108      	bne.n	800c3c6 <__ieee754_pow+0x1de>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	f7f3 ff18 	bl	80001f0 <__aeabi_dsub>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	e78f      	b.n	800c2e6 <__ieee754_pow+0xfe>
 800c3c6:	9b04      	ldr	r3, [sp, #16]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	f47f af2c 	bne.w	800c226 <__ieee754_pow+0x3e>
 800c3ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	e727      	b.n	800c226 <__ieee754_pow+0x3e>
 800c3d6:	0feb      	lsrs	r3, r5, #31
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	9306      	str	r3, [sp, #24]
 800c3dc:	9a06      	ldr	r2, [sp, #24]
 800c3de:	9b04      	ldr	r3, [sp, #16]
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	d102      	bne.n	800c3ea <__ieee754_pow+0x202>
 800c3e4:	4632      	mov	r2, r6
 800c3e6:	463b      	mov	r3, r7
 800c3e8:	e7e6      	b.n	800c3b8 <__ieee754_pow+0x1d0>
 800c3ea:	4b19      	ldr	r3, [pc, #100]	; (800c450 <__ieee754_pow+0x268>)
 800c3ec:	4598      	cmp	r8, r3
 800c3ee:	f340 80fb 	ble.w	800c5e8 <__ieee754_pow+0x400>
 800c3f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c3f6:	4598      	cmp	r8, r3
 800c3f8:	4b13      	ldr	r3, [pc, #76]	; (800c448 <__ieee754_pow+0x260>)
 800c3fa:	dd0c      	ble.n	800c416 <__ieee754_pow+0x22e>
 800c3fc:	429c      	cmp	r4, r3
 800c3fe:	dc0f      	bgt.n	800c420 <__ieee754_pow+0x238>
 800c400:	f1b9 0f00 	cmp.w	r9, #0
 800c404:	da0f      	bge.n	800c426 <__ieee754_pow+0x23e>
 800c406:	2000      	movs	r0, #0
 800c408:	b009      	add	sp, #36	; 0x24
 800c40a:	ecbd 8b06 	vpop	{d8-d10}
 800c40e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c412:	f000 bcba 	b.w	800cd8a <__math_oflow>
 800c416:	429c      	cmp	r4, r3
 800c418:	dbf2      	blt.n	800c400 <__ieee754_pow+0x218>
 800c41a:	4b0a      	ldr	r3, [pc, #40]	; (800c444 <__ieee754_pow+0x25c>)
 800c41c:	429c      	cmp	r4, r3
 800c41e:	dd19      	ble.n	800c454 <__ieee754_pow+0x26c>
 800c420:	f1b9 0f00 	cmp.w	r9, #0
 800c424:	dcef      	bgt.n	800c406 <__ieee754_pow+0x21e>
 800c426:	2000      	movs	r0, #0
 800c428:	b009      	add	sp, #36	; 0x24
 800c42a:	ecbd 8b06 	vpop	{d8-d10}
 800c42e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c432:	f000 bca1 	b.w	800cd78 <__math_uflow>
 800c436:	bf00      	nop
 800c438:	fff00000 	.word	0xfff00000
 800c43c:	7ff00000 	.word	0x7ff00000
 800c440:	433fffff 	.word	0x433fffff
 800c444:	3ff00000 	.word	0x3ff00000
 800c448:	3fefffff 	.word	0x3fefffff
 800c44c:	3fe00000 	.word	0x3fe00000
 800c450:	41e00000 	.word	0x41e00000
 800c454:	4b60      	ldr	r3, [pc, #384]	; (800c5d8 <__ieee754_pow+0x3f0>)
 800c456:	2200      	movs	r2, #0
 800c458:	f7f3 feca 	bl	80001f0 <__aeabi_dsub>
 800c45c:	a354      	add	r3, pc, #336	; (adr r3, 800c5b0 <__ieee754_pow+0x3c8>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	4604      	mov	r4, r0
 800c464:	460d      	mov	r5, r1
 800c466:	f7f4 f87b 	bl	8000560 <__aeabi_dmul>
 800c46a:	a353      	add	r3, pc, #332	; (adr r3, 800c5b8 <__ieee754_pow+0x3d0>)
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	4606      	mov	r6, r0
 800c472:	460f      	mov	r7, r1
 800c474:	4620      	mov	r0, r4
 800c476:	4629      	mov	r1, r5
 800c478:	f7f4 f872 	bl	8000560 <__aeabi_dmul>
 800c47c:	4b57      	ldr	r3, [pc, #348]	; (800c5dc <__ieee754_pow+0x3f4>)
 800c47e:	4682      	mov	sl, r0
 800c480:	468b      	mov	fp, r1
 800c482:	2200      	movs	r2, #0
 800c484:	4620      	mov	r0, r4
 800c486:	4629      	mov	r1, r5
 800c488:	f7f4 f86a 	bl	8000560 <__aeabi_dmul>
 800c48c:	4602      	mov	r2, r0
 800c48e:	460b      	mov	r3, r1
 800c490:	a14b      	add	r1, pc, #300	; (adr r1, 800c5c0 <__ieee754_pow+0x3d8>)
 800c492:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c496:	f7f3 feab 	bl	80001f0 <__aeabi_dsub>
 800c49a:	4622      	mov	r2, r4
 800c49c:	462b      	mov	r3, r5
 800c49e:	f7f4 f85f 	bl	8000560 <__aeabi_dmul>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	494d      	ldr	r1, [pc, #308]	; (800c5e0 <__ieee754_pow+0x3f8>)
 800c4aa:	f7f3 fea1 	bl	80001f0 <__aeabi_dsub>
 800c4ae:	4622      	mov	r2, r4
 800c4b0:	4680      	mov	r8, r0
 800c4b2:	4689      	mov	r9, r1
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	f7f4 f851 	bl	8000560 <__aeabi_dmul>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4640      	mov	r0, r8
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	f7f4 f84b 	bl	8000560 <__aeabi_dmul>
 800c4ca:	a33f      	add	r3, pc, #252	; (adr r3, 800c5c8 <__ieee754_pow+0x3e0>)
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	f7f4 f846 	bl	8000560 <__aeabi_dmul>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4650      	mov	r0, sl
 800c4da:	4659      	mov	r1, fp
 800c4dc:	f7f3 fe88 	bl	80001f0 <__aeabi_dsub>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4680      	mov	r8, r0
 800c4e6:	4689      	mov	r9, r1
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	4639      	mov	r1, r7
 800c4ec:	f7f3 fe82 	bl	80001f4 <__adddf3>
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	4632      	mov	r2, r6
 800c4f4:	463b      	mov	r3, r7
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	460d      	mov	r5, r1
 800c4fa:	f7f3 fe79 	bl	80001f0 <__aeabi_dsub>
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	4640      	mov	r0, r8
 800c504:	4649      	mov	r1, r9
 800c506:	f7f3 fe73 	bl	80001f0 <__aeabi_dsub>
 800c50a:	9b04      	ldr	r3, [sp, #16]
 800c50c:	9a06      	ldr	r2, [sp, #24]
 800c50e:	3b01      	subs	r3, #1
 800c510:	4313      	orrs	r3, r2
 800c512:	4682      	mov	sl, r0
 800c514:	468b      	mov	fp, r1
 800c516:	f040 81e7 	bne.w	800c8e8 <__ieee754_pow+0x700>
 800c51a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c5d0 <__ieee754_pow+0x3e8>
 800c51e:	eeb0 8a47 	vmov.f32	s16, s14
 800c522:	eef0 8a67 	vmov.f32	s17, s15
 800c526:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c52a:	2600      	movs	r6, #0
 800c52c:	4632      	mov	r2, r6
 800c52e:	463b      	mov	r3, r7
 800c530:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c534:	f7f3 fe5c 	bl	80001f0 <__aeabi_dsub>
 800c538:	4622      	mov	r2, r4
 800c53a:	462b      	mov	r3, r5
 800c53c:	f7f4 f810 	bl	8000560 <__aeabi_dmul>
 800c540:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c544:	4680      	mov	r8, r0
 800c546:	4689      	mov	r9, r1
 800c548:	4650      	mov	r0, sl
 800c54a:	4659      	mov	r1, fp
 800c54c:	f7f4 f808 	bl	8000560 <__aeabi_dmul>
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	4640      	mov	r0, r8
 800c556:	4649      	mov	r1, r9
 800c558:	f7f3 fe4c 	bl	80001f4 <__adddf3>
 800c55c:	4632      	mov	r2, r6
 800c55e:	463b      	mov	r3, r7
 800c560:	4680      	mov	r8, r0
 800c562:	4689      	mov	r9, r1
 800c564:	4620      	mov	r0, r4
 800c566:	4629      	mov	r1, r5
 800c568:	f7f3 fffa 	bl	8000560 <__aeabi_dmul>
 800c56c:	460b      	mov	r3, r1
 800c56e:	4604      	mov	r4, r0
 800c570:	460d      	mov	r5, r1
 800c572:	4602      	mov	r2, r0
 800c574:	4649      	mov	r1, r9
 800c576:	4640      	mov	r0, r8
 800c578:	f7f3 fe3c 	bl	80001f4 <__adddf3>
 800c57c:	4b19      	ldr	r3, [pc, #100]	; (800c5e4 <__ieee754_pow+0x3fc>)
 800c57e:	4299      	cmp	r1, r3
 800c580:	ec45 4b19 	vmov	d9, r4, r5
 800c584:	4606      	mov	r6, r0
 800c586:	460f      	mov	r7, r1
 800c588:	468b      	mov	fp, r1
 800c58a:	f340 82f0 	ble.w	800cb6e <__ieee754_pow+0x986>
 800c58e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c592:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c596:	4303      	orrs	r3, r0
 800c598:	f000 81e4 	beq.w	800c964 <__ieee754_pow+0x77c>
 800c59c:	ec51 0b18 	vmov	r0, r1, d8
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f7f4 fa4e 	bl	8000a44 <__aeabi_dcmplt>
 800c5a8:	3800      	subs	r0, #0
 800c5aa:	bf18      	it	ne
 800c5ac:	2001      	movne	r0, #1
 800c5ae:	e72b      	b.n	800c408 <__ieee754_pow+0x220>
 800c5b0:	60000000 	.word	0x60000000
 800c5b4:	3ff71547 	.word	0x3ff71547
 800c5b8:	f85ddf44 	.word	0xf85ddf44
 800c5bc:	3e54ae0b 	.word	0x3e54ae0b
 800c5c0:	55555555 	.word	0x55555555
 800c5c4:	3fd55555 	.word	0x3fd55555
 800c5c8:	652b82fe 	.word	0x652b82fe
 800c5cc:	3ff71547 	.word	0x3ff71547
 800c5d0:	00000000 	.word	0x00000000
 800c5d4:	bff00000 	.word	0xbff00000
 800c5d8:	3ff00000 	.word	0x3ff00000
 800c5dc:	3fd00000 	.word	0x3fd00000
 800c5e0:	3fe00000 	.word	0x3fe00000
 800c5e4:	408fffff 	.word	0x408fffff
 800c5e8:	4bd5      	ldr	r3, [pc, #852]	; (800c940 <__ieee754_pow+0x758>)
 800c5ea:	402b      	ands	r3, r5
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	b92b      	cbnz	r3, 800c5fc <__ieee754_pow+0x414>
 800c5f0:	4bd4      	ldr	r3, [pc, #848]	; (800c944 <__ieee754_pow+0x75c>)
 800c5f2:	f7f3 ffb5 	bl	8000560 <__aeabi_dmul>
 800c5f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	1523      	asrs	r3, r4, #20
 800c5fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c602:	4413      	add	r3, r2
 800c604:	9305      	str	r3, [sp, #20]
 800c606:	4bd0      	ldr	r3, [pc, #832]	; (800c948 <__ieee754_pow+0x760>)
 800c608:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c60c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c610:	429c      	cmp	r4, r3
 800c612:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c616:	dd08      	ble.n	800c62a <__ieee754_pow+0x442>
 800c618:	4bcc      	ldr	r3, [pc, #816]	; (800c94c <__ieee754_pow+0x764>)
 800c61a:	429c      	cmp	r4, r3
 800c61c:	f340 8162 	ble.w	800c8e4 <__ieee754_pow+0x6fc>
 800c620:	9b05      	ldr	r3, [sp, #20]
 800c622:	3301      	adds	r3, #1
 800c624:	9305      	str	r3, [sp, #20]
 800c626:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c62a:	2400      	movs	r4, #0
 800c62c:	00e3      	lsls	r3, r4, #3
 800c62e:	9307      	str	r3, [sp, #28]
 800c630:	4bc7      	ldr	r3, [pc, #796]	; (800c950 <__ieee754_pow+0x768>)
 800c632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c636:	ed93 7b00 	vldr	d7, [r3]
 800c63a:	4629      	mov	r1, r5
 800c63c:	ec53 2b17 	vmov	r2, r3, d7
 800c640:	eeb0 9a47 	vmov.f32	s18, s14
 800c644:	eef0 9a67 	vmov.f32	s19, s15
 800c648:	4682      	mov	sl, r0
 800c64a:	f7f3 fdd1 	bl	80001f0 <__aeabi_dsub>
 800c64e:	4652      	mov	r2, sl
 800c650:	4606      	mov	r6, r0
 800c652:	460f      	mov	r7, r1
 800c654:	462b      	mov	r3, r5
 800c656:	ec51 0b19 	vmov	r0, r1, d9
 800c65a:	f7f3 fdcb 	bl	80001f4 <__adddf3>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	2000      	movs	r0, #0
 800c664:	49bb      	ldr	r1, [pc, #748]	; (800c954 <__ieee754_pow+0x76c>)
 800c666:	f7f4 f8a5 	bl	80007b4 <__aeabi_ddiv>
 800c66a:	ec41 0b1a 	vmov	d10, r0, r1
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	4630      	mov	r0, r6
 800c674:	4639      	mov	r1, r7
 800c676:	f7f3 ff73 	bl	8000560 <__aeabi_dmul>
 800c67a:	2300      	movs	r3, #0
 800c67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c680:	9302      	str	r3, [sp, #8]
 800c682:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c686:	46ab      	mov	fp, r5
 800c688:	106d      	asrs	r5, r5, #1
 800c68a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c68e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c692:	ec41 0b18 	vmov	d8, r0, r1
 800c696:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c69a:	2200      	movs	r2, #0
 800c69c:	4640      	mov	r0, r8
 800c69e:	4649      	mov	r1, r9
 800c6a0:	4614      	mov	r4, r2
 800c6a2:	461d      	mov	r5, r3
 800c6a4:	f7f3 ff5c 	bl	8000560 <__aeabi_dmul>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	4639      	mov	r1, r7
 800c6b0:	f7f3 fd9e 	bl	80001f0 <__aeabi_dsub>
 800c6b4:	ec53 2b19 	vmov	r2, r3, d9
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	460f      	mov	r7, r1
 800c6bc:	4620      	mov	r0, r4
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f7f3 fd96 	bl	80001f0 <__aeabi_dsub>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4650      	mov	r0, sl
 800c6ca:	4659      	mov	r1, fp
 800c6cc:	f7f3 fd90 	bl	80001f0 <__aeabi_dsub>
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	464b      	mov	r3, r9
 800c6d4:	f7f3 ff44 	bl	8000560 <__aeabi_dmul>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4630      	mov	r0, r6
 800c6de:	4639      	mov	r1, r7
 800c6e0:	f7f3 fd86 	bl	80001f0 <__aeabi_dsub>
 800c6e4:	ec53 2b1a 	vmov	r2, r3, d10
 800c6e8:	f7f3 ff3a 	bl	8000560 <__aeabi_dmul>
 800c6ec:	ec53 2b18 	vmov	r2, r3, d8
 800c6f0:	ec41 0b19 	vmov	d9, r0, r1
 800c6f4:	ec51 0b18 	vmov	r0, r1, d8
 800c6f8:	f7f3 ff32 	bl	8000560 <__aeabi_dmul>
 800c6fc:	a37c      	add	r3, pc, #496	; (adr r3, 800c8f0 <__ieee754_pow+0x708>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	4604      	mov	r4, r0
 800c704:	460d      	mov	r5, r1
 800c706:	f7f3 ff2b 	bl	8000560 <__aeabi_dmul>
 800c70a:	a37b      	add	r3, pc, #492	; (adr r3, 800c8f8 <__ieee754_pow+0x710>)
 800c70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c710:	f7f3 fd70 	bl	80001f4 <__adddf3>
 800c714:	4622      	mov	r2, r4
 800c716:	462b      	mov	r3, r5
 800c718:	f7f3 ff22 	bl	8000560 <__aeabi_dmul>
 800c71c:	a378      	add	r3, pc, #480	; (adr r3, 800c900 <__ieee754_pow+0x718>)
 800c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c722:	f7f3 fd67 	bl	80001f4 <__adddf3>
 800c726:	4622      	mov	r2, r4
 800c728:	462b      	mov	r3, r5
 800c72a:	f7f3 ff19 	bl	8000560 <__aeabi_dmul>
 800c72e:	a376      	add	r3, pc, #472	; (adr r3, 800c908 <__ieee754_pow+0x720>)
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	f7f3 fd5e 	bl	80001f4 <__adddf3>
 800c738:	4622      	mov	r2, r4
 800c73a:	462b      	mov	r3, r5
 800c73c:	f7f3 ff10 	bl	8000560 <__aeabi_dmul>
 800c740:	a373      	add	r3, pc, #460	; (adr r3, 800c910 <__ieee754_pow+0x728>)
 800c742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c746:	f7f3 fd55 	bl	80001f4 <__adddf3>
 800c74a:	4622      	mov	r2, r4
 800c74c:	462b      	mov	r3, r5
 800c74e:	f7f3 ff07 	bl	8000560 <__aeabi_dmul>
 800c752:	a371      	add	r3, pc, #452	; (adr r3, 800c918 <__ieee754_pow+0x730>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	f7f3 fd4c 	bl	80001f4 <__adddf3>
 800c75c:	4622      	mov	r2, r4
 800c75e:	4606      	mov	r6, r0
 800c760:	460f      	mov	r7, r1
 800c762:	462b      	mov	r3, r5
 800c764:	4620      	mov	r0, r4
 800c766:	4629      	mov	r1, r5
 800c768:	f7f3 fefa 	bl	8000560 <__aeabi_dmul>
 800c76c:	4602      	mov	r2, r0
 800c76e:	460b      	mov	r3, r1
 800c770:	4630      	mov	r0, r6
 800c772:	4639      	mov	r1, r7
 800c774:	f7f3 fef4 	bl	8000560 <__aeabi_dmul>
 800c778:	4642      	mov	r2, r8
 800c77a:	4604      	mov	r4, r0
 800c77c:	460d      	mov	r5, r1
 800c77e:	464b      	mov	r3, r9
 800c780:	ec51 0b18 	vmov	r0, r1, d8
 800c784:	f7f3 fd36 	bl	80001f4 <__adddf3>
 800c788:	ec53 2b19 	vmov	r2, r3, d9
 800c78c:	f7f3 fee8 	bl	8000560 <__aeabi_dmul>
 800c790:	4622      	mov	r2, r4
 800c792:	462b      	mov	r3, r5
 800c794:	f7f3 fd2e 	bl	80001f4 <__adddf3>
 800c798:	4642      	mov	r2, r8
 800c79a:	4682      	mov	sl, r0
 800c79c:	468b      	mov	fp, r1
 800c79e:	464b      	mov	r3, r9
 800c7a0:	4640      	mov	r0, r8
 800c7a2:	4649      	mov	r1, r9
 800c7a4:	f7f3 fedc 	bl	8000560 <__aeabi_dmul>
 800c7a8:	4b6b      	ldr	r3, [pc, #428]	; (800c958 <__ieee754_pow+0x770>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	4606      	mov	r6, r0
 800c7ae:	460f      	mov	r7, r1
 800c7b0:	f7f3 fd20 	bl	80001f4 <__adddf3>
 800c7b4:	4652      	mov	r2, sl
 800c7b6:	465b      	mov	r3, fp
 800c7b8:	f7f3 fd1c 	bl	80001f4 <__adddf3>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	4604      	mov	r4, r0
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	f7f3 fec9 	bl	8000560 <__aeabi_dmul>
 800c7ce:	4b62      	ldr	r3, [pc, #392]	; (800c958 <__ieee754_pow+0x770>)
 800c7d0:	4680      	mov	r8, r0
 800c7d2:	4689      	mov	r9, r1
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	4629      	mov	r1, r5
 800c7da:	f7f3 fd09 	bl	80001f0 <__aeabi_dsub>
 800c7de:	4632      	mov	r2, r6
 800c7e0:	463b      	mov	r3, r7
 800c7e2:	f7f3 fd05 	bl	80001f0 <__aeabi_dsub>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	4650      	mov	r0, sl
 800c7ec:	4659      	mov	r1, fp
 800c7ee:	f7f3 fcff 	bl	80001f0 <__aeabi_dsub>
 800c7f2:	ec53 2b18 	vmov	r2, r3, d8
 800c7f6:	f7f3 feb3 	bl	8000560 <__aeabi_dmul>
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	460f      	mov	r7, r1
 800c800:	462b      	mov	r3, r5
 800c802:	ec51 0b19 	vmov	r0, r1, d9
 800c806:	f7f3 feab 	bl	8000560 <__aeabi_dmul>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4630      	mov	r0, r6
 800c810:	4639      	mov	r1, r7
 800c812:	f7f3 fcef 	bl	80001f4 <__adddf3>
 800c816:	4606      	mov	r6, r0
 800c818:	460f      	mov	r7, r1
 800c81a:	4602      	mov	r2, r0
 800c81c:	460b      	mov	r3, r1
 800c81e:	4640      	mov	r0, r8
 800c820:	4649      	mov	r1, r9
 800c822:	f7f3 fce7 	bl	80001f4 <__adddf3>
 800c826:	a33e      	add	r3, pc, #248	; (adr r3, 800c920 <__ieee754_pow+0x738>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	2000      	movs	r0, #0
 800c82e:	4604      	mov	r4, r0
 800c830:	460d      	mov	r5, r1
 800c832:	f7f3 fe95 	bl	8000560 <__aeabi_dmul>
 800c836:	4642      	mov	r2, r8
 800c838:	ec41 0b18 	vmov	d8, r0, r1
 800c83c:	464b      	mov	r3, r9
 800c83e:	4620      	mov	r0, r4
 800c840:	4629      	mov	r1, r5
 800c842:	f7f3 fcd5 	bl	80001f0 <__aeabi_dsub>
 800c846:	4602      	mov	r2, r0
 800c848:	460b      	mov	r3, r1
 800c84a:	4630      	mov	r0, r6
 800c84c:	4639      	mov	r1, r7
 800c84e:	f7f3 fccf 	bl	80001f0 <__aeabi_dsub>
 800c852:	a335      	add	r3, pc, #212	; (adr r3, 800c928 <__ieee754_pow+0x740>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f7f3 fe82 	bl	8000560 <__aeabi_dmul>
 800c85c:	a334      	add	r3, pc, #208	; (adr r3, 800c930 <__ieee754_pow+0x748>)
 800c85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c862:	4606      	mov	r6, r0
 800c864:	460f      	mov	r7, r1
 800c866:	4620      	mov	r0, r4
 800c868:	4629      	mov	r1, r5
 800c86a:	f7f3 fe79 	bl	8000560 <__aeabi_dmul>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4630      	mov	r0, r6
 800c874:	4639      	mov	r1, r7
 800c876:	f7f3 fcbd 	bl	80001f4 <__adddf3>
 800c87a:	9a07      	ldr	r2, [sp, #28]
 800c87c:	4b37      	ldr	r3, [pc, #220]	; (800c95c <__ieee754_pow+0x774>)
 800c87e:	4413      	add	r3, r2
 800c880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c884:	f7f3 fcb6 	bl	80001f4 <__adddf3>
 800c888:	4682      	mov	sl, r0
 800c88a:	9805      	ldr	r0, [sp, #20]
 800c88c:	468b      	mov	fp, r1
 800c88e:	f7f3 fdfd 	bl	800048c <__aeabi_i2d>
 800c892:	9a07      	ldr	r2, [sp, #28]
 800c894:	4b32      	ldr	r3, [pc, #200]	; (800c960 <__ieee754_pow+0x778>)
 800c896:	4413      	add	r3, r2
 800c898:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c89c:	4606      	mov	r6, r0
 800c89e:	460f      	mov	r7, r1
 800c8a0:	4652      	mov	r2, sl
 800c8a2:	465b      	mov	r3, fp
 800c8a4:	ec51 0b18 	vmov	r0, r1, d8
 800c8a8:	f7f3 fca4 	bl	80001f4 <__adddf3>
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	464b      	mov	r3, r9
 800c8b0:	f7f3 fca0 	bl	80001f4 <__adddf3>
 800c8b4:	4632      	mov	r2, r6
 800c8b6:	463b      	mov	r3, r7
 800c8b8:	f7f3 fc9c 	bl	80001f4 <__adddf3>
 800c8bc:	2000      	movs	r0, #0
 800c8be:	4632      	mov	r2, r6
 800c8c0:	463b      	mov	r3, r7
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	460d      	mov	r5, r1
 800c8c6:	f7f3 fc93 	bl	80001f0 <__aeabi_dsub>
 800c8ca:	4642      	mov	r2, r8
 800c8cc:	464b      	mov	r3, r9
 800c8ce:	f7f3 fc8f 	bl	80001f0 <__aeabi_dsub>
 800c8d2:	ec53 2b18 	vmov	r2, r3, d8
 800c8d6:	f7f3 fc8b 	bl	80001f0 <__aeabi_dsub>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	4650      	mov	r0, sl
 800c8e0:	4659      	mov	r1, fp
 800c8e2:	e610      	b.n	800c506 <__ieee754_pow+0x31e>
 800c8e4:	2401      	movs	r4, #1
 800c8e6:	e6a1      	b.n	800c62c <__ieee754_pow+0x444>
 800c8e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c938 <__ieee754_pow+0x750>
 800c8ec:	e617      	b.n	800c51e <__ieee754_pow+0x336>
 800c8ee:	bf00      	nop
 800c8f0:	4a454eef 	.word	0x4a454eef
 800c8f4:	3fca7e28 	.word	0x3fca7e28
 800c8f8:	93c9db65 	.word	0x93c9db65
 800c8fc:	3fcd864a 	.word	0x3fcd864a
 800c900:	a91d4101 	.word	0xa91d4101
 800c904:	3fd17460 	.word	0x3fd17460
 800c908:	518f264d 	.word	0x518f264d
 800c90c:	3fd55555 	.word	0x3fd55555
 800c910:	db6fabff 	.word	0xdb6fabff
 800c914:	3fdb6db6 	.word	0x3fdb6db6
 800c918:	33333303 	.word	0x33333303
 800c91c:	3fe33333 	.word	0x3fe33333
 800c920:	e0000000 	.word	0xe0000000
 800c924:	3feec709 	.word	0x3feec709
 800c928:	dc3a03fd 	.word	0xdc3a03fd
 800c92c:	3feec709 	.word	0x3feec709
 800c930:	145b01f5 	.word	0x145b01f5
 800c934:	be3e2fe0 	.word	0xbe3e2fe0
 800c938:	00000000 	.word	0x00000000
 800c93c:	3ff00000 	.word	0x3ff00000
 800c940:	7ff00000 	.word	0x7ff00000
 800c944:	43400000 	.word	0x43400000
 800c948:	0003988e 	.word	0x0003988e
 800c94c:	000bb679 	.word	0x000bb679
 800c950:	0800d4d0 	.word	0x0800d4d0
 800c954:	3ff00000 	.word	0x3ff00000
 800c958:	40080000 	.word	0x40080000
 800c95c:	0800d4f0 	.word	0x0800d4f0
 800c960:	0800d4e0 	.word	0x0800d4e0
 800c964:	a3b3      	add	r3, pc, #716	; (adr r3, 800cc34 <__ieee754_pow+0xa4c>)
 800c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96a:	4640      	mov	r0, r8
 800c96c:	4649      	mov	r1, r9
 800c96e:	f7f3 fc41 	bl	80001f4 <__adddf3>
 800c972:	4622      	mov	r2, r4
 800c974:	ec41 0b1a 	vmov	d10, r0, r1
 800c978:	462b      	mov	r3, r5
 800c97a:	4630      	mov	r0, r6
 800c97c:	4639      	mov	r1, r7
 800c97e:	f7f3 fc37 	bl	80001f0 <__aeabi_dsub>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	ec51 0b1a 	vmov	r0, r1, d10
 800c98a:	f7f4 f879 	bl	8000a80 <__aeabi_dcmpgt>
 800c98e:	2800      	cmp	r0, #0
 800c990:	f47f ae04 	bne.w	800c59c <__ieee754_pow+0x3b4>
 800c994:	4aa2      	ldr	r2, [pc, #648]	; (800cc20 <__ieee754_pow+0xa38>)
 800c996:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c99a:	4293      	cmp	r3, r2
 800c99c:	f340 8107 	ble.w	800cbae <__ieee754_pow+0x9c6>
 800c9a0:	151b      	asrs	r3, r3, #20
 800c9a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c9a6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c9aa:	fa4a fa03 	asr.w	sl, sl, r3
 800c9ae:	44da      	add	sl, fp
 800c9b0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c9b4:	489b      	ldr	r0, [pc, #620]	; (800cc24 <__ieee754_pow+0xa3c>)
 800c9b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c9ba:	4108      	asrs	r0, r1
 800c9bc:	ea00 030a 	and.w	r3, r0, sl
 800c9c0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c9c4:	f1c1 0114 	rsb	r1, r1, #20
 800c9c8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c9cc:	fa4a fa01 	asr.w	sl, sl, r1
 800c9d0:	f1bb 0f00 	cmp.w	fp, #0
 800c9d4:	f04f 0200 	mov.w	r2, #0
 800c9d8:	4620      	mov	r0, r4
 800c9da:	4629      	mov	r1, r5
 800c9dc:	bfb8      	it	lt
 800c9de:	f1ca 0a00 	rsblt	sl, sl, #0
 800c9e2:	f7f3 fc05 	bl	80001f0 <__aeabi_dsub>
 800c9e6:	ec41 0b19 	vmov	d9, r0, r1
 800c9ea:	4642      	mov	r2, r8
 800c9ec:	464b      	mov	r3, r9
 800c9ee:	ec51 0b19 	vmov	r0, r1, d9
 800c9f2:	f7f3 fbff 	bl	80001f4 <__adddf3>
 800c9f6:	a37a      	add	r3, pc, #488	; (adr r3, 800cbe0 <__ieee754_pow+0x9f8>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460d      	mov	r5, r1
 800ca02:	f7f3 fdad 	bl	8000560 <__aeabi_dmul>
 800ca06:	ec53 2b19 	vmov	r2, r3, d9
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	460f      	mov	r7, r1
 800ca0e:	4620      	mov	r0, r4
 800ca10:	4629      	mov	r1, r5
 800ca12:	f7f3 fbed 	bl	80001f0 <__aeabi_dsub>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	f7f3 fbe7 	bl	80001f0 <__aeabi_dsub>
 800ca22:	a371      	add	r3, pc, #452	; (adr r3, 800cbe8 <__ieee754_pow+0xa00>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	f7f3 fd9a 	bl	8000560 <__aeabi_dmul>
 800ca2c:	a370      	add	r3, pc, #448	; (adr r3, 800cbf0 <__ieee754_pow+0xa08>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	4680      	mov	r8, r0
 800ca34:	4689      	mov	r9, r1
 800ca36:	4620      	mov	r0, r4
 800ca38:	4629      	mov	r1, r5
 800ca3a:	f7f3 fd91 	bl	8000560 <__aeabi_dmul>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	4640      	mov	r0, r8
 800ca44:	4649      	mov	r1, r9
 800ca46:	f7f3 fbd5 	bl	80001f4 <__adddf3>
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	460d      	mov	r5, r1
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4630      	mov	r0, r6
 800ca54:	4639      	mov	r1, r7
 800ca56:	f7f3 fbcd 	bl	80001f4 <__adddf3>
 800ca5a:	4632      	mov	r2, r6
 800ca5c:	463b      	mov	r3, r7
 800ca5e:	4680      	mov	r8, r0
 800ca60:	4689      	mov	r9, r1
 800ca62:	f7f3 fbc5 	bl	80001f0 <__aeabi_dsub>
 800ca66:	4602      	mov	r2, r0
 800ca68:	460b      	mov	r3, r1
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	f7f3 fbbf 	bl	80001f0 <__aeabi_dsub>
 800ca72:	4642      	mov	r2, r8
 800ca74:	4606      	mov	r6, r0
 800ca76:	460f      	mov	r7, r1
 800ca78:	464b      	mov	r3, r9
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	4649      	mov	r1, r9
 800ca7e:	f7f3 fd6f 	bl	8000560 <__aeabi_dmul>
 800ca82:	a35d      	add	r3, pc, #372	; (adr r3, 800cbf8 <__ieee754_pow+0xa10>)
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	4604      	mov	r4, r0
 800ca8a:	460d      	mov	r5, r1
 800ca8c:	f7f3 fd68 	bl	8000560 <__aeabi_dmul>
 800ca90:	a35b      	add	r3, pc, #364	; (adr r3, 800cc00 <__ieee754_pow+0xa18>)
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	f7f3 fbab 	bl	80001f0 <__aeabi_dsub>
 800ca9a:	4622      	mov	r2, r4
 800ca9c:	462b      	mov	r3, r5
 800ca9e:	f7f3 fd5f 	bl	8000560 <__aeabi_dmul>
 800caa2:	a359      	add	r3, pc, #356	; (adr r3, 800cc08 <__ieee754_pow+0xa20>)
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	f7f3 fba4 	bl	80001f4 <__adddf3>
 800caac:	4622      	mov	r2, r4
 800caae:	462b      	mov	r3, r5
 800cab0:	f7f3 fd56 	bl	8000560 <__aeabi_dmul>
 800cab4:	a356      	add	r3, pc, #344	; (adr r3, 800cc10 <__ieee754_pow+0xa28>)
 800cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caba:	f7f3 fb99 	bl	80001f0 <__aeabi_dsub>
 800cabe:	4622      	mov	r2, r4
 800cac0:	462b      	mov	r3, r5
 800cac2:	f7f3 fd4d 	bl	8000560 <__aeabi_dmul>
 800cac6:	a354      	add	r3, pc, #336	; (adr r3, 800cc18 <__ieee754_pow+0xa30>)
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	f7f3 fb92 	bl	80001f4 <__adddf3>
 800cad0:	4622      	mov	r2, r4
 800cad2:	462b      	mov	r3, r5
 800cad4:	f7f3 fd44 	bl	8000560 <__aeabi_dmul>
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	4640      	mov	r0, r8
 800cade:	4649      	mov	r1, r9
 800cae0:	f7f3 fb86 	bl	80001f0 <__aeabi_dsub>
 800cae4:	4604      	mov	r4, r0
 800cae6:	460d      	mov	r5, r1
 800cae8:	4602      	mov	r2, r0
 800caea:	460b      	mov	r3, r1
 800caec:	4640      	mov	r0, r8
 800caee:	4649      	mov	r1, r9
 800caf0:	f7f3 fd36 	bl	8000560 <__aeabi_dmul>
 800caf4:	2200      	movs	r2, #0
 800caf6:	ec41 0b19 	vmov	d9, r0, r1
 800cafa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cafe:	4620      	mov	r0, r4
 800cb00:	4629      	mov	r1, r5
 800cb02:	f7f3 fb75 	bl	80001f0 <__aeabi_dsub>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	ec51 0b19 	vmov	r0, r1, d9
 800cb0e:	f7f3 fe51 	bl	80007b4 <__aeabi_ddiv>
 800cb12:	4632      	mov	r2, r6
 800cb14:	4604      	mov	r4, r0
 800cb16:	460d      	mov	r5, r1
 800cb18:	463b      	mov	r3, r7
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	4649      	mov	r1, r9
 800cb1e:	f7f3 fd1f 	bl	8000560 <__aeabi_dmul>
 800cb22:	4632      	mov	r2, r6
 800cb24:	463b      	mov	r3, r7
 800cb26:	f7f3 fb65 	bl	80001f4 <__adddf3>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	4620      	mov	r0, r4
 800cb30:	4629      	mov	r1, r5
 800cb32:	f7f3 fb5d 	bl	80001f0 <__aeabi_dsub>
 800cb36:	4642      	mov	r2, r8
 800cb38:	464b      	mov	r3, r9
 800cb3a:	f7f3 fb59 	bl	80001f0 <__aeabi_dsub>
 800cb3e:	460b      	mov	r3, r1
 800cb40:	4602      	mov	r2, r0
 800cb42:	4939      	ldr	r1, [pc, #228]	; (800cc28 <__ieee754_pow+0xa40>)
 800cb44:	2000      	movs	r0, #0
 800cb46:	f7f3 fb53 	bl	80001f0 <__aeabi_dsub>
 800cb4a:	ec41 0b10 	vmov	d0, r0, r1
 800cb4e:	ee10 3a90 	vmov	r3, s1
 800cb52:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cb56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb5a:	da2b      	bge.n	800cbb4 <__ieee754_pow+0x9cc>
 800cb5c:	4650      	mov	r0, sl
 800cb5e:	f000 f86f 	bl	800cc40 <scalbn>
 800cb62:	ec51 0b10 	vmov	r0, r1, d0
 800cb66:	ec53 2b18 	vmov	r2, r3, d8
 800cb6a:	f7ff bbee 	b.w	800c34a <__ieee754_pow+0x162>
 800cb6e:	4b2f      	ldr	r3, [pc, #188]	; (800cc2c <__ieee754_pow+0xa44>)
 800cb70:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cb74:	429e      	cmp	r6, r3
 800cb76:	f77f af0d 	ble.w	800c994 <__ieee754_pow+0x7ac>
 800cb7a:	4b2d      	ldr	r3, [pc, #180]	; (800cc30 <__ieee754_pow+0xa48>)
 800cb7c:	440b      	add	r3, r1
 800cb7e:	4303      	orrs	r3, r0
 800cb80:	d009      	beq.n	800cb96 <__ieee754_pow+0x9ae>
 800cb82:	ec51 0b18 	vmov	r0, r1, d8
 800cb86:	2200      	movs	r2, #0
 800cb88:	2300      	movs	r3, #0
 800cb8a:	f7f3 ff5b 	bl	8000a44 <__aeabi_dcmplt>
 800cb8e:	3800      	subs	r0, #0
 800cb90:	bf18      	it	ne
 800cb92:	2001      	movne	r0, #1
 800cb94:	e448      	b.n	800c428 <__ieee754_pow+0x240>
 800cb96:	4622      	mov	r2, r4
 800cb98:	462b      	mov	r3, r5
 800cb9a:	f7f3 fb29 	bl	80001f0 <__aeabi_dsub>
 800cb9e:	4642      	mov	r2, r8
 800cba0:	464b      	mov	r3, r9
 800cba2:	f7f3 ff63 	bl	8000a6c <__aeabi_dcmpge>
 800cba6:	2800      	cmp	r0, #0
 800cba8:	f43f aef4 	beq.w	800c994 <__ieee754_pow+0x7ac>
 800cbac:	e7e9      	b.n	800cb82 <__ieee754_pow+0x99a>
 800cbae:	f04f 0a00 	mov.w	sl, #0
 800cbb2:	e71a      	b.n	800c9ea <__ieee754_pow+0x802>
 800cbb4:	ec51 0b10 	vmov	r0, r1, d0
 800cbb8:	4619      	mov	r1, r3
 800cbba:	e7d4      	b.n	800cb66 <__ieee754_pow+0x97e>
 800cbbc:	491a      	ldr	r1, [pc, #104]	; (800cc28 <__ieee754_pow+0xa40>)
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	f7ff bb31 	b.w	800c226 <__ieee754_pow+0x3e>
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	f7ff bb2d 	b.w	800c226 <__ieee754_pow+0x3e>
 800cbcc:	4630      	mov	r0, r6
 800cbce:	4639      	mov	r1, r7
 800cbd0:	f7ff bb29 	b.w	800c226 <__ieee754_pow+0x3e>
 800cbd4:	9204      	str	r2, [sp, #16]
 800cbd6:	f7ff bb7b 	b.w	800c2d0 <__ieee754_pow+0xe8>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f7ff bb65 	b.w	800c2aa <__ieee754_pow+0xc2>
 800cbe0:	00000000 	.word	0x00000000
 800cbe4:	3fe62e43 	.word	0x3fe62e43
 800cbe8:	fefa39ef 	.word	0xfefa39ef
 800cbec:	3fe62e42 	.word	0x3fe62e42
 800cbf0:	0ca86c39 	.word	0x0ca86c39
 800cbf4:	be205c61 	.word	0xbe205c61
 800cbf8:	72bea4d0 	.word	0x72bea4d0
 800cbfc:	3e663769 	.word	0x3e663769
 800cc00:	c5d26bf1 	.word	0xc5d26bf1
 800cc04:	3ebbbd41 	.word	0x3ebbbd41
 800cc08:	af25de2c 	.word	0xaf25de2c
 800cc0c:	3f11566a 	.word	0x3f11566a
 800cc10:	16bebd93 	.word	0x16bebd93
 800cc14:	3f66c16c 	.word	0x3f66c16c
 800cc18:	5555553e 	.word	0x5555553e
 800cc1c:	3fc55555 	.word	0x3fc55555
 800cc20:	3fe00000 	.word	0x3fe00000
 800cc24:	fff00000 	.word	0xfff00000
 800cc28:	3ff00000 	.word	0x3ff00000
 800cc2c:	4090cbff 	.word	0x4090cbff
 800cc30:	3f6f3400 	.word	0x3f6f3400
 800cc34:	652b82fe 	.word	0x652b82fe
 800cc38:	3c971547 	.word	0x3c971547
 800cc3c:	00000000 	.word	0x00000000

0800cc40 <scalbn>:
 800cc40:	b570      	push	{r4, r5, r6, lr}
 800cc42:	ec55 4b10 	vmov	r4, r5, d0
 800cc46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cc4a:	4606      	mov	r6, r0
 800cc4c:	462b      	mov	r3, r5
 800cc4e:	b999      	cbnz	r1, 800cc78 <scalbn+0x38>
 800cc50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cc54:	4323      	orrs	r3, r4
 800cc56:	d03f      	beq.n	800ccd8 <scalbn+0x98>
 800cc58:	4b35      	ldr	r3, [pc, #212]	; (800cd30 <scalbn+0xf0>)
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	ee10 0a10 	vmov	r0, s0
 800cc60:	2200      	movs	r2, #0
 800cc62:	f7f3 fc7d 	bl	8000560 <__aeabi_dmul>
 800cc66:	4b33      	ldr	r3, [pc, #204]	; (800cd34 <scalbn+0xf4>)
 800cc68:	429e      	cmp	r6, r3
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	da10      	bge.n	800cc92 <scalbn+0x52>
 800cc70:	a327      	add	r3, pc, #156	; (adr r3, 800cd10 <scalbn+0xd0>)
 800cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc76:	e01f      	b.n	800ccb8 <scalbn+0x78>
 800cc78:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cc7c:	4291      	cmp	r1, r2
 800cc7e:	d10c      	bne.n	800cc9a <scalbn+0x5a>
 800cc80:	ee10 2a10 	vmov	r2, s0
 800cc84:	4620      	mov	r0, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f3 fab4 	bl	80001f4 <__adddf3>
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	460d      	mov	r5, r1
 800cc90:	e022      	b.n	800ccd8 <scalbn+0x98>
 800cc92:	460b      	mov	r3, r1
 800cc94:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cc98:	3936      	subs	r1, #54	; 0x36
 800cc9a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cc9e:	4296      	cmp	r6, r2
 800cca0:	dd0d      	ble.n	800ccbe <scalbn+0x7e>
 800cca2:	2d00      	cmp	r5, #0
 800cca4:	a11c      	add	r1, pc, #112	; (adr r1, 800cd18 <scalbn+0xd8>)
 800cca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccaa:	da02      	bge.n	800ccb2 <scalbn+0x72>
 800ccac:	a11c      	add	r1, pc, #112	; (adr r1, 800cd20 <scalbn+0xe0>)
 800ccae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccb2:	a319      	add	r3, pc, #100	; (adr r3, 800cd18 <scalbn+0xd8>)
 800ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb8:	f7f3 fc52 	bl	8000560 <__aeabi_dmul>
 800ccbc:	e7e6      	b.n	800cc8c <scalbn+0x4c>
 800ccbe:	1872      	adds	r2, r6, r1
 800ccc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ccc4:	428a      	cmp	r2, r1
 800ccc6:	dcec      	bgt.n	800cca2 <scalbn+0x62>
 800ccc8:	2a00      	cmp	r2, #0
 800ccca:	dd08      	ble.n	800ccde <scalbn+0x9e>
 800cccc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ccd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ccd8:	ec45 4b10 	vmov	d0, r4, r5
 800ccdc:	bd70      	pop	{r4, r5, r6, pc}
 800ccde:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cce2:	da08      	bge.n	800ccf6 <scalbn+0xb6>
 800cce4:	2d00      	cmp	r5, #0
 800cce6:	a10a      	add	r1, pc, #40	; (adr r1, 800cd10 <scalbn+0xd0>)
 800cce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccec:	dac0      	bge.n	800cc70 <scalbn+0x30>
 800ccee:	a10e      	add	r1, pc, #56	; (adr r1, 800cd28 <scalbn+0xe8>)
 800ccf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccf4:	e7bc      	b.n	800cc70 <scalbn+0x30>
 800ccf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccfa:	3236      	adds	r2, #54	; 0x36
 800ccfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cd04:	4620      	mov	r0, r4
 800cd06:	4b0c      	ldr	r3, [pc, #48]	; (800cd38 <scalbn+0xf8>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	e7d5      	b.n	800ccb8 <scalbn+0x78>
 800cd0c:	f3af 8000 	nop.w
 800cd10:	c2f8f359 	.word	0xc2f8f359
 800cd14:	01a56e1f 	.word	0x01a56e1f
 800cd18:	8800759c 	.word	0x8800759c
 800cd1c:	7e37e43c 	.word	0x7e37e43c
 800cd20:	8800759c 	.word	0x8800759c
 800cd24:	fe37e43c 	.word	0xfe37e43c
 800cd28:	c2f8f359 	.word	0xc2f8f359
 800cd2c:	81a56e1f 	.word	0x81a56e1f
 800cd30:	43500000 	.word	0x43500000
 800cd34:	ffff3cb0 	.word	0xffff3cb0
 800cd38:	3c900000 	.word	0x3c900000

0800cd3c <with_errno>:
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	4604      	mov	r4, r0
 800cd40:	460d      	mov	r5, r1
 800cd42:	4616      	mov	r6, r2
 800cd44:	f000 f86a 	bl	800ce1c <__errno>
 800cd48:	4629      	mov	r1, r5
 800cd4a:	6006      	str	r6, [r0, #0]
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}

0800cd50 <xflow>:
 800cd50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd52:	4614      	mov	r4, r2
 800cd54:	461d      	mov	r5, r3
 800cd56:	b108      	cbz	r0, 800cd5c <xflow+0xc>
 800cd58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cd5c:	e9cd 2300 	strd	r2, r3, [sp]
 800cd60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd64:	4620      	mov	r0, r4
 800cd66:	4629      	mov	r1, r5
 800cd68:	f7f3 fbfa 	bl	8000560 <__aeabi_dmul>
 800cd6c:	2222      	movs	r2, #34	; 0x22
 800cd6e:	b003      	add	sp, #12
 800cd70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd74:	f7ff bfe2 	b.w	800cd3c <with_errno>

0800cd78 <__math_uflow>:
 800cd78:	b508      	push	{r3, lr}
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cd80:	f7ff ffe6 	bl	800cd50 <xflow>
 800cd84:	ec41 0b10 	vmov	d0, r0, r1
 800cd88:	bd08      	pop	{r3, pc}

0800cd8a <__math_oflow>:
 800cd8a:	b508      	push	{r3, lr}
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cd92:	f7ff ffdd 	bl	800cd50 <xflow>
 800cd96:	ec41 0b10 	vmov	d0, r0, r1
 800cd9a:	bd08      	pop	{r3, pc}

0800cd9c <realloc>:
 800cd9c:	4b02      	ldr	r3, [pc, #8]	; (800cda8 <realloc+0xc>)
 800cd9e:	460a      	mov	r2, r1
 800cda0:	4601      	mov	r1, r0
 800cda2:	6818      	ldr	r0, [r3, #0]
 800cda4:	f000 b802 	b.w	800cdac <_realloc_r>
 800cda8:	20000094 	.word	0x20000094

0800cdac <_realloc_r>:
 800cdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb0:	4680      	mov	r8, r0
 800cdb2:	4614      	mov	r4, r2
 800cdb4:	460e      	mov	r6, r1
 800cdb6:	b921      	cbnz	r1, 800cdc2 <_realloc_r+0x16>
 800cdb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	f000 b8d3 	b.w	800cf68 <_malloc_r>
 800cdc2:	b92a      	cbnz	r2, 800cdd0 <_realloc_r+0x24>
 800cdc4:	f000 f864 	bl	800ce90 <_free_r>
 800cdc8:	4625      	mov	r5, r4
 800cdca:	4628      	mov	r0, r5
 800cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd0:	f000 f956 	bl	800d080 <_malloc_usable_size_r>
 800cdd4:	4284      	cmp	r4, r0
 800cdd6:	4607      	mov	r7, r0
 800cdd8:	d802      	bhi.n	800cde0 <_realloc_r+0x34>
 800cdda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdde:	d812      	bhi.n	800ce06 <_realloc_r+0x5a>
 800cde0:	4621      	mov	r1, r4
 800cde2:	4640      	mov	r0, r8
 800cde4:	f000 f8c0 	bl	800cf68 <_malloc_r>
 800cde8:	4605      	mov	r5, r0
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d0ed      	beq.n	800cdca <_realloc_r+0x1e>
 800cdee:	42bc      	cmp	r4, r7
 800cdf0:	4622      	mov	r2, r4
 800cdf2:	4631      	mov	r1, r6
 800cdf4:	bf28      	it	cs
 800cdf6:	463a      	movcs	r2, r7
 800cdf8:	f000 f83c 	bl	800ce74 <memcpy>
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4640      	mov	r0, r8
 800ce00:	f000 f846 	bl	800ce90 <_free_r>
 800ce04:	e7e1      	b.n	800cdca <_realloc_r+0x1e>
 800ce06:	4635      	mov	r5, r6
 800ce08:	e7df      	b.n	800cdca <_realloc_r+0x1e>

0800ce0a <memset>:
 800ce0a:	4402      	add	r2, r0
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d100      	bne.n	800ce14 <memset+0xa>
 800ce12:	4770      	bx	lr
 800ce14:	f803 1b01 	strb.w	r1, [r3], #1
 800ce18:	e7f9      	b.n	800ce0e <memset+0x4>
	...

0800ce1c <__errno>:
 800ce1c:	4b01      	ldr	r3, [pc, #4]	; (800ce24 <__errno+0x8>)
 800ce1e:	6818      	ldr	r0, [r3, #0]
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	20000094 	.word	0x20000094

0800ce28 <__libc_init_array>:
 800ce28:	b570      	push	{r4, r5, r6, lr}
 800ce2a:	4d0d      	ldr	r5, [pc, #52]	; (800ce60 <__libc_init_array+0x38>)
 800ce2c:	4c0d      	ldr	r4, [pc, #52]	; (800ce64 <__libc_init_array+0x3c>)
 800ce2e:	1b64      	subs	r4, r4, r5
 800ce30:	10a4      	asrs	r4, r4, #2
 800ce32:	2600      	movs	r6, #0
 800ce34:	42a6      	cmp	r6, r4
 800ce36:	d109      	bne.n	800ce4c <__libc_init_array+0x24>
 800ce38:	4d0b      	ldr	r5, [pc, #44]	; (800ce68 <__libc_init_array+0x40>)
 800ce3a:	4c0c      	ldr	r4, [pc, #48]	; (800ce6c <__libc_init_array+0x44>)
 800ce3c:	f000 f938 	bl	800d0b0 <_init>
 800ce40:	1b64      	subs	r4, r4, r5
 800ce42:	10a4      	asrs	r4, r4, #2
 800ce44:	2600      	movs	r6, #0
 800ce46:	42a6      	cmp	r6, r4
 800ce48:	d105      	bne.n	800ce56 <__libc_init_array+0x2e>
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce50:	4798      	blx	r3
 800ce52:	3601      	adds	r6, #1
 800ce54:	e7ee      	b.n	800ce34 <__libc_init_array+0xc>
 800ce56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce5a:	4798      	blx	r3
 800ce5c:	3601      	adds	r6, #1
 800ce5e:	e7f2      	b.n	800ce46 <__libc_init_array+0x1e>
 800ce60:	0800d508 	.word	0x0800d508
 800ce64:	0800d508 	.word	0x0800d508
 800ce68:	0800d508 	.word	0x0800d508
 800ce6c:	0800d510 	.word	0x0800d510

0800ce70 <__retarget_lock_acquire_recursive>:
 800ce70:	4770      	bx	lr

0800ce72 <__retarget_lock_release_recursive>:
 800ce72:	4770      	bx	lr

0800ce74 <memcpy>:
 800ce74:	440a      	add	r2, r1
 800ce76:	4291      	cmp	r1, r2
 800ce78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce7c:	d100      	bne.n	800ce80 <memcpy+0xc>
 800ce7e:	4770      	bx	lr
 800ce80:	b510      	push	{r4, lr}
 800ce82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce8a:	4291      	cmp	r1, r2
 800ce8c:	d1f9      	bne.n	800ce82 <memcpy+0xe>
 800ce8e:	bd10      	pop	{r4, pc}

0800ce90 <_free_r>:
 800ce90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce92:	2900      	cmp	r1, #0
 800ce94:	d044      	beq.n	800cf20 <_free_r+0x90>
 800ce96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce9a:	9001      	str	r0, [sp, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f1a1 0404 	sub.w	r4, r1, #4
 800cea2:	bfb8      	it	lt
 800cea4:	18e4      	addlt	r4, r4, r3
 800cea6:	f000 f8df 	bl	800d068 <__malloc_lock>
 800ceaa:	4a1e      	ldr	r2, [pc, #120]	; (800cf24 <_free_r+0x94>)
 800ceac:	9801      	ldr	r0, [sp, #4]
 800ceae:	6813      	ldr	r3, [r2, #0]
 800ceb0:	b933      	cbnz	r3, 800cec0 <_free_r+0x30>
 800ceb2:	6063      	str	r3, [r4, #4]
 800ceb4:	6014      	str	r4, [r2, #0]
 800ceb6:	b003      	add	sp, #12
 800ceb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cebc:	f000 b8da 	b.w	800d074 <__malloc_unlock>
 800cec0:	42a3      	cmp	r3, r4
 800cec2:	d908      	bls.n	800ced6 <_free_r+0x46>
 800cec4:	6825      	ldr	r5, [r4, #0]
 800cec6:	1961      	adds	r1, r4, r5
 800cec8:	428b      	cmp	r3, r1
 800ceca:	bf01      	itttt	eq
 800cecc:	6819      	ldreq	r1, [r3, #0]
 800cece:	685b      	ldreq	r3, [r3, #4]
 800ced0:	1949      	addeq	r1, r1, r5
 800ced2:	6021      	streq	r1, [r4, #0]
 800ced4:	e7ed      	b.n	800ceb2 <_free_r+0x22>
 800ced6:	461a      	mov	r2, r3
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	b10b      	cbz	r3, 800cee0 <_free_r+0x50>
 800cedc:	42a3      	cmp	r3, r4
 800cede:	d9fa      	bls.n	800ced6 <_free_r+0x46>
 800cee0:	6811      	ldr	r1, [r2, #0]
 800cee2:	1855      	adds	r5, r2, r1
 800cee4:	42a5      	cmp	r5, r4
 800cee6:	d10b      	bne.n	800cf00 <_free_r+0x70>
 800cee8:	6824      	ldr	r4, [r4, #0]
 800ceea:	4421      	add	r1, r4
 800ceec:	1854      	adds	r4, r2, r1
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	6011      	str	r1, [r2, #0]
 800cef2:	d1e0      	bne.n	800ceb6 <_free_r+0x26>
 800cef4:	681c      	ldr	r4, [r3, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	6053      	str	r3, [r2, #4]
 800cefa:	440c      	add	r4, r1
 800cefc:	6014      	str	r4, [r2, #0]
 800cefe:	e7da      	b.n	800ceb6 <_free_r+0x26>
 800cf00:	d902      	bls.n	800cf08 <_free_r+0x78>
 800cf02:	230c      	movs	r3, #12
 800cf04:	6003      	str	r3, [r0, #0]
 800cf06:	e7d6      	b.n	800ceb6 <_free_r+0x26>
 800cf08:	6825      	ldr	r5, [r4, #0]
 800cf0a:	1961      	adds	r1, r4, r5
 800cf0c:	428b      	cmp	r3, r1
 800cf0e:	bf04      	itt	eq
 800cf10:	6819      	ldreq	r1, [r3, #0]
 800cf12:	685b      	ldreq	r3, [r3, #4]
 800cf14:	6063      	str	r3, [r4, #4]
 800cf16:	bf04      	itt	eq
 800cf18:	1949      	addeq	r1, r1, r5
 800cf1a:	6021      	streq	r1, [r4, #0]
 800cf1c:	6054      	str	r4, [r2, #4]
 800cf1e:	e7ca      	b.n	800ceb6 <_free_r+0x26>
 800cf20:	b003      	add	sp, #12
 800cf22:	bd30      	pop	{r4, r5, pc}
 800cf24:	20001110 	.word	0x20001110

0800cf28 <sbrk_aligned>:
 800cf28:	b570      	push	{r4, r5, r6, lr}
 800cf2a:	4e0e      	ldr	r6, [pc, #56]	; (800cf64 <sbrk_aligned+0x3c>)
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	6831      	ldr	r1, [r6, #0]
 800cf30:	4605      	mov	r5, r0
 800cf32:	b911      	cbnz	r1, 800cf3a <sbrk_aligned+0x12>
 800cf34:	f000 f8ac 	bl	800d090 <_sbrk_r>
 800cf38:	6030      	str	r0, [r6, #0]
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	f000 f8a7 	bl	800d090 <_sbrk_r>
 800cf42:	1c43      	adds	r3, r0, #1
 800cf44:	d00a      	beq.n	800cf5c <sbrk_aligned+0x34>
 800cf46:	1cc4      	adds	r4, r0, #3
 800cf48:	f024 0403 	bic.w	r4, r4, #3
 800cf4c:	42a0      	cmp	r0, r4
 800cf4e:	d007      	beq.n	800cf60 <sbrk_aligned+0x38>
 800cf50:	1a21      	subs	r1, r4, r0
 800cf52:	4628      	mov	r0, r5
 800cf54:	f000 f89c 	bl	800d090 <_sbrk_r>
 800cf58:	3001      	adds	r0, #1
 800cf5a:	d101      	bne.n	800cf60 <sbrk_aligned+0x38>
 800cf5c:	f04f 34ff 	mov.w	r4, #4294967295
 800cf60:	4620      	mov	r0, r4
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	20001114 	.word	0x20001114

0800cf68 <_malloc_r>:
 800cf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf6c:	1ccd      	adds	r5, r1, #3
 800cf6e:	f025 0503 	bic.w	r5, r5, #3
 800cf72:	3508      	adds	r5, #8
 800cf74:	2d0c      	cmp	r5, #12
 800cf76:	bf38      	it	cc
 800cf78:	250c      	movcc	r5, #12
 800cf7a:	2d00      	cmp	r5, #0
 800cf7c:	4607      	mov	r7, r0
 800cf7e:	db01      	blt.n	800cf84 <_malloc_r+0x1c>
 800cf80:	42a9      	cmp	r1, r5
 800cf82:	d905      	bls.n	800cf90 <_malloc_r+0x28>
 800cf84:	230c      	movs	r3, #12
 800cf86:	603b      	str	r3, [r7, #0]
 800cf88:	2600      	movs	r6, #0
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d064 <_malloc_r+0xfc>
 800cf94:	f000 f868 	bl	800d068 <__malloc_lock>
 800cf98:	f8d8 3000 	ldr.w	r3, [r8]
 800cf9c:	461c      	mov	r4, r3
 800cf9e:	bb5c      	cbnz	r4, 800cff8 <_malloc_r+0x90>
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	f7ff ffc0 	bl	800cf28 <sbrk_aligned>
 800cfa8:	1c43      	adds	r3, r0, #1
 800cfaa:	4604      	mov	r4, r0
 800cfac:	d155      	bne.n	800d05a <_malloc_r+0xf2>
 800cfae:	f8d8 4000 	ldr.w	r4, [r8]
 800cfb2:	4626      	mov	r6, r4
 800cfb4:	2e00      	cmp	r6, #0
 800cfb6:	d145      	bne.n	800d044 <_malloc_r+0xdc>
 800cfb8:	2c00      	cmp	r4, #0
 800cfba:	d048      	beq.n	800d04e <_malloc_r+0xe6>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	eb04 0903 	add.w	r9, r4, r3
 800cfc6:	f000 f863 	bl	800d090 <_sbrk_r>
 800cfca:	4581      	cmp	r9, r0
 800cfcc:	d13f      	bne.n	800d04e <_malloc_r+0xe6>
 800cfce:	6821      	ldr	r1, [r4, #0]
 800cfd0:	1a6d      	subs	r5, r5, r1
 800cfd2:	4629      	mov	r1, r5
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	f7ff ffa7 	bl	800cf28 <sbrk_aligned>
 800cfda:	3001      	adds	r0, #1
 800cfdc:	d037      	beq.n	800d04e <_malloc_r+0xe6>
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	442b      	add	r3, r5
 800cfe2:	6023      	str	r3, [r4, #0]
 800cfe4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d038      	beq.n	800d05e <_malloc_r+0xf6>
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	42a2      	cmp	r2, r4
 800cff0:	d12b      	bne.n	800d04a <_malloc_r+0xe2>
 800cff2:	2200      	movs	r2, #0
 800cff4:	605a      	str	r2, [r3, #4]
 800cff6:	e00f      	b.n	800d018 <_malloc_r+0xb0>
 800cff8:	6822      	ldr	r2, [r4, #0]
 800cffa:	1b52      	subs	r2, r2, r5
 800cffc:	d41f      	bmi.n	800d03e <_malloc_r+0xd6>
 800cffe:	2a0b      	cmp	r2, #11
 800d000:	d917      	bls.n	800d032 <_malloc_r+0xca>
 800d002:	1961      	adds	r1, r4, r5
 800d004:	42a3      	cmp	r3, r4
 800d006:	6025      	str	r5, [r4, #0]
 800d008:	bf18      	it	ne
 800d00a:	6059      	strne	r1, [r3, #4]
 800d00c:	6863      	ldr	r3, [r4, #4]
 800d00e:	bf08      	it	eq
 800d010:	f8c8 1000 	streq.w	r1, [r8]
 800d014:	5162      	str	r2, [r4, r5]
 800d016:	604b      	str	r3, [r1, #4]
 800d018:	4638      	mov	r0, r7
 800d01a:	f104 060b 	add.w	r6, r4, #11
 800d01e:	f000 f829 	bl	800d074 <__malloc_unlock>
 800d022:	f026 0607 	bic.w	r6, r6, #7
 800d026:	1d23      	adds	r3, r4, #4
 800d028:	1af2      	subs	r2, r6, r3
 800d02a:	d0ae      	beq.n	800cf8a <_malloc_r+0x22>
 800d02c:	1b9b      	subs	r3, r3, r6
 800d02e:	50a3      	str	r3, [r4, r2]
 800d030:	e7ab      	b.n	800cf8a <_malloc_r+0x22>
 800d032:	42a3      	cmp	r3, r4
 800d034:	6862      	ldr	r2, [r4, #4]
 800d036:	d1dd      	bne.n	800cff4 <_malloc_r+0x8c>
 800d038:	f8c8 2000 	str.w	r2, [r8]
 800d03c:	e7ec      	b.n	800d018 <_malloc_r+0xb0>
 800d03e:	4623      	mov	r3, r4
 800d040:	6864      	ldr	r4, [r4, #4]
 800d042:	e7ac      	b.n	800cf9e <_malloc_r+0x36>
 800d044:	4634      	mov	r4, r6
 800d046:	6876      	ldr	r6, [r6, #4]
 800d048:	e7b4      	b.n	800cfb4 <_malloc_r+0x4c>
 800d04a:	4613      	mov	r3, r2
 800d04c:	e7cc      	b.n	800cfe8 <_malloc_r+0x80>
 800d04e:	230c      	movs	r3, #12
 800d050:	603b      	str	r3, [r7, #0]
 800d052:	4638      	mov	r0, r7
 800d054:	f000 f80e 	bl	800d074 <__malloc_unlock>
 800d058:	e797      	b.n	800cf8a <_malloc_r+0x22>
 800d05a:	6025      	str	r5, [r4, #0]
 800d05c:	e7dc      	b.n	800d018 <_malloc_r+0xb0>
 800d05e:	605b      	str	r3, [r3, #4]
 800d060:	deff      	udf	#255	; 0xff
 800d062:	bf00      	nop
 800d064:	20001110 	.word	0x20001110

0800d068 <__malloc_lock>:
 800d068:	4801      	ldr	r0, [pc, #4]	; (800d070 <__malloc_lock+0x8>)
 800d06a:	f7ff bf01 	b.w	800ce70 <__retarget_lock_acquire_recursive>
 800d06e:	bf00      	nop
 800d070:	2000110c 	.word	0x2000110c

0800d074 <__malloc_unlock>:
 800d074:	4801      	ldr	r0, [pc, #4]	; (800d07c <__malloc_unlock+0x8>)
 800d076:	f7ff befc 	b.w	800ce72 <__retarget_lock_release_recursive>
 800d07a:	bf00      	nop
 800d07c:	2000110c 	.word	0x2000110c

0800d080 <_malloc_usable_size_r>:
 800d080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d084:	1f18      	subs	r0, r3, #4
 800d086:	2b00      	cmp	r3, #0
 800d088:	bfbc      	itt	lt
 800d08a:	580b      	ldrlt	r3, [r1, r0]
 800d08c:	18c0      	addlt	r0, r0, r3
 800d08e:	4770      	bx	lr

0800d090 <_sbrk_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4d06      	ldr	r5, [pc, #24]	; (800d0ac <_sbrk_r+0x1c>)
 800d094:	2300      	movs	r3, #0
 800d096:	4604      	mov	r4, r0
 800d098:	4608      	mov	r0, r1
 800d09a:	602b      	str	r3, [r5, #0]
 800d09c:	f7fa f80c 	bl	80070b8 <_sbrk>
 800d0a0:	1c43      	adds	r3, r0, #1
 800d0a2:	d102      	bne.n	800d0aa <_sbrk_r+0x1a>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	b103      	cbz	r3, 800d0aa <_sbrk_r+0x1a>
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	20001108 	.word	0x20001108

0800d0b0 <_init>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	bf00      	nop
 800d0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b6:	bc08      	pop	{r3}
 800d0b8:	469e      	mov	lr, r3
 800d0ba:	4770      	bx	lr

0800d0bc <_fini>:
 800d0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0be:	bf00      	nop
 800d0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c2:	bc08      	pop	{r3}
 800d0c4:	469e      	mov	lr, r3
 800d0c6:	4770      	bx	lr
